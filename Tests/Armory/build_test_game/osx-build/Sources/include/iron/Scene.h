// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_Scene
#define INCLUDED_iron_Scene

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(iron,Scene)
HX_DECLARE_CLASS2(iron,data,Armature)
HX_DECLARE_CLASS2(iron,data,CameraData)
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,LampData)
HX_DECLARE_CLASS2(iron,data,MaterialData)
HX_DECLARE_CLASS2(iron,data,MeshBatch)
HX_DECLARE_CLASS2(iron,data,MeshData)
HX_DECLARE_CLASS2(iron,data,SceneStream)
HX_DECLARE_CLASS2(iron,data,WorldData)
HX_DECLARE_CLASS2(iron,object,Animation)
HX_DECLARE_CLASS2(iron,object,CameraObject)
HX_DECLARE_CLASS2(iron,object,DecalObject)
HX_DECLARE_CLASS2(iron,object,LampObject)
HX_DECLARE_CLASS2(iron,object,MeshObject)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(iron,object,SpeakerObject)
HX_DECLARE_CLASS2(iron,object,Transform)
HX_DECLARE_CLASS2(kha,graphics4,Graphics)

namespace iron{


class HXCPP_CLASS_ATTRIBUTES Scene_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Scene_obj OBJ_;
		Scene_obj();

	public:
		enum { _hx_ClassId = 0x2f4c0e24 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.Scene")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.Scene"); }
		static hx::ObjectPtr< Scene_obj > __new();
		static hx::ObjectPtr< Scene_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Scene_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Scene","\x2c","\x49","\xff","\x0b"); }

		static void __boot();
		static  ::iron::Scene active;
		static  ::iron::object::Object global;
		static int uidCounter;
		static void create( ::Dynamic format, ::Dynamic done);
		static ::Dynamic create_dyn();

		static bool framePassed;
		static void setActive(::String sceneName, ::Dynamic done);
		static ::Dynamic setActive_dyn();

		static void generateTransform( ::Dynamic object, ::iron::object::Transform transform);
		static ::Dynamic generateTransform_dyn();

		static void createTraits(::Array< ::Dynamic> traits, ::iron::object::Object object);
		static ::Dynamic createTraits_dyn();

		static  ::Dynamic parseArg(::String str);
		static ::Dynamic parseArg_dyn();

		static void createConstraints(::Array< ::Dynamic> constraints, ::iron::object::Object object);
		static ::Dynamic createConstraints_dyn();

		static  ::Dynamic createTraitClassInstance(::String traitName,::cpp::VirtualArray args);
		static ::Dynamic createTraitClassInstance_dyn();

		int uid;
		 ::Dynamic raw;
		 ::iron::object::Object root;
		 ::iron::object::CameraObject camera;
		 ::iron::data::WorldData world;
		 ::iron::data::MeshBatch meshBatch;
		 ::iron::data::SceneStream sceneStream;
		::Array< ::Dynamic> meshes;
		::Array< ::Dynamic> lamps;
		::Array< ::Dynamic> cameras;
		::Array< ::Dynamic> speakers;
		::Array< ::Dynamic> decals;
		::Array< ::Dynamic> empties;
		::Array< ::Dynamic> animations;
		::Array< ::Dynamic> armatures;
		 ::haxe::ds::StringMap groups;
		 ::haxe::ds::StringMap embedded;
		bool ready;
		::Array< ::Dynamic> traitInits;
		::Array< ::Dynamic> traitRemoves;
		void remove();
		::Dynamic remove_dyn();

		void updateFrame();
		::Dynamic updateFrame_dyn();

		void renderFrame(::Dynamic g);
		::Dynamic renderFrame_dyn();

		 ::iron::object::Object addObject( ::iron::object::Object parent);
		::Dynamic addObject_dyn();

		 ::iron::object::Object getChild(::String name);
		::Dynamic getChild_dyn();

		 ::Dynamic getTrait(hx::Class c);
		::Dynamic getTrait_dyn();

		 ::iron::object::MeshObject getMesh(::String name);
		::Dynamic getMesh_dyn();

		 ::iron::object::LampObject getLamp(::String name);
		::Dynamic getLamp_dyn();

		 ::iron::object::CameraObject getCamera(::String name);
		::Dynamic getCamera_dyn();

		 ::iron::object::SpeakerObject getSpeaker(::String name);
		::Dynamic getSpeaker_dyn();

		 ::iron::object::Object getEmpty(::String name);
		::Dynamic getEmpty_dyn();

		 ::iron::object::MeshObject addMeshObject( ::iron::data::MeshData data,::Array< ::Dynamic> materials, ::iron::object::Object parent);
		::Dynamic addMeshObject_dyn();

		 ::iron::object::LampObject addLampObject( ::iron::data::LampData data, ::iron::object::Object parent);
		::Dynamic addLampObject_dyn();

		 ::iron::object::CameraObject addCameraObject( ::iron::data::CameraData data, ::iron::object::Object parent);
		::Dynamic addCameraObject_dyn();

		 ::iron::object::SpeakerObject addSpeakerObject( ::Dynamic data, ::iron::object::Object parent);
		::Dynamic addSpeakerObject_dyn();

		 ::iron::object::DecalObject addDecalObject( ::iron::data::MaterialData material, ::iron::object::Object parent);
		::Dynamic addDecalObject_dyn();

		void addScene(::String sceneName, ::iron::object::Object parent, ::Dynamic done);
		::Dynamic addScene_dyn();

		int getObjectsCount(::Array< ::Dynamic> objects,hx::Null< bool >  discardNoSpawn);
		::Dynamic getObjectsCount_dyn();

		void spawnObject(::String name, ::iron::object::Object parent, ::Dynamic done,hx::Null< bool >  spawnChildren);
		::Dynamic spawnObject_dyn();

		void parseObject(::String sceneName,::String objectName, ::iron::object::Object parent, ::Dynamic done);
		::Dynamic parseObject_dyn();

		 ::Dynamic getObj( ::Dynamic format,::String name);
		::Dynamic getObj_dyn();

		 ::Dynamic traverseObjs(::Array< ::Dynamic> children,::String name);
		::Dynamic traverseObjs_dyn();

		void createObject( ::Dynamic o, ::Dynamic format, ::iron::object::Object parent, ::Dynamic parentObject, ::Dynamic done);
		::Dynamic createObject_dyn();

		::Array< ::String > getGroupObjectRefs(::String group_ref);
		::Dynamic getGroupObjectRefs_dyn();

		void returnMeshObject(::String object_file,::String data_ref,::String sceneName, ::iron::data::Armature armature,::Array< ::Dynamic> materials, ::iron::object::Object parent, ::Dynamic o, ::Dynamic done);
		::Dynamic returnMeshObject_dyn();

		void returnObject( ::iron::object::Object object, ::Dynamic o, ::Dynamic done);
		::Dynamic returnObject_dyn();

		void returnObjectLoaded( ::iron::object::Object object, ::Dynamic o,::Array< ::Dynamic> oactions, ::Dynamic done);
		::Dynamic returnObjectLoaded_dyn();

		void loadEmbeddedData(::Array< ::String > datas, ::Dynamic done);
		::Dynamic loadEmbeddedData_dyn();

		void notifyOnInit( ::Dynamic f);
		::Dynamic notifyOnInit_dyn();

		void removeInit( ::Dynamic f);
		::Dynamic removeInit_dyn();

		void notifyOnRemove( ::Dynamic f);
		::Dynamic notifyOnRemove_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace iron

#endif /* INCLUDED_iron_Scene */ 
