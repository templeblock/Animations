// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_system_Pen
#define INCLUDED_iron_system_Pen

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif
HX_DECLARE_CLASS2(iron,_hx_system,Pen)
HX_DECLARE_CLASS2(iron,_hx_system,VirtualInput)

namespace iron{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES Pen_obj : public  ::iron::_hx_system::VirtualInput_obj
{
	public:
		typedef  ::iron::_hx_system::VirtualInput_obj super;
		typedef Pen_obj OBJ_;
		Pen_obj();

	public:
		enum { _hx_ClassId = 0x591cc7a2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.system.Pen")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.system.Pen"); }
		static hx::ObjectPtr< Pen_obj > __new();
		static hx::ObjectPtr< Pen_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Pen_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Pen","\xb9","\x0c","\x3d","\x00"); }

		static void __boot();
		static ::Array< ::String > buttons;
		::Array< bool > buttonsDown;
		::Array< bool > buttonsStarted;
		::Array< bool > buttonsReleased;
		Float x;
		Float y;
		bool moved;
		Float movementX;
		Float movementY;
		Float pressure;
		Float lastX;
		Float lastY;
		Float lastPressure;
		void endFrame();
		::Dynamic endFrame_dyn();

		void reset();
		::Dynamic reset_dyn();

		int buttonIndex(::String button);
		::Dynamic buttonIndex_dyn();

		bool down(::String button);
		::Dynamic down_dyn();

		bool started(::String button);
		::Dynamic started_dyn();

		bool released(::String button);
		::Dynamic released_dyn();

		void downListener(Float x,Float y,Float pressure);
		::Dynamic downListener_dyn();

		void upListener(Float x,Float y,Float pressure);
		::Dynamic upListener_dyn();

		void moveListener(int x,int y,Float pressure);
		::Dynamic moveListener_dyn();

};

} // end namespace iron
} // end namespace system

#endif /* INCLUDED_iron_system_Pen */ 
