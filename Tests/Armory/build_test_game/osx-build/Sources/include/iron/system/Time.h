// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_system_Time
#define INCLUDED_iron_system_Time

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,_hx_system,Time)

namespace iron{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES Time_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Time_obj OBJ_;
		Time_obj();

	public:
		enum { _hx_ClassId = 0x7961417c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.system.Time")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.system.Time"); }

		hx::ObjectPtr< Time_obj > __new() {
			hx::ObjectPtr< Time_obj > __this = new Time_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Time_obj > __alloc(hx::Ctx *_hx_ctx) {
			Time_obj *__this = (Time_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Time_obj), false, "iron.system.Time"));
			*(void **)__this = Time_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Time_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Time","\x2d","\xf8","\xd5","\x37"); }

		static void __boot();
		static Float get_step();
		static ::Dynamic get_step_dyn();

		static Float scale;
		static Float get_delta();
		static ::Dynamic get_delta_dyn();

		static Float last;
		static Float realDelta;
		static Float time();
		static ::Dynamic time_dyn();

		static Float realTime();
		static ::Dynamic realTime_dyn();

		static void update();
		static ::Dynamic update_dyn();

};

} // end namespace iron
} // end namespace system

#endif /* INCLUDED_iron_system_Time */ 
