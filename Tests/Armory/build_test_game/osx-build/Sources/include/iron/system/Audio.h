// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_system_Audio
#define INCLUDED_iron_system_Audio

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_0ab6b2c28352020a_7_new)
HX_DECLARE_CLASS2(iron,_hx_system,Audio)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS1(kha,Sound)
HX_DECLARE_CLASS2(kha,audio1,AudioChannel)

namespace iron{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES Audio_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Audio_obj OBJ_;
		Audio_obj();

	public:
		enum { _hx_ClassId = 0x7ff7afc3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.system.Audio")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.system.Audio"); }

		hx::ObjectPtr< Audio_obj > __new() {
			hx::ObjectPtr< Audio_obj > __this = new Audio_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Audio_obj > __alloc(hx::Ctx *_hx_ctx) {
			Audio_obj *__this = (Audio_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Audio_obj), false, "iron.system.Audio"));
			*(void **)__this = Audio_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_0ab6b2c28352020a_7_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Audio_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Audio","\xb6","\xe8","\xad","\xba"); }

		static ::Dynamic play( ::kha::Sound sound,hx::Null< bool >  loop,hx::Null< bool >  stream);
		static ::Dynamic play_dyn();

};

} // end namespace iron
} // end namespace system

#endif /* INCLUDED_iron_system_Audio */ 
