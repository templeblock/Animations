// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_system_VirtualInput
#define INCLUDED_iron_system_VirtualInput

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(iron,_hx_system,VirtualInput)

namespace iron{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES VirtualInput_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef VirtualInput_obj OBJ_;
		VirtualInput_obj();

	public:
		enum { _hx_ClassId = 0x15b014de };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.system.VirtualInput")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.system.VirtualInput"); }
		static hx::ObjectPtr< VirtualInput_obj > __new();
		static hx::ObjectPtr< VirtualInput_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~VirtualInput_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("VirtualInput","\x1f","\x1a","\x9c","\x8d"); }

		 ::haxe::ds::StringMap virtualButtons;
		void setVirtual(::String _hx_virtual,::String button);
		::Dynamic setVirtual_dyn();

		void downVirtual(::String button);
		::Dynamic downVirtual_dyn();

		void upVirtual(::String button);
		::Dynamic upVirtual_dyn();

};

} // end namespace iron
} // end namespace system

#endif /* INCLUDED_iron_system_VirtualInput */ 
