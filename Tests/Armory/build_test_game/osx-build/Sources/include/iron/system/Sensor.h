// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_system_Sensor
#define INCLUDED_iron_system_Sensor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,_hx_system,Sensor)

namespace iron{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES Sensor_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Sensor_obj OBJ_;
		Sensor_obj();

	public:
		enum { _hx_ClassId = 0x6857e311 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.system.Sensor")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.system.Sensor"); }
		static hx::ObjectPtr< Sensor_obj > __new();
		static hx::ObjectPtr< Sensor_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Sensor_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Sensor","\x5a","\xa6","\x24","\xa0"); }

		Float x;
		Float y;
		Float z;
		void listener(Float x,Float y,Float z);
		::Dynamic listener_dyn();

};

} // end namespace iron
} // end namespace system

#endif /* INCLUDED_iron_system_Sensor */ 
