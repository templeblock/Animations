// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_system_Input
#define INCLUDED_iron_system_Input

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(iron,_hx_system,Gamepad)
HX_DECLARE_CLASS2(iron,_hx_system,Input)
HX_DECLARE_CLASS2(iron,_hx_system,Keyboard)
HX_DECLARE_CLASS2(iron,_hx_system,Mouse)
HX_DECLARE_CLASS2(iron,_hx_system,Pen)
HX_DECLARE_CLASS2(iron,_hx_system,Sensor)
HX_DECLARE_CLASS2(iron,_hx_system,VirtualButton)
HX_DECLARE_CLASS2(iron,_hx_system,VirtualInput)

namespace iron{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES Input_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Input_obj OBJ_;
		Input_obj();

	public:
		enum { _hx_ClassId = 0x6dbe3b13 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.system.Input")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.system.Input"); }

		hx::ObjectPtr< Input_obj > __new() {
			hx::ObjectPtr< Input_obj > __this = new Input_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Input_obj > __alloc(hx::Ctx *_hx_ctx) {
			Input_obj *__this = (Input_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Input_obj), false, "iron.system.Input"));
			*(void **)__this = Input_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Input_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Input","\xea","\x33","\x4b","\x51"); }

		static void __boot();
		static bool occupied;
		static  ::iron::_hx_system::Mouse mouse;
		static  ::iron::_hx_system::Pen pen;
		static  ::iron::_hx_system::Keyboard keyboard;
		static ::Array< ::Dynamic> gamepads;
		static  ::iron::_hx_system::Sensor sensor;
		static  ::haxe::ds::StringMap virtualButtons;
		static void reset();
		static ::Dynamic reset_dyn();

		static void endFrame();
		static ::Dynamic endFrame_dyn();

		static  ::iron::_hx_system::Mouse getMouse();
		static ::Dynamic getMouse_dyn();

		static  ::iron::_hx_system::Pen getPen();
		static ::Dynamic getPen_dyn();

		static  ::iron::_hx_system::Mouse getSurface();
		static ::Dynamic getSurface_dyn();

		static  ::iron::_hx_system::Keyboard getKeyboard();
		static ::Dynamic getKeyboard_dyn();

		static  ::iron::_hx_system::Gamepad getGamepad(hx::Null< int >  i);
		static ::Dynamic getGamepad_dyn();

		static  ::iron::_hx_system::Sensor getSensor();
		static ::Dynamic getSensor_dyn();

		static  ::iron::_hx_system::VirtualButton getVirtualButton(::String _hx_virtual);
		static ::Dynamic getVirtualButton_dyn();

};

} // end namespace iron
} // end namespace system

#endif /* INCLUDED_iron_system_Input */ 
