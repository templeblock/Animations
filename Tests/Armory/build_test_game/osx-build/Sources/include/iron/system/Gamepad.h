// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_system_Gamepad
#define INCLUDED_iron_system_Gamepad

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif
HX_DECLARE_CLASS2(iron,_hx_system,Gamepad)
HX_DECLARE_CLASS2(iron,_hx_system,GamepadStick)
HX_DECLARE_CLASS2(iron,_hx_system,VirtualInput)

namespace iron{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES Gamepad_obj : public  ::iron::_hx_system::VirtualInput_obj
{
	public:
		typedef  ::iron::_hx_system::VirtualInput_obj super;
		typedef Gamepad_obj OBJ_;
		Gamepad_obj();

	public:
		enum { _hx_ClassId = 0x6a0df906 };

		void __construct(int i,hx::Null< bool >  __o__hx_virtual);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.system.Gamepad")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.system.Gamepad"); }
		static hx::ObjectPtr< Gamepad_obj > __new(int i,hx::Null< bool >  __o__hx_virtual);
		static hx::ObjectPtr< Gamepad_obj > __alloc(hx::Ctx *_hx_ctx,int i,hx::Null< bool >  __o__hx_virtual);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Gamepad_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Gamepad","\x81","\x08","\xd7","\x56"); }

		static void __boot();
		static ::Array< ::String > buttonsPS;
		static ::Array< ::String > buttonsXBOX;
		static ::Array< ::String > buttons;
		static ::String keyCode(int button);
		static ::Dynamic keyCode_dyn();

		::Array< Float > buttonsDown;
		::Array< bool > buttonsStarted;
		::Array< bool > buttonsReleased;
		::Array< int > buttonsFrame;
		 ::iron::_hx_system::GamepadStick leftStick;
		 ::iron::_hx_system::GamepadStick rightStick;
		bool connected;
		int num;
		int connects;
		void connect();
		::Dynamic connect_dyn();

		void endFrame();
		::Dynamic endFrame_dyn();

		void reset();
		::Dynamic reset_dyn();

		int buttonIndex(::String button);
		::Dynamic buttonIndex_dyn();

		Float down(::String button);
		::Dynamic down_dyn();

		bool started(::String button);
		::Dynamic started_dyn();

		bool released(::String button);
		::Dynamic released_dyn();

		void axisListener(int axis,Float value);
		::Dynamic axisListener_dyn();

		void buttonListener(int button,Float value);
		::Dynamic buttonListener_dyn();

};

} // end namespace iron
} // end namespace system

#endif /* INCLUDED_iron_system_Gamepad */ 
