// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_system_Tween
#define INCLUDED_iron_system_Tween

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,_hx_system,Tween)

namespace iron{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES Tween_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Tween_obj OBJ_;
		Tween_obj();

	public:
		enum { _hx_ClassId = 0x7fa1c728 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.system.Tween")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.system.Tween"); }

		hx::ObjectPtr< Tween_obj > __new() {
			hx::ObjectPtr< Tween_obj > __this = new Tween_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Tween_obj > __alloc(hx::Ctx *_hx_ctx) {
			Tween_obj *__this = (Tween_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tween_obj), false, "iron.system.Tween"));
			*(void **)__this = Tween_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Tween_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Tween","\x4b","\x1a","\x9e","\xac"); }

		static void __boot();
		static Float DEFAULT_OVERSHOOT;
		static ::Array< ::Dynamic> eases;
		static ::Array< ::Dynamic> anims;
		static  ::Dynamic to( ::Dynamic anim);
		static ::Dynamic to_dyn();

		static  ::Dynamic timer(Float delay, ::Dynamic done);
		static ::Dynamic timer_dyn();

		static void stop( ::Dynamic anim);
		static ::Dynamic stop_dyn();

		static void reset();
		static ::Dynamic reset_dyn();

		static void update();
		static ::Dynamic update_dyn();

		static Float easeLinear(Float k);
		static ::Dynamic easeLinear_dyn();

		static Float easeSineIn(Float k);
		static ::Dynamic easeSineIn_dyn();

		static Float easeSineOut(Float k);
		static ::Dynamic easeSineOut_dyn();

		static Float easeSineInOut(Float k);
		static ::Dynamic easeSineInOut_dyn();

		static Float easeQuadIn(Float k);
		static ::Dynamic easeQuadIn_dyn();

		static Float easeQuadOut(Float k);
		static ::Dynamic easeQuadOut_dyn();

		static Float easeQuadInOut(Float k);
		static ::Dynamic easeQuadInOut_dyn();

		static Float easeCubicIn(Float k);
		static ::Dynamic easeCubicIn_dyn();

		static Float easeCubicOut(Float k);
		static ::Dynamic easeCubicOut_dyn();

		static Float easeCubicInOut(Float k);
		static ::Dynamic easeCubicInOut_dyn();

		static Float easeQuartIn(Float k);
		static ::Dynamic easeQuartIn_dyn();

		static Float easeQuartOut(Float k);
		static ::Dynamic easeQuartOut_dyn();

		static Float easeQuartInOut(Float k);
		static ::Dynamic easeQuartInOut_dyn();

		static Float easeQuintIn(Float k);
		static ::Dynamic easeQuintIn_dyn();

		static Float easeQuintOut(Float k);
		static ::Dynamic easeQuintOut_dyn();

		static Float easeQuintInOut(Float k);
		static ::Dynamic easeQuintInOut_dyn();

		static Float easeExpoIn(Float k);
		static ::Dynamic easeExpoIn_dyn();

		static Float easeExpoOut(Float k);
		static ::Dynamic easeExpoOut_dyn();

		static Float easeExpoInOut(Float k);
		static ::Dynamic easeExpoInOut_dyn();

		static Float easeCircIn(Float k);
		static ::Dynamic easeCircIn_dyn();

		static Float easeCircOut(Float k);
		static ::Dynamic easeCircOut_dyn();

		static Float easeCircInOut(Float k);
		static ::Dynamic easeCircInOut_dyn();

		static Float easeBackIn(Float k);
		static ::Dynamic easeBackIn_dyn();

		static Float easeBackOut(Float k);
		static ::Dynamic easeBackOut_dyn();

		static Float easeBackInOut(Float k);
		static ::Dynamic easeBackInOut_dyn();

};

} // end namespace iron
} // end namespace system

#endif /* INCLUDED_iron_system_Tween */ 
