// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_data_Data
#define INCLUDED_iron_data_Data

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_514b96931615595e_25_new)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(iron,data,CameraData)
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,LampData)
HX_DECLARE_CLASS2(iron,data,MaterialData)
HX_DECLARE_CLASS2(iron,data,MeshData)
HX_DECLARE_CLASS2(iron,data,ParticleData)
HX_DECLARE_CLASS2(iron,data,ShaderData)
HX_DECLARE_CLASS2(iron,data,WorldData)
HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Image)
HX_DECLARE_CLASS1(kha,Kravur)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS1(kha,Sound)
HX_DECLARE_CLASS1(kha,Video)
HX_DECLARE_CLASS2(kha,internal,BytesBlob)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES Data_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Data_obj OBJ_;
		Data_obj();

	public:
		enum { _hx_ClassId = 0x25e6a720 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.data.Data")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.data.Data"); }

		hx::ObjectPtr< Data_obj > __new() {
			hx::ObjectPtr< Data_obj > __this = new Data_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Data_obj > __alloc(hx::Ctx *_hx_ctx) {
			Data_obj *__this = (Data_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Data_obj), false, "iron.data.Data"));
			*(void **)__this = Data_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_25_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Data_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Data","\x4a","\x82","\x3c","\x2d"); }

		static void __boot();
		static  ::haxe::ds::StringMap cachedSceneRaws;
		static  ::haxe::ds::StringMap cachedMeshes;
		static  ::haxe::ds::StringMap cachedLamps;
		static  ::haxe::ds::StringMap cachedCameras;
		static  ::haxe::ds::StringMap cachedMaterials;
		static  ::haxe::ds::StringMap cachedParticles;
		static  ::haxe::ds::StringMap cachedWorlds;
		static  ::haxe::ds::StringMap cachedShaders;
		static  ::haxe::ds::StringMap cachedBlobs;
		static  ::haxe::ds::StringMap cachedImages;
		static  ::haxe::ds::StringMap cachedSounds;
		static  ::haxe::ds::StringMap cachedVideos;
		static  ::haxe::ds::StringMap cachedFonts;
		static void deleteAll();
		static ::Dynamic deleteAll_dyn();

		static void clearSceneData();
		static ::Dynamic clearSceneData_dyn();

		static  ::haxe::ds::StringMap loadingMeshes;
		static void getMesh(::String file,::String name, ::Dynamic done);
		static ::Dynamic getMesh_dyn();

		static void deleteMesh(::String handle);
		static ::Dynamic deleteMesh_dyn();

		static  ::haxe::ds::StringMap loadingLamps;
		static void getLamp(::String file,::String name, ::Dynamic done);
		static ::Dynamic getLamp_dyn();

		static  ::haxe::ds::StringMap loadingCameras;
		static void getCamera(::String file,::String name, ::Dynamic done);
		static ::Dynamic getCamera_dyn();

		static  ::haxe::ds::StringMap loadingMaterials;
		static void getMaterial(::String file,::String name, ::Dynamic done);
		static ::Dynamic getMaterial_dyn();

		static  ::haxe::ds::StringMap loadingParticles;
		static void getParticle(::String file,::String name, ::Dynamic done);
		static ::Dynamic getParticle_dyn();

		static  ::haxe::ds::StringMap loadingWorlds;
		static void getWorld(::String file,::String name, ::Dynamic done);
		static ::Dynamic getWorld_dyn();

		static  ::haxe::ds::StringMap loadingShaders;
		static void getShader(::String file,::String name, ::Dynamic overrideContext, ::Dynamic done);
		static ::Dynamic getShader_dyn();

		static  ::haxe::ds::StringMap loadingSceneRaws;
		static void getSceneRaw(::String file, ::Dynamic done);
		static ::Dynamic getSceneRaw_dyn();

		static void returnSceneRaw(::String file, ::Dynamic parsed);
		static ::Dynamic returnSceneRaw_dyn();

		static  ::Dynamic getMeshRawByName(::Array< ::Dynamic> datas,::String name);
		static ::Dynamic getMeshRawByName_dyn();

		static  ::Dynamic getLampRawByName(::Array< ::Dynamic> datas,::String name);
		static ::Dynamic getLampRawByName_dyn();

		static  ::Dynamic getCameraRawByName(::Array< ::Dynamic> datas,::String name);
		static ::Dynamic getCameraRawByName_dyn();

		static  ::Dynamic getMaterialRawByName(::Array< ::Dynamic> datas,::String name);
		static ::Dynamic getMaterialRawByName_dyn();

		static  ::Dynamic getParticleRawByName(::Array< ::Dynamic> datas,::String name);
		static ::Dynamic getParticleRawByName_dyn();

		static  ::Dynamic getWorldRawByName(::Array< ::Dynamic> datas,::String name);
		static ::Dynamic getWorldRawByName_dyn();

		static  ::Dynamic getShaderRawByName(::Array< ::Dynamic> datas,::String name);
		static ::Dynamic getShaderRawByName_dyn();

		static  ::Dynamic getSpeakerRawByName(::Array< ::Dynamic> datas,::String name);
		static ::Dynamic getSpeakerRawByName_dyn();

		static int assetsLoaded;
		static  ::haxe::ds::StringMap loadingBlobs;
		static void getBlob(::String file, ::Dynamic done);
		static ::Dynamic getBlob_dyn();

		static  ::haxe::ds::StringMap loadingImages;
		static void getImage(::String file, ::Dynamic done,hx::Null< bool >  readable,::String format);
		static ::Dynamic getImage_dyn();

		static  ::haxe::ds::StringMap loadingSounds;
		static void getSound(::String file, ::Dynamic done);
		static ::Dynamic getSound_dyn();

		static  ::haxe::ds::StringMap loadingVideos;
		static void getVideo(::String file, ::Dynamic done);
		static ::Dynamic getVideo_dyn();

		static  ::haxe::ds::StringMap loadingFonts;
		static void getFont(::String file, ::Dynamic done);
		static ::Dynamic getFont_dyn();

};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_Data */ 
