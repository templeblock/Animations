// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_data_Armature
#define INCLUDED_iron_data_Armature

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,data,Armature)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES Armature_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Armature_obj OBJ_;
		Armature_obj();

	public:
		enum { _hx_ClassId = 0x0074a86f };

		void __construct(::String name,::Array< ::Dynamic> actions);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.Armature")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.Armature"); }
		static hx::ObjectPtr< Armature_obj > __new(::String name,::Array< ::Dynamic> actions);
		static hx::ObjectPtr< Armature_obj > __alloc(hx::Ctx *_hx_ctx,::String name,::Array< ::Dynamic> actions);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Armature_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Armature","\x99","\x60","\x28","\xc6"); }

		static void setParents( ::Dynamic object);
		static ::Dynamic setParents_dyn();

		static void traverseBones(::Array< ::Dynamic> objects, ::Dynamic callback);
		static ::Dynamic traverseBones_dyn();

		static void traverseBonesStep( ::Dynamic object, ::Dynamic callback);
		static ::Dynamic traverseBonesStep_dyn();

		::String name;
		::Array< ::Dynamic> actions;
		bool matsReady;
		void initMats();
		::Dynamic initMats_dyn();

		 ::Dynamic getAction(::String name);
		::Dynamic getAction_dyn();

};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_Armature */ 
