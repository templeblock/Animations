// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_data_WorldData
#define INCLUDED_iron_data_WorldData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,Probe)
HX_DECLARE_CLASS2(iron,data,WorldData)
HX_DECLARE_CLASS2(iron,math,Vec4)
HX_DECLARE_CLASS2(iron,object,Transform)
HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Image)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,arrays,Float32ArrayPrivate)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES WorldData_obj : public  ::iron::data::Data_obj
{
	public:
		typedef  ::iron::data::Data_obj super;
		typedef WorldData_obj OBJ_;
		WorldData_obj();

	public:
		enum { _hx_ClassId = 0x0b300fca };

		void __construct( ::Dynamic raw, ::Dynamic done);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.WorldData")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.WorldData"); }
		static hx::ObjectPtr< WorldData_obj > __new( ::Dynamic raw, ::Dynamic done);
		static hx::ObjectPtr< WorldData_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic raw, ::Dynamic done);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~WorldData_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("WorldData","\x7c","\x89","\x52","\xf1"); }

		static void __boot();
		static  ::kha::arrays::Float32ArrayPrivate emptyIrr;
		static void parse(::String name,::String id, ::Dynamic done);
		static ::Dynamic parse_dyn();

		static  ::kha::arrays::Float32ArrayPrivate getEmptyIrradiance();
		static ::Dynamic getEmptyIrradiance_dyn();

		::String name;
		 ::Dynamic raw;
		 ::kha::Image envmap;
		::Array< ::Dynamic> probes;
		void loadEnvmap( ::Dynamic done);
		::Dynamic loadEnvmap_dyn();

		 ::iron::data::Probe getGlobalProbe();
		::Dynamic getGlobalProbe_dyn();

		 ::iron::data::Probe getLocalProbe(int i);
		::Dynamic getLocalProbe_dyn();

		 ::kha::arrays::Float32ArrayPrivate shirr;
		 ::kha::arrays::Float32ArrayPrivate getSHIrradiance();
		::Dynamic getSHIrradiance_dyn();

		 ::iron::math::Vec4 vec;
		int getProbeID( ::iron::object::Transform t);
		::Dynamic getProbeID_dyn();

		 ::iron::math::Vec4 getProbeVolumeCenter( ::iron::object::Transform t);
		::Dynamic getProbeVolumeCenter_dyn();

		 ::iron::math::Vec4 getProbeVolumeSize( ::iron::object::Transform t);
		::Dynamic getProbeVolumeSize_dyn();

		Float getProbeStrength( ::iron::object::Transform t);
		::Dynamic getProbeStrength_dyn();

		Float getProbeBlending( ::iron::object::Transform t);
		::Dynamic getProbeBlending_dyn();

};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_WorldData */ 
