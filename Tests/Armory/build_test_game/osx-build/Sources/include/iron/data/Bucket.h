// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_data_Bucket
#define INCLUDED_iron_data_Bucket

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,data,Bucket)
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,ShaderData)
HX_DECLARE_CLASS2(iron,object,MeshObject)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(kha,graphics4,IndexBuffer)
HX_DECLARE_CLASS2(kha,graphics4,VertexBuffer)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES Bucket_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Bucket_obj OBJ_;
		Bucket_obj();

	public:
		enum { _hx_ClassId = 0x1d32f57c };

		void __construct( ::iron::data::ShaderData shader);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.Bucket")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.Bucket"); }
		static hx::ObjectPtr< Bucket_obj > __new( ::iron::data::ShaderData shader);
		static hx::ObjectPtr< Bucket_obj > __alloc(hx::Ctx *_hx_ctx, ::iron::data::ShaderData shader);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Bucket_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Bucket","\x8a","\x58","\x31","\x03"); }

		bool batched;
		 ::iron::data::ShaderData shader;
		 ::kha::graphics4::VertexBuffer vertexBuffer;
		 ::kha::graphics4::IndexBuffer indexBuffer;
		::Array< ::Dynamic> meshes;
		void remove();
		::Dynamic remove_dyn();

		void addMesh( ::iron::object::MeshObject m);
		::Dynamic addMesh_dyn();

		void removeMesh( ::iron::object::MeshObject m);
		::Dynamic removeMesh_dyn();

		void batch();
		::Dynamic batch_dyn();

};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_Bucket */ 
