// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_data_Geometry
#define INCLUDED_iron_data_Geometry

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(iron,data,Armature)
HX_DECLARE_CLASS2(iron,data,Geometry)
HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Vec4)
HX_DECLARE_CLASS2(kha,arrays,Float32ArrayPrivate)
HX_DECLARE_CLASS2(kha,arrays,Uint32ArrayPrivate)
HX_DECLARE_CLASS2(kha,graphics4,IndexBuffer)
HX_DECLARE_CLASS2(kha,graphics4,Usage)
HX_DECLARE_CLASS2(kha,graphics4,VertexBuffer)
HX_DECLARE_CLASS2(kha,graphics4,VertexStructure)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES Geometry_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Geometry_obj OBJ_;
		Geometry_obj();

	public:
		enum { _hx_ClassId = 0x7fb2fc44 };

		void __construct(::Array< ::Dynamic> indices,::Array< int > materialIndices, ::kha::arrays::Float32ArrayPrivate positions, ::kha::arrays::Float32ArrayPrivate normals, ::kha::arrays::Float32ArrayPrivate uvs, ::kha::arrays::Float32ArrayPrivate uvs1, ::kha::arrays::Float32ArrayPrivate cols, ::kha::arrays::Float32ArrayPrivate tangents, ::kha::arrays::Float32ArrayPrivate bones, ::kha::arrays::Float32ArrayPrivate weights, ::kha::graphics4::Usage usage, ::kha::arrays::Float32ArrayPrivate instanceOffsets);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.Geometry")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.Geometry"); }
		static hx::ObjectPtr< Geometry_obj > __new(::Array< ::Dynamic> indices,::Array< int > materialIndices, ::kha::arrays::Float32ArrayPrivate positions, ::kha::arrays::Float32ArrayPrivate normals, ::kha::arrays::Float32ArrayPrivate uvs, ::kha::arrays::Float32ArrayPrivate uvs1, ::kha::arrays::Float32ArrayPrivate cols, ::kha::arrays::Float32ArrayPrivate tangents, ::kha::arrays::Float32ArrayPrivate bones, ::kha::arrays::Float32ArrayPrivate weights, ::kha::graphics4::Usage usage, ::kha::arrays::Float32ArrayPrivate instanceOffsets);
		static hx::ObjectPtr< Geometry_obj > __alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> indices,::Array< int > materialIndices, ::kha::arrays::Float32ArrayPrivate positions, ::kha::arrays::Float32ArrayPrivate normals, ::kha::arrays::Float32ArrayPrivate uvs, ::kha::arrays::Float32ArrayPrivate uvs1, ::kha::arrays::Float32ArrayPrivate cols, ::kha::arrays::Float32ArrayPrivate tangents, ::kha::arrays::Float32ArrayPrivate bones, ::kha::arrays::Float32ArrayPrivate weights, ::kha::graphics4::Usage usage, ::kha::arrays::Float32ArrayPrivate instanceOffsets);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Geometry_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Geometry","\xd2","\xbe","\x5a","\xac"); }

		static  ::kha::graphics4::VertexStructure getVertexStructure(hx::Null< bool >  pos,hx::Null< bool >  nor,hx::Null< bool >  tex,hx::Null< bool >  tex1,hx::Null< bool >  col,hx::Null< bool >  tang,hx::Null< bool >  bone,hx::Null< bool >  weight);
		static ::Dynamic getVertexStructure_dyn();

		static void buildVertices( ::kha::arrays::Float32ArrayPrivate vertices, ::kha::arrays::Float32ArrayPrivate pa, ::kha::arrays::Float32ArrayPrivate na, ::kha::arrays::Float32ArrayPrivate uva, ::kha::arrays::Float32ArrayPrivate uva1, ::kha::arrays::Float32ArrayPrivate ca, ::kha::arrays::Float32ArrayPrivate tanga, ::kha::arrays::Float32ArrayPrivate bonea, ::kha::arrays::Float32ArrayPrivate weighta,hx::Null< int >  offset,hx::Null< bool >  fakeUVs);
		static ::Dynamic buildVertices_dyn();

		 ::kha::graphics4::VertexBuffer vertexBuffer;
		 ::haxe::ds::StringMap vertexBufferMap;
		::Array< ::Dynamic> indexBuffers;
		int start;
		int count;
		bool ready;
		 ::kha::arrays::Float32ArrayPrivate vertices;
		::Array< ::Dynamic> indices;
		int numTris;
		::Array< int > materialIndices;
		 ::kha::graphics4::VertexStructure _hx_struct;
		int structLength;
		::String structStr;
		 ::kha::graphics4::Usage usage;
		 ::kha::graphics4::VertexBuffer instancedVB;
		bool instanced;
		int instanceCount;
		 ::kha::arrays::Float32ArrayPrivate positions;
		 ::kha::arrays::Float32ArrayPrivate normals;
		 ::kha::arrays::Float32ArrayPrivate uvs;
		 ::kha::arrays::Float32ArrayPrivate uvs1;
		 ::kha::arrays::Float32ArrayPrivate cols;
		 ::kha::arrays::Float32ArrayPrivate tangents;
		 ::kha::arrays::Float32ArrayPrivate bones;
		 ::kha::arrays::Float32ArrayPrivate weights;
		 ::kha::arrays::Float32ArrayPrivate instanceOffsets;
		::Array< ::Dynamic> offsetVecs;
		 ::iron::math::Vec4 aabb;
		 ::kha::arrays::Uint32ArrayPrivate skinBoneCounts;
		 ::kha::arrays::Uint32ArrayPrivate skinBoneIndices;
		 ::kha::arrays::Float32ArrayPrivate skinBoneWeights;
		::Array< ::Dynamic> skeletonTransformsI;
		::Array< ::String > skeletonBoneRefs;
		 ::kha::arrays::Float32ArrayPrivate skeletonBoneLens;
		 ::haxe::ds::StringMap actions;
		 ::haxe::ds::StringMap mats;
		void _hx_delete();
		::Dynamic _hx_delete_dyn();

		void applyScale(Float sx,Float sy,Float sz);
		::Dynamic applyScale_dyn();

		void setupInstanced( ::kha::arrays::Float32ArrayPrivate offsets, ::kha::graphics4::Usage usage);
		::Dynamic setupInstanced_dyn();

		void sortInstanced(Float camX,Float camY,Float camZ);
		::Dynamic sortInstanced_dyn();

		void copyVertices( ::kha::arrays::Float32ArrayPrivate vertices,hx::Null< int >  offset);
		::Dynamic copyVertices_dyn();

		int getVerticesLength();
		::Dynamic getVerticesLength_dyn();

		bool hasAttrib(::String s,::Array< ::Dynamic> vs);
		::Dynamic hasAttrib_dyn();

		 ::kha::graphics4::VertexBuffer get(::Array< ::Dynamic> vs);
		::Dynamic get_dyn();

		void build();
		::Dynamic build_dyn();

		int getVerticesCount();
		::Dynamic getVerticesCount_dyn();

		void addArmature( ::iron::data::Armature armature);
		::Dynamic addArmature_dyn();

		void addAction(::Array< ::Dynamic> bones,::String name);
		::Dynamic addAction_dyn();

		void initSkeletonTransforms(::Array< ::Dynamic> transformsI);
		::Dynamic initSkeletonTransforms_dyn();

		void calculateAABB();
		::Dynamic calculateAABB_dyn();

};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_Geometry */ 
