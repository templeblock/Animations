// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_math_Ray
#define INCLUDED_iron_math_Ray

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,math,Plane)
HX_DECLARE_CLASS2(iron,math,Ray)
HX_DECLARE_CLASS2(iron,math,Vec4)

namespace iron{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Ray_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Ray_obj OBJ_;
		Ray_obj();

	public:
		enum { _hx_ClassId = 0x52bf8d56 };

		void __construct( ::iron::math::Vec4 origin, ::iron::math::Vec4 direction);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.math.Ray")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.math.Ray"); }
		static hx::ObjectPtr< Ray_obj > __new( ::iron::math::Vec4 origin, ::iron::math::Vec4 direction);
		static hx::ObjectPtr< Ray_obj > __alloc(hx::Ctx *_hx_ctx, ::iron::math::Vec4 origin, ::iron::math::Vec4 direction);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Ray_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Ray","\xca","\x8d","\x3e","\x00"); }

		 ::iron::math::Vec4 origin;
		 ::iron::math::Vec4 direction;
		 ::iron::math::Vec4 at(Float t);
		::Dynamic at_dyn();

		Float distanceToPoint( ::iron::math::Vec4 point);
		::Dynamic distanceToPoint_dyn();

		bool intersectsSphere( ::iron::math::Vec4 sphereCenter,Float sphereRadius);
		::Dynamic intersectsSphere_dyn();

		bool intersectsPlane( ::iron::math::Plane plane);
		::Dynamic intersectsPlane_dyn();

		Float distanceToPlane( ::iron::math::Plane plane);
		::Dynamic distanceToPlane_dyn();

		 ::iron::math::Vec4 intersectPlane( ::iron::math::Plane plane);
		::Dynamic intersectPlane_dyn();

		bool intersectsBox( ::iron::math::Vec4 center, ::iron::math::Vec4 dim);
		::Dynamic intersectsBox_dyn();

		 ::iron::math::Vec4 intersectBox( ::iron::math::Vec4 center, ::iron::math::Vec4 dim);
		::Dynamic intersectBox_dyn();

		 ::iron::math::Vec4 intersectTriangle( ::iron::math::Vec4 a, ::iron::math::Vec4 b, ::iron::math::Vec4 c,bool backfaceCulling);
		::Dynamic intersectTriangle_dyn();

};

} // end namespace iron
} // end namespace math

#endif /* INCLUDED_iron_math_Ray */ 
