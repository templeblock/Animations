// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_math_Vec4
#define INCLUDED_iron_math_Vec4

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Quat)
HX_DECLARE_CLASS2(iron,math,Vec4)

namespace iron{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Vec4_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Vec4_obj OBJ_;
		Vec4_obj();

	public:
		enum { _hx_ClassId = 0x1783ee74 };

		void __construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.math.Vec4")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.math.Vec4"); }
		static hx::ObjectPtr< Vec4_obj > __new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w);
		static hx::ObjectPtr< Vec4_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Vec4_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Vec4","\x80","\x53","\x25","\x39"); }

		static  ::iron::math::Vec4 lerp( ::iron::math::Vec4 v1, ::iron::math::Vec4 v2,float t);
		static ::Dynamic lerp_dyn();

		static float distance( ::iron::math::Vec4 v1, ::iron::math::Vec4 v2);
		static ::Dynamic distance_dyn();

		static float distancef(float v1x,float v1y,float v1z,float v2x,float v2y,float v2z);
		static ::Dynamic distancef_dyn();

		static  ::iron::math::Vec4 xAxis();
		static ::Dynamic xAxis_dyn();

		static  ::iron::math::Vec4 yAxis();
		static ::Dynamic yAxis_dyn();

		static  ::iron::math::Vec4 zAxis();
		static ::Dynamic zAxis_dyn();

		static  ::iron::math::Vec4 one();
		static ::Dynamic one_dyn();

		static  ::iron::math::Vec4 zero();
		static ::Dynamic zero_dyn();

		static  ::iron::math::Vec4 back();
		static ::Dynamic back_dyn();

		static  ::iron::math::Vec4 forward();
		static ::Dynamic forward_dyn();

		static  ::iron::math::Vec4 down();
		static ::Dynamic down_dyn();

		static  ::iron::math::Vec4 up();
		static ::Dynamic up_dyn();

		static  ::iron::math::Vec4 left();
		static ::Dynamic left_dyn();

		static  ::iron::math::Vec4 right();
		static ::Dynamic right_dyn();

		static  ::iron::math::Vec4 negativeInfinity();
		static ::Dynamic negativeInfinity_dyn();

		static  ::iron::math::Vec4 positiveInfinity();
		static ::Dynamic positiveInfinity_dyn();

		float x;
		float y;
		float z;
		float w;
		 ::iron::math::Vec4 cross( ::iron::math::Vec4 v);
		::Dynamic cross_dyn();

		 ::iron::math::Vec4 crossvecs( ::iron::math::Vec4 a, ::iron::math::Vec4 b);
		::Dynamic crossvecs_dyn();

		 ::iron::math::Vec4 set(float x,float y,float z,hx::Null< Float >  w);
		::Dynamic set_dyn();

		 ::iron::math::Vec4 add( ::iron::math::Vec4 v);
		::Dynamic add_dyn();

		 ::iron::math::Vec4 addf(float x,float y,float z);
		::Dynamic addf_dyn();

		 ::iron::math::Vec4 addvecs( ::iron::math::Vec4 a, ::iron::math::Vec4 b);
		::Dynamic addvecs_dyn();

		 ::iron::math::Vec4 subvecs( ::iron::math::Vec4 a, ::iron::math::Vec4 b);
		::Dynamic subvecs_dyn();

		 ::iron::math::Vec4 normalize();
		::Dynamic normalize_dyn();

		 ::iron::math::Vec4 normalizeTo(float newLength);
		::Dynamic normalizeTo_dyn();

		 ::iron::math::Vec4 mult(float f);
		::Dynamic mult_dyn();

		float dot( ::iron::math::Vec4 v);
		::Dynamic dot_dyn();

		 ::iron::math::Vec4 setFrom( ::iron::math::Vec4 v);
		::Dynamic setFrom_dyn();

		 ::iron::math::Vec4 clone();
		::Dynamic clone_dyn();

		 ::iron::math::Vec4 applyproj( ::iron::math::Mat4 m);
		::Dynamic applyproj_dyn();

		 ::iron::math::Vec4 applymat( ::iron::math::Mat4 m);
		::Dynamic applymat_dyn();

		 ::iron::math::Vec4 applymat4( ::iron::math::Mat4 m);
		::Dynamic applymat4_dyn();

		 ::iron::math::Quat quat;
		 ::iron::math::Vec4 applyAxisAngle( ::iron::math::Vec4 axis,float angle);
		::Dynamic applyAxisAngle_dyn();

		 ::iron::math::Vec4 applyQuat( ::iron::math::Quat q);
		::Dynamic applyQuat_dyn();

		bool equals( ::iron::math::Vec4 v);
		::Dynamic equals_dyn();

		float length();
		::Dynamic length_dyn();

		 ::iron::math::Vec4 sub( ::iron::math::Vec4 v);
		::Dynamic sub_dyn();

		float distanceTo( ::iron::math::Vec4 p);
		::Dynamic distanceTo_dyn();

		 ::iron::math::Vec4 reflect( ::iron::math::Vec4 n);
		::Dynamic reflect_dyn();

		 ::iron::math::Vec4 clamp(float fmin,float fmax);
		::Dynamic clamp_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace iron
} // end namespace math

#endif /* INCLUDED_iron_math_Vec4 */ 
