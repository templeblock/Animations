// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_math_Math
#define INCLUDED_iron_math_Math

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,math,Math)

namespace iron{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Math_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Math_obj OBJ_;
		Math_obj();

	public:
		enum { _hx_ClassId = 0x118e08dc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.math.Math")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.math.Math"); }

		hx::ObjectPtr< Math_obj > __new() {
			hx::ObjectPtr< Math_obj > __this = new Math_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Math_obj > __alloc(hx::Ctx *_hx_ctx) {
			Math_obj *__this = (Math_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Math_obj), false, "iron.math.Math"));
			*(void **)__this = Math_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Math_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Math","\xe8","\x6d","\x2f","\x33"); }

		static void __boot();
		static Float E;
		static Float LOG2E;
		static Float LOG10E;
		static Float LN2;
		static Float LN10;
		static Float PI;
		static Float PI_2;
		static Float PI_4;
		static Float ONE_PI;
		static Float TWO_PI;
		static Float TWO_SQRTPI;
		static Float SQRT2;
		static Float SQRT1_2;
		static Float get_POSITIVE_INFINITY();
		static ::Dynamic get_POSITIVE_INFINITY_dyn();

		static Float get_NEGATIVE_INFINITY();
		static ::Dynamic get_NEGATIVE_INFINITY_dyn();

		static Float get_NaN();
		static ::Dynamic get_NaN_dyn();

		static Float abs(Float v);
		static ::Dynamic abs_dyn();

		static Float acos(Float v);
		static ::Dynamic acos_dyn();

		static Float asin(Float v);
		static ::Dynamic asin_dyn();

		static Float atan(Float v);
		static ::Dynamic atan_dyn();

		static Float atan2(Float y,Float x);
		static ::Dynamic atan2_dyn();

		static int ceil(Float v);
		static ::Dynamic ceil_dyn();

		static Float cos(Float v);
		static ::Dynamic cos_dyn();

		static Float exp(Float v);
		static ::Dynamic exp_dyn();

		static int floor(Float v);
		static ::Dynamic floor_dyn();

		static Float log(Float v);
		static ::Dynamic log_dyn();

		static Float max(Float a,Float b);
		static ::Dynamic max_dyn();

		static Float min(Float a,Float b);
		static ::Dynamic min_dyn();

		static Float pow(Float v,Float exp);
		static ::Dynamic pow_dyn();

		static Float random();
		static ::Dynamic random_dyn();

		static int round(Float v);
		static ::Dynamic round_dyn();

		static Float sin(Float v);
		static ::Dynamic sin_dyn();

		static Float sqrt(Float v);
		static ::Dynamic sqrt_dyn();

		static Float tan(Float v);
		static ::Dynamic tan_dyn();

		static Float ffloor(Float v);
		static ::Dynamic ffloor_dyn();

		static Float fceil(Float v);
		static ::Dynamic fceil_dyn();

		static Float fround(Float v);
		static ::Dynamic fround_dyn();

		static bool isFinite(Float f);
		static ::Dynamic isFinite_dyn();

		static bool isNaN(Float f);
		static ::Dynamic isNaN_dyn();

		static Float roundfp(Float f,hx::Null< int >  precision);
		static ::Dynamic roundfp_dyn();

		static Float clamp(Float f,Float min,Float max);
		static ::Dynamic clamp_dyn();

};

} // end namespace iron
} // end namespace math

#endif /* INCLUDED_iron_math_Math */ 
