// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_math_RayCaster
#define INCLUDED_iron_math_RayCaster

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Ray)
HX_DECLARE_CLASS2(iron,math,RayCaster)
HX_DECLARE_CLASS2(iron,math,Vec2)
HX_DECLARE_CLASS2(iron,math,Vec4)
HX_DECLARE_CLASS2(iron,object,CameraObject)
HX_DECLARE_CLASS2(iron,object,MeshObject)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(iron,object,Transform)

namespace iron{
namespace math{


class HXCPP_CLASS_ATTRIBUTES RayCaster_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef RayCaster_obj OBJ_;
		RayCaster_obj();

	public:
		enum { _hx_ClassId = 0x555597fe };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.math.RayCaster")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.math.RayCaster"); }

		hx::ObjectPtr< RayCaster_obj > __new() {
			hx::ObjectPtr< RayCaster_obj > __this = new RayCaster_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< RayCaster_obj > __alloc(hx::Ctx *_hx_ctx) {
			RayCaster_obj *__this = (RayCaster_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RayCaster_obj), false, "iron.math.RayCaster"));
			*(void **)__this = RayCaster_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~RayCaster_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("RayCaster","\x56","\x5a","\x39","\xd5"); }

		static void __boot();
		static  ::iron::math::Ray getRay(Float inputX,Float inputY, ::iron::object::CameraObject camera);
		static ::Dynamic getRay_dyn();

		static  ::iron::math::Mat4 VPInv;
		static  ::iron::math::Mat4 PInv;
		static  ::iron::math::Mat4 VInv;
		static void getDirection( ::iron::math::Vec4 start, ::iron::math::Vec4 end,Float inputX,Float inputY, ::iron::object::CameraObject camera);
		static ::Dynamic getDirection_dyn();

		static  ::iron::math::Vec4 boxIntersect( ::iron::object::Transform transform,Float inputX,Float inputY, ::iron::object::CameraObject camera);
		static ::Dynamic boxIntersect_dyn();

		static  ::iron::object::Transform closestBoxIntersect(::Array< ::Dynamic> transforms,Float inputX,Float inputY, ::iron::object::CameraObject camera);
		static ::Dynamic closestBoxIntersect_dyn();

		static  ::iron::math::Vec4 planeIntersect( ::iron::math::Vec4 normal, ::iron::math::Vec4 a,Float inputX,Float inputY, ::iron::object::CameraObject camera);
		static ::Dynamic planeIntersect_dyn();

		static  ::iron::math::Vec4 loc;
		static  ::iron::math::Vec4 nor;
		static  ::iron::math::Mat4 m;
		static  ::iron::math::Vec2 getPlaneUV( ::iron::object::MeshObject obj,Float screenX,Float screenY, ::iron::object::CameraObject camera);
		static ::Dynamic getPlaneUV_dyn();

};

} // end namespace iron
} // end namespace math

#endif /* INCLUDED_iron_math_RayCaster */ 
