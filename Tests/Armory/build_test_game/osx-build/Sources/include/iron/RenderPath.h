// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_RenderPath
#define INCLUDED_iron_RenderPath

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(iron,RenderPath)
HX_DECLARE_CLASS1(iron,RenderTarget)
HX_DECLARE_CLASS1(iron,RenderTargetRaw)
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,MaterialContext)
HX_DECLARE_CLASS2(iron,data,MaterialData)
HX_DECLARE_CLASS2(iron,data,ShaderContext)
HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,object,CameraObject)
HX_DECLARE_CLASS2(iron,object,LampObject)
HX_DECLARE_CLASS2(iron,object,MeshObject)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Image)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,compute,Shader)
HX_DECLARE_CLASS2(kha,graphics4,CubeMap)
HX_DECLARE_CLASS2(kha,graphics4,Graphics)
HX_DECLARE_CLASS2(kha,graphics4,TextureFormat)

namespace iron{


class HXCPP_CLASS_ATTRIBUTES RenderPath_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef RenderPath_obj OBJ_;
		RenderPath_obj();

	public:
		enum { _hx_ClassId = 0x627b1c43 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.RenderPath")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.RenderPath"); }
		static hx::ObjectPtr< RenderPath_obj > __new();
		static hx::ObjectPtr< RenderPath_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~RenderPath_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("RenderPath","\x3b","\xe4","\x0c","\xde"); }

		static void __boot();
		static  ::iron::RenderPath active;
		static void setActive( ::iron::RenderPath renderPath);
		static ::Dynamic setActive_dyn();

		static void sortMeshes(::Array< ::Dynamic> meshes, ::iron::object::CameraObject camera);
		static ::Dynamic sortMeshes_dyn();

		static  ::iron::math::Mat4 helpMat;
		static ::String meshContext;
		static ::String shadowsContext;
		bool frameScissor;
		int frameScissorX;
		int frameScissorY;
		int frameScissorW;
		int frameScissorH;
		Float frameTime;
		 ::iron::RenderTarget currentTarget;
		bool currentCube;
		int currentFace;
		int currentLampIndex;
		int currentW;
		int currentH;
		int currentD;
		int lastW;
		int lastH;
		::Array< ::String > bindParams;
		bool meshesSorted;
		bool scissorSet;
		bool viewportScaled;
		::Dynamic currentG;
		::Dynamic frameG;
		Float lastFrameTime;
		bool paused;
		bool ready;
		bool get_ready();
		::Dynamic get_ready_dyn();

		int loading;
		 ::haxe::ds::StringMap cachedShaderContexts;
		 ::Dynamic commands;
		Dynamic commands_dyn() { return commands;}
		 ::haxe::ds::StringMap renderTargets;
		 ::haxe::ds::StringMap depthToRenderTarget;
		 ::Dynamic lampCastShadow();
		::Dynamic lampCastShadow_dyn();

		bool lampIsSun();
		::Dynamic lampIsSun_dyn();

		 ::iron::object::LampObject getLamp(int index);
		::Dynamic getLamp_dyn();

		void renderFrame(::Dynamic g);
		::Dynamic renderFrame_dyn();

		void setTarget(::String target,::Array< ::String > additional,hx::Null< Float >  viewportScale);
		::Dynamic setTarget_dyn();

		void begin(::Dynamic g,::Array< ::Dynamic> additionalRenderTargets,hx::Null< int >  face);
		::Dynamic begin_dyn();

		void end(::Dynamic g);
		::Dynamic end_dyn();

		void setCurrentViewport(int viewW,int viewH);
		::Dynamic setCurrentViewport_dyn();

		void setCurrentScissor(int viewW,int viewH);
		::Dynamic setCurrentScissor_dyn();

		void setFrameScissor();
		::Dynamic setFrameScissor_dyn();

		void setViewport(int viewW,int viewH);
		::Dynamic setViewport_dyn();

		void clearTarget( ::Dynamic colorFlag, ::Dynamic depthFlag);
		::Dynamic clearTarget_dyn();

		void clearImage(::String target,int color);
		::Dynamic clearImage_dyn();

		void generateMipmaps(::String target);
		::Dynamic generateMipmaps_dyn();

		void drawMeshes(::String context);
		::Dynamic drawMeshes_dyn();

		void submitDraw(::String context);
		::Dynamic submitDraw_dyn();

		void getRectContexts( ::iron::data::MaterialData mat,::String context,::Array< ::Dynamic> materialContexts,::Array< ::Dynamic> shaderContexts);
		::Dynamic getRectContexts_dyn();

		Float clampRect(Float f);
		::Dynamic clampRect_dyn();

		 ::iron::data::MaterialData currentMaterial;
		void drawRects(::String context);
		::Dynamic drawRects_dyn();

		void drawDecals(::String context);
		::Dynamic drawDecals_dyn();

		void drawSkydome(::String handle);
		::Dynamic drawSkydome_dyn();

		void drawLampVolume(::String handle);
		::Dynamic drawLampVolume_dyn();

		void bindTarget(::String target,::String uniform);
		::Dynamic bindTarget_dyn();

		void drawShader(::String handle);
		::Dynamic drawShader_dyn();

		 ::kha::compute::Shader getComputeShader(::String handle);
		::Dynamic getComputeShader_dyn();

		void loadShader(::String handle);
		::Dynamic loadShader_dyn();

		void unload();
		::Dynamic unload_dyn();

		void resize();
		::Dynamic resize_dyn();

		 ::iron::RenderTarget createRenderTarget( ::iron::RenderTargetRaw t);
		::Dynamic createRenderTarget_dyn();

		::Array< ::Dynamic> depthBuffers;
		void createDepthBuffer(::String name,::String format);
		::Dynamic createDepthBuffer_dyn();

		 ::iron::RenderTarget createTarget( ::iron::RenderTargetRaw t);
		::Dynamic createTarget_dyn();

		 ::kha::Image createImage( ::iron::RenderTargetRaw t,int depthStencil);
		::Dynamic createImage_dyn();

		 ::kha::graphics4::CubeMap createCubeMap( ::iron::RenderTargetRaw t,int depthStencil);
		::Dynamic createCubeMap_dyn();

		 ::kha::graphics4::TextureFormat getTextureFormat(::String s);
		::Dynamic getTextureFormat_dyn();

		int getDepthStencilFormat(::String s);
		::Dynamic getDepthStencilFormat_dyn();

};

} // end namespace iron

#endif /* INCLUDED_iron_RenderPath */ 
