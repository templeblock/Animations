// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_object_Animation
#define INCLUDED_iron_object_Animation

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(iron,data,Armature)
HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Quat)
HX_DECLARE_CLASS2(iron,math,Vec4)
HX_DECLARE_CLASS2(iron,object,Animation)
HX_DECLARE_CLASS2(kha,arrays,Uint32ArrayPrivate)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES Animation_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Animation_obj OBJ_;
		Animation_obj();

	public:
		enum { _hx_ClassId = 0x1ad734d9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.object.Animation")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.object.Animation"); }
		static hx::ObjectPtr< Animation_obj > __new();
		static hx::ObjectPtr< Animation_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Animation_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Animation","\xe4","\xce","\x07","\xed"); }

		static void __boot();
		static  ::iron::math::Mat4 m1;
		static  ::iron::math::Mat4 m2;
		static  ::iron::math::Vec4 vpos;
		static  ::iron::math::Vec4 vpos2;
		static  ::iron::math::Vec4 vscl;
		static  ::iron::math::Vec4 vscl2;
		static  ::iron::math::Quat q1;
		static  ::iron::math::Quat q2;
		bool isSkinned;
		bool isSampled;
		::String action;
		 ::iron::data::Armature armature;
		Float time;
		Float speed;
		bool loop;
		int frameIndex;
		 ::Dynamic onComplete;
		Dynamic onComplete_dyn() { return onComplete;}
		bool paused;
		float frameTime;
		Float blendTime;
		Float blendCurrent;
		::String blendAction;
		virtual void play(::String action, ::Dynamic onComplete,hx::Null< Float >  blendTime,hx::Null< Float >  speed,hx::Null< bool >  loop);
		::Dynamic play_dyn();

		void pause();
		::Dynamic pause_dyn();

		void resume();
		::Dynamic resume_dyn();

		void remove();
		::Dynamic remove_dyn();

		virtual void update(Float delta);
		::Dynamic update_dyn();

		bool isTrackEnd( ::Dynamic track);
		::Dynamic isTrackEnd_dyn();

		bool checkFrameIndex( ::kha::arrays::Uint32ArrayPrivate frameValues);
		::Dynamic checkFrameIndex_dyn();

		void rewind( ::Dynamic track);
		::Dynamic rewind_dyn();

		void updateTrack( ::Dynamic anim);
		::Dynamic updateTrack_dyn();

		void updateAnimSampled( ::Dynamic anim, ::iron::math::Mat4 targetMatrix);
		::Dynamic updateAnimSampled_dyn();

		int lastFrameIndex;
		 ::haxe::ds::StringMap markerEvents;
		void notifyOnMarker(::String name, ::Dynamic onMarker);
		::Dynamic notifyOnMarker_dyn();

		void removeMarker(::String name, ::Dynamic onMarker);
		::Dynamic removeMarker_dyn();

		int currentFrame();
		::Dynamic currentFrame_dyn();

		virtual int totalFrames();
		::Dynamic totalFrames_dyn();

};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_Animation */ 
