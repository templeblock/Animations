// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_object_Tilesheet
#define INCLUDED_iron_object_Tilesheet

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,object,Tilesheet)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES Tilesheet_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Tilesheet_obj OBJ_;
		Tilesheet_obj();

	public:
		enum { _hx_ClassId = 0x43f01686 };

		void __construct(::String sceneName,::String tilesheet_ref,::String tilesheet_action_ref);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.object.Tilesheet")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.object.Tilesheet"); }
		static hx::ObjectPtr< Tilesheet_obj > __new(::String sceneName,::String tilesheet_ref,::String tilesheet_action_ref);
		static hx::ObjectPtr< Tilesheet_obj > __alloc(hx::Ctx *_hx_ctx,::String sceneName,::String tilesheet_ref,::String tilesheet_action_ref);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Tilesheet_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Tilesheet","\x91","\xb0","\x20","\x16"); }

		Float tileX;
		Float tileY;
		 ::Dynamic raw;
		 ::Dynamic action;
		bool ready;
		bool paused;
		int frame;
		Float time;
		 ::Dynamic onActionComplete;
		Dynamic onActionComplete_dyn() { return onActionComplete;}
		void play(::String action_ref, ::Dynamic onActionComplete);
		::Dynamic play_dyn();

		void pause();
		::Dynamic pause_dyn();

		void resume();
		::Dynamic resume_dyn();

		void remove();
		::Dynamic remove_dyn();

		void update();
		::Dynamic update_dyn();

		void setFrame(int f);
		::Dynamic setFrame_dyn();

};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_Tilesheet */ 
