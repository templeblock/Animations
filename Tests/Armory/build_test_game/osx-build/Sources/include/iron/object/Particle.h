// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_object_Particle
#define INCLUDED_iron_object_Particle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_de4ea3a7df512131_256_new)
HX_DECLARE_CLASS2(iron,object,Particle)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES Particle_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Particle_obj OBJ_;
		Particle_obj();

	public:
		enum { _hx_ClassId = 0x0effce69 };

		void __construct(int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.object.Particle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.object.Particle"); }

		hx::ObjectPtr< Particle_obj > __new(int i) {
			hx::ObjectPtr< Particle_obj > __this = new Particle_obj();
			__this->__construct(i);
			return __this;
		}

		static hx::ObjectPtr< Particle_obj > __alloc(hx::Ctx *_hx_ctx,int i) {
			Particle_obj *__this = (Particle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Particle_obj), false, "iron.object.Particle"));
			*(void **)__this = Particle_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_de4ea3a7df512131_256_new)
HXLINE( 260)		( ( ::iron::object::Particle)(__this) )->z = ((Float)0.0);
HXLINE( 259)		( ( ::iron::object::Particle)(__this) )->y = ((Float)0.0);
HXLINE( 258)		( ( ::iron::object::Particle)(__this) )->x = ((Float)0.0);
HXLINE( 262)		( ( ::iron::object::Particle)(__this) )->i = i;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Particle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Particle","\x66","\xfa","\x42","\x46"); }

		int i;
		Float x;
		Float y;
		Float z;
		Float cameraDistance;
};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_Particle */ 
