// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_object_BoneAnimation
#define INCLUDED_iron_object_BoneAnimation

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_object_Animation
#include <iron/object/Animation.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,MeshData)
HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Quat)
HX_DECLARE_CLASS2(iron,math,Vec4)
HX_DECLARE_CLASS2(iron,object,Animation)
HX_DECLARE_CLASS2(iron,object,BoneAnimation)
HX_DECLARE_CLASS2(iron,object,MeshObject)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(kha,arrays,Float32ArrayPrivate)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES BoneAnimation_obj : public  ::iron::object::Animation_obj
{
	public:
		typedef  ::iron::object::Animation_obj super;
		typedef BoneAnimation_obj OBJ_;
		BoneAnimation_obj();

	public:
		enum { _hx_ClassId = 0x6263e191 };

		void __construct(::String __o_armatureName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.object.BoneAnimation")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.object.BoneAnimation"); }
		static hx::ObjectPtr< BoneAnimation_obj > __new(::String __o_armatureName);
		static hx::ObjectPtr< BoneAnimation_obj > __alloc(hx::Ctx *_hx_ctx,::String __o_armatureName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BoneAnimation_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BoneAnimation","\x00","\x13","\x9c","\xa7"); }

		static void __boot();
		static int skinMaxBones;
		static  ::iron::math::Vec4 vpos;
		static  ::iron::math::Vec4 vscl;
		static  ::iron::math::Quat q1;
		static  ::iron::math::Quat q2;
		static  ::iron::math::Vec4 vpos2;
		static  ::iron::math::Vec4 vscl2;
		static  ::iron::math::Mat4 wm;
		 ::iron::object::MeshObject object;
		 ::iron::data::MeshData data;
		 ::kha::arrays::Float32ArrayPrivate skinBuffer;
		::Array< ::Dynamic> skeletonBones;
		::Array< ::Dynamic> skeletonMats;
		::Array< ::Dynamic> skeletonBonesBlend;
		::Array< ::Dynamic> skeletonMatsBlend;
		::Array< ::Dynamic> absMats;
		::Array< bool > applyParent;
		 ::haxe::ds::StringMap boneChildren;
		::Array< ::Dynamic> constraintTargets;
		::Array< ::Dynamic> constraintTargetsI;
		 ::haxe::ds::ObjectMap constraintMats;
		 ::iron::math::Mat4 m;
		 ::iron::math::Mat4 m1;
		 ::iron::math::Mat4 m2;
		 ::iron::math::Mat4 bm;
		 ::iron::math::Vec4 pos;
		 ::iron::math::Vec4 nor;
		void setSkin( ::iron::object::MeshObject mo);
		::Dynamic setSkin_dyn();

		void addBoneChild(::String bone, ::iron::object::Object o);
		::Dynamic addBoneChild_dyn();

		void updateBoneChildren( ::Dynamic bone, ::iron::math::Mat4 bm);
		::Dynamic updateBoneChildren_dyn();

		void setAction(::String action);
		::Dynamic setAction_dyn();

		void setActionBlend(::String action);
		::Dynamic setActionBlend_dyn();

		void play(::String action, ::Dynamic onComplete,hx::Null< Float >  blendTime,hx::Null< Float >  speed,hx::Null< bool >  loop);

		void update(Float delta);

		void updateAnim();
		::Dynamic updateAnim_dyn();

		void updateConstraints();
		::Dynamic updateConstraints_dyn();

		 ::Dynamic onUpdate;
		Dynamic onUpdate_dyn() { return onUpdate;}
		void notifyOnUpdate( ::Dynamic f);
		::Dynamic notifyOnUpdate_dyn();

		void updateBonesOnly();
		::Dynamic updateBonesOnly_dyn();

		void multParent( ::iron::math::Mat4 m, ::Dynamic bone,::Array< ::Dynamic> mats,::Array< ::Dynamic> bones);
		::Dynamic multParent_dyn();

		void multParent2( ::iron::math::Mat4 m, ::Dynamic bone,::Array< ::Dynamic> mats,::Array< ::Dynamic> bones);
		::Dynamic multParent2_dyn();

		void updateSkinGpu();
		::Dynamic updateSkinGpu_dyn();

		void updateSkinBuffer( ::iron::math::Mat4 m,int i);
		::Dynamic updateSkinBuffer_dyn();

		int totalFrames();

		 ::Dynamic getBone(::String name);
		::Dynamic getBone_dyn();

		int getBoneIndex( ::Dynamic bone,::Array< ::Dynamic> bones);
		::Dynamic getBoneIndex_dyn();

		 ::iron::math::Mat4 getBoneMat( ::Dynamic bone);
		::Dynamic getBoneMat_dyn();

		 ::iron::math::Mat4 getBoneMatBlend( ::Dynamic bone);
		::Dynamic getBoneMatBlend_dyn();

		 ::iron::math::Mat4 getAbsMat( ::Dynamic bone);
		::Dynamic getAbsMat_dyn();

		 ::iron::math::Mat4 getWorldMat( ::Dynamic bone);
		::Dynamic getWorldMat_dyn();

		Float getBoneLen( ::Dynamic bone);
		::Dynamic getBoneLen_dyn();

		void solveIK( ::Dynamic effector, ::iron::math::Vec4 goal,hx::Null< Float >  precission,hx::Null< int >  maxIterations);
		::Dynamic solveIK_dyn();

};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_BoneAnimation */ 
