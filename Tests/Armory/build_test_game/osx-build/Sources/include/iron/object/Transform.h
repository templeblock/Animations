// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_object_Transform
#define INCLUDED_iron_object_Transform

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Quat)
HX_DECLARE_CLASS2(iron,math,Vec4)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(iron,object,Transform)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES Transform_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Transform_obj OBJ_;
		Transform_obj();

	public:
		enum { _hx_ClassId = 0x15357341 };

		void __construct( ::iron::object::Object object);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.object.Transform")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.object.Transform"); }
		static hx::ObjectPtr< Transform_obj > __new( ::iron::object::Object object);
		static hx::ObjectPtr< Transform_obj > __alloc(hx::Ctx *_hx_ctx, ::iron::object::Object object);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Transform_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Transform","\x4c","\x0d","\x66","\xe7"); }

		static void __boot();
		static  ::iron::math::Mat4 temp;
		 ::iron::math::Mat4 world;
		bool localOnly;
		 ::iron::math::Mat4 local;
		 ::iron::math::Vec4 loc;
		 ::iron::math::Quat rot;
		 ::iron::math::Vec4 scale;
		bool dirty;
		 ::iron::object::Object object;
		 ::iron::math::Vec4 dim;
		float radius;
		::Array< ::Dynamic> prependMats;
		::Array< ::Dynamic> appendMats;
		 ::iron::math::Mat4 boneParent;
		void reset();
		::Dynamic reset_dyn();

		void update();
		::Dynamic update_dyn();

		void prependMatrix( ::iron::math::Mat4 m);
		::Dynamic prependMatrix_dyn();

		void popPrependMatrix();
		::Dynamic popPrependMatrix_dyn();

		void appendMatrix( ::iron::math::Mat4 m);
		::Dynamic appendMatrix_dyn();

		void popAppendMatrix();
		::Dynamic popAppendMatrix_dyn();

		void composeDelta();
		::Dynamic composeDelta_dyn();

		void buildMatrix();
		::Dynamic buildMatrix_dyn();

		void translate(float x,float y,float z);
		::Dynamic translate_dyn();

		void setMatrix( ::iron::math::Mat4 mat);
		::Dynamic setMatrix_dyn();

		void multMatrix( ::iron::math::Mat4 mat);
		::Dynamic multMatrix_dyn();

		void decompose();
		::Dynamic decompose_dyn();

		void rotate( ::iron::math::Vec4 axis,float f);
		::Dynamic rotate_dyn();

		void setRotation(float x,float y,float z);
		::Dynamic setRotation_dyn();

		void computeRadius();
		::Dynamic computeRadius_dyn();

		void computeDim();
		::Dynamic computeDim_dyn();

		void applyParentInverse();
		::Dynamic applyParentInverse_dyn();

		void applyParent();
		::Dynamic applyParent_dyn();

		 ::iron::math::Mat4 lastWorld;
		bool diff();
		::Dynamic diff_dyn();

		float _eulerX;
		float _eulerY;
		float _eulerZ;
		 ::iron::math::Vec4 look();
		::Dynamic look_dyn();

		 ::iron::math::Vec4 right();
		::Dynamic right_dyn();

		 ::iron::math::Vec4 up();
		::Dynamic up_dyn();

		float worldx();
		::Dynamic worldx_dyn();

		float worldy();
		::Dynamic worldy_dyn();

		float worldz();
		::Dynamic worldz_dyn();

		 ::iron::math::Vec4 dloc;
		 ::iron::math::Quat drot;
		 ::iron::math::Vec4 dscale;
		float _deulerX;
		float _deulerY;
		float _deulerZ;
};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_Transform */ 
