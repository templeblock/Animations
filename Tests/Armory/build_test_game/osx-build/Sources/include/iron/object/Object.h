// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_object_Object
#define INCLUDED_iron_object_Object

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(iron,Trait)
HX_DECLARE_CLASS2(iron,object,Animation)
HX_DECLARE_CLASS2(iron,object,BoneAnimation)
HX_DECLARE_CLASS2(iron,object,Constraint)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(iron,object,Transform)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES Object_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Object_obj OBJ_;
		Object_obj();

	public:
		enum { _hx_ClassId = 0x2a486766 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.object.Object")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.object.Object"); }
		static hx::ObjectPtr< Object_obj > __new();
		static hx::ObjectPtr< Object_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Object_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Object","\xdf","\xf2","\xd3","\x49"); }

		static void __boot();
		static int uidCounter;
		static int seed;
		static Float seededRandom();
		static ::Dynamic seededRandom_dyn();

		int uid;
		Float urandom;
		 ::Dynamic raw;
		::String name;
		 ::iron::object::Transform transform;
		::Array< ::Dynamic> constraints;
		::Array< ::Dynamic> traits;
		 ::iron::object::Object parent;
		::Array< ::Dynamic> children;
		::Array< ::Dynamic> lods;
		 ::iron::object::Animation animation;
		bool visible;
		bool visibleMesh;
		bool visibleShadow;
		bool culled;
		bool culledMesh;
		bool culledShadow;
		 ::haxe::ds::StringMap properties;
		bool isEmpty;
		void addChild( ::iron::object::Object o,hx::Null< bool >  parentInverse);
		::Dynamic addChild_dyn();

		void removeChild( ::iron::object::Object o,hx::Null< bool >  keepTransform);
		::Dynamic removeChild_dyn();

		virtual void remove();
		::Dynamic remove_dyn();

		 ::iron::object::Object getChild(::String name);
		::Dynamic getChild_dyn();

		 ::iron::object::Object getChildOfType(hx::Class type);
		::Dynamic getChildOfType_dyn();

		void addTrait( ::iron::Trait t);
		::Dynamic addTrait_dyn();

		void removeTrait( ::iron::Trait t);
		::Dynamic removeTrait_dyn();

		 ::Dynamic getTrait(hx::Class c);
		::Dynamic getTrait_dyn();

		 ::iron::object::BoneAnimation getParentArmature(::String name);
		::Dynamic getParentArmature_dyn();

		virtual void setupAnimation(::Array< ::Dynamic> oactions);
		::Dynamic setupAnimation_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_Object */ 
