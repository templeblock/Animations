// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_object_CameraObject
#define INCLUDED_iron_object_CameraObject

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
HX_DECLARE_CLASS2(iron,data,CameraData)
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Quat)
HX_DECLARE_CLASS2(iron,math,Vec4)
HX_DECLARE_CLASS2(iron,object,CameraObject)
HX_DECLARE_CLASS2(iron,object,FrustumPlane)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(iron,object,Transform)
HX_DECLARE_CLASS2(kha,graphics4,Graphics)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES CameraObject_obj : public  ::iron::object::Object_obj
{
	public:
		typedef  ::iron::object::Object_obj super;
		typedef CameraObject_obj OBJ_;
		CameraObject_obj();

	public:
		enum { _hx_ClassId = 0x284f908f };

		void __construct( ::iron::data::CameraData data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.object.CameraObject")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.object.CameraObject"); }
		static hx::ObjectPtr< CameraObject_obj > __new( ::iron::data::CameraData data);
		static hx::ObjectPtr< CameraObject_obj > __alloc(hx::Ctx *_hx_ctx, ::iron::data::CameraData data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CameraObject_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("CameraObject","\x64","\x8f","\x40","\xa6"); }

		static void __boot();
		static  ::iron::math::Vec4 temp;
		static void buildViewFrustum( ::iron::math::Mat4 VP,::Array< ::Dynamic> frustumPlanes);
		static ::Dynamic buildViewFrustum_dyn();

		static  ::iron::math::Vec4 sphereCenter;
		static bool sphereInFrustum(::Array< ::Dynamic> frustumPlanes, ::iron::object::Transform t,hx::Null< Float >  radiusScale,hx::Null< Float >  offsetX,hx::Null< Float >  offsetY,hx::Null< Float >  offsetZ);
		static ::Dynamic sphereInFrustum_dyn();

		static  ::iron::math::Quat q;
		 ::iron::data::CameraData data;
		 ::iron::math::Mat4 P;
		 ::iron::math::Mat4 V;
		 ::iron::math::Mat4 prevV;
		 ::iron::math::Mat4 VP;
		::Array< ::Dynamic> frustumPlanes;
		float nearPlane;
		float farPlane;
		void buildProjection();
		::Dynamic buildProjection_dyn();

		void remove();

		void renderFrame(::Dynamic g);
		::Dynamic renderFrame_dyn();

		void buildMatrix();
		::Dynamic buildMatrix_dyn();

		void rotate( ::iron::math::Vec4 axis,Float f);
		::Dynamic rotate_dyn();

		void move( ::iron::math::Vec4 axis,hx::Null< Float >  f);
		::Dynamic move_dyn();

		 ::iron::math::Vec4 right();
		::Dynamic right_dyn();

		 ::iron::math::Vec4 up();
		::Dynamic up_dyn();

		 ::iron::math::Vec4 look();
		::Dynamic look_dyn();

		 ::iron::math::Vec4 rightWorld();
		::Dynamic rightWorld_dyn();

		 ::iron::math::Vec4 upWorld();
		::Dynamic upWorld_dyn();

		 ::iron::math::Vec4 lookWorld();
		::Dynamic lookWorld_dyn();

		virtual ::String toString();

};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_CameraObject */ 
