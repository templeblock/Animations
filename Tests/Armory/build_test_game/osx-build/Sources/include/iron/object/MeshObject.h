// Generated by Haxe 3.4.4
#ifndef INCLUDED_iron_object_MeshObject
#define INCLUDED_iron_object_MeshObject

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,MaterialContext)
HX_DECLARE_CLASS2(iron,data,MaterialData)
HX_DECLARE_CLASS2(iron,data,MeshData)
HX_DECLARE_CLASS2(iron,data,ShaderContext)
HX_DECLARE_CLASS2(iron,object,CameraObject)
HX_DECLARE_CLASS2(iron,object,LampObject)
HX_DECLARE_CLASS2(iron,object,MeshObject)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(iron,object,ParticleSystem)
HX_DECLARE_CLASS2(iron,object,Tilesheet)
HX_DECLARE_CLASS2(kha,graphics4,Graphics)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES MeshObject_obj : public  ::iron::object::Object_obj
{
	public:
		typedef  ::iron::object::Object_obj super;
		typedef MeshObject_obj OBJ_;
		MeshObject_obj();

	public:
		enum { _hx_ClassId = 0x50b0b4b3 };

		void __construct( ::iron::data::MeshData data,::Array< ::Dynamic> materials);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.object.MeshObject")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.object.MeshObject"); }
		static hx::ObjectPtr< MeshObject_obj > __new( ::iron::data::MeshData data,::Array< ::Dynamic> materials);
		static hx::ObjectPtr< MeshObject_obj > __alloc(hx::Ctx *_hx_ctx, ::iron::data::MeshData data,::Array< ::Dynamic> materials);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MeshObject_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MeshObject","\xac","\xf0","\xd9","\xef"); }

		 ::iron::data::MeshData data;
		::Array< ::Dynamic> materials;
		::Array< ::Dynamic> particleSystems;
		::Array< ::Dynamic> particleChildren;
		 ::iron::object::MeshObject particleOwner;
		int particleIndex;
		Float cameraDistance;
		Float screenSize;
		bool frustumCulling;
		 ::iron::object::Tilesheet tilesheet;
		void setData( ::iron::data::MeshData data);
		::Dynamic setData_dyn();

		void remove();

		void setupAnimation(::Array< ::Dynamic> oactions);

		void setupParticleSystem(::String sceneName, ::Dynamic pref);
		::Dynamic setupParticleSystem_dyn();

		void setupTilesheet(::String sceneName,::String tilesheet_ref,::String tilesheet_action_ref);
		::Dynamic setupTilesheet_dyn();

		bool isLodMaterial();
		::Dynamic isLodMaterial_dyn();

		bool setCulled(bool isShadow,bool b);
		::Dynamic setCulled_dyn();

		bool cullMaterial(::String context);
		::Dynamic cullMaterial_dyn();

		bool cullMesh(::String context, ::iron::object::CameraObject camera, ::iron::object::LampObject lamp);
		::Dynamic cullMesh_dyn();

		bool skipContext(::String context);
		::Dynamic skipContext_dyn();

		void getContexts(::String context,::Array< ::Dynamic> materials,::Array< ::Dynamic> materialContexts,::Array< ::Dynamic> shaderContexts);
		::Dynamic getContexts_dyn();

		void render(::Dynamic g,::String context, ::iron::object::CameraObject camera, ::iron::object::LampObject lamp,::Array< ::String > bindParams);
		::Dynamic render_dyn();

		void renderBatch(::Dynamic g,::String context, ::iron::object::CameraObject camera, ::iron::object::LampObject lamp,::Array< ::String > bindParams,hx::Null< int >  start,hx::Null< int >  count);
		::Dynamic renderBatch_dyn();

		bool validContext( ::iron::data::MaterialData mat,::String context);
		::Dynamic validContext_dyn();

		void computeCameraDistance(Float camX,Float camY,Float camZ);
		::Dynamic computeCameraDistance_dyn();

		void computeScreenSize( ::iron::object::CameraObject camera);
		::Dynamic computeScreenSize_dyn();

		void initLods();
		::Dynamic initLods_dyn();

		virtual ::String toString();

};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_MeshObject */ 
