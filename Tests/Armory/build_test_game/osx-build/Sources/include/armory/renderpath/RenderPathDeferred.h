// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_renderpath_RenderPathDeferred
#define INCLUDED_armory_renderpath_RenderPathDeferred

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(armory,renderpath,RenderPathDeferred)
HX_DECLARE_CLASS1(iron,RenderPath)

namespace armory{
namespace renderpath{


class HXCPP_CLASS_ATTRIBUTES RenderPathDeferred_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef RenderPathDeferred_obj OBJ_;
		RenderPathDeferred_obj();

	public:
		enum { _hx_ClassId = 0x1f4f148f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="armory.renderpath.RenderPathDeferred")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"armory.renderpath.RenderPathDeferred"); }

		hx::ObjectPtr< RenderPathDeferred_obj > __new() {
			hx::ObjectPtr< RenderPathDeferred_obj > __this = new RenderPathDeferred_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< RenderPathDeferred_obj > __alloc(hx::Ctx *_hx_ctx) {
			RenderPathDeferred_obj *__this = (RenderPathDeferred_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RenderPathDeferred_obj), false, "armory.renderpath.RenderPathDeferred"));
			*(void **)__this = RenderPathDeferred_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~RenderPathDeferred_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("RenderPathDeferred","\x7a","\xd2","\x22","\x3e"); }

		static  ::iron::RenderPath path;
		static void init( ::iron::RenderPath _path);
		static ::Dynamic init_dyn();

		static void commands();
		static ::Dynamic commands_dyn();

};

} // end namespace armory
} // end namespace renderpath

#endif /* INCLUDED_armory_renderpath_RenderPathDeferred */ 
