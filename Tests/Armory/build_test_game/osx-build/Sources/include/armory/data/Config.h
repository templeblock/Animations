// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_data_Config
#define INCLUDED_armory_data_Config

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(armory,data,Config)

namespace armory{
namespace data{


class HXCPP_CLASS_ATTRIBUTES Config_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Config_obj OBJ_;
		Config_obj();

	public:
		enum { _hx_ClassId = 0x0666758a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="armory.data.Config")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"armory.data.Config"); }

		hx::ObjectPtr< Config_obj > __new() {
			hx::ObjectPtr< Config_obj > __this = new Config_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Config_obj > __alloc(hx::Ctx *_hx_ctx) {
			Config_obj *__this = (Config_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Config_obj), false, "armory.data.Config"));
			*(void **)__this = Config_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Config_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Config","\xe2","\xca","\x66","\xfc"); }

		static void __boot();
		static  ::Dynamic raw;
		static void load( ::Dynamic done);
		static ::Dynamic load_dyn();

		static void save();
		static ::Dynamic save_dyn();

		static void reset();
		static ::Dynamic reset_dyn();

};

} // end namespace armory
} // end namespace data

#endif /* INCLUDED_armory_data_Config */ 
