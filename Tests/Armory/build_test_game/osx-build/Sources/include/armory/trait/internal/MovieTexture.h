// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_trait_internal_MovieTexture
#define INCLUDED_armory_trait_internal_MovieTexture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
HX_DECLARE_CLASS3(armory,trait,internal,MovieTexture)
HX_DECLARE_CLASS1(iron,Trait)
HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Image)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS1(kha,Video)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace armory{
namespace trait{
namespace internal{


class HXCPP_CLASS_ATTRIBUTES MovieTexture_obj : public  ::iron::Trait_obj
{
	public:
		typedef  ::iron::Trait_obj super;
		typedef MovieTexture_obj OBJ_;
		MovieTexture_obj();

	public:
		enum { _hx_ClassId = 0x3b8f30f8 };

		void __construct(::String videoName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="armory.trait.internal.MovieTexture")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"armory.trait.internal.MovieTexture"); }
		static hx::ObjectPtr< MovieTexture_obj > __new(::String videoName);
		static hx::ObjectPtr< MovieTexture_obj > __alloc(hx::Ctx *_hx_ctx,::String videoName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MovieTexture_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MovieTexture","\x2b","\xc3","\x74","\xcb"); }

		static void __boot();
		static  ::kha::Image image;
		static bool created;
		 ::kha::Video video;
		::String videoName;
		int pow(int pow);
		::Dynamic pow_dyn();

		int getPower2(int i);
		::Dynamic getPower2_dyn();

		void init();
		::Dynamic init_dyn();

		void render( ::kha::graphics2::Graphics g);
		::Dynamic render_dyn();

};

} // end namespace armory
} // end namespace trait
} // end namespace internal

#endif /* INCLUDED_armory_trait_internal_MovieTexture */ 
