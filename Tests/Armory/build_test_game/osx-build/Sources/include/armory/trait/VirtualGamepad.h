// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_trait_VirtualGamepad
#define INCLUDED_armory_trait_VirtualGamepad

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
HX_DECLARE_CLASS2(armory,trait,VirtualGamepad)
HX_DECLARE_CLASS1(iron,Trait)
HX_DECLARE_CLASS2(iron,_hx_system,Gamepad)
HX_DECLARE_CLASS2(iron,_hx_system,VirtualInput)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace armory{
namespace trait{


class HXCPP_CLASS_ATTRIBUTES VirtualGamepad_obj : public  ::iron::Trait_obj
{
	public:
		typedef  ::iron::Trait_obj super;
		typedef VirtualGamepad_obj OBJ_;
		VirtualGamepad_obj();

	public:
		enum { _hx_ClassId = 0x3ee9efea };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="armory.trait.VirtualGamepad")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"armory.trait.VirtualGamepad"); }
		static hx::ObjectPtr< VirtualGamepad_obj > __new();
		static hx::ObjectPtr< VirtualGamepad_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~VirtualGamepad_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("VirtualGamepad","\xf6","\xa5","\xd5","\xf5"); }

		 ::iron::_hx_system::Gamepad gamepad;
		int leftPadX;
		int leftPadY;
		int rightPadX;
		int rightPadY;
		int leftStickX;
		int leftStickXLast;
		int leftStickY;
		int leftStickYLast;
		int rightStickX;
		int rightStickXLast;
		int rightStickY;
		int rightStickYLast;
		bool leftLocked;
		bool rightLocked;
		int r;
		int o;
		void update();
		::Dynamic update_dyn();

		void render2D( ::kha::graphics2::Graphics g);
		::Dynamic render2D_dyn();

};

} // end namespace armory
} // end namespace trait

#endif /* INCLUDED_armory_trait_VirtualGamepad */ 
