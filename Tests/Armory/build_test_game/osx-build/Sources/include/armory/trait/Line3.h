// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_trait_Line3
#define INCLUDED_armory_trait_Line3

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(armory,trait,Line3)
HX_DECLARE_CLASS2(iron,math,Vec4)

namespace armory{
namespace trait{


class HXCPP_CLASS_ATTRIBUTES Line3_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Line3_obj OBJ_;
		Line3_obj();

	public:
		enum { _hx_ClassId = 0x35101c8f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="armory.trait.Line3")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"armory.trait.Line3"); }
		static hx::ObjectPtr< Line3_obj > __new();
		static hx::ObjectPtr< Line3_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Line3_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Line3","\x9f","\x4d","\x2f","\x08"); }

		 ::iron::math::Vec4 start;
		 ::iron::math::Vec4 end;
		 ::iron::math::Vec4 delta( ::iron::math::Vec4 result);
		::Dynamic delta_dyn();

};

} // end namespace armory
} // end namespace trait

#endif /* INCLUDED_armory_trait_Line3 */ 
