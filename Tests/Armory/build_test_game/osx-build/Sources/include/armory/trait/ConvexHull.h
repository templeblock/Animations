// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_trait_ConvexHull
#define INCLUDED_armory_trait_ConvexHull

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(armory,trait,ConvexHull)
HX_DECLARE_CLASS2(armory,trait,Face3)
HX_DECLARE_CLASS2(iron,math,Vec4)

namespace armory{
namespace trait{


class HXCPP_CLASS_ATTRIBUTES ConvexHull_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ConvexHull_obj OBJ_;
		ConvexHull_obj();

	public:
		enum { _hx_ClassId = 0x62107de8 };

		void __construct(::Array< ::Dynamic> vertices);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="armory.trait.ConvexHull")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"armory.trait.ConvexHull"); }
		static hx::ObjectPtr< ConvexHull_obj > __new(::Array< ::Dynamic> vertices);
		static hx::ObjectPtr< ConvexHull_obj > __alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> vertices);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ConvexHull_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ConvexHull","\xf4","\x3d","\xcd","\x32"); }

		::Array< ::Dynamic> faces;
		::Array< ::Dynamic> face3s;
		::Array< ::Dynamic> vertices;
		 ::iron::math::Vec4 cb;
		 ::iron::math::Vec4 ab;
		void computeFaceNormals();
		::Dynamic computeFaceNormals_dyn();

		void addPoint(int vertexId,::Array< ::Dynamic> vertices);
		::Dynamic addPoint_dyn();

		bool visible(::Array< int > face, ::iron::math::Vec4 vertex,::Array< ::Dynamic> vertices);
		::Dynamic visible_dyn();

		 ::iron::math::Vec4 normal( ::iron::math::Vec4 va, ::iron::math::Vec4 vb, ::iron::math::Vec4 vc);
		::Dynamic normal_dyn();

		bool equalEdge(::Array< int > ea,::Array< int > eb);
		::Dynamic equalEdge_dyn();

		Float randomOffset();
		::Dynamic randomOffset_dyn();

};

} // end namespace armory
} // end namespace trait

#endif /* INCLUDED_armory_trait_ConvexHull */ 
