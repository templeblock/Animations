// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_trait_Face3
#define INCLUDED_armory_trait_Face3

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(armory,trait,Face3)
HX_DECLARE_CLASS2(iron,math,Vec4)

namespace armory{
namespace trait{


class HXCPP_CLASS_ATTRIBUTES Face3_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Face3_obj OBJ_;
		Face3_obj();

	public:
		enum { _hx_ClassId = 0x54628962 };

		void __construct(int a,int b,int c);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="armory.trait.Face3")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"armory.trait.Face3"); }
		static hx::ObjectPtr< Face3_obj > __new(int a,int b,int c);
		static hx::ObjectPtr< Face3_obj > __alloc(hx::Ctx *_hx_ctx,int a,int b,int c);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Face3_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Face3","\xd6","\xc4","\x75","\x8e"); }

		int a;
		int b;
		int c;
		 ::iron::math::Vec4 normal;
};

} // end namespace armory
} // end namespace trait

#endif /* INCLUDED_armory_trait_Face3 */ 
