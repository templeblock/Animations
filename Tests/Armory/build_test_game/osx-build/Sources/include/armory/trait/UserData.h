// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_trait_UserData
#define INCLUDED_armory_trait_UserData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_441641a89fa67cf1_569_new)
HX_DECLARE_CLASS2(armory,trait,Face3)
HX_DECLARE_CLASS2(armory,trait,UserData)
HX_DECLARE_CLASS2(iron,math,Vec4)

namespace armory{
namespace trait{


class HXCPP_CLASS_ATTRIBUTES UserData_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef UserData_obj OBJ_;
		UserData_obj();

	public:
		enum { _hx_ClassId = 0x7ec9ed29 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="armory.trait.UserData")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"armory.trait.UserData"); }

		hx::ObjectPtr< UserData_obj > __new() {
			hx::ObjectPtr< UserData_obj > __this = new UserData_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< UserData_obj > __alloc(hx::Ctx *_hx_ctx) {
			UserData_obj *__this = (UserData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(UserData_obj), true, "armory.trait.UserData"));
			*(void **)__this = UserData_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_441641a89fa67cf1_569_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~UserData_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("UserData","\x35","\x52","\xda","\xde"); }

		Float mass;
		 ::iron::math::Vec4 velocity;
		 ::iron::math::Vec4 angularVelocity;
		bool breakable;
		::Array< ::Dynamic> vertices;
		::Array< ::Dynamic> faces;
};

} // end namespace armory
} // end namespace trait

#endif /* INCLUDED_armory_trait_UserData */ 
