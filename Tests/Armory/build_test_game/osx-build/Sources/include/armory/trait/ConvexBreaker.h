// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_trait_ConvexBreaker
#define INCLUDED_armory_trait_ConvexBreaker

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(armory,trait,ConvexBreaker)
HX_DECLARE_CLASS2(armory,trait,CutResult)
HX_DECLARE_CLASS2(armory,trait,Line3)
HX_DECLARE_CLASS2(armory,trait,Plane)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,MeshData)
HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Vec4)
HX_DECLARE_CLASS2(iron,object,MeshObject)
HX_DECLARE_CLASS2(iron,object,Object)

namespace armory{
namespace trait{


class HXCPP_CLASS_ATTRIBUTES ConvexBreaker_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ConvexBreaker_obj OBJ_;
		ConvexBreaker_obj();

	public:
		enum { _hx_ClassId = 0x45a066b1 };

		void __construct(hx::Null< Float >  __o_minSizeForBreak,hx::Null< Float >  __o_smallDelta);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="armory.trait.ConvexBreaker")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"armory.trait.ConvexBreaker"); }
		static hx::ObjectPtr< ConvexBreaker_obj > __new(hx::Null< Float >  __o_minSizeForBreak,hx::Null< Float >  __o_smallDelta);
		static hx::ObjectPtr< ConvexBreaker_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_minSizeForBreak,hx::Null< Float >  __o_smallDelta);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ConvexBreaker_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ConvexBreaker","\x25","\x36","\x4a","\x83"); }

		static void __boot();
		static int meshIndex;
		Float minSizeForBreak;
		Float smallDelta;
		 ::armory::trait::Line3 tempLine;
		 ::armory::trait::Plane tempPlane;
		 ::armory::trait::Plane tempPlane2;
		 ::iron::math::Vec4 tempCM1;
		 ::iron::math::Vec4 tempCM2;
		 ::iron::math::Vec4 tempVec4;
		 ::iron::math::Vec4 tempVec42;
		 ::iron::math::Vec4 tempVec43;
		 ::armory::trait::CutResult tempCutResult;
		::Array< bool > segments;
		 ::haxe::ds::ObjectMap userDataMap;
		void initBreakableObject( ::iron::object::MeshObject object,Float mass, ::iron::math::Vec4 velocity, ::iron::math::Vec4 angularVelocity,bool breakable);
		::Dynamic initBreakableObject_dyn();

		::Array< ::Dynamic> subdivideByImpact( ::iron::object::MeshObject object, ::iron::math::Vec4 pointOfImpact, ::iron::math::Vec4 normal,int maxRadialIterations,int maxRandomIterations);
		::Dynamic subdivideByImpact_dyn();

		 ::iron::math::Vec4 transformFreeVector( ::iron::math::Vec4 v, ::iron::math::Mat4 m);
		::Dynamic transformFreeVector_dyn();

		 ::iron::math::Vec4 transformFreeVectorInverse( ::iron::math::Vec4 v, ::iron::math::Mat4 m);
		::Dynamic transformFreeVectorInverse_dyn();

		 ::iron::math::Vec4 transformTiedVectorInverse( ::iron::math::Vec4 v, ::iron::math::Mat4 m);
		::Dynamic transformTiedVectorInverse_dyn();

		void transformPlaneToLocalSpace( ::armory::trait::Plane plane, ::iron::math::Mat4 m, ::armory::trait::Plane resultPlane);
		::Dynamic transformPlaneToLocalSpace_dyn();

		int cutByPlane( ::iron::object::MeshObject object, ::armory::trait::Plane plane, ::armory::trait::CutResult output);
		::Dynamic cutByPlane_dyn();

		 ::iron::data::MeshData makeMeshData(::Array< ::Dynamic> points);
		::Dynamic makeMeshData_dyn();

};

} // end namespace armory
} // end namespace trait

#endif /* INCLUDED_armory_trait_ConvexBreaker */ 
