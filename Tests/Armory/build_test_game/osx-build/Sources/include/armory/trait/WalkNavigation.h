// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_trait_WalkNavigation
#define INCLUDED_armory_trait_WalkNavigation

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
HX_DECLARE_CLASS2(armory,trait,WalkNavigation)
HX_DECLARE_CLASS1(iron,Trait)
HX_DECLARE_CLASS2(iron,math,Vec4)
HX_DECLARE_CLASS2(iron,object,CameraObject)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(iron,_hx_system,Gamepad)
HX_DECLARE_CLASS2(iron,_hx_system,Keyboard)
HX_DECLARE_CLASS2(iron,_hx_system,Mouse)
HX_DECLARE_CLASS2(iron,_hx_system,VirtualInput)

namespace armory{
namespace trait{


class HXCPP_CLASS_ATTRIBUTES WalkNavigation_obj : public  ::iron::Trait_obj
{
	public:
		typedef  ::iron::Trait_obj super;
		typedef WalkNavigation_obj OBJ_;
		WalkNavigation_obj();

	public:
		enum { _hx_ClassId = 0x1fedb765 };

		void __construct(hx::Null< bool >  __o_easing);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="armory.trait.WalkNavigation")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"armory.trait.WalkNavigation"); }
		static hx::ObjectPtr< WalkNavigation_obj > __new(hx::Null< bool >  __o_easing);
		static hx::ObjectPtr< WalkNavigation_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< bool >  __o_easing);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~WalkNavigation_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("WalkNavigation","\x1d","\xd2","\xe4","\x75"); }

		static void __boot();
		static bool enabled;
		static Float speed;
		static ::String keyUp;
		static ::String keyDown;
		static ::String keyLeft;
		static ::String keyRight;
		static ::String keyStrafeUp;
		static ::String keyStrafeDown;
		 ::iron::math::Vec4 dir;
		 ::iron::math::Vec4 xvec;
		 ::iron::math::Vec4 yvec;
		bool easing;
		Float ease;
		 ::iron::object::CameraObject camera;
		 ::iron::_hx_system::Keyboard keyboard;
		 ::iron::_hx_system::Gamepad gamepad;
		 ::iron::_hx_system::Mouse mouse;
		void init();
		::Dynamic init_dyn();

		void update();
		::Dynamic update_dyn();

};

} // end namespace armory
} // end namespace trait

#endif /* INCLUDED_armory_trait_WalkNavigation */ 
