// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_system_Event
#define INCLUDED_armory_system_Event

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(armory,_hx_system,Event)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace armory{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES Event_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Event_obj OBJ_;
		Event_obj();

	public:
		enum { _hx_ClassId = 0x33b330ad };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="armory.system.Event")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"armory.system.Event"); }

		hx::ObjectPtr< Event_obj > __new() {
			hx::ObjectPtr< Event_obj > __this = new Event_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Event_obj > __alloc(hx::Ctx *_hx_ctx) {
			Event_obj *__this = (Event_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Event_obj), false, "armory.system.Event"));
			*(void **)__this = Event_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Event_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Event","\xfa","\x37","\xf2","\x08"); }

		static void __boot();
		static  ::haxe::ds::StringMap events;
		static void send(::String name,hx::Null< int >  mask);
		static ::Dynamic send_dyn();

		static ::Array< ::Dynamic> get(::String name);
		static ::Dynamic get_dyn();

		static  ::Dynamic add(::String name, ::Dynamic onEvent,hx::Null< int >  mask);
		static ::Dynamic add_dyn();

		static void remove(::String name);
		static ::Dynamic remove_dyn();

		static void removeListener( ::Dynamic event);
		static ::Dynamic removeListener_dyn();

};

} // end namespace armory
} // end namespace system

#endif /* INCLUDED_armory_system_Event */ 
