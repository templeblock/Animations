// Generated by Haxe 3.4.4
#ifndef INCLUDED_armory_logicnode_MaterialNode
#define INCLUDED_armory_logicnode_MaterialNode

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
HX_DECLARE_CLASS2(armory,logicnode,LogicNode)
HX_DECLARE_CLASS2(armory,logicnode,LogicTree)
HX_DECLARE_CLASS2(armory,logicnode,MaterialNode)
HX_DECLARE_CLASS1(iron,Trait)
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,MaterialData)

namespace armory{
namespace logicnode{


class HXCPP_CLASS_ATTRIBUTES MaterialNode_obj : public  ::armory::logicnode::LogicNode_obj
{
	public:
		typedef  ::armory::logicnode::LogicNode_obj super;
		typedef MaterialNode_obj OBJ_;
		MaterialNode_obj();

	public:
		enum { _hx_ClassId = 0x7ed7699f };

		void __construct( ::armory::logicnode::LogicTree tree);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="armory.logicnode.MaterialNode")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"armory.logicnode.MaterialNode"); }
		static hx::ObjectPtr< MaterialNode_obj > __new( ::armory::logicnode::LogicTree tree);
		static hx::ObjectPtr< MaterialNode_obj > __alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MaterialNode_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MaterialNode","\x69","\xbe","\x63","\xa8"); }

		::String property0;
		 ::iron::data::MaterialData value;
		 ::Dynamic get(int from);

		void set( ::Dynamic value);

};

} // end namespace armory
} // end namespace logicnode

#endif /* INCLUDED_armory_logicnode_MaterialNode */ 
