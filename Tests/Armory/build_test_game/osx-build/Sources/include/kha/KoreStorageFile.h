// Generated by Haxe 3.4.4
#ifndef INCLUDED_kha_KoreStorageFile
#define INCLUDED_kha_KoreStorageFile

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_kha_StorageFile
#include <kha/StorageFile.h>
#endif
HX_DECLARE_CLASS1(kha,KoreStorageFile)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS1(kha,StorageFile)
HX_DECLARE_CLASS2(kha,internal,BytesBlob)


#include <Kore/pch.h>
#include <Kore/IO/FileReader.h>
#include <Kore/IO/FileWriter.h>

namespace kha{


class HXCPP_CLASS_ATTRIBUTES KoreStorageFile_obj : public  ::kha::StorageFile_obj
{
	public:
		typedef  ::kha::StorageFile_obj super;
		typedef KoreStorageFile_obj OBJ_;
		KoreStorageFile_obj();

	public:
		enum { _hx_ClassId = 0x32e6bd20 };

		void __construct(::String name);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.KoreStorageFile")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.KoreStorageFile"); }
		static hx::ObjectPtr< KoreStorageFile_obj > __new(::String name);
		static hx::ObjectPtr< KoreStorageFile_obj > __alloc(hx::Ctx *_hx_ctx,::String name);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~KoreStorageFile_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("KoreStorageFile","\x20","\x42","\x8d","\x2e"); }

		static  ::kha::internal::BytesBlob createBlob(int size);
		static ::Dynamic createBlob_dyn();

		static void unused();
		static ::Dynamic unused_dyn();

		::String name;
		 ::kha::internal::BytesBlob read();

		void writeInternal( ::kha::internal::BytesBlob data);
		::Dynamic writeInternal_dyn();

		void write( ::kha::internal::BytesBlob data);

};

} // end namespace kha

#endif /* INCLUDED_kha_KoreStorageFile */ 
