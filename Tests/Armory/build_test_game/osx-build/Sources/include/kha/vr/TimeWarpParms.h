// Generated by Haxe 3.4.4
#ifndef INCLUDED_kha_vr_TimeWarpParms
#define INCLUDED_kha_vr_TimeWarpParms

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_bd2a04d5a17b873f_53_new)
HX_DECLARE_CLASS2(kha,vr,TimeWarpImage)
HX_DECLARE_CLASS2(kha,vr,TimeWarpParms)

namespace kha{
namespace vr{


class HXCPP_CLASS_ATTRIBUTES TimeWarpParms_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TimeWarpParms_obj OBJ_;
		TimeWarpParms_obj();

	public:
		enum { _hx_ClassId = 0x52284ed2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.vr.TimeWarpParms")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.vr.TimeWarpParms"); }

		hx::ObjectPtr< TimeWarpParms_obj > __new() {
			hx::ObjectPtr< TimeWarpParms_obj > __this = new TimeWarpParms_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< TimeWarpParms_obj > __alloc(hx::Ctx *_hx_ctx) {
			TimeWarpParms_obj *__this = (TimeWarpParms_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TimeWarpParms_obj), true, "kha.vr.TimeWarpParms"));
			*(void **)__this = TimeWarpParms_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_bd2a04d5a17b873f_53_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TimeWarpParms_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TimeWarpParms","\xb2","\x4d","\xf4","\x8f"); }

		 ::kha::vr::TimeWarpImage LeftImage;
		 ::kha::vr::TimeWarpImage RightImage;
		 ::kha::vr::TimeWarpImage LeftOverlay;
		 ::kha::vr::TimeWarpImage RightOverlay;
};

} // end namespace kha
} // end namespace vr

#endif /* INCLUDED_kha_vr_TimeWarpParms */ 
