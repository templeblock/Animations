// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_object_Tilesheet
#include <iron/object/Tilesheet.h>
#endif
#ifndef INCLUDED_iron_system_Time
#include <iron/system/Time.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0935cc83d484f852_23_new,"iron.object.Tilesheet","new",0x2c9804fa,"iron.object.Tilesheet.new","iron/object/Tilesheet.hx",23,0x5d2259d6)
HX_DEFINE_STACK_FRAME(_hx_pos_0935cc83d484f852_6_new,"iron.object.Tilesheet","new",0x2c9804fa,"iron.object.Tilesheet.new","iron/object/Tilesheet.hx",6,0x5d2259d6)
HX_LOCAL_STACK_FRAME(_hx_pos_0935cc83d484f852_34_play,"iron.object.Tilesheet","play",0xd9c4001a,"iron.object.Tilesheet.play","iron/object/Tilesheet.hx",34,0x5d2259d6)
HX_LOCAL_STACK_FRAME(_hx_pos_0935cc83d484f852_42_pause,"iron.object.Tilesheet","pause",0xaa85e610,"iron.object.Tilesheet.pause","iron/object/Tilesheet.hx",42,0x5d2259d6)
HX_LOCAL_STACK_FRAME(_hx_pos_0935cc83d484f852_46_resume,"iron.object.Tilesheet","resume",0xa3a39153,"iron.object.Tilesheet.resume","iron/object/Tilesheet.hx",46,0x5d2259d6)
HX_LOCAL_STACK_FRAME(_hx_pos_0935cc83d484f852_49_remove,"iron.object.Tilesheet","remove",0x9fa7c3ea,"iron.object.Tilesheet.remove","iron/object/Tilesheet.hx",49,0x5d2259d6)
HX_LOCAL_STACK_FRAME(_hx_pos_0935cc83d484f852_53_update,"iron.object.Tilesheet","update",0x2224adaf,"iron.object.Tilesheet.update","iron/object/Tilesheet.hx",53,0x5d2259d6)
HX_LOCAL_STACK_FRAME(_hx_pos_0935cc83d484f852_64_setFrame,"iron.object.Tilesheet","setFrame",0x13acbe51,"iron.object.Tilesheet.setFrame","iron/object/Tilesheet.hx",64,0x5d2259d6)
namespace iron{
namespace object{

void Tilesheet_obj::__construct(::String sceneName,::String tilesheet_ref,::String tilesheet_action_ref){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::iron::object::Tilesheet,_gthis,::String,tilesheet_ref,::String,tilesheet_action_ref) HXARGC(1)
            		void _hx_run( ::Dynamic format){
            			HX_STACKFRAME(&_hx_pos_0935cc83d484f852_23_new)
HXLINE(  23)			int _g = (int)0;
HXDLIN(  23)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(format->__Field(HX_("tilesheet_datas",bb,41,50,2d),hx::paccDynamic)) );
HXDLIN(  23)			while((_g < _g1->length)){
HXLINE(  23)				 ::Dynamic ts = _g1->__get(_g);
HXDLIN(  23)				_g = (_g + (int)1);
HXLINE(  24)				if ((( (::String)(ts->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == tilesheet_ref)) {
HXLINE(  25)					_gthis->raw = ts;
HXLINE(  26)					_gthis->play(tilesheet_action_ref,null());
HXLINE(  27)					_gthis->ready = true;
HXLINE(  28)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_0935cc83d484f852_6_new)
HXLINE(  18)		this->onActionComplete = null();
HXLINE(  17)		this->time = ((Float)0.0);
HXLINE(  16)		this->frame = (int)0;
HXLINE(  15)		this->paused = false;
HXLINE(  12)		this->action = null();
HXLINE(   9)		this->tileY = ((Float)0.0);
HXLINE(   8)		this->tileX = ((Float)0.0);
HXLINE(  20)		 ::iron::object::Tilesheet _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  21)		this->ready = false;
HXLINE(  22)		::iron::data::Data_obj::getSceneRaw(sceneName, ::Dynamic(new _hx_Closure_0(_gthis,tilesheet_ref,tilesheet_action_ref)));
            	}

Dynamic Tilesheet_obj::__CreateEmpty() { return new Tilesheet_obj; }

void *Tilesheet_obj::_hx_vtable = 0;

Dynamic Tilesheet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tilesheet_obj > _hx_result = new Tilesheet_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Tilesheet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x43f01686;
}

void Tilesheet_obj::play(::String action_ref, ::Dynamic onActionComplete){
            	HX_STACKFRAME(&_hx_pos_0935cc83d484f852_34_play)
HXLINE(  35)		this->onActionComplete = onActionComplete;
HXLINE(  36)		{
HXLINE(  36)			int _g = (int)0;
HXDLIN(  36)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->raw->__Field(HX_("actions",fd,03,2e,67),hx::paccDynamic)) );
HXDLIN(  36)			while((_g < _g1->length)){
HXLINE(  36)				 ::Dynamic a = _g1->__get(_g);
HXDLIN(  36)				_g = (_g + (int)1);
HXDLIN(  36)				if ((( (::String)(a->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == action_ref)) {
HXLINE(  36)					this->action = a;
HXDLIN(  36)					goto _hx_goto_3;
            				}
            			}
            			_hx_goto_3:;
            		}
HXLINE(  37)		this->setFrame(( (int)(this->action->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) ));
HXLINE(  38)		this->paused = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilesheet_obj,play,(void))

void Tilesheet_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_0935cc83d484f852_42_pause)
HXDLIN(  42)		this->paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilesheet_obj,pause,(void))

void Tilesheet_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_0935cc83d484f852_46_resume)
HXDLIN(  46)		this->paused = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilesheet_obj,resume,(void))

void Tilesheet_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_0935cc83d484f852_49_remove)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilesheet_obj,remove,(void))

void Tilesheet_obj::update(){
            	HX_STACKFRAME(&_hx_pos_0935cc83d484f852_53_update)
HXLINE(  54)		bool _hx_tmp;
HXDLIN(  54)		bool _hx_tmp1;
HXDLIN(  54)		if (!(!(this->ready))) {
HXLINE(  54)			_hx_tmp1 = this->paused;
            		}
            		else {
HXLINE(  54)			_hx_tmp1 = true;
            		}
HXDLIN(  54)		if (!(_hx_tmp1)) {
HXLINE(  54)			_hx_tmp = (( (int)(this->action->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) ) >= ( (int)(this->action->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)) ));
            		}
            		else {
HXLINE(  54)			_hx_tmp = true;
            		}
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  54)			return;
            		}
HXLINE(  56)		 ::iron::object::Tilesheet _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  56)		_hx_tmp2->time = (_hx_tmp2->time + (((Float)0.0166666666666666664) * ::iron::_hx_system::Time_obj::scale));
HXLINE(  59)		Float _hx_tmp3 = this->time;
HXDLIN(  59)		if ((_hx_tmp3 >= ((Float)(int)1 / (Float)( (int)(this->raw->__Field(HX_("framerate",8d,e5,4b,4e),hx::paccDynamic)) )))) {
HXLINE(  60)			this->setFrame((this->frame + (int)1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilesheet_obj,update,(void))

void Tilesheet_obj::setFrame(int f){
            	HX_STACKFRAME(&_hx_pos_0935cc83d484f852_64_setFrame)
HXLINE(  65)		this->frame = f;
HXLINE(  66)		this->time = (int)0;
HXLINE(  68)		int tx = hx::Mod(this->frame,( (int)(this->raw->__Field(HX_("tilesx",53,d7,28,1e),hx::paccDynamic)) ));
HXLINE(  69)		int ty = ::Std_obj::_hx_int(((Float)this->frame / (Float)( (int)(this->raw->__Field(HX_("tilesx",53,d7,28,1e),hx::paccDynamic)) )));
HXLINE(  70)		this->tileX = (tx * ((Float)(int)1 / (Float)( (int)(this->raw->__Field(HX_("tilesx",53,d7,28,1e),hx::paccDynamic)) )));
HXLINE(  71)		this->tileY = (ty * ((Float)(int)1 / (Float)( (int)(this->raw->__Field(HX_("tilesy",54,d7,28,1e),hx::paccDynamic)) )));
HXLINE(  74)		bool _hx_tmp;
HXDLIN(  74)		if ((this->frame >= ( (int)(this->action->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)) ))) {
HXLINE(  74)			_hx_tmp = (( (int)(this->action->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) ) < ( (int)(this->action->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)) ));
            		}
            		else {
HXLINE(  74)			_hx_tmp = false;
            		}
HXDLIN(  74)		if (_hx_tmp) {
HXLINE(  75)			if (hx::IsNotNull( this->onActionComplete )) {
HXLINE(  75)				this->onActionComplete();
            			}
HXLINE(  76)			if (( (bool)(this->action->__Field(HX_("loop",64,a6,b7,47),hx::paccDynamic)) )) {
HXLINE(  76)				this->setFrame(( (int)(this->action->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(  77)				this->paused = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilesheet_obj,setFrame,(void))


hx::ObjectPtr< Tilesheet_obj > Tilesheet_obj::__new(::String sceneName,::String tilesheet_ref,::String tilesheet_action_ref) {
	hx::ObjectPtr< Tilesheet_obj > __this = new Tilesheet_obj();
	__this->__construct(sceneName,tilesheet_ref,tilesheet_action_ref);
	return __this;
}

hx::ObjectPtr< Tilesheet_obj > Tilesheet_obj::__alloc(hx::Ctx *_hx_ctx,::String sceneName,::String tilesheet_ref,::String tilesheet_action_ref) {
	Tilesheet_obj *__this = (Tilesheet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tilesheet_obj), true, "iron.object.Tilesheet"));
	*(void **)__this = Tilesheet_obj::_hx_vtable;
	__this->__construct(sceneName,tilesheet_ref,tilesheet_action_ref);
	return __this;
}

Tilesheet_obj::Tilesheet_obj()
{
}

void Tilesheet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tilesheet);
	HX_MARK_MEMBER_NAME(tileX,"tileX");
	HX_MARK_MEMBER_NAME(tileY,"tileY");
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(action,"action");
	HX_MARK_MEMBER_NAME(ready,"ready");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(onActionComplete,"onActionComplete");
	HX_MARK_END_CLASS();
}

void Tilesheet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tileX,"tileX");
	HX_VISIT_MEMBER_NAME(tileY,"tileY");
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(action,"action");
	HX_VISIT_MEMBER_NAME(ready,"ready");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(onActionComplete,"onActionComplete");
}

hx::Val Tilesheet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tileX") ) { return hx::Val( tileX ); }
		if (HX_FIELD_EQ(inName,"tileY") ) { return hx::Val( tileY ); }
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready ); }
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"action") ) { return hx::Val( action ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setFrame") ) { return hx::Val( setFrame_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onActionComplete") ) { return hx::Val( onActionComplete ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Tilesheet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tileX") ) { tileX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileY") ) { tileY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ready") ) { ready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"action") ) { action=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onActionComplete") ) { onActionComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Tilesheet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("tileX","\x6a","\xfd","\x34","\x10"));
	outFields->push(HX_HCSTRING("tileY","\x6b","\xfd","\x34","\x10"));
	outFields->push(HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"));
	outFields->push(HX_HCSTRING("action","\xb6","\x3b","\x46","\x16"));
	outFields->push(HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Tilesheet_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Tilesheet_obj,tileX),HX_HCSTRING("tileX","\x6a","\xfd","\x34","\x10")},
	{hx::fsFloat,(int)offsetof(Tilesheet_obj,tileY),HX_HCSTRING("tileY","\x6b","\xfd","\x34","\x10")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tilesheet_obj,raw),HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tilesheet_obj,action),HX_HCSTRING("action","\xb6","\x3b","\x46","\x16")},
	{hx::fsBool,(int)offsetof(Tilesheet_obj,ready),HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6")},
	{hx::fsBool,(int)offsetof(Tilesheet_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsInt,(int)offsetof(Tilesheet_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{hx::fsFloat,(int)offsetof(Tilesheet_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tilesheet_obj,onActionComplete),HX_HCSTRING("onActionComplete","\x0e","\xac","\xe9","\xcc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Tilesheet_obj_sStaticStorageInfo = 0;
#endif

static ::String Tilesheet_obj_sMemberFields[] = {
	HX_HCSTRING("tileX","\x6a","\xfd","\x34","\x10"),
	HX_HCSTRING("tileY","\x6b","\xfd","\x34","\x10"),
	HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"),
	HX_HCSTRING("action","\xb6","\x3b","\x46","\x16"),
	HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("onActionComplete","\x0e","\xac","\xe9","\xcc"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("setFrame","\x2b","\xe1","\xb7","\x14"),
	::String(null()) };

static void Tilesheet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tilesheet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tilesheet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::__mClass,"__mClass");
};

#endif

hx::Class Tilesheet_obj::__mClass;

void Tilesheet_obj::__register()
{
	hx::Object *dummy = new Tilesheet_obj;
	Tilesheet_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.Tilesheet","\x08","\xc0","\xc7","\x93");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Tilesheet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tilesheet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tilesheet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tilesheet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tilesheet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tilesheet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace object
