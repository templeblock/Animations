// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Constraint
#include <iron/object/Constraint.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_635ab49d76a81103_6_new,"iron.object.Constraint","new",0x99fba918,"iron.object.Constraint.new","iron/object/Constraint.hx",6,0x4b22bb38)
HX_LOCAL_STACK_FRAME(_hx_pos_635ab49d76a81103_14_apply,"iron.object.Constraint","apply",0x5a14fc26,"iron.object.Constraint.apply","iron/object/Constraint.hx",14,0x4b22bb38)
namespace iron{
namespace object{

void Constraint_obj::__construct( ::Dynamic constr){
            	HX_STACKFRAME(&_hx_pos_635ab49d76a81103_6_new)
HXLINE(   8)		this->target = null();
HXLINE(  11)		this->raw = constr;
            	}

Dynamic Constraint_obj::__CreateEmpty() { return new Constraint_obj; }

void *Constraint_obj::_hx_vtable = 0;

Dynamic Constraint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Constraint_obj > _hx_result = new Constraint_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Constraint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3926d4e8;
}

void Constraint_obj::apply( ::iron::object::Transform transform){
            	HX_STACKFRAME(&_hx_pos_635ab49d76a81103_14_apply)
HXLINE(  15)		bool _hx_tmp;
HXDLIN(  15)		if (hx::IsNull( this->target )) {
HXLINE(  15)			_hx_tmp = hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("target",51,f3,ec,86),hx::paccDynamic)) ) );
            		}
            		else {
HXLINE(  15)			_hx_tmp = false;
            		}
HXDLIN(  15)		if (_hx_tmp) {
HXLINE(  15)			this->target = ::iron::Scene_obj::active->getChild(( (::String)(this->raw->__Field(HX_("target",51,f3,ec,86),hx::paccDynamic)) ))->transform;
            		}
HXLINE(  17)		if ((( (::String)(this->raw->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("COPY_LOCATION",3f,d3,3a,31))) {
HXLINE(  18)			if (( (bool)(this->raw->__Field(HX_("use_x",40,5f,32,aa),hx::paccDynamic)) )) {
HXLINE(  19)				transform->world->self->_30 = this->target->loc->x;
HXLINE(  20)				if (( (bool)(this->raw->__Field(HX_("use_offset",cb,a3,18,04),hx::paccDynamic)) )) {
HXLINE(  20)					 ::iron::math::Mat4 _g = transform->world;
HXDLIN(  20)					_g->self->_30 = (_g->self->_30 + transform->loc->x);
            				}
            			}
HXLINE(  22)			if (( (bool)(this->raw->__Field(HX_("use_y",41,5f,32,aa),hx::paccDynamic)) )) {
HXLINE(  23)				transform->world->self->_31 = this->target->loc->y;
HXLINE(  24)				if (( (bool)(this->raw->__Field(HX_("use_offset",cb,a3,18,04),hx::paccDynamic)) )) {
HXLINE(  24)					 ::iron::math::Mat4 _g1 = transform->world;
HXDLIN(  24)					_g1->self->_31 = (_g1->self->_31 + transform->loc->y);
            				}
            			}
HXLINE(  26)			if (( (bool)(this->raw->__Field(HX_("use_z",42,5f,32,aa),hx::paccDynamic)) )) {
HXLINE(  27)				transform->world->self->_32 = this->target->loc->z;
HXLINE(  28)				if (( (bool)(this->raw->__Field(HX_("use_offset",cb,a3,18,04),hx::paccDynamic)) )) {
HXLINE(  28)					 ::iron::math::Mat4 _g2 = transform->world;
HXDLIN(  28)					_g2->self->_32 = (_g2->self->_32 + transform->loc->z);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Constraint_obj,apply,(void))


hx::ObjectPtr< Constraint_obj > Constraint_obj::__new( ::Dynamic constr) {
	hx::ObjectPtr< Constraint_obj > __this = new Constraint_obj();
	__this->__construct(constr);
	return __this;
}

hx::ObjectPtr< Constraint_obj > Constraint_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic constr) {
	Constraint_obj *__this = (Constraint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Constraint_obj), true, "iron.object.Constraint"));
	*(void **)__this = Constraint_obj::_hx_vtable;
	__this->__construct(constr);
	return __this;
}

Constraint_obj::Constraint_obj()
{
}

void Constraint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Constraint);
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_END_CLASS();
}

void Constraint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(target,"target");
}

hx::Val Constraint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"apply") ) { return hx::Val( apply_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Constraint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::iron::object::Transform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Constraint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"));
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Constraint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Constraint_obj,raw),HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00")},
	{hx::fsObject /*::iron::object::Transform*/ ,(int)offsetof(Constraint_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Constraint_obj_sStaticStorageInfo = 0;
#endif

static ::String Constraint_obj_sMemberFields[] = {
	HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"),
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("apply","\x6e","\x85","\x3b","\x24"),
	::String(null()) };

static void Constraint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Constraint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Constraint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Constraint_obj::__mClass,"__mClass");
};

#endif

hx::Class Constraint_obj::__mClass;

void Constraint_obj::__register()
{
	hx::Object *dummy = new Constraint_obj;
	Constraint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.Constraint","\x26","\x7d","\x03","\xc6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Constraint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Constraint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Constraint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Constraint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Constraint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Constraint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace object
