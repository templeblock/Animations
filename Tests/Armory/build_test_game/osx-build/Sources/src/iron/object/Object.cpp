// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_App
#include <iron/App.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_data_Armature
#include <iron/data/Armature.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_BoneAnimation
#include <iron/object/BoneAnimation.h>
#endif
#ifndef INCLUDED_iron_object_Constraint
#include <iron/object/Constraint.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_ObjectAnimation
#include <iron/object/ObjectAnimation.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_6_new,"iron.object.Object","new",0x215267fa,"iron.object.Object.new","iron/object/Object.hx",6,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_39_addChild,"iron.object.Object","addChild",0xbbca69e1,"iron.object.Object.addChild","iron/object/Object.hx",39,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_46_removeChild,"iron.object.Object","removeChild",0xdd144852,"iron.object.Object.removeChild","iron/object/Object.hx",46,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_53_remove,"iron.object.Object","remove",0x4b4d40ea,"iron.object.Object.remove","iron/object/Object.hx",53,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_61_getChild,"iron.object.Object","getChild",0xa244534c,"iron.object.Object.getChild","iron/object/Object.hx",61,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_72_getChildOfType,"iron.object.Object","getChildOfType",0x04169fdd,"iron.object.Object.getChildOfType","iron/object/Object.hx",72,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_84_addTrait,"iron.object.Object","addTrait",0x8c305413,"iron.object.Object.addTrait","iron/object/Object.hx",84,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_95_removeTrait,"iron.object.Object","removeTrait",0xad7a3284,"iron.object.Object.removeTrait","iron/object/Object.hx",95,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_125_getTrait,"iron.object.Object","getTrait",0x72aa3d7e,"iron.object.Object.getTrait","iron/object/Object.hx",125,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_130_getParentArmature,"iron.object.Object","getParentArmature",0xd2d94013,"iron.object.Object.getParentArmature","iron/object/Object.hx",130,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_135_setupAnimation,"iron.object.Object","setupAnimation",0xd161a36d,"iron.object.Object.setupAnimation","iron/object/Object.hx",135,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_138_setupAnimation,"iron.object.Object","setupAnimation",0xd161a36d,"iron.object.Object.setupAnimation","iron/object/Object.hx",138,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_154_toString,"iron.object.Object","toString",0x35226ad2,"iron.object.Object.toString","iron/object/Object.hx",154,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_149_seededRandom,"iron.object.Object","seededRandom",0xc89c8359,"iron.object.Object.seededRandom","iron/object/Object.hx",149,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_7_boot,"iron.object.Object","boot",0xfee19358,"iron.object.Object.boot","iron/object/Object.hx",7,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_148_boot,"iron.object.Object","boot",0xfee19358,"iron.object.Object.boot","iron/object/Object.hx",148,0xa61e7e96)
namespace iron{
namespace object{

void Object_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_6_new)
HXLINE(  29)		this->isEmpty = false;
HXLINE(  28)		this->properties = null();
HXLINE(  27)		this->culledShadow = false;
HXLINE(  26)		this->culledMesh = false;
HXLINE(  25)		this->culled = false;
HXLINE(  24)		this->visibleShadow = true;
HXLINE(  23)		this->visibleMesh = true;
HXLINE(  22)		this->visible = true;
HXLINE(  21)		this->animation = null();
HXLINE(  19)		this->lods = null();
HXLINE(  18)		this->children = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  17)		this->parent = null();
HXLINE(  15)		this->traits = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  14)		this->constraints = null();
HXLINE(  12)		this->name = HX_("",00,00,00,00);
HXLINE(  10)		this->raw = null();
HXLINE(  32)		this->uid = ::iron::object::Object_obj::uidCounter++;
HXLINE(  33)		this->urandom = ::iron::object::Object_obj::seededRandom();
HXLINE(  34)		this->transform =  ::iron::object::Transform_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE(  35)		this->isEmpty = hx::IsEq( ::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this)),hx::ClassOf< ::iron::object::Object >() );
HXLINE(  36)		bool _hx_tmp;
HXDLIN(  36)		if (this->isEmpty) {
HXLINE(  36)			_hx_tmp = hx::IsNotNull( ::iron::Scene_obj::active );
            		}
            		else {
HXLINE(  36)			_hx_tmp = false;
            		}
HXDLIN(  36)		if (_hx_tmp) {
HXLINE(  36)			::iron::Scene_obj::active->empties->push(hx::ObjectPtr<OBJ_>(this));
            		}
            	}

Dynamic Object_obj::__CreateEmpty() { return new Object_obj; }

void *Object_obj::_hx_vtable = 0;

Dynamic Object_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Object_obj > _hx_result = new Object_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Object_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a486766;
}

void Object_obj::addChild( ::iron::object::Object o,hx::Null< bool >  __o_parentInverse){
bool parentInverse = __o_parentInverse.Default(false);
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_39_addChild)
HXLINE(  40)		if (hx::IsEq( o->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  40)			return;
            		}
HXLINE(  41)		this->children->push(o);
HXLINE(  42)		o->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE(  43)		if (parentInverse) {
HXLINE(  43)			o->transform->applyParentInverse();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Object_obj,addChild,(void))

void Object_obj::removeChild( ::iron::object::Object o,hx::Null< bool >  __o_keepTransform){
bool keepTransform = __o_keepTransform.Default(false);
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_46_removeChild)
HXLINE(  47)		if (keepTransform) {
HXLINE(  47)			o->transform->applyParent();
            		}
HXLINE(  48)		o->parent = null();
HXLINE(  49)		o->transform->buildMatrix();
HXLINE(  50)		this->children->remove(o);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Object_obj,removeChild,(void))

void Object_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_53_remove)
HXLINE(  54)		bool _hx_tmp;
HXDLIN(  54)		if (this->isEmpty) {
HXLINE(  54)			_hx_tmp = hx::IsNotNull( ::iron::Scene_obj::active );
            		}
            		else {
HXLINE(  54)			_hx_tmp = false;
            		}
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  54)			::iron::Scene_obj::active->empties->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  55)		if (hx::IsNotNull( this->animation )) {
HXLINE(  55)			this->animation->remove();
            		}
HXLINE(  56)		while((this->children->length > (int)0)){
HXLINE(  56)			this->children->__get((int)0).StaticCast<  ::iron::object::Object >()->remove();
            		}
HXLINE(  57)		while((this->traits->length > (int)0)){
HXLINE(  57)			this->traits->__get((int)0).StaticCast<  ::iron::Trait >()->remove();
            		}
HXLINE(  58)		if (hx::IsNotNull( this->parent )) {
HXLINE(  58)			this->parent->children->remove(hx::ObjectPtr<OBJ_>(this));
HXDLIN(  58)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Object_obj,remove,(void))

 ::iron::object::Object Object_obj::getChild(::String name){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_61_getChild)
HXLINE(  62)		if ((this->name == name)) {
HXLINE(  62)			return hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE(  64)			int _g = (int)0;
HXDLIN(  64)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN(  64)			while((_g < _g1->length)){
HXLINE(  64)				 ::iron::object::Object c = _g1->__get(_g).StaticCast<  ::iron::object::Object >();
HXDLIN(  64)				_g = (_g + (int)1);
HXLINE(  65)				 ::iron::object::Object r = c->getChild(name);
HXLINE(  66)				if (hx::IsNotNull( r )) {
HXLINE(  66)					return r;
            				}
            			}
            		}
HXLINE(  69)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,getChild,return )

 ::iron::object::Object Object_obj::getChildOfType(hx::Class type){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_72_getChildOfType)
HXLINE(  73)		if (::Std_obj::is(hx::ObjectPtr<OBJ_>(this),type)) {
HXLINE(  73)			return hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE(  75)			int _g = (int)0;
HXDLIN(  75)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN(  75)			while((_g < _g1->length)){
HXLINE(  75)				 ::iron::object::Object c = _g1->__get(_g).StaticCast<  ::iron::object::Object >();
HXDLIN(  75)				_g = (_g + (int)1);
HXLINE(  76)				 ::iron::object::Object r = c->getChildOfType(type);
HXLINE(  77)				if (hx::IsNotNull( r )) {
HXLINE(  77)					return r;
            				}
            			}
            		}
HXLINE(  80)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,getChildOfType,return )

void Object_obj::addTrait( ::iron::Trait t){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_84_addTrait)
HXLINE(  85)		this->traits->push(t);
HXLINE(  86)		t->object = hx::ObjectPtr<OBJ_>(this);
HXLINE(  88)		if (hx::IsNotNull( t->_add )) {
HXLINE(  89)			{
HXLINE(  89)				int _g = (int)0;
HXDLIN(  89)				::Array< ::Dynamic> _g1 = t->_add;
HXDLIN(  89)				while((_g < _g1->length)){
HXLINE(  89)					 ::Dynamic f = _g1->__get(_g);
HXDLIN(  89)					_g = (_g + (int)1);
HXDLIN(  89)					f();
            				}
            			}
HXLINE(  90)			t->_add = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,addTrait,(void))

void Object_obj::removeTrait( ::iron::Trait t){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_95_removeTrait)
HXLINE(  96)		if (hx::IsNotNull( t->_init )) {
HXLINE(  97)			{
HXLINE(  97)				int _g = (int)0;
HXDLIN(  97)				::Array< ::Dynamic> _g1 = t->_init;
HXDLIN(  97)				while((_g < _g1->length)){
HXLINE(  97)					 ::Dynamic f = _g1->__get(_g);
HXDLIN(  97)					_g = (_g + (int)1);
HXDLIN(  97)					::iron::App_obj::removeInit(f);
            				}
            			}
HXLINE(  98)			t->_init = null();
            		}
HXLINE( 100)		if (hx::IsNotNull( t->_update )) {
HXLINE( 101)			{
HXLINE( 101)				int _g2 = (int)0;
HXDLIN( 101)				::Array< ::Dynamic> _g11 = t->_update;
HXDLIN( 101)				while((_g2 < _g11->length)){
HXLINE( 101)					 ::Dynamic f1 = _g11->__get(_g2);
HXDLIN( 101)					_g2 = (_g2 + (int)1);
HXDLIN( 101)					::iron::App_obj::removeUpdate(f1);
            				}
            			}
HXLINE( 102)			t->_update = null();
            		}
HXLINE( 104)		if (hx::IsNotNull( t->_lateUpdate )) {
HXLINE( 105)			{
HXLINE( 105)				int _g3 = (int)0;
HXDLIN( 105)				::Array< ::Dynamic> _g12 = t->_lateUpdate;
HXDLIN( 105)				while((_g3 < _g12->length)){
HXLINE( 105)					 ::Dynamic f2 = _g12->__get(_g3);
HXDLIN( 105)					_g3 = (_g3 + (int)1);
HXDLIN( 105)					::iron::App_obj::removeLateUpdate(f2);
            				}
            			}
HXLINE( 106)			t->_lateUpdate = null();
            		}
HXLINE( 108)		if (hx::IsNotNull( t->_render )) {
HXLINE( 109)			{
HXLINE( 109)				int _g4 = (int)0;
HXDLIN( 109)				::Array< ::Dynamic> _g13 = t->_render;
HXDLIN( 109)				while((_g4 < _g13->length)){
HXLINE( 109)					 ::Dynamic f3 = _g13->__get(_g4);
HXDLIN( 109)					_g4 = (_g4 + (int)1);
HXDLIN( 109)					::iron::App_obj::removeRender(f3);
            				}
            			}
HXLINE( 110)			t->_render = null();
            		}
HXLINE( 112)		if (hx::IsNotNull( t->_render2D )) {
HXLINE( 113)			{
HXLINE( 113)				int _g5 = (int)0;
HXDLIN( 113)				::Array< ::Dynamic> _g14 = t->_render2D;
HXDLIN( 113)				while((_g5 < _g14->length)){
HXLINE( 113)					 ::Dynamic f4 = _g14->__get(_g5);
HXDLIN( 113)					_g5 = (_g5 + (int)1);
HXDLIN( 113)					::iron::App_obj::removeRender2D(f4);
            				}
            			}
HXLINE( 114)			t->_render2D = null();
            		}
HXLINE( 116)		if (hx::IsNotNull( t->_remove )) {
HXLINE( 117)			{
HXLINE( 117)				int _g6 = (int)0;
HXDLIN( 117)				::Array< ::Dynamic> _g15 = t->_remove;
HXDLIN( 117)				while((_g6 < _g15->length)){
HXLINE( 117)					 ::Dynamic f5 = _g15->__get(_g6);
HXDLIN( 117)					_g6 = (_g6 + (int)1);
HXDLIN( 117)					f5();
            				}
            			}
HXLINE( 118)			t->_remove = null();
            		}
HXLINE( 121)		this->traits->remove(t);
HXLINE( 122)		t->object = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,removeTrait,(void))

 ::Dynamic Object_obj::getTrait(hx::Class c){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_125_getTrait)
HXLINE( 126)		{
HXLINE( 126)			int _g = (int)0;
HXDLIN( 126)			::Array< ::Dynamic> _g1 = this->traits;
HXDLIN( 126)			while((_g < _g1->length)){
HXLINE( 126)				 ::iron::Trait t = _g1->__get(_g).StaticCast<  ::iron::Trait >();
HXDLIN( 126)				_g = (_g + (int)1);
HXDLIN( 126)				if (hx::IsEq( ::Type_obj::getClass(t),c )) {
HXLINE( 126)					return t;
            				}
            			}
            		}
HXLINE( 127)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,getTrait,return )

 ::iron::object::BoneAnimation Object_obj::getParentArmature(::String name){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_130_getParentArmature)
HXLINE( 131)		{
HXLINE( 131)			int _g = (int)0;
HXDLIN( 131)			::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->animations;
HXDLIN( 131)			while((_g < _g1->length)){
HXLINE( 131)				 ::iron::object::Animation a = _g1->__get(_g).StaticCast<  ::iron::object::Animation >();
HXDLIN( 131)				_g = (_g + (int)1);
HXDLIN( 131)				bool _hx_tmp;
HXDLIN( 131)				if (hx::IsNotNull( a->armature )) {
HXLINE( 131)					_hx_tmp = (a->armature->name == name);
            				}
            				else {
HXLINE( 131)					_hx_tmp = false;
            				}
HXDLIN( 131)				if (_hx_tmp) {
HXLINE( 131)					return ( ( ::iron::object::BoneAnimation)(a) );
            				}
            			}
            		}
HXLINE( 132)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,getParentArmature,return )

void Object_obj::setupAnimation(::Array< ::Dynamic> oactions){
            	HX_GC_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_135_setupAnimation)
HXDLIN( 135)		 ::iron::object::Object _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 137)		if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("parent_bone",b9,a1,b9,f1),hx::paccDynamic)) ) )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::iron::object::Object,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_138_setupAnimation)
HXLINE( 139)				 ::iron::object::BoneAnimation banim = _gthis->getParentArmature(_gthis->parent->name);
HXLINE( 140)				if (hx::IsNotNull( banim )) {
HXLINE( 140)					banim->addBoneChild(( (::String)(_gthis->raw->__Field(HX_("parent_bone",b9,a1,b9,f1),hx::paccDynamic)) ),_gthis);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 138)			::iron::Scene_obj::active->notifyOnInit( ::Dynamic(new _hx_Closure_0(_gthis)));
            		}
HXLINE( 144)		if (hx::IsNull( oactions )) {
HXLINE( 144)			return;
            		}
HXLINE( 145)		this->animation =  ::iron::object::ObjectAnimation_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),oactions);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,setupAnimation,(void))

::String Object_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_154_toString)
HXDLIN( 154)		return (HX_("Object ",61,90,a0,4f) + this->name);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Object_obj,toString,return )

int Object_obj::uidCounter;

int Object_obj::seed;

Float Object_obj::seededRandom(){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_149_seededRandom)
HXLINE( 150)		::iron::object::Object_obj::seed = hx::Mod(((::iron::object::Object_obj::seed * (int)9301) + (int)49297),(int)233280);
HXLINE( 151)		return ((Float)::iron::object::Object_obj::seed / (Float)((Float)233280.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Object_obj,seededRandom,return )


hx::ObjectPtr< Object_obj > Object_obj::__new() {
	hx::ObjectPtr< Object_obj > __this = new Object_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Object_obj > Object_obj::__alloc(hx::Ctx *_hx_ctx) {
	Object_obj *__this = (Object_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Object_obj), true, "iron.object.Object"));
	*(void **)__this = Object_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Object_obj::Object_obj()
{
}

void Object_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Object);
	HX_MARK_MEMBER_NAME(uid,"uid");
	HX_MARK_MEMBER_NAME(urandom,"urandom");
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(transform,"transform");
	HX_MARK_MEMBER_NAME(constraints,"constraints");
	HX_MARK_MEMBER_NAME(traits,"traits");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_MEMBER_NAME(lods,"lods");
	HX_MARK_MEMBER_NAME(animation,"animation");
	HX_MARK_MEMBER_NAME(visible,"visible");
	HX_MARK_MEMBER_NAME(visibleMesh,"visibleMesh");
	HX_MARK_MEMBER_NAME(visibleShadow,"visibleShadow");
	HX_MARK_MEMBER_NAME(culled,"culled");
	HX_MARK_MEMBER_NAME(culledMesh,"culledMesh");
	HX_MARK_MEMBER_NAME(culledShadow,"culledShadow");
	HX_MARK_MEMBER_NAME(properties,"properties");
	HX_MARK_MEMBER_NAME(isEmpty,"isEmpty");
	HX_MARK_END_CLASS();
}

void Object_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(uid,"uid");
	HX_VISIT_MEMBER_NAME(urandom,"urandom");
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(transform,"transform");
	HX_VISIT_MEMBER_NAME(constraints,"constraints");
	HX_VISIT_MEMBER_NAME(traits,"traits");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(children,"children");
	HX_VISIT_MEMBER_NAME(lods,"lods");
	HX_VISIT_MEMBER_NAME(animation,"animation");
	HX_VISIT_MEMBER_NAME(visible,"visible");
	HX_VISIT_MEMBER_NAME(visibleMesh,"visibleMesh");
	HX_VISIT_MEMBER_NAME(visibleShadow,"visibleShadow");
	HX_VISIT_MEMBER_NAME(culled,"culled");
	HX_VISIT_MEMBER_NAME(culledMesh,"culledMesh");
	HX_VISIT_MEMBER_NAME(culledShadow,"culledShadow");
	HX_VISIT_MEMBER_NAME(properties,"properties");
	HX_VISIT_MEMBER_NAME(isEmpty,"isEmpty");
}

hx::Val Object_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uid") ) { return hx::Val( uid ); }
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"lods") ) { return hx::Val( lods ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"traits") ) { return hx::Val( traits ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"culled") ) { return hx::Val( culled ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"urandom") ) { return hx::Val( urandom ); }
		if (HX_FIELD_EQ(inName,"visible") ) { return hx::Val( visible ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { return hx::Val( children ); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChild") ) { return hx::Val( getChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"addTrait") ) { return hx::Val( addTrait_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTrait") ) { return hx::Val( getTrait_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform ); }
		if (HX_FIELD_EQ(inName,"animation") ) { return hx::Val( animation ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"culledMesh") ) { return hx::Val( culledMesh ); }
		if (HX_FIELD_EQ(inName,"properties") ) { return hx::Val( properties ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"constraints") ) { return hx::Val( constraints ); }
		if (HX_FIELD_EQ(inName,"visibleMesh") ) { return hx::Val( visibleMesh ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeTrait") ) { return hx::Val( removeTrait_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"culledShadow") ) { return hx::Val( culledShadow ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleShadow") ) { return hx::Val( visibleShadow ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildOfType") ) { return hx::Val( getChildOfType_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupAnimation") ) { return hx::Val( setupAnimation_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getParentArmature") ) { return hx::Val( getParentArmature_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Object_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { outValue = ( seed ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uidCounter") ) { outValue = ( uidCounter ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"seededRandom") ) { outValue = seededRandom_dyn(); return true; }
	}
	return false;
}

hx::Val Object_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uid") ) { uid=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lods") ) { lods=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"traits") ) { traits=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::iron::object::Object >(); return inValue; }
		if (HX_FIELD_EQ(inName,"culled") ) { culled=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"urandom") ) { urandom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visible") ) { visible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { isEmpty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { transform=inValue.Cast<  ::iron::object::Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animation") ) { animation=inValue.Cast<  ::iron::object::Animation >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"culledMesh") ) { culledMesh=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"properties") ) { properties=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"constraints") ) { constraints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visibleMesh") ) { visibleMesh=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"culledShadow") ) { culledShadow=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleShadow") ) { visibleShadow=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Object_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { seed=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uidCounter") ) { uidCounter=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Object_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("uid","\x90","\x23","\x59","\x00"));
	outFields->push(HX_HCSTRING("urandom","\x38","\x68","\xde","\xb8"));
	outFields->push(HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	outFields->push(HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17"));
	outFields->push(HX_HCSTRING("traits","\xe5","\xc0","\x81","\x45"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("children","\x3f","\x19","\x6a","\x70"));
	outFields->push(HX_HCSTRING("lods","\xd2","\x9c","\xb7","\x47"));
	outFields->push(HX_HCSTRING("animation","\x04","\xef","\x34","\x4b"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("visibleMesh","\x7f","\x0f","\xa1","\xf1"));
	outFields->push(HX_HCSTRING("visibleShadow","\xf2","\x95","\x12","\x7c"));
	outFields->push(HX_HCSTRING("culled","\x91","\xee","\xeb","\x3a"));
	outFields->push(HX_HCSTRING("culledMesh","\x1e","\x81","\xc7","\x9a"));
	outFields->push(HX_HCSTRING("culledShadow","\x51","\xed","\xef","\x90"));
	outFields->push(HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61"));
	outFields->push(HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Object_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Object_obj,uid),HX_HCSTRING("uid","\x90","\x23","\x59","\x00")},
	{hx::fsFloat,(int)offsetof(Object_obj,urandom),HX_HCSTRING("urandom","\x38","\x68","\xde","\xb8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Object_obj,raw),HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00")},
	{hx::fsString,(int)offsetof(Object_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*::iron::object::Transform*/ ,(int)offsetof(Object_obj,transform),HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Object_obj,constraints),HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Object_obj,traits),HX_HCSTRING("traits","\xe5","\xc0","\x81","\x45")},
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(Object_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Object_obj,children),HX_HCSTRING("children","\x3f","\x19","\x6a","\x70")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Object_obj,lods),HX_HCSTRING("lods","\xd2","\x9c","\xb7","\x47")},
	{hx::fsObject /*::iron::object::Animation*/ ,(int)offsetof(Object_obj,animation),HX_HCSTRING("animation","\x04","\xef","\x34","\x4b")},
	{hx::fsBool,(int)offsetof(Object_obj,visible),HX_HCSTRING("visible","\x72","\x78","\x24","\xa3")},
	{hx::fsBool,(int)offsetof(Object_obj,visibleMesh),HX_HCSTRING("visibleMesh","\x7f","\x0f","\xa1","\xf1")},
	{hx::fsBool,(int)offsetof(Object_obj,visibleShadow),HX_HCSTRING("visibleShadow","\xf2","\x95","\x12","\x7c")},
	{hx::fsBool,(int)offsetof(Object_obj,culled),HX_HCSTRING("culled","\x91","\xee","\xeb","\x3a")},
	{hx::fsBool,(int)offsetof(Object_obj,culledMesh),HX_HCSTRING("culledMesh","\x1e","\x81","\xc7","\x9a")},
	{hx::fsBool,(int)offsetof(Object_obj,culledShadow),HX_HCSTRING("culledShadow","\x51","\xed","\xef","\x90")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Object_obj,properties),HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61")},
	{hx::fsBool,(int)offsetof(Object_obj,isEmpty),HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Object_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Object_obj::uidCounter,HX_HCSTRING("uidCounter","\x4c","\x45","\x6c","\xa9")},
	{hx::fsInt,(void *) &Object_obj::seed,HX_HCSTRING("seed","\x71","\x85","\x50","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Object_obj_sMemberFields[] = {
	HX_HCSTRING("uid","\x90","\x23","\x59","\x00"),
	HX_HCSTRING("urandom","\x38","\x68","\xde","\xb8"),
	HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17"),
	HX_HCSTRING("traits","\xe5","\xc0","\x81","\x45"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("children","\x3f","\x19","\x6a","\x70"),
	HX_HCSTRING("lods","\xd2","\x9c","\xb7","\x47"),
	HX_HCSTRING("animation","\x04","\xef","\x34","\x4b"),
	HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"),
	HX_HCSTRING("visibleMesh","\x7f","\x0f","\xa1","\xf1"),
	HX_HCSTRING("visibleShadow","\xf2","\x95","\x12","\x7c"),
	HX_HCSTRING("culled","\x91","\xee","\xeb","\x3a"),
	HX_HCSTRING("culledMesh","\x1e","\x81","\xc7","\x9a"),
	HX_HCSTRING("culledShadow","\x51","\xed","\xef","\x90"),
	HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("getChild","\x26","\xb9","\x90","\xa5"),
	HX_HCSTRING("getChildOfType","\x37","\xe5","\x83","\xe9"),
	HX_HCSTRING("addTrait","\xed","\xb9","\x7c","\x8f"),
	HX_HCSTRING("removeTrait","\xea","\x70","\x53","\x14"),
	HX_HCSTRING("getTrait","\x58","\xa3","\xf6","\x75"),
	HX_HCSTRING("getParentArmature","\xf9","\x4e","\xc2","\x26"),
	HX_HCSTRING("setupAnimation","\xc7","\xe8","\xce","\xb6"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Object_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Object_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Object_obj::uidCounter,"uidCounter");
	HX_MARK_MEMBER_NAME(Object_obj::seed,"seed");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Object_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Object_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Object_obj::uidCounter,"uidCounter");
	HX_VISIT_MEMBER_NAME(Object_obj::seed,"seed");
};

#endif

hx::Class Object_obj::__mClass;

static ::String Object_obj_sStaticFields[] = {
	HX_HCSTRING("uidCounter","\x4c","\x45","\x6c","\xa9"),
	HX_HCSTRING("seed","\x71","\x85","\x50","\x4c"),
	HX_HCSTRING("seededRandom","\x33","\xde","\xd9","\x5f"),
	::String(null())
};

void Object_obj::__register()
{
	hx::Object *dummy = new Object_obj;
	Object_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.Object","\x08","\xa3","\xd4","\x1c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Object_obj::__GetStatic;
	__mClass->mSetStaticField = &Object_obj::__SetStatic;
	__mClass->mMarkFunc = Object_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Object_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Object_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Object_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Object_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Object_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Object_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Object_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_7_boot)
HXDLIN(   7)		uidCounter = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_148_boot)
HXDLIN( 148)		seed = (int)1;
            	}
}

} // end namespace iron
} // end namespace object
