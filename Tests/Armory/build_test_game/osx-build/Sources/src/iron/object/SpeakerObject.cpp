// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_iron_App
#include <iron/App.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_SpeakerObject
#include <iron/object/SpeakerObject.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_system_Audio
#include <iron/system/Audio.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <kha/Sound.h>
#endif
#ifndef INCLUDED_kha_audio1_AudioChannel
#include <kha/audio1/AudioChannel.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_202e205ba7c8abfd_22_new,"iron.object.SpeakerObject","new",0x7ce9f767,"iron.object.SpeakerObject.new","iron/object/SpeakerObject.hx",22,0x27b6e409)
HX_DEFINE_STACK_FRAME(_hx_pos_202e205ba7c8abfd_7_new,"iron.object.SpeakerObject","new",0x7ce9f767,"iron.object.SpeakerObject.new","iron/object/SpeakerObject.hx",7,0x27b6e409)
HX_LOCAL_STACK_FRAME(_hx_pos_202e205ba7c8abfd_29_init,"iron.object.SpeakerObject","init",0xcc873a29,"iron.object.SpeakerObject.init","iron/object/SpeakerObject.hx",29,0x27b6e409)
HX_LOCAL_STACK_FRAME(_hx_pos_202e205ba7c8abfd_32_play,"iron.object.SpeakerObject","play",0xd1262d0d,"iron.object.SpeakerObject.play","iron/object/SpeakerObject.hx",32,0x27b6e409)
HX_LOCAL_STACK_FRAME(_hx_pos_202e205ba7c8abfd_39_update,"iron.object.SpeakerObject","update",0x58223d62,"iron.object.SpeakerObject.update","iron/object/SpeakerObject.hx",39,0x27b6e409)
HX_LOCAL_STACK_FRAME(_hx_pos_202e205ba7c8abfd_57_remove,"iron.object.SpeakerObject","remove",0xd5a5539d,"iron.object.SpeakerObject.remove","iron/object/SpeakerObject.hx",57,0x27b6e409)
namespace iron{
namespace object{

void SpeakerObject_obj::__construct( ::Dynamic data){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::iron::object::SpeakerObject,_gthis) HXARGC(1)
            		void _hx_run( ::kha::Sound sound){
            			HX_STACKFRAME(&_hx_pos_202e205ba7c8abfd_22_new)
HXLINE(  23)			_gthis->sound = sound;
HXLINE(  24)			::iron::App_obj::notifyOnInit(_gthis->init_dyn());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_202e205ba7c8abfd_7_new)
HXLINE(  11)		this->channels = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  10)		this->sound = null();
HXLINE(  13)		 ::iron::object::SpeakerObject _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  14)		super::__construct();
HXLINE(  16)		this->data = data;
HXLINE(  18)		::iron::Scene_obj::active->speakers->push(hx::ObjectPtr<OBJ_>(this));
HXLINE(  20)		if ((( (::String)(data->__Field(HX_("sound",cf,8c,cc,80),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE(  20)			return;
            		}
HXLINE(  22)		::iron::data::Data_obj::getSound(( (::String)(data->__Field(HX_("sound",cf,8c,cc,80),hx::paccDynamic)) ), ::Dynamic(new _hx_Closure_0(_gthis)));
            	}

Dynamic SpeakerObject_obj::__CreateEmpty() { return new SpeakerObject_obj; }

void *SpeakerObject_obj::_hx_vtable = 0;

Dynamic SpeakerObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SpeakerObject_obj > _hx_result = new SpeakerObject_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SpeakerObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2a486766) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2a486766;
	} else {
		return inClassId==(int)0x7aad5b57;
	}
}

void SpeakerObject_obj::init(){
            	HX_STACKFRAME(&_hx_pos_202e205ba7c8abfd_29_init)
HXDLIN(  29)		bool _hx_tmp;
HXDLIN(  29)		if (this->visible) {
HXDLIN(  29)			_hx_tmp = ( (bool)(this->data->__Field(HX_("play_on_start",ed,a8,13,6b),hx::paccDynamic)) );
            		}
            		else {
HXDLIN(  29)			_hx_tmp = false;
            		}
HXDLIN(  29)		if (_hx_tmp) {
HXDLIN(  29)			this->play();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SpeakerObject_obj,init,(void))

void SpeakerObject_obj::play(){
            	HX_STACKFRAME(&_hx_pos_202e205ba7c8abfd_32_play)
HXLINE(  33)		bool _hx_tmp;
HXDLIN(  33)		if (hx::IsNotNull( this->sound )) {
HXLINE(  33)			_hx_tmp = ( (bool)(this->data->__Field(HX_("muted",6b,8f,5b,10),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  33)			_hx_tmp = true;
            		}
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  33)			return;
            		}
HXLINE(  34)		::Dynamic channel = ::iron::_hx_system::Audio_obj::play(this->sound,this->data->__Field(HX_("loop",64,a6,b7,47),hx::paccDynamic),this->data->__Field(HX_("stream",80,14,2d,11),hx::paccDynamic));
HXLINE(  35)		this->channels->push(channel);
HXLINE(  36)		bool _hx_tmp1;
HXDLIN(  36)		if ((( (float)(this->data->__Field(HX_("attenuation",6a,e0,24,e9),hx::paccDynamic)) ) > (int)0)) {
HXLINE(  36)			_hx_tmp1 = (this->channels->length == (int)1);
            		}
            		else {
HXLINE(  36)			_hx_tmp1 = false;
            		}
HXDLIN(  36)		if (_hx_tmp1) {
HXLINE(  36)			::iron::App_obj::notifyOnUpdate(this->update_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SpeakerObject_obj,play,(void))

void SpeakerObject_obj::update(){
            	HX_GC_STACKFRAME(&_hx_pos_202e205ba7c8abfd_39_update)
HXLINE(  40)		{
HXLINE(  40)			int _g = (int)0;
HXDLIN(  40)			::Array< ::Dynamic> _g1 = this->channels;
HXDLIN(  40)			while((_g < _g1->length)){
HXLINE(  40)				::Dynamic c = _g1->__get(_g);
HXDLIN(  40)				_g = (_g + (int)1);
HXDLIN(  40)				if (::kha::audio1::AudioChannel_obj::get_finished(c)) {
HXLINE(  40)					this->channels->remove(c);
            				}
            			}
            		}
HXLINE(  41)		if ((this->channels->length == (int)0)) {
HXLINE(  42)			::iron::App_obj::removeUpdate(this->update_dyn());
HXLINE(  43)			return;
            		}
HXLINE(  46)		 ::iron::object::CameraObject cam = ::iron::Scene_obj::active->camera;
HXLINE(  47)		 ::iron::math::Mat4 _this = cam->transform->world;
HXDLIN(  47)		 ::iron::math::Vec4 loc1 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this->self->_30,_this->self->_31,_this->self->_32,_this->self->_33);
HXLINE(  48)		 ::iron::math::Mat4 _this1 = this->transform->world;
HXDLIN(  48)		 ::iron::math::Vec4 loc2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this1->self->_30,_this1->self->_31,_this1->self->_32,_this1->self->_33);
HXLINE(  50)		float vx = (loc1->x - loc2->x);
HXDLIN(  50)		float vy = (loc1->y - loc2->y);
HXDLIN(  50)		float vz = (loc1->z - loc2->z);
HXDLIN(  50)		float d = ::Math_obj::sqrt((((vx * vx) + (vy * vy)) + (vz * vz)));
HXLINE(  51)		d = (d * ( (float)(this->data->__Field(HX_("attenuation",6a,e0,24,e9),hx::paccDynamic)) ));
HXLINE(  52)		Float vol = (((Float)1.0) - ::Math_obj::min(((Float)d / (Float)(int)100),(int)1));
HXLINE(  54)		{
HXLINE(  54)			int _g2 = (int)0;
HXDLIN(  54)			::Array< ::Dynamic> _g11 = this->channels;
HXDLIN(  54)			while((_g2 < _g11->length)){
HXLINE(  54)				::Dynamic c1 = _g11->__get(_g2);
HXDLIN(  54)				_g2 = (_g2 + (int)1);
HXDLIN(  54)				::kha::audio1::AudioChannel_obj::set_volume(c1,vol);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SpeakerObject_obj,update,(void))

void SpeakerObject_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_202e205ba7c8abfd_57_remove)
HXLINE(  58)		if (hx::IsNotNull( ::iron::Scene_obj::active )) {
HXLINE(  58)			::iron::Scene_obj::active->speakers->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  59)		this->super::remove();
            	}



hx::ObjectPtr< SpeakerObject_obj > SpeakerObject_obj::__new( ::Dynamic data) {
	hx::ObjectPtr< SpeakerObject_obj > __this = new SpeakerObject_obj();
	__this->__construct(data);
	return __this;
}

hx::ObjectPtr< SpeakerObject_obj > SpeakerObject_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic data) {
	SpeakerObject_obj *__this = (SpeakerObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SpeakerObject_obj), true, "iron.object.SpeakerObject"));
	*(void **)__this = SpeakerObject_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

SpeakerObject_obj::SpeakerObject_obj()
{
}

void SpeakerObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SpeakerObject);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(sound,"sound");
	HX_MARK_MEMBER_NAME(channels,"channels");
	 ::iron::object::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SpeakerObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(sound,"sound");
	HX_VISIT_MEMBER_NAME(channels,"channels");
	 ::iron::object::Object_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SpeakerObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sound") ) { return hx::Val( sound ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"channels") ) { return hx::Val( channels ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SpeakerObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sound") ) { sound=inValue.Cast<  ::kha::Sound >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"channels") ) { channels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpeakerObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80"));
	outFields->push(HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SpeakerObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(SpeakerObject_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::kha::Sound*/ ,(int)offsetof(SpeakerObject_obj,sound),HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80")},
	{hx::fsObject /*Array< ::kha::audio1::AudioChannel >*/ ,(int)offsetof(SpeakerObject_obj,channels),HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SpeakerObject_obj_sStaticStorageInfo = 0;
#endif

static ::String SpeakerObject_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80"),
	HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	::String(null()) };

static void SpeakerObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SpeakerObject_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SpeakerObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SpeakerObject_obj::__mClass,"__mClass");
};

#endif

hx::Class SpeakerObject_obj::__mClass;

void SpeakerObject_obj::__register()
{
	hx::Object *dummy = new SpeakerObject_obj;
	SpeakerObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.SpeakerObject","\xf5","\xb7","\xda","\x03");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SpeakerObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SpeakerObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SpeakerObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SpeakerObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpeakerObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpeakerObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace object
