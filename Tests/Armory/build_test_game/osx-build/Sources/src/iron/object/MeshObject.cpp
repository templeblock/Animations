// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_Geometry
#include <iron/data/Geometry.h>
#endif
#ifndef INCLUDED_iron_data_LampData
#include <iron/data/LampData.h>
#endif
#ifndef INCLUDED_iron_data_MaterialContext
#include <iron/data/MaterialContext.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_data_ParticleData
#include <iron/data/ParticleData.h>
#endif
#ifndef INCLUDED_iron_data_ShaderContext
#include <iron/data/ShaderContext.h>
#endif
#ifndef INCLUDED_iron_data_ShaderData
#include <iron/data/ShaderData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_BoneAnimation
#include <iron/object/BoneAnimation.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_FrustumPlane
#include <iron/object/FrustumPlane.h>
#endif
#ifndef INCLUDED_iron_object_LampObject
#include <iron/object/LampObject.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_ParticleSystem
#include <iron/object/ParticleSystem.h>
#endif
#ifndef INCLUDED_iron_object_Tilesheet
#include <iron/object/Tilesheet.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_object_Uniforms
#include <iron/object/Uniforms.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_23b447a144a44f97_17_new,"iron.object.MeshObject","new",0x3713d8c7,"iron.object.MeshObject.new","iron/object/MeshObject.hx",17,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_42_setData,"iron.object.MeshObject","setData",0x21915ed3,"iron.object.MeshObject.setData","iron/object/MeshObject.hx",42,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_54_remove,"iron.object.MeshObject","remove",0x13928e3d,"iron.object.MeshObject.remove","iron/object/MeshObject.hx",54,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_68_setupAnimation,"iron.object.MeshObject","setupAnimation",0xe780fbc0,"iron.object.MeshObject.setupAnimation","iron/object/MeshObject.hx",68,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_79_setupParticleSystem,"iron.object.MeshObject","setupParticleSystem",0x2c098b99,"iron.object.MeshObject.setupParticleSystem","iron/object/MeshObject.hx",79,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_86_setupTilesheet,"iron.object.MeshObject","setupTilesheet",0x1099dd6d,"iron.object.MeshObject.setupTilesheet","iron/object/MeshObject.hx",86,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_90_isLodMaterial,"iron.object.MeshObject","isLodMaterial",0xeb7ed5a5,"iron.object.MeshObject.isLodMaterial","iron/object/MeshObject.hx",90,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_93_setCulled,"iron.object.MeshObject","setCulled",0xc82c337a,"iron.object.MeshObject.setCulled","iron/object/MeshObject.hx",93,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_102_cullMaterial,"iron.object.MeshObject","cullMaterial",0xdd3d9332,"iron.object.MeshObject.cullMaterial","iron/object/MeshObject.hx",102,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_117_cullMesh,"iron.object.MeshObject","cullMesh",0x0bba9ef8,"iron.object.MeshObject.cullMesh","iron/object/MeshObject.hx",117,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_168_skipContext,"iron.object.MeshObject","skipContext",0x16124c97,"iron.object.MeshObject.skipContext","iron/object/MeshObject.hx",168,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_179_getContexts,"iron.object.MeshObject","getContexts",0xb648a5c1,"iron.object.MeshObject.getContexts","iron/object/MeshObject.hx",179,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_190_render,"iron.object.MeshObject","render",0x14335d4f,"iron.object.MeshObject.render","iron/object/MeshObject.hx",190,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_298_renderBatch,"iron.object.MeshObject","renderBatch",0xda955beb,"iron.object.MeshObject.renderBatch","iron/object/MeshObject.hx",298,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_329_validContext,"iron.object.MeshObject","validContext",0xa864530c,"iron.object.MeshObject.validContext","iron/object/MeshObject.hx",329,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_334_computeCameraDistance,"iron.object.MeshObject","computeCameraDistance",0x133ecef8,"iron.object.MeshObject.computeCameraDistance","iron/object/MeshObject.hx",334,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_337_computeScreenSize,"iron.object.MeshObject","computeScreenSize",0x30d1634b,"iron.object.MeshObject.computeScreenSize","iron/object/MeshObject.hx",337,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_348_initLods,"iron.object.MeshObject","initLods",0xa753ee3b,"iron.object.MeshObject.initLods","iron/object/MeshObject.hx",348,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_357_toString,"iron.object.MeshObject","toString",0x9353f2e5,"iron.object.MeshObject.toString","iron/object/MeshObject.hx",357,0x2bb25669)
namespace iron{
namespace object{

void MeshObject_obj::__construct( ::iron::data::MeshData data,::Array< ::Dynamic> materials){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_17_new)
HXLINE(  28)		this->tilesheet = null();
HXLINE(  27)		this->frustumCulling = true;
HXLINE(  26)		this->screenSize = ((Float)0.0);
HXLINE(  24)		this->particleIndex = (int)-1;
HXLINE(  23)		this->particleOwner = null();
HXLINE(  22)		this->particleChildren = null();
HXLINE(  21)		this->particleSystems = null();
HXLINE(  19)		this->data = null();
HXLINE(  35)		super::__construct();
HXLINE(  37)		this->materials = materials;
HXLINE(  38)		this->setData(data);
HXLINE(  39)		::iron::Scene_obj::active->meshes->push(hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic MeshObject_obj::__CreateEmpty() { return new MeshObject_obj; }

void *MeshObject_obj::_hx_vtable = 0;

Dynamic MeshObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MeshObject_obj > _hx_result = new MeshObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MeshObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2a486766) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2a486766;
	} else {
		return inClassId==(int)0x50b0b4b3;
	}
}

void MeshObject_obj::setData( ::iron::data::MeshData data){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_42_setData)
HXLINE(  43)		this->data = data;
HXLINE(  44)		data->refcount++;
HXLINE(  46)		bool makeBuffers = true;
HXLINE(  51)		if (makeBuffers) {
HXLINE(  51)			data->geom->build();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshObject_obj,setData,(void))

void MeshObject_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_54_remove)
HXLINE(  58)		if (hx::IsNotNull( this->particleSystems )) {
HXLINE(  59)			{
HXLINE(  59)				int _g = (int)0;
HXDLIN(  59)				::Array< ::Dynamic> _g1 = this->particleSystems;
HXDLIN(  59)				while((_g < _g1->length)){
HXLINE(  59)					 ::iron::object::ParticleSystem psys = _g1->__get(_g).StaticCast<  ::iron::object::ParticleSystem >();
HXDLIN(  59)					_g = (_g + (int)1);
HXDLIN(  59)					psys->remove();
            				}
            			}
HXLINE(  60)			this->particleSystems = null();
            		}
HXLINE(  62)		if (hx::IsNotNull( this->tilesheet )) {
HXLINE(  62)			this->tilesheet->remove();
            		}
HXLINE(  63)		if (hx::IsNotNull( ::iron::Scene_obj::active )) {
HXLINE(  63)			::iron::Scene_obj::active->meshes->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  64)		this->data->refcount--;
HXLINE(  65)		this->super::remove();
            	}


void MeshObject_obj::setupAnimation(::Array< ::Dynamic> oactions){
            	HX_GC_STACKFRAME(&_hx_pos_23b447a144a44f97_68_setupAnimation)
HXLINE(  69)		bool hasAction;
HXDLIN(  69)		bool hasAction1;
HXDLIN(  69)		if (hx::IsNotNull( this->parent )) {
HXLINE(  69)			hasAction1 = hx::IsNotNull( this->parent->raw );
            		}
            		else {
HXLINE(  69)			hasAction1 = false;
            		}
HXDLIN(  69)		if (hasAction1) {
HXLINE(  69)			hasAction = hx::IsNotNull( ( (::Array< ::String >)(this->parent->raw->__Field(HX_("bone_actions",c2,c4,dc,85),hx::paccDynamic)) ) );
            		}
            		else {
HXLINE(  69)			hasAction = false;
            		}
HXLINE(  70)		if (hasAction) {
HXLINE(  71)			::String armatureName = this->parent->name;
HXLINE(  72)			this->animation = this->getParentArmature(armatureName);
HXLINE(  73)			if (hx::IsNull( this->animation )) {
HXLINE(  73)				this->animation =  ::iron::object::BoneAnimation_obj::__alloc( HX_CTX ,armatureName);
            			}
HXLINE(  74)			if (this->data->isSkinned) {
HXLINE(  74)				hx::TCast<  ::iron::object::BoneAnimation >::cast(this->animation)->setSkin(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE(  76)		this->super::setupAnimation(oactions);
            	}


void MeshObject_obj::setupParticleSystem(::String sceneName, ::Dynamic pref){
            	HX_GC_STACKFRAME(&_hx_pos_23b447a144a44f97_79_setupParticleSystem)
HXLINE(  80)		if (hx::IsNull( this->particleSystems )) {
HXLINE(  80)			this->particleSystems = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(  81)		 ::iron::object::ParticleSystem psys =  ::iron::object::ParticleSystem_obj::__alloc( HX_CTX ,sceneName,pref);
HXLINE(  82)		this->particleSystems->push(psys);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshObject_obj,setupParticleSystem,(void))

void MeshObject_obj::setupTilesheet(::String sceneName,::String tilesheet_ref,::String tilesheet_action_ref){
            	HX_GC_STACKFRAME(&_hx_pos_23b447a144a44f97_86_setupTilesheet)
HXDLIN(  86)		this->tilesheet =  ::iron::object::Tilesheet_obj::__alloc( HX_CTX ,sceneName,tilesheet_ref,tilesheet_action_ref);
            	}


HX_DEFINE_DYNAMIC_FUNC3(MeshObject_obj,setupTilesheet,(void))

bool MeshObject_obj::isLodMaterial(){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_90_isLodMaterial)
HXDLIN(  90)		bool _hx_tmp;
HXDLIN(  90)		if (hx::IsNotNull( this->raw )) {
HXDLIN(  90)			_hx_tmp = hx::IsNotNull( this->raw->__Field(HX_("lod_material",65,e7,84,f2),hx::paccDynamic) );
            		}
            		else {
HXDLIN(  90)			_hx_tmp = false;
            		}
HXDLIN(  90)		if (_hx_tmp) {
HXDLIN(  90)			return hx::IsEq( this->raw->__Field(HX_("lod_material",65,e7,84,f2),hx::paccDynamic),true );
            		}
            		else {
HXDLIN(  90)			return false;
            		}
HXDLIN(  90)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshObject_obj,isLodMaterial,return )

bool MeshObject_obj::setCulled(bool isShadow,bool b){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_93_setCulled)
HXLINE(  94)		if (isShadow) {
HXLINE(  94)			this->culledShadow = b;
            		}
            		else {
HXLINE(  94)			this->culledMesh = b;
            		}
HXLINE(  95)		bool _hx_tmp;
HXDLIN(  95)		if (this->culledMesh) {
HXLINE(  95)			_hx_tmp = this->culledShadow;
            		}
            		else {
HXLINE(  95)			_hx_tmp = false;
            		}
HXDLIN(  95)		this->culled = _hx_tmp;
HXLINE(  99)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshObject_obj,setCulled,return )

bool MeshObject_obj::cullMaterial(::String context){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_102_cullMaterial)
HXLINE( 104)		::Array< ::Dynamic> mats = this->materials;
HXLINE( 105)		bool _hx_tmp;
HXDLIN( 105)		bool _hx_tmp1;
HXDLIN( 105)		bool _hx_tmp2;
HXDLIN( 105)		if (hx::IsNotNull( this->raw )) {
HXLINE( 105)			_hx_tmp2 = hx::IsNotNull( this->raw->__Field(HX_("lod_material",65,e7,84,f2),hx::paccDynamic) );
            		}
            		else {
HXLINE( 105)			_hx_tmp2 = false;
            		}
HXDLIN( 105)		if (_hx_tmp2) {
HXLINE( 105)			_hx_tmp1 = hx::IsEq( this->raw->__Field(HX_("lod_material",65,e7,84,f2),hx::paccDynamic),true );
            		}
            		else {
HXLINE( 105)			_hx_tmp1 = false;
            		}
HXDLIN( 105)		if (!(_hx_tmp1)) {
HXLINE( 105)			_hx_tmp = hx::IsNull( ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(mats,(int)0)) )->getContext(context) );
            		}
            		else {
HXLINE( 105)			_hx_tmp = false;
            		}
HXDLIN( 105)		if (_hx_tmp) {
HXLINE( 105)			return true;
            		}
HXLINE( 107)		bool isShadow = (context == HX_("shadowmap",bc,6e,b8,f4));
HXLINE( 108)		bool _hx_tmp3;
HXDLIN( 108)		if (!(this->visibleMesh)) {
HXLINE( 108)			_hx_tmp3 = !(isShadow);
            		}
            		else {
HXLINE( 108)			_hx_tmp3 = false;
            		}
HXDLIN( 108)		if (_hx_tmp3) {
HXLINE( 108)			return this->setCulled(isShadow,true);
            		}
HXLINE( 109)		bool _hx_tmp4;
HXDLIN( 109)		if (!(this->visibleShadow)) {
HXLINE( 109)			_hx_tmp4 = isShadow;
            		}
            		else {
HXLINE( 109)			_hx_tmp4 = false;
            		}
HXDLIN( 109)		if (_hx_tmp4) {
HXLINE( 109)			return this->setCulled(isShadow,true);
            		}
HXLINE( 112)		if (this->skipContext(context)) {
HXLINE( 112)			return this->setCulled(isShadow,true);
            		}
HXLINE( 114)		return this->setCulled(isShadow,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshObject_obj,cullMaterial,return )

bool MeshObject_obj::cullMesh(::String context, ::iron::object::CameraObject camera, ::iron::object::LampObject lamp){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_117_cullMesh)
HXLINE( 118)		if (hx::IsNull( camera )) {
HXLINE( 118)			return false;
            		}
HXLINE( 120)		bool _hx_tmp;
HXDLIN( 120)		if (( (bool)(camera->data->raw->__Field(HX_("frustum_culling",53,b5,43,1c),hx::paccDynamic)) )) {
HXLINE( 120)			_hx_tmp = this->frustumCulling;
            		}
            		else {
HXLINE( 120)			_hx_tmp = false;
            		}
HXDLIN( 120)		if (_hx_tmp) {
HXLINE( 123)			Float radiusScale;
HXDLIN( 123)			if (this->data->isSkinned) {
HXLINE( 123)				radiusScale = ((Float)2.0);
            			}
            			else {
HXLINE( 123)				radiusScale = ((Float)1.0);
            			}
HXLINE( 125)			bool _hx_tmp1;
HXDLIN( 125)			if (hx::IsNull( this->particleSystems )) {
HXLINE( 125)				_hx_tmp1 = hx::IsNotNull( this->particleOwner );
            			}
            			else {
HXLINE( 125)				_hx_tmp1 = true;
            			}
HXDLIN( 125)			if (_hx_tmp1) {
HXLINE( 125)				radiusScale = (radiusScale * (int)1000);
            			}
HXLINE( 126)			if ((context == HX_("voxel",46,89,02,3b))) {
HXLINE( 126)				radiusScale = (radiusScale * (int)100);
            			}
HXLINE( 127)			bool isShadow = (context == HX_("shadowmap",bc,6e,b8,f4));
HXLINE( 128)			::Array< ::Dynamic> frustumPlanes;
HXDLIN( 128)			if (isShadow) {
HXLINE( 128)				frustumPlanes = lamp->frustumPlanes;
            			}
            			else {
HXLINE( 128)				frustumPlanes = camera->frustumPlanes;
            			}
HXLINE( 130)			bool _hx_tmp2;
HXDLIN( 130)			if (isShadow) {
HXLINE( 130)				_hx_tmp2 = (( (::String)(lamp->data->raw->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) != HX_("sun",8c,a9,57,00));
            			}
            			else {
HXLINE( 130)				_hx_tmp2 = false;
            			}
HXDLIN( 130)			if (_hx_tmp2) {
HXLINE( 131)				lamp->transform->radius = ( (float)(lamp->data->raw->__Field(HX_("far_plane",b4,3b,51,fd),hx::paccDynamic)) );
HXLINE( 132)				if (!(::iron::object::CameraObject_obj::sphereInFrustum(camera->frustumPlanes,lamp->transform,null(),null(),null(),null()))) {
HXLINE( 133)					return this->setCulled(isShadow,true);
            				}
            			}
HXLINE( 138)			if (this->data->geom->instanced) {
HXLINE( 141)				bool instanceInFrustum = false;
HXLINE( 142)				{
HXLINE( 142)					int _g = (int)0;
HXDLIN( 142)					::Array< ::Dynamic> _g1 = this->data->geom->offsetVecs;
HXDLIN( 142)					while((_g < _g1->length)){
HXLINE( 142)						 ::iron::math::Vec4 v = _g1->__get(_g).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 142)						_g = (_g + (int)1);
HXLINE( 143)						if (::iron::object::CameraObject_obj::sphereInFrustum(frustumPlanes,this->transform,radiusScale,v->x,v->y,v->z)) {
HXLINE( 144)							instanceInFrustum = true;
HXLINE( 145)							goto _hx_goto_10;
            						}
            					}
            					_hx_goto_10:;
            				}
HXLINE( 148)				if (!(instanceInFrustum)) {
HXLINE( 148)					return this->setCulled(isShadow,true);
            				}
            			}
            			else {
HXLINE( 158)				if (!(::iron::object::CameraObject_obj::sphereInFrustum(frustumPlanes,this->transform,radiusScale,null(),null(),null()))) {
HXLINE( 159)					return this->setCulled(isShadow,true);
            				}
            			}
            		}
HXLINE( 164)		this->culled = false;
HXLINE( 165)		return this->culled;
            	}


HX_DEFINE_DYNAMIC_FUNC3(MeshObject_obj,cullMesh,return )

bool MeshObject_obj::skipContext(::String context){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_168_skipContext)
HXLINE( 169)		{
HXLINE( 169)			int _g = (int)0;
HXDLIN( 169)			::Array< ::Dynamic> _g1 = this->materials;
HXDLIN( 169)			while((_g < _g1->length)){
HXLINE( 169)				 ::iron::data::MaterialData mat = ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(_g1,_g)) );
HXDLIN( 169)				_g = (_g + (int)1);
HXLINE( 170)				bool _hx_tmp;
HXDLIN( 170)				if (hx::IsNotNull( ( (::String)(mat->raw->__Field(HX_("skip_context",ef,1c,4e,e1),hx::paccDynamic)) ) )) {
HXLINE( 170)					_hx_tmp = (( (::String)(mat->raw->__Field(HX_("skip_context",ef,1c,4e,e1),hx::paccDynamic)) ) == context);
            				}
            				else {
HXLINE( 170)					_hx_tmp = false;
            				}
HXDLIN( 170)				if (_hx_tmp) {
HXLINE( 172)					return true;
            				}
            			}
            		}
HXLINE( 175)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshObject_obj,skipContext,return )

void MeshObject_obj::getContexts(::String context,::Array< ::Dynamic> materials,::Array< ::Dynamic> materialContexts,::Array< ::Dynamic> shaderContexts){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_179_getContexts)
HXDLIN( 179)		int _g = (int)0;
HXDLIN( 179)		while((_g < materials->length)){
HXDLIN( 179)			 ::iron::data::MaterialData mat = ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(materials,_g)) );
HXDLIN( 179)			_g = (_g + (int)1);
HXLINE( 180)			{
HXLINE( 180)				int _g2 = (int)0;
HXDLIN( 180)				int _g1 = ( (::Array< ::Dynamic>)(mat->raw->__Field(HX_("contexts",a4,9b,2b,2f),hx::paccDynamic)) )->length;
HXDLIN( 180)				while((_g2 < _g1)){
HXLINE( 180)					_g2 = (_g2 + (int)1);
HXDLIN( 180)					int i = (_g2 - (int)1);
HXLINE( 181)					if ((( (::String)( ::Dynamic(mat->raw->__Field(HX_("contexts",a4,9b,2b,2f),hx::paccDynamic))->__GetItem(i)->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ).substr((int)0,context.length) == context)) {
HXLINE( 182)						materialContexts->push(mat->contexts->__get(i).StaticCast<  ::iron::data::MaterialContext >());
HXLINE( 183)						shaderContexts->push(mat->shader->getContext(context));
HXLINE( 184)						goto _hx_goto_15;
            					}
            				}
            				_hx_goto_15:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(MeshObject_obj,getContexts,(void))

void MeshObject_obj::render(::Dynamic g,::String context, ::iron::object::CameraObject camera, ::iron::object::LampObject lamp,::Array< ::String > bindParams){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_190_render)
HXLINE( 192)		bool _hx_tmp;
HXDLIN( 192)		if (hx::IsNotNull( this->data )) {
HXLINE( 192)			_hx_tmp = !(this->data->geom->ready);
            		}
            		else {
HXLINE( 192)			_hx_tmp = true;
            		}
HXDLIN( 192)		if (_hx_tmp) {
HXLINE( 192)			return;
            		}
HXLINE( 193)		if (!(this->visible)) {
HXLINE( 193)			return;
            		}
HXLINE( 194)		if (this->cullMesh(context,camera,lamp)) {
HXLINE( 194)			return;
            		}
HXLINE( 195)		bool _hx_tmp1;
HXDLIN( 195)		bool _hx_tmp2;
HXDLIN( 195)		if (hx::IsNotNull( this->raw )) {
HXLINE( 195)			_hx_tmp2 = ( (bool)(this->raw->__Field(HX_("is_particle",7b,0c,d5,f0),hx::paccDynamic)) );
            		}
            		else {
HXLINE( 195)			_hx_tmp2 = false;
            		}
HXDLIN( 195)		if (_hx_tmp2) {
HXLINE( 195)			_hx_tmp1 = hx::IsNull( this->particleOwner );
            		}
            		else {
HXLINE( 195)			_hx_tmp1 = false;
            		}
HXDLIN( 195)		if (_hx_tmp1) {
HXLINE( 195)			return;
            		}
HXLINE( 196)		bool meshContext;
HXDLIN( 196)		if (hx::IsNotNull( this->raw )) {
HXLINE( 196)			meshContext = (HX_("mesh",ed,49,59,48) == context);
            		}
            		else {
HXLINE( 196)			meshContext = false;
            		}
HXLINE( 197)		bool _hx_tmp3;
HXDLIN( 197)		if (hx::IsNotNull( this->particleSystems )) {
HXLINE( 197)			_hx_tmp3 = meshContext;
            		}
            		else {
HXLINE( 197)			_hx_tmp3 = false;
            		}
HXDLIN( 197)		if (_hx_tmp3) {
HXLINE( 199)			if (hx::IsNull( this->particleChildren )) {
HXLINE( 200)				this->particleChildren = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 201)				{
HXLINE( 201)					int _g = (int)0;
HXDLIN( 201)					::Array< ::Dynamic> _g1 = this->particleSystems;
HXDLIN( 201)					while((_g < _g1->length)){
HXLINE( 201)						 ::iron::object::ParticleSystem psys = _g1->__get(_g).StaticCast<  ::iron::object::ParticleSystem >();
HXDLIN( 201)						_g = (_g + (int)1);
HXLINE( 202)						 ::iron::object::MeshObject c = ( ( ::iron::object::MeshObject)(::iron::Scene_obj::active->getChild(( (::String)(psys->data->raw->__Field(HX_("dupli_object",e2,f3,41,ac),hx::paccDynamic)) ))) );
HXLINE( 203)						this->particleChildren->push(c);
HXLINE( 204)						if (hx::IsNotNull( c )) {
HXLINE( 205)							c->particleOwner = hx::ObjectPtr<OBJ_>(this);
HXLINE( 206)							c->particleIndex = (this->particleChildren->length - (int)1);
HXLINE( 207)							c->transform = this->transform;
            						}
            					}
            				}
            			}
HXLINE( 211)			{
HXLINE( 211)				int _g11 = (int)0;
HXDLIN( 211)				int _g2 = this->particleSystems->length;
HXDLIN( 211)				while((_g11 < _g2)){
HXLINE( 211)					_g11 = (_g11 + (int)1);
HXDLIN( 211)					int i = (_g11 - (int)1);
HXDLIN( 211)					 ::iron::object::ParticleSystem _hx_tmp4 = this->particleSystems->__get(i).StaticCast<  ::iron::object::ParticleSystem >();
HXDLIN( 211)					_hx_tmp4->update(this->particleChildren->__get(i).StaticCast<  ::iron::object::MeshObject >(),hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE( 213)		bool _hx_tmp5;
HXDLIN( 213)		bool _hx_tmp6;
HXDLIN( 213)		if (hx::IsNotNull( this->particleSystems )) {
HXLINE( 213)			_hx_tmp6 = (this->particleSystems->length > (int)0);
            		}
            		else {
HXLINE( 213)			_hx_tmp6 = false;
            		}
HXDLIN( 213)		if (_hx_tmp6) {
HXLINE( 213)			_hx_tmp5 = !(( (bool)(this->particleSystems->__get((int)0).StaticCast<  ::iron::object::ParticleSystem >()->data->raw->__Field(HX_("render_emitter",45,40,d4,92),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 213)			_hx_tmp5 = false;
            		}
HXDLIN( 213)		if (_hx_tmp5) {
HXLINE( 213)			return;
            		}
HXLINE( 214)		if (hx::IsNotNull( this->tilesheet )) {
HXLINE( 214)			this->tilesheet->update();
            		}
HXLINE( 215)		if (this->cullMaterial(context)) {
HXLINE( 215)			return;
            		}
HXLINE( 218)		::Array< ::Dynamic> mats = this->materials;
HXLINE( 219)		 ::iron::object::MeshObject lod = hx::ObjectPtr<OBJ_>(this);
HXLINE( 220)		bool _hx_tmp7;
HXDLIN( 220)		bool _hx_tmp8;
HXDLIN( 220)		if (hx::IsNotNull( this->raw )) {
HXLINE( 220)			_hx_tmp8 = hx::IsNotNull( ( (::Array< ::Dynamic>)(this->raw->__Field(HX_("lods",d2,9c,b7,47),hx::paccDynamic)) ) );
            		}
            		else {
HXLINE( 220)			_hx_tmp8 = false;
            		}
HXDLIN( 220)		if (_hx_tmp8) {
HXLINE( 220)			_hx_tmp7 = (( (::Array< ::Dynamic>)(this->raw->__Field(HX_("lods",d2,9c,b7,47),hx::paccDynamic)) )->length > (int)0);
            		}
            		else {
HXLINE( 220)			_hx_tmp7 = false;
            		}
HXDLIN( 220)		if (_hx_tmp7) {
HXLINE( 221)			{
HXLINE( 221)				 ::iron::object::Transform tr = this->transform;
HXDLIN( 221)				float volume = (((((tr->dim->x * tr->scale->x) * tr->dim->y) * tr->scale->y) * tr->dim->z) * tr->scale->z);
HXDLIN( 221)				this->screenSize = (volume * ((Float)((Float)1.0) / (Float)this->cameraDistance));
HXDLIN( 221)				Float _hx_tmp9;
HXDLIN( 221)				if ((this->screenSize > ((Float)1.0))) {
HXLINE( 221)					_hx_tmp9 = ((Float)1.0);
            				}
            				else {
HXLINE( 221)					_hx_tmp9 = this->screenSize;
            				}
HXDLIN( 221)				this->screenSize = _hx_tmp9;
            			}
HXLINE( 222)			if (hx::IsNull( this->lods )) {
HXLINE( 222)				this->lods = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 222)				{
HXLINE( 222)					int _g3 = (int)0;
HXDLIN( 222)					::Array< ::Dynamic> _g12 = ( (::Array< ::Dynamic>)(this->raw->__Field(HX_("lods",d2,9c,b7,47),hx::paccDynamic)) );
HXDLIN( 222)					while((_g3 < _g12->length)){
HXLINE( 222)						 ::Dynamic l = _g12->__get(_g3);
HXDLIN( 222)						_g3 = (_g3 + (int)1);
HXDLIN( 222)						if ((( (::String)(l->__Field(HX_("object_ref",93,68,81,d6),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 222)							this->lods->push(null());
            						}
            						else {
HXLINE( 222)							::Array< ::Dynamic> _hx_tmp10 = this->lods;
HXDLIN( 222)							_hx_tmp10->push(::iron::Scene_obj::active->getChild(( (::String)(l->__Field(HX_("object_ref",93,68,81,d6),hx::paccDynamic)) )));
            						}
            					}
            				}
            			}
HXLINE( 223)			if ((context == HX_("voxel",46,89,02,3b))) {
HXLINE( 225)				::Array< ::Dynamic> lod1 = this->lods;
HXDLIN( 225)				lod = ( ( ::iron::object::MeshObject)(lod1->__get((this->lods->length - (int)1)).StaticCast<  ::iron::object::Object >()) );
            			}
            			else {
HXLINE( 229)				int _g13 = (int)0;
HXDLIN( 229)				int _g4 = ( (::Array< ::Dynamic>)(this->raw->__Field(HX_("lods",d2,9c,b7,47),hx::paccDynamic)) )->length;
HXDLIN( 229)				while((_g13 < _g4)){
HXLINE( 229)					_g13 = (_g13 + (int)1);
HXDLIN( 229)					int i1 = (_g13 - (int)1);
HXLINE( 231)					if ((this->screenSize > ( (float)( ::Dynamic(this->raw->__Field(HX_("lods",d2,9c,b7,47),hx::paccDynamic))->__GetItem(i1)->__Field(HX_("screen_size",b4,99,bc,23),hx::paccDynamic)) ))) {
HXLINE( 231)						goto _hx_goto_20;
            					}
HXLINE( 232)					lod = ( ( ::iron::object::MeshObject)(this->lods->__get(i1).StaticCast<  ::iron::object::Object >()) );
HXLINE( 233)					bool _hx_tmp11;
HXDLIN( 233)					bool _hx_tmp12;
HXDLIN( 233)					if (hx::IsNotNull( this->raw )) {
HXLINE( 233)						_hx_tmp12 = hx::IsNotNull( this->raw->__Field(HX_("lod_material",65,e7,84,f2),hx::paccDynamic) );
            					}
            					else {
HXLINE( 233)						_hx_tmp12 = false;
            					}
HXDLIN( 233)					if (_hx_tmp12) {
HXLINE( 233)						_hx_tmp11 = hx::IsEq( this->raw->__Field(HX_("lod_material",65,e7,84,f2),hx::paccDynamic),true );
            					}
            					else {
HXLINE( 233)						_hx_tmp11 = false;
            					}
HXDLIN( 233)					if (_hx_tmp11) {
HXLINE( 233)						mats = lod->materials;
            					}
            				}
            				_hx_goto_20:;
            			}
HXLINE( 236)			if (hx::IsNull( lod )) {
HXLINE( 236)				return;
            			}
            		}
HXLINE( 241)		bool _hx_tmp13;
HXDLIN( 241)		bool _hx_tmp14;
HXDLIN( 241)		bool _hx_tmp15;
HXDLIN( 241)		if (hx::IsNotNull( this->raw )) {
HXLINE( 241)			_hx_tmp15 = hx::IsNotNull( this->raw->__Field(HX_("lod_material",65,e7,84,f2),hx::paccDynamic) );
            		}
            		else {
HXLINE( 241)			_hx_tmp15 = false;
            		}
HXDLIN( 241)		if (_hx_tmp15) {
HXLINE( 241)			_hx_tmp14 = hx::IsEq( this->raw->__Field(HX_("lod_material",65,e7,84,f2),hx::paccDynamic),true );
            		}
            		else {
HXLINE( 241)			_hx_tmp14 = false;
            		}
HXDLIN( 241)		if (_hx_tmp14) {
HXLINE( 241)			_hx_tmp13 = hx::IsNull( ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(mats,(int)0)) )->getContext(context) );
            		}
            		else {
HXLINE( 241)			_hx_tmp13 = false;
            		}
HXDLIN( 241)		if (_hx_tmp13) {
HXLINE( 241)			return;
            		}
HXLINE( 244)		::Array< ::Dynamic> materialContexts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 245)		::Array< ::Dynamic> shaderContexts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 246)		this->getContexts(context,mats,materialContexts,shaderContexts);
HXLINE( 248)		this->transform->update();
HXLINE( 251)		 ::iron::data::MeshData ldata = lod->data;
HXLINE( 252)		{
HXLINE( 252)			int _g14 = (int)0;
HXDLIN( 252)			int _g5 = ldata->geom->indexBuffers->length;
HXDLIN( 252)			while((_g14 < _g5)){
HXLINE( 252)				_g14 = (_g14 + (int)1);
HXDLIN( 252)				int i2 = (_g14 - (int)1);
HXLINE( 254)				int mi = ldata->geom->materialIndices->__get(i2);
HXLINE( 255)				if ((shaderContexts->length <= mi)) {
HXLINE( 255)					continue;
            				}
HXLINE( 256)				::Array< ::Dynamic> vs = ( (::Array< ::Dynamic>)(shaderContexts->__get(mi).StaticCast<  ::iron::data::ShaderContext >()->raw->__Field(HX_("vertex_structure",58,50,9b,df),hx::paccDynamic)) );
HXLINE( 261)				if (ldata->geom->instanced) {
HXLINE( 262)					 ::kha::graphics4::VertexBuffer _hx_tmp16 = ldata->geom->get(vs);
HXDLIN( 262)					::kha::graphics4::Graphics_obj::setVertexBuffers(g,::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp16)->init(1,ldata->geom->instancedVB));
            				}
            				else {
HXLINE( 265)					::kha::graphics4::Graphics_obj::setVertexBuffer(g,ldata->geom->get(vs));
            				}
HXLINE( 269)				::kha::graphics4::Graphics_obj::setIndexBuffer(g,ldata->geom->indexBuffers->__get(i2).StaticCast<  ::kha::graphics4::IndexBuffer >());
HXLINE( 270)				::kha::graphics4::Graphics_obj::setPipeline(g,shaderContexts->__get(mi).StaticCast<  ::iron::data::ShaderContext >()->pipeState);
HXLINE( 272)				::iron::object::Uniforms_obj::setConstants(g,shaderContexts->__get(mi).StaticCast<  ::iron::data::ShaderContext >(),hx::ObjectPtr<OBJ_>(this),camera,lamp,bindParams);
HXLINE( 274)				if ((materialContexts->length > mi)) {
HXLINE( 275)					::iron::object::Uniforms_obj::setMaterialConstants(g,shaderContexts->__get(mi).StaticCast<  ::iron::data::ShaderContext >(),materialContexts->__get(mi).StaticCast<  ::iron::data::MaterialContext >());
            				}
HXLINE( 278)				if (ldata->geom->instanced) {
HXLINE( 279)					::kha::graphics4::Graphics_obj::drawIndexedVerticesInstanced(g,ldata->geom->instanceCount,ldata->geom->start,ldata->geom->count);
            				}
            				else {
HXLINE( 282)					::kha::graphics4::Graphics_obj::drawIndexedVertices(g,ldata->geom->start,ldata->geom->count);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(MeshObject_obj,render,(void))

void MeshObject_obj::renderBatch(::Dynamic g,::String context, ::iron::object::CameraObject camera, ::iron::object::LampObject lamp,::Array< ::String > bindParams,hx::Null< int >  __o_start,hx::Null< int >  __o_count){
int start = __o_start.Default(0);
int count = __o_count.Default(-1);
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_298_renderBatch)
HXLINE( 300)		if (!(this->visible)) {
HXLINE( 300)			return;
            		}
HXLINE( 301)		if (this->cullMesh(context,camera,lamp)) {
HXLINE( 301)			return;
            		}
HXLINE( 304)		 ::iron::object::MeshObject lod = hx::ObjectPtr<OBJ_>(this);
HXLINE( 307)		::Array< ::Dynamic> materialContexts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 308)		::Array< ::Dynamic> shaderContexts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 309)		this->getContexts(context,this->materials,materialContexts,shaderContexts);
HXLINE( 311)		this->transform->update();
HXLINE( 314)		::iron::object::Uniforms_obj::setConstants(g,shaderContexts->__get((int)0).StaticCast<  ::iron::data::ShaderContext >(),hx::ObjectPtr<OBJ_>(this),camera,lamp,bindParams);
HXLINE( 315)		::iron::object::Uniforms_obj::setMaterialConstants(g,shaderContexts->__get((int)0).StaticCast<  ::iron::data::ShaderContext >(),materialContexts->__get((int)0).StaticCast<  ::iron::data::MaterialContext >());
HXLINE( 317)		::kha::graphics4::Graphics_obj::drawIndexedVertices(g,start,count);
            	}


HX_DEFINE_DYNAMIC_FUNC7(MeshObject_obj,renderBatch,(void))

bool MeshObject_obj::validContext( ::iron::data::MaterialData mat,::String context){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_329_validContext)
HXDLIN( 329)		return hx::IsNotNull( mat->getContext(context) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshObject_obj,validContext,return )

void MeshObject_obj::computeCameraDistance(Float camX,Float camY,Float camZ){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_334_computeCameraDistance)
HXDLIN( 334)		float vx = (camX - this->transform->world->self->_30);
HXDLIN( 334)		float vy = (camY - this->transform->world->self->_31);
HXDLIN( 334)		float vz = (camZ - this->transform->world->self->_32);
HXDLIN( 334)		this->cameraDistance = ::Math_obj::sqrt((((vx * vx) + (vy * vy)) + (vz * vz)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(MeshObject_obj,computeCameraDistance,(void))

void MeshObject_obj::computeScreenSize( ::iron::object::CameraObject camera){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_337_computeScreenSize)
HXLINE( 341)		 ::iron::object::Transform tr = this->transform;
HXLINE( 342)		float volume = (((((tr->dim->x * tr->scale->x) * tr->dim->y) * tr->scale->y) * tr->dim->z) * tr->scale->z);
HXLINE( 343)		this->screenSize = (volume * ((Float)((Float)1.0) / (Float)this->cameraDistance));
HXLINE( 344)		Float _hx_tmp;
HXDLIN( 344)		if ((this->screenSize > ((Float)1.0))) {
HXLINE( 344)			_hx_tmp = ((Float)1.0);
            		}
            		else {
HXLINE( 344)			_hx_tmp = this->screenSize;
            		}
HXDLIN( 344)		this->screenSize = _hx_tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshObject_obj,computeScreenSize,(void))

void MeshObject_obj::initLods(){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_348_initLods)
HXDLIN( 348)		if (hx::IsNull( this->lods )) {
HXLINE( 349)			this->lods = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 350)			{
HXLINE( 350)				int _g = (int)0;
HXDLIN( 350)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->raw->__Field(HX_("lods",d2,9c,b7,47),hx::paccDynamic)) );
HXDLIN( 350)				while((_g < _g1->length)){
HXLINE( 350)					 ::Dynamic l = _g1->__get(_g);
HXDLIN( 350)					_g = (_g + (int)1);
HXLINE( 351)					if ((( (::String)(l->__Field(HX_("object_ref",93,68,81,d6),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 351)						this->lods->push(null());
            					}
            					else {
HXLINE( 352)						::Array< ::Dynamic> _hx_tmp = this->lods;
HXDLIN( 352)						_hx_tmp->push(::iron::Scene_obj::active->getChild(( (::String)(l->__Field(HX_("object_ref",93,68,81,d6),hx::paccDynamic)) )));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshObject_obj,initLods,(void))

::String MeshObject_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_357_toString)
HXDLIN( 357)		return (HX_("Mesh Object ",4e,9f,c9,27) + this->name);
            	}



hx::ObjectPtr< MeshObject_obj > MeshObject_obj::__new( ::iron::data::MeshData data,::Array< ::Dynamic> materials) {
	hx::ObjectPtr< MeshObject_obj > __this = new MeshObject_obj();
	__this->__construct(data,materials);
	return __this;
}

hx::ObjectPtr< MeshObject_obj > MeshObject_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::data::MeshData data,::Array< ::Dynamic> materials) {
	MeshObject_obj *__this = (MeshObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MeshObject_obj), true, "iron.object.MeshObject"));
	*(void **)__this = MeshObject_obj::_hx_vtable;
	__this->__construct(data,materials);
	return __this;
}

MeshObject_obj::MeshObject_obj()
{
}

void MeshObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MeshObject);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(materials,"materials");
	HX_MARK_MEMBER_NAME(particleSystems,"particleSystems");
	HX_MARK_MEMBER_NAME(particleChildren,"particleChildren");
	HX_MARK_MEMBER_NAME(particleOwner,"particleOwner");
	HX_MARK_MEMBER_NAME(particleIndex,"particleIndex");
	HX_MARK_MEMBER_NAME(cameraDistance,"cameraDistance");
	HX_MARK_MEMBER_NAME(screenSize,"screenSize");
	HX_MARK_MEMBER_NAME(frustumCulling,"frustumCulling");
	HX_MARK_MEMBER_NAME(tilesheet,"tilesheet");
	 ::iron::object::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MeshObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(materials,"materials");
	HX_VISIT_MEMBER_NAME(particleSystems,"particleSystems");
	HX_VISIT_MEMBER_NAME(particleChildren,"particleChildren");
	HX_VISIT_MEMBER_NAME(particleOwner,"particleOwner");
	HX_VISIT_MEMBER_NAME(particleIndex,"particleIndex");
	HX_VISIT_MEMBER_NAME(cameraDistance,"cameraDistance");
	HX_VISIT_MEMBER_NAME(screenSize,"screenSize");
	HX_VISIT_MEMBER_NAME(frustumCulling,"frustumCulling");
	HX_VISIT_MEMBER_NAME(tilesheet,"tilesheet");
	 ::iron::object::Object_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MeshObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setData") ) { return hx::Val( setData_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cullMesh") ) { return hx::Val( cullMesh_dyn() ); }
		if (HX_FIELD_EQ(inName,"initLods") ) { return hx::Val( initLods_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"materials") ) { return hx::Val( materials ); }
		if (HX_FIELD_EQ(inName,"tilesheet") ) { return hx::Val( tilesheet ); }
		if (HX_FIELD_EQ(inName,"setCulled") ) { return hx::Val( setCulled_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"screenSize") ) { return hx::Val( screenSize ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"skipContext") ) { return hx::Val( skipContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"getContexts") ) { return hx::Val( getContexts_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderBatch") ) { return hx::Val( renderBatch_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cullMaterial") ) { return hx::Val( cullMaterial_dyn() ); }
		if (HX_FIELD_EQ(inName,"validContext") ) { return hx::Val( validContext_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"particleOwner") ) { return hx::Val( particleOwner ); }
		if (HX_FIELD_EQ(inName,"particleIndex") ) { return hx::Val( particleIndex ); }
		if (HX_FIELD_EQ(inName,"isLodMaterial") ) { return hx::Val( isLodMaterial_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cameraDistance") ) { return hx::Val( cameraDistance ); }
		if (HX_FIELD_EQ(inName,"frustumCulling") ) { return hx::Val( frustumCulling ); }
		if (HX_FIELD_EQ(inName,"setupAnimation") ) { return hx::Val( setupAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupTilesheet") ) { return hx::Val( setupTilesheet_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"particleSystems") ) { return hx::Val( particleSystems ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"particleChildren") ) { return hx::Val( particleChildren ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"computeScreenSize") ) { return hx::Val( computeScreenSize_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setupParticleSystem") ) { return hx::Val( setupParticleSystem_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"computeCameraDistance") ) { return hx::Val( computeCameraDistance_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MeshObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::iron::data::MeshData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"materials") ) { materials=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilesheet") ) { tilesheet=inValue.Cast<  ::iron::object::Tilesheet >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"screenSize") ) { screenSize=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"particleOwner") ) { particleOwner=inValue.Cast<  ::iron::object::MeshObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"particleIndex") ) { particleIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cameraDistance") ) { cameraDistance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frustumCulling") ) { frustumCulling=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"particleSystems") ) { particleSystems=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"particleChildren") ) { particleChildren=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MeshObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("materials","\xec","\xb5","\x0b","\xa0"));
	outFields->push(HX_HCSTRING("particleSystems","\xfe","\x58","\xb0","\xf3"));
	outFields->push(HX_HCSTRING("particleChildren","\xa5","\xc9","\x1d","\x55"));
	outFields->push(HX_HCSTRING("particleOwner","\x0d","\x4c","\xcd","\x4e"));
	outFields->push(HX_HCSTRING("particleIndex","\xec","\x4e","\x6b","\xd4"));
	outFields->push(HX_HCSTRING("cameraDistance","\xfa","\x42","\x86","\x61"));
	outFields->push(HX_HCSTRING("screenSize","\x4d","\x2e","\x8a","\xc4"));
	outFields->push(HX_HCSTRING("frustumCulling","\x2e","\x53","\x95","\x96"));
	outFields->push(HX_HCSTRING("tilesheet","\xb1","\xd0","\x4d","\x74"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MeshObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::data::MeshData*/ ,(int)offsetof(MeshObject_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MeshObject_obj,materials),HX_HCSTRING("materials","\xec","\xb5","\x0b","\xa0")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MeshObject_obj,particleSystems),HX_HCSTRING("particleSystems","\xfe","\x58","\xb0","\xf3")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MeshObject_obj,particleChildren),HX_HCSTRING("particleChildren","\xa5","\xc9","\x1d","\x55")},
	{hx::fsObject /*::iron::object::MeshObject*/ ,(int)offsetof(MeshObject_obj,particleOwner),HX_HCSTRING("particleOwner","\x0d","\x4c","\xcd","\x4e")},
	{hx::fsInt,(int)offsetof(MeshObject_obj,particleIndex),HX_HCSTRING("particleIndex","\xec","\x4e","\x6b","\xd4")},
	{hx::fsFloat,(int)offsetof(MeshObject_obj,cameraDistance),HX_HCSTRING("cameraDistance","\xfa","\x42","\x86","\x61")},
	{hx::fsFloat,(int)offsetof(MeshObject_obj,screenSize),HX_HCSTRING("screenSize","\x4d","\x2e","\x8a","\xc4")},
	{hx::fsBool,(int)offsetof(MeshObject_obj,frustumCulling),HX_HCSTRING("frustumCulling","\x2e","\x53","\x95","\x96")},
	{hx::fsObject /*::iron::object::Tilesheet*/ ,(int)offsetof(MeshObject_obj,tilesheet),HX_HCSTRING("tilesheet","\xb1","\xd0","\x4d","\x74")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MeshObject_obj_sStaticStorageInfo = 0;
#endif

static ::String MeshObject_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("materials","\xec","\xb5","\x0b","\xa0"),
	HX_HCSTRING("particleSystems","\xfe","\x58","\xb0","\xf3"),
	HX_HCSTRING("particleChildren","\xa5","\xc9","\x1d","\x55"),
	HX_HCSTRING("particleOwner","\x0d","\x4c","\xcd","\x4e"),
	HX_HCSTRING("particleIndex","\xec","\x4e","\x6b","\xd4"),
	HX_HCSTRING("cameraDistance","\xfa","\x42","\x86","\x61"),
	HX_HCSTRING("screenSize","\x4d","\x2e","\x8a","\xc4"),
	HX_HCSTRING("frustumCulling","\x2e","\x53","\x95","\x96"),
	HX_HCSTRING("tilesheet","\xb1","\xd0","\x4d","\x74"),
	HX_HCSTRING("setData","\xec","\x96","\xe7","\x07"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("setupAnimation","\xc7","\xe8","\xce","\xb6"),
	HX_HCSTRING("setupParticleSystem","\x32","\x05","\xa0","\x26"),
	HX_HCSTRING("setupTilesheet","\x74","\xca","\xe7","\xdf"),
	HX_HCSTRING("isLodMaterial","\x7e","\xa6","\xe7","\xf7"),
	HX_HCSTRING("setCulled","\xd3","\x63","\x93","\x9a"),
	HX_HCSTRING("cullMaterial","\x79","\x60","\x48","\x3a"),
	HX_HCSTRING("cullMesh","\xbf","\x7c","\xd5","\xb0"),
	HX_HCSTRING("skipContext","\x30","\x05","\xe9","\xb4"),
	HX_HCSTRING("getContexts","\x5a","\x5e","\x1f","\x55"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderBatch","\x84","\x14","\x6c","\x79"),
	HX_HCSTRING("validContext","\x53","\x20","\x6f","\x05"),
	HX_HCSTRING("computeCameraDistance","\xd1","\xa0","\x99","\xbb"),
	HX_HCSTRING("computeScreenSize","\xa4","\x14","\xd6","\xdb"),
	HX_HCSTRING("initLods","\x02","\xcc","\x6e","\x4c"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void MeshObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MeshObject_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MeshObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MeshObject_obj::__mClass,"__mClass");
};

#endif

hx::Class MeshObject_obj::__mClass;

void MeshObject_obj::__register()
{
	hx::Object *dummy = new MeshObject_obj;
	MeshObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.MeshObject","\x55","\x69","\x60","\x64");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MeshObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MeshObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MeshObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MeshObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MeshObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MeshObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace object
