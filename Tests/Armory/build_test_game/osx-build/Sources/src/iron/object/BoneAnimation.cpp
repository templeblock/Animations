// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_Armature
#include <iron/data/Armature.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_Geometry
#include <iron/data/Geometry.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_BoneAnimation
#include <iron/object/BoneAnimation.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_511999cb334fbc62_10_new,"iron.object.BoneAnimation","new",0x91631269,"iron.object.BoneAnimation.new","iron/object/BoneAnimation.hx",10,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_59_setSkin,"iron.object.BoneAnimation","setSkin",0x774cd1c8,"iron.object.BoneAnimation.setSkin","iron/object/BoneAnimation.hx",59,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_78_setSkin,"iron.object.BoneAnimation","setSkin",0x774cd1c8,"iron.object.BoneAnimation.setSkin","iron/object/BoneAnimation.hx",78,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_83_addBoneChild,"iron.object.BoneAnimation","addBoneChild",0xf060162e,"iron.object.BoneAnimation.addBoneChild","iron/object/BoneAnimation.hx",83,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_90_updateBoneChildren,"iron.object.BoneAnimation","updateBoneChildren",0x0a3be863,"iron.object.BoneAnimation.updateBoneChildren","iron/object/BoneAnimation.hx",90,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_107_setAction,"iron.object.BoneAnimation","setAction",0xbb1b9fc1,"iron.object.BoneAnimation.setAction","iron/object/BoneAnimation.hx",107,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_122_setActionBlend,"iron.object.BoneAnimation","setActionBlend",0x5466fcd0,"iron.object.BoneAnimation.setActionBlend","iron/object/BoneAnimation.hx",122,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_136_play,"iron.object.BoneAnimation","play",0xa6a4b3cb,"iron.object.BoneAnimation.play","iron/object/BoneAnimation.hx",136,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_143_update,"iron.object.BoneAnimation","update",0x6f5e6fa0,"iron.object.BoneAnimation.update","iron/object/BoneAnimation.hx",143,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_166_updateAnim,"iron.object.BoneAnimation","updateAnim",0x3c2971d1,"iron.object.BoneAnimation.updateAnim","iron/object/BoneAnimation.hx",166,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_200_updateConstraints,"iron.object.BoneAnimation","updateConstraints",0x45755db6,"iron.object.BoneAnimation.updateConstraints","iron/object/BoneAnimation.hx",200,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_241_notifyOnUpdate,"iron.object.BoneAnimation","notifyOnUpdate",0x42615d08,"iron.object.BoneAnimation.notifyOnUpdate","iron/object/BoneAnimation.hx",241,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_245_updateBonesOnly,"iron.object.BoneAnimation","updateBonesOnly",0x086809fb,"iron.object.BoneAnimation.updateBonesOnly","iron/object/BoneAnimation.hx",245,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_254_multParent,"iron.object.BoneAnimation","multParent",0xa6217651,"iron.object.BoneAnimation.multParent","iron/object/BoneAnimation.hx",254,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_265_multParent2,"iron.object.BoneAnimation","multParent2",0xb72610c1,"iron.object.BoneAnimation.multParent2","iron/object/BoneAnimation.hx",265,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_279_updateSkinGpu,"iron.object.BoneAnimation","updateSkinGpu",0xf90883ef,"iron.object.BoneAnimation.updateSkinGpu","iron/object/BoneAnimation.hx",279,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_331_updateSkinBuffer,"iron.object.BoneAnimation","updateSkinBuffer",0x6880ff1d,"iron.object.BoneAnimation.updateSkinBuffer","iron/object/BoneAnimation.hx",331,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_463_totalFrames,"iron.object.BoneAnimation","totalFrames",0xd2599593,"iron.object.BoneAnimation.totalFrames","iron/object/BoneAnimation.hx",463,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_469_getBone,"iron.object.BoneAnimation","getBone",0x7911ad83,"iron.object.BoneAnimation.getBone","iron/object/BoneAnimation.hx",469,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_475_getBoneIndex,"iron.object.BoneAnimation","getBoneIndex",0x78bd828f,"iron.object.BoneAnimation.getBoneIndex","iron/object/BoneAnimation.hx",475,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_483_getBoneMat,"iron.object.BoneAnimation","getBoneMat",0x784a28dd,"iron.object.BoneAnimation.getBoneMat","iron/object/BoneAnimation.hx",483,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_487_getBoneMatBlend,"iron.object.BoneAnimation","getBoneMatBlend",0x26e5ee34,"iron.object.BoneAnimation.getBoneMatBlend","iron/object/BoneAnimation.hx",487,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_490_getAbsMat,"iron.object.BoneAnimation","getAbsMat",0x43a59d4d,"iron.object.BoneAnimation.getAbsMat","iron/object/BoneAnimation.hx",490,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_500_getWorldMat,"iron.object.BoneAnimation","getWorldMat",0x2a1d212d,"iron.object.BoneAnimation.getWorldMat","iron/object/BoneAnimation.hx",500,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_509_getBoneLen,"iron.object.BoneAnimation","getBoneLen",0x78496a12,"iron.object.BoneAnimation.getBoneLen","iron/object/BoneAnimation.hx",509,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_516_solveIK,"iron.object.BoneAnimation","solveIK",0xf2c797aa,"iron.object.BoneAnimation.solveIK","iron/object/BoneAnimation.hx",516,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_12_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",12,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_41_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",41,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_42_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",42,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_43_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",43,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_44_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",44,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_45_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",45,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_46_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",46,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_499_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",499,0xe0a19f47)
namespace iron{
namespace object{

void BoneAnimation_obj::__construct(::String __o_armatureName){
::String armatureName = __o_armatureName.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_10_new)
HXLINE( 239)		this->onUpdate = null();
HXLINE(  38)		this->nor =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  37)		this->pos =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  36)		this->bm = ::iron::math::Mat4_obj::identity();
HXLINE(  35)		this->m2 = ::iron::math::Mat4_obj::identity();
HXLINE(  34)		this->m1 = ::iron::math::Mat4_obj::identity();
HXLINE(  33)		this->m = ::iron::math::Mat4_obj::identity();
HXLINE(  31)		this->constraintMats = null();
HXLINE(  30)		this->constraintTargetsI = null();
HXLINE(  29)		this->constraintTargets = null();
HXLINE(  27)		this->boneChildren = null();
HXLINE(  25)		this->applyParent = null();
HXLINE(  24)		this->absMats = null();
HXLINE(  23)		this->skeletonMatsBlend = null();
HXLINE(  22)		this->skeletonBonesBlend = null();
HXLINE(  21)		this->skeletonMats = null();
HXLINE(  20)		this->skeletonBones = null();
HXLINE(  49)		super::__construct();
HXLINE(  50)		this->isSampled = false;
HXLINE(  51)		{
HXLINE(  51)			int _g = (int)0;
HXDLIN(  51)			::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->armatures;
HXDLIN(  51)			while((_g < _g1->length)){
HXLINE(  51)				 ::iron::data::Armature a = _g1->__get(_g).StaticCast<  ::iron::data::Armature >();
HXDLIN(  51)				_g = (_g + (int)1);
HXLINE(  52)				if ((a->name == armatureName)) {
HXLINE(  53)					this->armature = a;
HXLINE(  54)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
            		}
            	}

Dynamic BoneAnimation_obj::__CreateEmpty() { return new BoneAnimation_obj; }

void *BoneAnimation_obj::_hx_vtable = 0;

Dynamic BoneAnimation_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BoneAnimation_obj > _hx_result = new BoneAnimation_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BoneAnimation_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1ad734d9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1ad734d9;
	} else {
		return inClassId==(int)0x6263e191;
	}
}

void BoneAnimation_obj::setSkin( ::iron::object::MeshObject mo){
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_59_setSkin)
HXDLIN(  59)		 ::iron::object::BoneAnimation _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  60)		this->object = mo;
HXLINE(  61)		 ::iron::data::MeshData _hx_tmp;
HXDLIN(  61)		if (hx::IsNotNull( mo )) {
HXLINE(  61)			_hx_tmp = mo->data;
            		}
            		else {
HXLINE(  61)			_hx_tmp = null();
            		}
HXDLIN(  61)		this->data = _hx_tmp;
HXLINE(  62)		bool _hx_tmp1;
HXDLIN(  62)		if (hx::IsNotNull( this->data )) {
HXLINE(  62)			_hx_tmp1 = this->data->isSkinned;
            		}
            		else {
HXLINE(  62)			_hx_tmp1 = false;
            		}
HXDLIN(  62)		this->isSkinned = _hx_tmp1;
HXLINE(  63)		if (this->isSkinned) {
HXLINE(  68)			int boneSize = (int)8;
HXLINE(  70)			 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,(::iron::object::BoneAnimation_obj::skinMaxBones * boneSize));
HXDLIN(  70)			this->skinBuffer = this1;
HXLINE(  71)			{
HXLINE(  71)				int _g1 = (int)0;
HXDLIN(  71)				int _g = this->skinBuffer->self.length();
HXDLIN(  71)				while((_g1 < _g)){
HXLINE(  71)					_g1 = (_g1 + (int)1);
HXDLIN(  71)					int i = (_g1 - (int)1);
HXDLIN(  71)					this->skinBuffer->self.set(i,(int)0);
            				}
            			}
HXLINE(  73)			{
HXLINE(  73)				 ::iron::math::Quat _this = this->object->transform->rot;
HXDLIN(  73)				_this->x = (int)0;
HXDLIN(  73)				_this->y = (int)0;
HXDLIN(  73)				_this->z = (int)0;
HXDLIN(  73)				_this->w = (int)1;
            			}
HXLINE(  74)			this->object->transform->buildMatrix();
HXLINE(  76)			::Array< ::String > refs = ( (::Array< ::String >)(mo->parent->raw->__Field(HX_("bone_actions",c2,c4,dc,85),hx::paccDynamic)) );
HXLINE(  77)			bool _hx_tmp2;
HXDLIN(  77)			if (hx::IsNotNull( refs )) {
HXLINE(  77)				_hx_tmp2 = (refs->length > (int)0);
            			}
            			else {
HXLINE(  77)				_hx_tmp2 = false;
            			}
HXDLIN(  77)			if (_hx_tmp2) {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::iron::object::BoneAnimation,_gthis) HXARGC(1)
            				void _hx_run( ::Dynamic action){
            					HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_78_setSkin)
HXLINE(  78)					_gthis->play(( (::String)(action->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ),null(),null(),null(),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  78)				::iron::data::Data_obj::getSceneRaw(refs->__get((int)0), ::Dynamic(new _hx_Closure_0(_gthis)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,setSkin,(void))

void BoneAnimation_obj::addBoneChild(::String bone, ::iron::object::Object o){
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_83_addBoneChild)
HXLINE(  84)		if (hx::IsNull( this->boneChildren )) {
HXLINE(  84)			this->boneChildren =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE(  85)		::Array< ::Dynamic> ar = ( (::Array< ::Dynamic>)(this->boneChildren->get(bone)) );
HXLINE(  86)		if (hx::IsNull( ar )) {
HXLINE(  86)			ar = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  86)			this->boneChildren->set(bone,ar);
            		}
HXLINE(  87)		ar->push(o);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BoneAnimation_obj,addBoneChild,(void))

void BoneAnimation_obj::updateBoneChildren( ::Dynamic bone, ::iron::math::Mat4 bm){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_90_updateBoneChildren)
HXLINE(  91)		::Array< ::Dynamic> ar = ( (::Array< ::Dynamic>)(this->boneChildren->get(( (::String)(bone->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ))) );
HXLINE(  92)		if (hx::IsNull( ar )) {
HXLINE(  92)			return;
            		}
HXLINE(  93)		{
HXLINE(  93)			int _g = (int)0;
HXDLIN(  93)			while((_g < ar->length)){
HXLINE(  93)				 ::iron::object::Object o = ar->__get(_g).StaticCast<  ::iron::object::Object >();
HXDLIN(  93)				_g = (_g + (int)1);
HXLINE(  94)				 ::iron::object::Transform t = o->transform;
HXLINE(  95)				if (hx::IsNull( t->boneParent )) {
HXLINE(  95)					t->boneParent = ::iron::math::Mat4_obj::identity();
            				}
HXLINE(  96)				if (hx::IsNotNull( ( ( ::kha::arrays::Float32ArrayPrivate)(o->raw->__Field(HX_("parent_bone_tail",16,52,cc,9c),hx::paccDynamic)) ) )) {
HXLINE(  97)					 ::kha::arrays::Float32ArrayPrivate v = ( ( ::kha::arrays::Float32ArrayPrivate)(o->raw->__Field(HX_("parent_bone_tail",16,52,cc,9c),hx::paccDynamic)) );
HXLINE(  98)					 ::iron::math::Mat4 t1 = t->boneParent;
HXDLIN(  98)					float _hx_tmp = v->self.get((int)0);
HXDLIN(  98)					float _hx_tmp1 = v->self.get((int)1);
HXDLIN(  98)					t1->initTranslate(_hx_tmp,_hx_tmp1,v->self.get((int)2));
HXLINE(  99)					t->boneParent->multmat2(bm);
            				}
            				else {
HXLINE( 101)					t->boneParent->setFrom(bm);
            				}
HXLINE( 102)				t->buildMatrix();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BoneAnimation_obj,updateBoneChildren,(void))

void BoneAnimation_obj::setAction(::String action){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_107_setAction)
HXDLIN( 107)		if (this->isSkinned) {
HXLINE( 108)			this->skeletonBones = ( (::Array< ::Dynamic>)(this->data->geom->actions->get(action)) );
HXLINE( 109)			this->skeletonMats = ( (::Array< ::Dynamic>)(this->data->geom->mats->get(action)) );
HXLINE( 110)			this->skeletonBonesBlend = null();
HXLINE( 111)			this->skeletonMatsBlend = null();
            		}
            		else {
HXLINE( 114)			this->armature->initMats();
HXLINE( 115)			 ::Dynamic a = this->armature->getAction(action);
HXLINE( 116)			this->skeletonBones = ( (::Array< ::Dynamic>)(a->__Field(HX_("bones",af,58,f7,b6),hx::paccDynamic)) );
HXLINE( 117)			this->skeletonMats = ( (::Array< ::Dynamic>)(a->__Field(HX_("mats",d3,41,56,48),hx::paccDynamic)) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,setAction,(void))

void BoneAnimation_obj::setActionBlend(::String action){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_122_setActionBlend)
HXDLIN( 122)		if (this->isSkinned) {
HXLINE( 123)			this->skeletonBonesBlend = this->skeletonBones;
HXLINE( 124)			this->skeletonMatsBlend = this->skeletonMats;
HXLINE( 125)			this->skeletonBones = ( (::Array< ::Dynamic>)(this->data->geom->actions->get(action)) );
HXLINE( 126)			this->skeletonMats = ( (::Array< ::Dynamic>)(this->data->geom->mats->get(action)) );
            		}
            		else {
HXLINE( 129)			this->armature->initMats();
HXLINE( 130)			 ::Dynamic a = this->armature->getAction(action);
HXLINE( 131)			this->skeletonBones = ( (::Array< ::Dynamic>)(a->__Field(HX_("bones",af,58,f7,b6),hx::paccDynamic)) );
HXLINE( 132)			this->skeletonMats = ( (::Array< ::Dynamic>)(a->__Field(HX_("mats",d3,41,56,48),hx::paccDynamic)) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,setActionBlend,(void))

void BoneAnimation_obj::play(::String __o_action, ::Dynamic onComplete,hx::Null< Float >  __o_blendTime,hx::Null< Float >  __o_speed,hx::Null< bool >  __o_loop){
::String action = __o_action.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
Float blendTime = __o_blendTime.Default(((Float)0.2));
Float speed = __o_speed.Default(((Float)1.0));
bool loop = __o_loop.Default(true);
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_136_play)
HXLINE( 137)		this->super::play(action,onComplete,blendTime,speed,loop);
HXLINE( 138)		if ((action != HX_("",00,00,00,00))) {
HXLINE( 139)			if ((blendTime > (int)0)) {
HXLINE( 139)				this->setActionBlend(action);
            			}
            			else {
HXLINE( 139)				this->setAction(action);
            			}
            		}
            	}


void BoneAnimation_obj::update(Float delta){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_143_update)
HXLINE( 144)		bool _hx_tmp;
HXDLIN( 144)		if (!(this->isSkinned)) {
HXLINE( 144)			_hx_tmp = hx::IsNull( this->skeletonBones );
            		}
            		else {
HXLINE( 144)			_hx_tmp = false;
            		}
HXDLIN( 144)		if (_hx_tmp) {
HXLINE( 144)			this->setAction(( (::String)(this->armature->actions->__get((int)0)->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
            		}
HXLINE( 145)		bool _hx_tmp1;
HXDLIN( 145)		if (hx::IsNotNull( this->object )) {
HXLINE( 145)			if (!(!(this->object->visible))) {
HXLINE( 145)				_hx_tmp1 = this->object->culled;
            			}
            			else {
HXLINE( 145)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 145)			_hx_tmp1 = false;
            		}
HXDLIN( 145)		if (_hx_tmp1) {
HXLINE( 145)			return;
            		}
HXLINE( 146)		bool _hx_tmp2;
HXDLIN( 146)		if (hx::IsNotNull( this->skeletonBones )) {
HXLINE( 146)			_hx_tmp2 = (this->skeletonBones->length == (int)0);
            		}
            		else {
HXLINE( 146)			_hx_tmp2 = true;
            		}
HXDLIN( 146)		if (_hx_tmp2) {
HXLINE( 146)			return;
            		}
HXLINE( 156)		this->super::update(delta);
HXLINE( 157)		if (this->paused) {
HXLINE( 157)			return;
            		}
HXLINE( 159)		this->updateAnim();
            	}


void BoneAnimation_obj::updateAnim(){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_166_updateAnim)
HXLINE( 167)		::Array< ::Dynamic> lastBones = this->skeletonBones;
HXLINE( 168)		{
HXLINE( 168)			int _g = (int)0;
HXDLIN( 168)			::Array< ::Dynamic> _g1 = this->skeletonBones;
HXDLIN( 168)			while((_g < _g1->length)){
HXLINE( 168)				 ::Dynamic b = _g1->__get(_g);
HXDLIN( 168)				_g = (_g + (int)1);
HXLINE( 169)				if (hx::IsNotNull( b->__Field(HX_("anim",11,86,71,40),hx::paccDynamic) )) {
HXLINE( 169)					this->updateTrack(b->__Field(HX_("anim",11,86,71,40),hx::paccDynamic));
HXDLIN( 169)					goto _hx_goto_12;
            				}
            			}
            			_hx_goto_12:;
            		}
HXLINE( 172)		if (hx::IsNotEq( lastBones,this->skeletonBones )) {
HXLINE( 172)			return;
            		}
HXLINE( 173)		{
HXLINE( 173)			int _g11 = (int)0;
HXDLIN( 173)			int _g2 = this->skeletonBones->length;
HXDLIN( 173)			while((_g11 < _g2)){
HXLINE( 173)				_g11 = (_g11 + (int)1);
HXDLIN( 173)				int i = (_g11 - (int)1);
HXLINE( 174)				 ::Dynamic _hx_tmp = this->skeletonBones->__get(i)->__Field(HX_("anim",11,86,71,40),hx::paccDynamic);
HXDLIN( 174)				this->updateAnimSampled(_hx_tmp,this->skeletonMats->__get(i).StaticCast<  ::iron::math::Mat4 >());
            			}
            		}
HXLINE( 176)		bool _hx_tmp1;
HXDLIN( 176)		if ((this->blendTime > (int)0)) {
HXLINE( 176)			_hx_tmp1 = hx::IsNotNull( this->skeletonBonesBlend );
            		}
            		else {
HXLINE( 176)			_hx_tmp1 = false;
            		}
HXDLIN( 176)		if (_hx_tmp1) {
HXLINE( 177)			{
HXLINE( 177)				int _g3 = (int)0;
HXDLIN( 177)				::Array< ::Dynamic> _g12 = this->skeletonBonesBlend;
HXDLIN( 177)				while((_g3 < _g12->length)){
HXLINE( 177)					 ::Dynamic b1 = _g12->__get(_g3);
HXDLIN( 177)					_g3 = (_g3 + (int)1);
HXLINE( 178)					if (hx::IsNotNull( b1->__Field(HX_("anim",11,86,71,40),hx::paccDynamic) )) {
HXLINE( 178)						this->updateTrack(b1->__Field(HX_("anim",11,86,71,40),hx::paccDynamic));
HXDLIN( 178)						goto _hx_goto_14;
            					}
            				}
            				_hx_goto_14:;
            			}
HXLINE( 180)			{
HXLINE( 180)				int _g13 = (int)0;
HXDLIN( 180)				int _g4 = this->skeletonBonesBlend->length;
HXDLIN( 180)				while((_g13 < _g4)){
HXLINE( 180)					_g13 = (_g13 + (int)1);
HXDLIN( 180)					int i1 = (_g13 - (int)1);
HXLINE( 181)					 ::Dynamic _hx_tmp2 = this->skeletonBonesBlend->__get(i1)->__Field(HX_("anim",11,86,71,40),hx::paccDynamic);
HXDLIN( 181)					this->updateAnimSampled(_hx_tmp2,this->skeletonMatsBlend->__get(i1).StaticCast<  ::iron::math::Mat4 >());
            				}
            			}
            		}
HXLINE( 185)		this->updateConstraints();
HXLINE( 188)		if (hx::IsNotNull( this->onUpdate )) {
HXLINE( 188)			this->onUpdate();
            		}
HXLINE( 190)		if (this->isSkinned) {
HXLINE( 194)			this->updateSkinGpu();
            		}
            		else {
HXLINE( 197)			this->updateBonesOnly();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoneAnimation_obj,updateAnim,(void))

void BoneAnimation_obj::updateConstraints(){
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_200_updateConstraints)
HXLINE( 201)		::Array< ::Dynamic> cs = ( (::Array< ::Dynamic>)( ::Dynamic(this->data->raw->__Field(HX_("skin",7d,16,55,4c),hx::paccDynamic))->__Field(HX_("constraints",76,51,b4,17),hx::paccDynamic)) );
HXLINE( 202)		if (hx::IsNull( cs )) {
HXLINE( 202)			return;
            		}
HXLINE( 204)		if (hx::IsNull( this->constraintTargets )) {
HXLINE( 205)			this->constraintTargets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 206)			this->constraintTargetsI = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 207)			{
HXLINE( 207)				int _g = (int)0;
HXDLIN( 207)				while((_g < cs->length)){
HXLINE( 207)					 ::Dynamic c = cs->__get(_g);
HXDLIN( 207)					_g = (_g + (int)1);
HXLINE( 208)					 ::iron::object::Object o = ::iron::Scene_obj::active->getChild(( (::String)(c->__Field(HX_("target",51,f3,ec,86),hx::paccDynamic)) ));
HXLINE( 209)					this->constraintTargets->push(o);
HXLINE( 210)					 ::iron::math::Mat4 m = null();
HXLINE( 211)					if (hx::IsNotNull( o )) {
HXLINE( 212)						m = ::iron::math::Mat4_obj::fromFloat32Array(( ( ::kha::arrays::Float32ArrayPrivate)( ::Dynamic(o->raw->__Field(HX_("transform",6c,2d,93,45),hx::paccDynamic))->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) ),null());
HXLINE( 213)						m->getInverse(m);
            					}
HXLINE( 215)					this->constraintTargetsI->push(m);
            				}
            			}
HXLINE( 217)			this->constraintMats =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 220)		{
HXLINE( 220)			int _g1 = (int)0;
HXDLIN( 220)			int _g2 = cs->length;
HXDLIN( 220)			while((_g1 < _g2)){
HXLINE( 220)				_g1 = (_g1 + (int)1);
HXDLIN( 220)				int i = (_g1 - (int)1);
HXLINE( 221)				 ::Dynamic c1 = cs->__get(i);
HXLINE( 222)				 ::Dynamic bone = this->getBone(( (::String)(c1->__Field(HX_("bone",44,83,1b,41),hx::paccDynamic)) ));
HXLINE( 223)				if (hx::IsNull( bone )) {
HXLINE( 223)					continue;
            				}
HXLINE( 224)				 ::iron::object::Object o1 = this->constraintTargets->__get(i).StaticCast<  ::iron::object::Object >();
HXLINE( 225)				if (hx::IsNull( o1 )) {
HXLINE( 225)					continue;
            				}
HXLINE( 226)				if ((( (::String)(c1->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("CHILD_OF",3a,8f,f9,c9))) {
HXLINE( 227)					 ::iron::math::Mat4 m1 = this->constraintMats->get(bone).StaticCast<  ::iron::math::Mat4 >();
HXLINE( 228)					if (hx::IsNull( m1 )) {
HXLINE( 228)						m1 = ::iron::math::Mat4_obj::identity();
HXDLIN( 228)						this->constraintMats->set(bone,m1);
            					}
HXLINE( 229)					m1->setFrom(this->object->parent->transform->world);
HXLINE( 230)					m1->multmat2(this->constraintTargetsI->__get(i).StaticCast<  ::iron::math::Mat4 >());
HXLINE( 231)					m1->multmat2(o1->transform->world);
HXLINE( 232)					this->m1->getInverse(this->object->parent->transform->world);
HXLINE( 233)					m1->multmat2(this->m1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoneAnimation_obj,updateConstraints,(void))

void BoneAnimation_obj::notifyOnUpdate( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_241_notifyOnUpdate)
HXDLIN( 241)		this->onUpdate = f;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,notifyOnUpdate,(void))

void BoneAnimation_obj::updateBonesOnly(){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_245_updateBonesOnly)
HXDLIN( 245)		int _g1 = (int)0;
HXDLIN( 245)		int _g = this->skeletonBones->length;
HXDLIN( 245)		while((_g1 < _g)){
HXDLIN( 245)			_g1 = (_g1 + (int)1);
HXDLIN( 245)			int i = (_g1 - (int)1);
HXLINE( 247)			 ::Dynamic b = this->skeletonBones->__get(i);
HXLINE( 248)			 ::iron::math::Mat4 _hx_tmp = this->m;
HXDLIN( 248)			_hx_tmp->setFrom(this->skeletonMats->__get(i).StaticCast<  ::iron::math::Mat4 >());
HXLINE( 249)			this->multParent(this->m,b,this->skeletonMats,this->skeletonBones);
HXLINE( 250)			if (hx::IsNotNull( this->boneChildren )) {
HXLINE( 250)				this->updateBoneChildren(b,this->m);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoneAnimation_obj,updateBonesOnly,(void))

void BoneAnimation_obj::multParent( ::iron::math::Mat4 m, ::Dynamic bone,::Array< ::Dynamic> mats,::Array< ::Dynamic> bones){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_254_multParent)
HXLINE( 255)		 ::Dynamic p = bone->__Field(HX_("parent",2a,05,7e,ed),hx::paccDynamic);
HXLINE( 256)		while(hx::IsNotNull( p )){
HXLINE( 257)			int boneIndex = this->getBoneIndex(p,bones);
HXLINE( 258)			if ((boneIndex == (int)-1)) {
HXLINE( 258)				continue;
            			}
HXLINE( 259)			 ::iron::math::Mat4 pm = mats->__get(boneIndex).StaticCast<  ::iron::math::Mat4 >();
HXLINE( 260)			m->multmat2(pm);
HXLINE( 261)			p = p->__Field(HX_("parent",2a,05,7e,ed),hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(BoneAnimation_obj,multParent,(void))

void BoneAnimation_obj::multParent2( ::iron::math::Mat4 m, ::Dynamic bone,::Array< ::Dynamic> mats,::Array< ::Dynamic> bones){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_265_multParent2)
HXLINE( 266)		 ::Dynamic p = bone->__Field(HX_("parent",2a,05,7e,ed),hx::paccDynamic);
HXLINE( 267)		while(hx::IsNotNull( p )){
HXLINE( 268)			int boneIndex = this->getBoneIndex(p,bones);
HXLINE( 269)			if ((boneIndex == (int)-1)) {
HXLINE( 269)				continue;
            			}
HXLINE( 270)			 ::iron::math::Mat4 pm = mats->__get(boneIndex).StaticCast<  ::iron::math::Mat4 >();
HXLINE( 271)			m->multmat2(pm);
HXLINE( 272)			p = p->__Field(HX_("parent",2a,05,7e,ed),hx::paccDynamic);
HXLINE( 273)			bool _hx_tmp;
HXDLIN( 273)			if (hx::IsNotNull( this->applyParent )) {
HXLINE( 273)				_hx_tmp = !(this->applyParent->__get(boneIndex));
            			}
            			else {
HXLINE( 273)				_hx_tmp = false;
            			}
HXDLIN( 273)			if (_hx_tmp) {
HXLINE( 273)				goto _hx_goto_25;
            			}
            		}
            		_hx_goto_25:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(BoneAnimation_obj,multParent2,(void))

void BoneAnimation_obj::updateSkinGpu(){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_279_updateSkinGpu)
HXLINE( 280)		::Array< ::Dynamic> bones = this->skeletonBones;
HXLINE( 282)		Float s = ((Float)this->blendCurrent / (Float)this->blendTime);
HXLINE( 283)		s = ((s * s) * (((Float)3.0) - (((Float)2.0) * s)));
HXLINE( 285)		{
HXLINE( 285)			int _g1 = (int)0;
HXDLIN( 285)			int _g = bones->length;
HXDLIN( 285)			while((_g1 < _g)){
HXLINE( 285)				_g1 = (_g1 + (int)1);
HXDLIN( 285)				int i = (_g1 - (int)1);
HXLINE( 287)				if (hx::IsNotNull( this->constraintMats )) {
HXLINE( 288)					 ::iron::math::Mat4 m = this->constraintMats->get(bones->__get(i)).StaticCast<  ::iron::math::Mat4 >();
HXLINE( 289)					if (hx::IsNotNull( m )) {
HXLINE( 289)						this->updateSkinBuffer(m,i);
HXDLIN( 289)						continue;
            					}
            				}
HXLINE( 292)				bool _hx_tmp;
HXDLIN( 292)				if ((this->blendTime > (int)0)) {
HXLINE( 292)					_hx_tmp = hx::IsNotNull( this->skeletonBonesBlend );
            				}
            				else {
HXLINE( 292)					_hx_tmp = false;
            				}
HXDLIN( 292)				if (_hx_tmp) {
HXLINE( 293)					::Array< ::Dynamic> bonesBlend = this->skeletonBonesBlend;
HXLINE( 295)					 ::iron::math::Mat4 _hx_tmp1 = this->m1;
HXDLIN( 295)					_hx_tmp1->setFrom(this->skeletonMatsBlend->__get(i).StaticCast<  ::iron::math::Mat4 >());
HXLINE( 296)					 ::iron::math::Mat4 _hx_tmp2 = this->m1;
HXDLIN( 296)					this->multParent(_hx_tmp2,bonesBlend->__get(i),this->skeletonMatsBlend,this->skeletonBonesBlend);
HXLINE( 298)					 ::iron::math::Mat4 _hx_tmp3 = this->m2;
HXDLIN( 298)					_hx_tmp3->setFrom(this->skeletonMats->__get(i).StaticCast<  ::iron::math::Mat4 >());
HXLINE( 299)					 ::iron::math::Mat4 _hx_tmp4 = this->m2;
HXDLIN( 299)					this->multParent(_hx_tmp4,bones->__get(i),this->skeletonMats,this->skeletonBones);
HXLINE( 301)					this->m1->decompose(::iron::object::BoneAnimation_obj::vpos,::iron::object::BoneAnimation_obj::q1,::iron::object::BoneAnimation_obj::vscl);
HXLINE( 302)					this->m2->decompose(::iron::object::BoneAnimation_obj::vpos2,::iron::object::BoneAnimation_obj::q2,::iron::object::BoneAnimation_obj::vscl2);
HXLINE( 305)					 ::iron::math::Vec4 fp = ::iron::object::BoneAnimation_obj::vpos;
HXDLIN( 305)					 ::iron::math::Vec4 fp1 = ::iron::object::BoneAnimation_obj::vpos2;
HXDLIN( 305)					 ::iron::math::Vec4 fp2 = ::iron::math::Vec4_obj::lerp(fp,fp1,(((Float)1.0) - s));
HXLINE( 306)					 ::iron::math::Vec4 fs = ::iron::object::BoneAnimation_obj::vscl;
HXDLIN( 306)					 ::iron::math::Vec4 fs1 = ::iron::object::BoneAnimation_obj::vscl2;
HXDLIN( 306)					 ::iron::math::Vec4 fs2 = ::iron::math::Vec4_obj::lerp(fs,fs1,(((Float)1.0) - s));
HXLINE( 307)					 ::iron::math::Quat fq = ::iron::math::Quat_obj::lerp(::iron::object::BoneAnimation_obj::q1,::iron::object::BoneAnimation_obj::q2,s);
HXLINE( 310)					fq->toMat(this->m1);
HXLINE( 311)					this->m1->scale(fs2);
HXLINE( 312)					this->m1->self->_30 = fp2->x;
HXLINE( 313)					this->m1->self->_31 = fp2->y;
HXLINE( 314)					this->m1->self->_32 = fp2->z;
HXLINE( 315)					this->m->setFrom(this->m1);
            				}
            				else {
HXLINE( 318)					 ::iron::math::Mat4 _hx_tmp5 = this->m;
HXDLIN( 318)					_hx_tmp5->setFrom(this->skeletonMats->__get(i).StaticCast<  ::iron::math::Mat4 >());
HXLINE( 319)					bool r;
HXDLIN( 319)					if (hx::IsNotNull( this->applyParent )) {
HXLINE( 319)						r = this->applyParent->__get(i);
            					}
            					else {
HXLINE( 319)						r = true;
            					}
HXLINE( 320)					if (r) {
HXLINE( 320)						 ::iron::math::Mat4 _hx_tmp6 = this->m;
HXDLIN( 320)						this->multParent2(_hx_tmp6,bones->__get(i),this->skeletonMats,this->skeletonBones);
            					}
            				}
HXLINE( 323)				bool _hx_tmp7;
HXDLIN( 323)				if (hx::IsNotNull( this->absMats )) {
HXLINE( 323)					_hx_tmp7 = (i < this->absMats->length);
            				}
            				else {
HXLINE( 323)					_hx_tmp7 = false;
            				}
HXDLIN( 323)				if (_hx_tmp7) {
HXLINE( 323)					this->absMats->__get(i).StaticCast<  ::iron::math::Mat4 >()->setFrom(this->m);
            				}
HXLINE( 325)				if (hx::IsNotNull( this->boneChildren )) {
HXLINE( 325)					this->updateBoneChildren(bones->__get(i),this->m);
            				}
HXLINE( 326)				 ::iron::math::Mat4 _hx_tmp8 = this->m;
HXDLIN( 326)				 ::iron::math::Mat4 _hx_tmp9 = this->m;
HXDLIN( 326)				_hx_tmp8->multmats(_hx_tmp9,this->data->geom->skeletonTransformsI->__get(i).StaticCast<  ::iron::math::Mat4 >());
HXLINE( 327)				this->updateSkinBuffer(this->m,i);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoneAnimation_obj,updateSkinGpu,(void))

void BoneAnimation_obj::updateSkinBuffer( ::iron::math::Mat4 m,int i){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_331_updateSkinBuffer)
HXLINE( 350)		m->decompose(::iron::object::BoneAnimation_obj::vpos,::iron::object::BoneAnimation_obj::q1,::iron::object::BoneAnimation_obj::vscl);
HXLINE( 351)		::iron::object::BoneAnimation_obj::q1->normalize();
HXLINE( 352)		{
HXLINE( 352)			 ::iron::math::Quat _this = ::iron::object::BoneAnimation_obj::q2;
HXDLIN( 352)			_this->x = ::iron::object::BoneAnimation_obj::vpos->x;
HXDLIN( 352)			_this->y = ::iron::object::BoneAnimation_obj::vpos->y;
HXDLIN( 352)			_this->z = ::iron::object::BoneAnimation_obj::vpos->z;
HXDLIN( 352)			_this->w = ((Float)0.0);
            		}
HXLINE( 353)		::iron::object::BoneAnimation_obj::q2->multquats(::iron::object::BoneAnimation_obj::q2,::iron::object::BoneAnimation_obj::q1);
HXLINE( 354)		 ::iron::math::Quat _hx_tmp = ::iron::object::BoneAnimation_obj::q2;
HXDLIN( 354)		_hx_tmp->x = (_hx_tmp->x * ((Float)0.5));
HXDLIN( 354)		 ::iron::math::Quat _hx_tmp1 = ::iron::object::BoneAnimation_obj::q2;
HXDLIN( 354)		_hx_tmp1->y = (_hx_tmp1->y * ((Float)0.5));
HXDLIN( 354)		 ::iron::math::Quat _hx_tmp2 = ::iron::object::BoneAnimation_obj::q2;
HXDLIN( 354)		_hx_tmp2->z = (_hx_tmp2->z * ((Float)0.5));
HXDLIN( 354)		 ::iron::math::Quat _hx_tmp3 = ::iron::object::BoneAnimation_obj::q2;
HXDLIN( 354)		_hx_tmp3->w = (_hx_tmp3->w * ((Float)0.5));
HXLINE( 357)		{
HXLINE( 357)			 float32array this1 = this->skinBuffer->self;
HXDLIN( 357)			this1.set((i * (int)8),::iron::object::BoneAnimation_obj::q1->x);
            		}
HXLINE( 358)		{
HXLINE( 358)			 float32array this2 = this->skinBuffer->self;
HXDLIN( 358)			this2.set(((i * (int)8) + (int)1),::iron::object::BoneAnimation_obj::q1->y);
            		}
HXLINE( 359)		{
HXLINE( 359)			 float32array this3 = this->skinBuffer->self;
HXDLIN( 359)			this3.set(((i * (int)8) + (int)2),::iron::object::BoneAnimation_obj::q1->z);
            		}
HXLINE( 360)		{
HXLINE( 360)			 float32array this4 = this->skinBuffer->self;
HXDLIN( 360)			this4.set(((i * (int)8) + (int)3),::iron::object::BoneAnimation_obj::q1->w);
            		}
HXLINE( 361)		{
HXLINE( 361)			 float32array this5 = this->skinBuffer->self;
HXDLIN( 361)			this5.set(((i * (int)8) + (int)4),::iron::object::BoneAnimation_obj::q2->x);
            		}
HXLINE( 362)		{
HXLINE( 362)			 float32array this6 = this->skinBuffer->self;
HXDLIN( 362)			this6.set(((i * (int)8) + (int)5),::iron::object::BoneAnimation_obj::q2->y);
            		}
HXLINE( 363)		{
HXLINE( 363)			 float32array this7 = this->skinBuffer->self;
HXDLIN( 363)			this7.set(((i * (int)8) + (int)6),::iron::object::BoneAnimation_obj::q2->z);
            		}
HXLINE( 364)		{
HXLINE( 364)			 float32array this8 = this->skinBuffer->self;
HXDLIN( 364)			this8.set(((i * (int)8) + (int)7),::iron::object::BoneAnimation_obj::q2->w);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BoneAnimation_obj,updateSkinBuffer,(void))

int BoneAnimation_obj::totalFrames(){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_463_totalFrames)
HXLINE( 464)		if (hx::IsNull( this->skeletonBones )) {
HXLINE( 464)			return (int)0;
            		}
HXLINE( 465)		 ::Dynamic track =  ::Dynamic( ::Dynamic(this->skeletonBones->__get((int)0)->__Field(HX_("anim",11,86,71,40),hx::paccDynamic))->__Field(HX_("tracks",88,2b,7d,45),hx::paccDynamic))->__GetItem((int)0);
HXLINE( 466)		 ::kha::arrays::Uint32ArrayPrivate this1 = ( ( ::kha::arrays::Uint32ArrayPrivate)(track->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)) );
HXDLIN( 466)		int index = (( ( ::kha::arrays::Uint32ArrayPrivate)(track->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)) )->self.length() - (int)1);
HXDLIN( 466)		int _hx_tmp = this1->self.get(index);
HXDLIN( 466)		return ::Std_obj::_hx_int((_hx_tmp - ( ( ::kha::arrays::Uint32ArrayPrivate)(track->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)) )->self.get((int)0)));
            	}


 ::Dynamic BoneAnimation_obj::getBone(::String name){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_469_getBone)
HXLINE( 470)		if (hx::IsNull( this->skeletonBones )) {
HXLINE( 470)			return null();
            		}
HXLINE( 471)		{
HXLINE( 471)			int _g = (int)0;
HXDLIN( 471)			::Array< ::Dynamic> _g1 = this->skeletonBones;
HXDLIN( 471)			while((_g < _g1->length)){
HXLINE( 471)				 ::Dynamic b = _g1->__get(_g);
HXDLIN( 471)				_g = (_g + (int)1);
HXDLIN( 471)				if ((( (::String)(b->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 471)					return b;
            				}
            			}
            		}
HXLINE( 472)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getBone,return )

int BoneAnimation_obj::getBoneIndex( ::Dynamic bone,::Array< ::Dynamic> bones){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_475_getBoneIndex)
HXLINE( 476)		if (hx::IsNull( bones )) {
HXLINE( 476)			bones = this->skeletonBones;
            		}
HXLINE( 477)		if (hx::IsNull( bones )) {
HXLINE( 477)			return (int)-1;
            		}
HXLINE( 478)		{
HXLINE( 478)			int _g1 = (int)0;
HXDLIN( 478)			int _g = bones->length;
HXDLIN( 478)			while((_g1 < _g)){
HXLINE( 478)				_g1 = (_g1 + (int)1);
HXDLIN( 478)				int i = (_g1 - (int)1);
HXDLIN( 478)				if (hx::IsEq( bones->__get(i),bone )) {
HXLINE( 478)					return i;
            				}
            			}
            		}
HXLINE( 479)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BoneAnimation_obj,getBoneIndex,return )

 ::iron::math::Mat4 BoneAnimation_obj::getBoneMat( ::Dynamic bone){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_483_getBoneMat)
HXDLIN( 483)		if (hx::IsNotNull( this->skeletonMats )) {
HXDLIN( 483)			::Array< ::Dynamic> _hx_tmp = this->skeletonMats;
HXDLIN( 483)			return _hx_tmp->__get(this->getBoneIndex(bone,null())).StaticCast<  ::iron::math::Mat4 >();
            		}
            		else {
HXDLIN( 483)			return null();
            		}
HXDLIN( 483)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getBoneMat,return )

 ::iron::math::Mat4 BoneAnimation_obj::getBoneMatBlend( ::Dynamic bone){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_487_getBoneMatBlend)
HXDLIN( 487)		if (hx::IsNotNull( this->skeletonMatsBlend )) {
HXDLIN( 487)			::Array< ::Dynamic> _hx_tmp = this->skeletonMatsBlend;
HXDLIN( 487)			return _hx_tmp->__get(this->getBoneIndex(bone,null())).StaticCast<  ::iron::math::Mat4 >();
            		}
            		else {
HXDLIN( 487)			return null();
            		}
HXDLIN( 487)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getBoneMatBlend,return )

 ::iron::math::Mat4 BoneAnimation_obj::getAbsMat( ::Dynamic bone){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_490_getAbsMat)
HXLINE( 491)		if (hx::IsNull( this->skeletonMats )) {
HXLINE( 491)			return null();
            		}
HXLINE( 492)		if (hx::IsNull( this->absMats )) {
HXLINE( 493)			this->absMats = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 494)			while((this->absMats->length < this->skeletonMats->length)){
HXLINE( 494)				::Array< ::Dynamic> _hx_tmp = this->absMats;
HXDLIN( 494)				_hx_tmp->push(::iron::math::Mat4_obj::identity());
            			}
            		}
HXLINE( 496)		::Array< ::Dynamic> _hx_tmp1 = this->absMats;
HXDLIN( 496)		return _hx_tmp1->__get(this->getBoneIndex(bone,null())).StaticCast<  ::iron::math::Mat4 >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getAbsMat,return )

 ::iron::math::Mat4 BoneAnimation_obj::getWorldMat( ::Dynamic bone){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_500_getWorldMat)
HXLINE( 501)		if (hx::IsNull( this->skeletonMats )) {
HXLINE( 501)			return null();
            		}
HXLINE( 502)		if (hx::IsNull( this->applyParent )) {
HXLINE( 502)			this->applyParent = ::Array_obj< bool >::__new(0);
HXDLIN( 502)			{
HXLINE( 502)				int _g = (int)0;
HXDLIN( 502)				::Array< ::Dynamic> _g1 = this->skeletonMats;
HXDLIN( 502)				while((_g < _g1->length)){
HXLINE( 502)					 ::iron::math::Mat4 m = _g1->__get(_g).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 502)					_g = (_g + (int)1);
HXDLIN( 502)					this->applyParent->push(true);
            				}
            			}
            		}
HXLINE( 503)		int i = this->getBoneIndex(bone,null());
HXLINE( 504)		 ::iron::math::Mat4 _hx_tmp = ::iron::object::BoneAnimation_obj::wm;
HXDLIN( 504)		_hx_tmp->setFrom(this->skeletonMats->__get(i).StaticCast<  ::iron::math::Mat4 >());
HXLINE( 505)		 ::iron::math::Mat4 _hx_tmp1 = ::iron::object::BoneAnimation_obj::wm;
HXDLIN( 505)		this->multParent(_hx_tmp1,this->skeletonBones->__get(i),this->skeletonMats,this->skeletonBones);
HXLINE( 506)		return ::iron::object::BoneAnimation_obj::wm;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getWorldMat,return )

Float BoneAnimation_obj::getBoneLen( ::Dynamic bone){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_509_getBoneLen)
HXLINE( 510)		::Array< ::String > refs = this->data->geom->skeletonBoneRefs;
HXLINE( 511)		 ::kha::arrays::Float32ArrayPrivate lens = this->data->geom->skeletonBoneLens;
HXLINE( 512)		{
HXLINE( 512)			int _g1 = (int)0;
HXDLIN( 512)			int _g = refs->length;
HXDLIN( 512)			while((_g1 < _g)){
HXLINE( 512)				_g1 = (_g1 + (int)1);
HXDLIN( 512)				int i = (_g1 - (int)1);
HXDLIN( 512)				if ((refs->__get(i) == ( (::String)(bone->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ))) {
HXLINE( 512)					return lens->self.get(i);
            				}
            			}
            		}
HXLINE( 513)		return ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getBoneLen,return )

void BoneAnimation_obj::solveIK( ::Dynamic effector, ::iron::math::Vec4 goal,hx::Null< Float >  __o_precission,hx::Null< int >  __o_maxIterations){
Float precission = __o_precission.Default(((Float)0.1));
int maxIterations = __o_maxIterations.Default(6);
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_516_solveIK)
HXLINE( 518)		::Array< ::Dynamic> bones = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 519)		::Array< Float > lengths = ::Array_obj< Float >::__new(0);
HXLINE( 520)		 ::Dynamic start = effector;
HXLINE( 521)		while(hx::IsNotNull( start->__Field(HX_("parent",2a,05,7e,ed),hx::paccDynamic) )){
HXLINE( 522)			bones->push(start);
HXLINE( 523)			lengths->push(this->getBoneLen(start));
HXLINE( 524)			start = start->__Field(HX_("parent",2a,05,7e,ed),hx::paccDynamic);
            		}
HXLINE( 526)		start = bones->__get((bones->length - (int)1));
HXLINE( 529)		 ::iron::math::Vec4 armsc = this->object->parent->transform->scale;
HXLINE( 530)		 ::iron::math::Vec4 goal1 = goal;
HXDLIN( 530)		goal1->x = (goal1->x * ((Float)(int)1 / (Float)armsc->x));
HXDLIN( 530)		 ::iron::math::Vec4 goal2 = goal;
HXDLIN( 530)		goal2->y = (goal2->y * ((Float)(int)1 / (Float)armsc->y));
HXDLIN( 530)		 ::iron::math::Vec4 goal3 = goal;
HXDLIN( 530)		goal3->z = (goal3->z * ((Float)(int)1 / (Float)armsc->z));
HXLINE( 531)		 ::iron::math::Mat4 _this = this->getWorldMat(start);
HXDLIN( 531)		 ::iron::math::Vec4 startLoc =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this->self->_30,_this->self->_31,_this->self->_32,_this->self->_33);
HXLINE( 532)		 ::iron::math::Vec4 startLoc1 = startLoc;
HXDLIN( 532)		float startLoc2 = startLoc1->z;
HXDLIN( 532)		startLoc1->z = (startLoc2 - this->getBoneLen(start->__Field(HX_("parent",2a,05,7e,ed),hx::paccDynamic)));
HXLINE( 533)		float vx = (goal->x - startLoc->x);
HXDLIN( 533)		float vy = (goal->y - startLoc->y);
HXDLIN( 533)		float vz = (goal->z - startLoc->z);
HXDLIN( 533)		float dist = ::Math_obj::sqrt((((vx * vx) + (vy * vy)) + (vz * vz)));
HXLINE( 536)		Float x = ((Float)0.0);
HXLINE( 537)		{
HXLINE( 537)			int _g = (int)0;
HXDLIN( 537)			while((_g < lengths->length)){
HXLINE( 537)				Float l = lengths->__get(_g);
HXDLIN( 537)				_g = (_g + (int)1);
HXDLIN( 537)				x = (x + l);
            			}
            		}
HXLINE( 539)		 ::iron::math::Quat q =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 540)		 ::iron::math::Vec4 loc =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,null());
HXLINE( 541)		 ::iron::math::Vec4 sc =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,(int)1,(int)1,(int)1,null());
HXLINE( 542)		 ::iron::math::Vec4 v1 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,(int)0,(int)1,(int)0,null());
HXLINE( 543)		 ::iron::math::Vec4 v2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 546)		if ((dist > x)) {
HXLINE( 548)			 ::iron::math::Mat4 m = this->getBoneMat(start);
HXLINE( 549)			 ::iron::math::Mat4 w = this->getWorldMat(start);
HXLINE( 550)			 ::iron::math::Mat4 iw = ::iron::math::Mat4_obj::identity();
HXLINE( 551)			iw->getInverse(w);
HXLINE( 553)			m->setFrom(w);
HXLINE( 554)			m->decompose(loc,q,sc);
HXLINE( 555)			v2->setFrom(goal)->sub(startLoc)->normalize();
HXLINE( 556)			q->fromTo(v1,v2);
HXLINE( 557)			m->compose(loc,q,sc);
HXLINE( 558)			m->multmat2(iw);
HXLINE( 560)			{
HXLINE( 560)				int _g1 = (int)0;
HXDLIN( 560)				int _g2 = (bones->length - (int)1);
HXDLIN( 560)				while((_g1 < _g2)){
HXLINE( 560)					_g1 = (_g1 + (int)1);
HXDLIN( 560)					int i = (_g1 - (int)1);
HXLINE( 562)					 ::Dynamic b = bones->__get(i);
HXLINE( 563)					::Array< ::Dynamic> m1 = this->skeletonMats;
HXDLIN( 563)					 ::iron::math::Mat4 m2 = m1->__get(this->getBoneIndex(b,null())).StaticCast<  ::iron::math::Mat4 >();
HXLINE( 564)					m2->decompose(loc,q,sc);
HXLINE( 565)					m2->compose(loc, ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null()),sc);
            				}
            			}
HXLINE( 569)			{
HXLINE( 569)				int _g3 = (int)0;
HXDLIN( 569)				while((_g3 < bones->length)){
HXLINE( 569)					 ::Dynamic b1 = bones->__get(_g3);
HXDLIN( 569)					_g3 = (_g3 + (int)1);
HXDLIN( 569)					::Array< bool > _hx_tmp = this->applyParent;
HXDLIN( 569)					_hx_tmp[this->getBoneIndex(b1,null())] = true;
            				}
            			}
HXLINE( 571)			return;
            		}
HXLINE( 575)		 ::iron::math::Vec4 vec =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 576)		::Array< ::Dynamic> locs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 577)		{
HXLINE( 577)			int _g4 = (int)0;
HXDLIN( 577)			while((_g4 < bones->length)){
HXLINE( 577)				 ::Dynamic b2 = bones->__get(_g4);
HXDLIN( 577)				_g4 = (_g4 + (int)1);
HXDLIN( 577)				 ::iron::math::Mat4 _this1 = this->getWorldMat(b2);
HXDLIN( 577)				locs->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this1->self->_30,_this1->self->_31,_this1->self->_32,_this1->self->_33));
            			}
            		}
HXLINE( 579)		{
HXLINE( 579)			int _g11 = (int)0;
HXDLIN( 579)			int _g5 = maxIterations;
HXDLIN( 579)			while((_g11 < _g5)){
HXLINE( 579)				_g11 = (_g11 + (int)1);
HXDLIN( 579)				int i1 = (_g11 - (int)1);
HXLINE( 581)				vec->setFrom(goal);
HXLINE( 582)				vec->sub(locs->__get((int)0).StaticCast<  ::iron::math::Vec4 >());
HXLINE( 583)				vec->normalize();
HXLINE( 584)				vec->mult(lengths->__get((int)0));
HXLINE( 585)				locs->__get((int)0).StaticCast<  ::iron::math::Vec4 >()->setFrom(goal);
HXLINE( 586)				locs->__get((int)0).StaticCast<  ::iron::math::Vec4 >()->sub(vec);
HXLINE( 587)				{
HXLINE( 587)					int _g31 = (int)1;
HXDLIN( 587)					int _g21 = locs->length;
HXDLIN( 587)					while((_g31 < _g21)){
HXLINE( 587)						_g31 = (_g31 + (int)1);
HXDLIN( 587)						int j = (_g31 - (int)1);
HXLINE( 588)						vec->setFrom(locs->__get(j).StaticCast<  ::iron::math::Vec4 >());
HXLINE( 589)						vec->sub(locs->__get((j - (int)1)).StaticCast<  ::iron::math::Vec4 >());
HXLINE( 590)						vec->normalize();
HXLINE( 591)						vec->mult(lengths->__get(j));
HXLINE( 592)						locs->__get(j).StaticCast<  ::iron::math::Vec4 >()->setFrom(locs->__get((j - (int)1)).StaticCast<  ::iron::math::Vec4 >());
HXLINE( 593)						locs->__get(j).StaticCast<  ::iron::math::Vec4 >()->add(vec);
            					}
            				}
HXLINE( 596)				locs->__get((locs->length - (int)1)).StaticCast<  ::iron::math::Vec4 >()->setFrom(startLoc);
HXLINE( 597)				int l1 = locs->length;
HXLINE( 598)				{
HXLINE( 598)					int _g32 = (int)1;
HXDLIN( 598)					int _g22 = l1;
HXDLIN( 598)					while((_g32 < _g22)){
HXLINE( 598)						_g32 = (_g32 + (int)1);
HXDLIN( 598)						int j1 = (_g32 - (int)1);
HXLINE( 599)						vec->setFrom(locs->__get(((l1 - j1) - (int)1)).StaticCast<  ::iron::math::Vec4 >());
HXLINE( 600)						vec->sub(locs->__get((l1 - j1)).StaticCast<  ::iron::math::Vec4 >());
HXLINE( 601)						vec->normalize();
HXLINE( 602)						vec->mult(lengths->__get((l1 - j1)));
HXLINE( 603)						locs->__get(((l1 - j1) - (int)1)).StaticCast<  ::iron::math::Vec4 >()->setFrom(locs->__get((l1 - j1)).StaticCast<  ::iron::math::Vec4 >());
HXLINE( 604)						locs->__get(((l1 - j1) - (int)1)).StaticCast<  ::iron::math::Vec4 >()->add(vec);
            					}
            				}
HXLINE( 606)				 ::iron::math::Vec4 v11 = locs->__get((int)0).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 606)				float vx1 = (v11->x - goal->x);
HXDLIN( 606)				float vy1 = (v11->y - goal->y);
HXDLIN( 606)				float vz1 = (v11->z - goal->z);
HXDLIN( 606)				if ((::Math_obj::sqrt((((vx1 * vx1) + (vy1 * vy1)) + (vz1 * vz1))) <= precission)) {
HXLINE( 606)					goto _hx_goto_48;
            				}
            			}
            			_hx_goto_48:;
            		}
HXLINE( 609)		{
HXLINE( 609)			int _g6 = (int)0;
HXDLIN( 609)			while((_g6 < bones->length)){
HXLINE( 609)				 ::Dynamic b3 = bones->__get(_g6);
HXDLIN( 609)				_g6 = (_g6 + (int)1);
HXDLIN( 609)				::Array< bool > _hx_tmp1 = this->applyParent;
HXDLIN( 609)				_hx_tmp1[this->getBoneIndex(b3,null())] = false;
            			}
            		}
HXLINE( 611)		{
HXLINE( 611)			int _g12 = (int)0;
HXDLIN( 611)			int _g7 = bones->length;
HXDLIN( 611)			while((_g12 < _g7)){
HXLINE( 611)				_g12 = (_g12 + (int)1);
HXDLIN( 611)				int i2 = (_g12 - (int)1);
HXLINE( 612)				 ::iron::math::Mat4 m3 = this->getBoneMat(bones->__get(i2));
HXLINE( 613)				m3->decompose(loc,q,sc);
HXLINE( 614)				 ::iron::math::Vec4 l11;
HXDLIN( 614)				if ((i2 == (int)0)) {
HXLINE( 614)					l11 = locs->__get(i2).StaticCast<  ::iron::math::Vec4 >();
            				}
            				else {
HXLINE( 614)					l11 = locs->__get((i2 - (int)1)).StaticCast<  ::iron::math::Vec4 >();
            				}
HXLINE( 615)				 ::iron::math::Vec4 l2;
HXDLIN( 615)				if ((i2 == (int)0)) {
HXLINE( 615)					l2 = locs->__get((i2 + (int)1)).StaticCast<  ::iron::math::Vec4 >();
            				}
            				else {
HXLINE( 615)					l2 = locs->__get(i2).StaticCast<  ::iron::math::Vec4 >();
            				}
HXLINE( 616)				v2->setFrom(l11)->sub(l2)->normalize();
HXLINE( 617)				q->fromTo(v1,v2);
HXLINE( 618)				vec->setFrom(locs->__get(i2).StaticCast<  ::iron::math::Vec4 >());
HXLINE( 619)				m3->compose(vec,q,sc);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(BoneAnimation_obj,solveIK,(void))

int BoneAnimation_obj::skinMaxBones;

 ::iron::math::Vec4 BoneAnimation_obj::vpos;

 ::iron::math::Vec4 BoneAnimation_obj::vscl;

 ::iron::math::Quat BoneAnimation_obj::q1;

 ::iron::math::Quat BoneAnimation_obj::q2;

 ::iron::math::Vec4 BoneAnimation_obj::vpos2;

 ::iron::math::Vec4 BoneAnimation_obj::vscl2;

 ::iron::math::Mat4 BoneAnimation_obj::wm;


hx::ObjectPtr< BoneAnimation_obj > BoneAnimation_obj::__new(::String __o_armatureName) {
	hx::ObjectPtr< BoneAnimation_obj > __this = new BoneAnimation_obj();
	__this->__construct(__o_armatureName);
	return __this;
}

hx::ObjectPtr< BoneAnimation_obj > BoneAnimation_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_armatureName) {
	BoneAnimation_obj *__this = (BoneAnimation_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BoneAnimation_obj), true, "iron.object.BoneAnimation"));
	*(void **)__this = BoneAnimation_obj::_hx_vtable;
	__this->__construct(__o_armatureName);
	return __this;
}

BoneAnimation_obj::BoneAnimation_obj()
{
}

void BoneAnimation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BoneAnimation);
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(skinBuffer,"skinBuffer");
	HX_MARK_MEMBER_NAME(skeletonBones,"skeletonBones");
	HX_MARK_MEMBER_NAME(skeletonMats,"skeletonMats");
	HX_MARK_MEMBER_NAME(skeletonBonesBlend,"skeletonBonesBlend");
	HX_MARK_MEMBER_NAME(skeletonMatsBlend,"skeletonMatsBlend");
	HX_MARK_MEMBER_NAME(absMats,"absMats");
	HX_MARK_MEMBER_NAME(applyParent,"applyParent");
	HX_MARK_MEMBER_NAME(boneChildren,"boneChildren");
	HX_MARK_MEMBER_NAME(constraintTargets,"constraintTargets");
	HX_MARK_MEMBER_NAME(constraintTargetsI,"constraintTargetsI");
	HX_MARK_MEMBER_NAME(constraintMats,"constraintMats");
	HX_MARK_MEMBER_NAME(m,"m");
	HX_MARK_MEMBER_NAME(m1,"m1");
	HX_MARK_MEMBER_NAME(m2,"m2");
	HX_MARK_MEMBER_NAME(bm,"bm");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(nor,"nor");
	HX_MARK_MEMBER_NAME(onUpdate,"onUpdate");
	 ::iron::object::Animation_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BoneAnimation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(object,"object");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(skinBuffer,"skinBuffer");
	HX_VISIT_MEMBER_NAME(skeletonBones,"skeletonBones");
	HX_VISIT_MEMBER_NAME(skeletonMats,"skeletonMats");
	HX_VISIT_MEMBER_NAME(skeletonBonesBlend,"skeletonBonesBlend");
	HX_VISIT_MEMBER_NAME(skeletonMatsBlend,"skeletonMatsBlend");
	HX_VISIT_MEMBER_NAME(absMats,"absMats");
	HX_VISIT_MEMBER_NAME(applyParent,"applyParent");
	HX_VISIT_MEMBER_NAME(boneChildren,"boneChildren");
	HX_VISIT_MEMBER_NAME(constraintTargets,"constraintTargets");
	HX_VISIT_MEMBER_NAME(constraintTargetsI,"constraintTargetsI");
	HX_VISIT_MEMBER_NAME(constraintMats,"constraintMats");
	HX_VISIT_MEMBER_NAME(m,"m");
	HX_VISIT_MEMBER_NAME(m1,"m1");
	HX_VISIT_MEMBER_NAME(m2,"m2");
	HX_VISIT_MEMBER_NAME(bm,"bm");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(nor,"nor");
	HX_VISIT_MEMBER_NAME(onUpdate,"onUpdate");
	 ::iron::object::Animation_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BoneAnimation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"m") ) { return hx::Val( m ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"m1") ) { return hx::Val( m1 ); }
		if (HX_FIELD_EQ(inName,"m2") ) { return hx::Val( m2 ); }
		if (HX_FIELD_EQ(inName,"bm") ) { return hx::Val( bm ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		if (HX_FIELD_EQ(inName,"nor") ) { return hx::Val( nor ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { return hx::Val( object ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"absMats") ) { return hx::Val( absMats ); }
		if (HX_FIELD_EQ(inName,"setSkin") ) { return hx::Val( setSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBone") ) { return hx::Val( getBone_dyn() ); }
		if (HX_FIELD_EQ(inName,"solveIK") ) { return hx::Val( solveIK_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onUpdate") ) { return hx::Val( onUpdate ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setAction") ) { return hx::Val( setAction_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAbsMat") ) { return hx::Val( getAbsMat_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"skinBuffer") ) { return hx::Val( skinBuffer ); }
		if (HX_FIELD_EQ(inName,"updateAnim") ) { return hx::Val( updateAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"multParent") ) { return hx::Val( multParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoneMat") ) { return hx::Val( getBoneMat_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoneLen") ) { return hx::Val( getBoneLen_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyParent") ) { return hx::Val( applyParent ); }
		if (HX_FIELD_EQ(inName,"multParent2") ) { return hx::Val( multParent2_dyn() ); }
		if (HX_FIELD_EQ(inName,"totalFrames") ) { return hx::Val( totalFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"getWorldMat") ) { return hx::Val( getWorldMat_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"skeletonMats") ) { return hx::Val( skeletonMats ); }
		if (HX_FIELD_EQ(inName,"boneChildren") ) { return hx::Val( boneChildren ); }
		if (HX_FIELD_EQ(inName,"addBoneChild") ) { return hx::Val( addBoneChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoneIndex") ) { return hx::Val( getBoneIndex_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"skeletonBones") ) { return hx::Val( skeletonBones ); }
		if (HX_FIELD_EQ(inName,"updateSkinGpu") ) { return hx::Val( updateSkinGpu_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"constraintMats") ) { return hx::Val( constraintMats ); }
		if (HX_FIELD_EQ(inName,"setActionBlend") ) { return hx::Val( setActionBlend_dyn() ); }
		if (HX_FIELD_EQ(inName,"notifyOnUpdate") ) { return hx::Val( notifyOnUpdate_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateBonesOnly") ) { return hx::Val( updateBonesOnly_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoneMatBlend") ) { return hx::Val( getBoneMatBlend_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateSkinBuffer") ) { return hx::Val( updateSkinBuffer_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"skeletonMatsBlend") ) { return hx::Val( skeletonMatsBlend ); }
		if (HX_FIELD_EQ(inName,"constraintTargets") ) { return hx::Val( constraintTargets ); }
		if (HX_FIELD_EQ(inName,"updateConstraints") ) { return hx::Val( updateConstraints_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"skeletonBonesBlend") ) { return hx::Val( skeletonBonesBlend ); }
		if (HX_FIELD_EQ(inName,"constraintTargetsI") ) { return hx::Val( constraintTargetsI ); }
		if (HX_FIELD_EQ(inName,"updateBoneChildren") ) { return hx::Val( updateBoneChildren_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BoneAnimation_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"q1") ) { outValue = ( q1 ); return true; }
		if (HX_FIELD_EQ(inName,"q2") ) { outValue = ( q2 ); return true; }
		if (HX_FIELD_EQ(inName,"wm") ) { outValue = ( wm ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"vpos") ) { outValue = ( vpos ); return true; }
		if (HX_FIELD_EQ(inName,"vscl") ) { outValue = ( vscl ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vpos2") ) { outValue = ( vpos2 ); return true; }
		if (HX_FIELD_EQ(inName,"vscl2") ) { outValue = ( vscl2 ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"skinMaxBones") ) { outValue = ( skinMaxBones ); return true; }
	}
	return false;
}

hx::Val BoneAnimation_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"m") ) { m=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"m1") ) { m1=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m2") ) { m2=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bm") ) { bm=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nor") ) { nor=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::iron::data::MeshData >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::iron::object::MeshObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"absMats") ) { absMats=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onUpdate") ) { onUpdate=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"skinBuffer") ) { skinBuffer=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyParent") ) { applyParent=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"skeletonMats") ) { skeletonMats=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boneChildren") ) { boneChildren=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"skeletonBones") ) { skeletonBones=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"constraintMats") ) { constraintMats=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"skeletonMatsBlend") ) { skeletonMatsBlend=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraintTargets") ) { constraintTargets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"skeletonBonesBlend") ) { skeletonBonesBlend=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraintTargetsI") ) { constraintTargetsI=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BoneAnimation_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"q1") ) { q1=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		if (HX_FIELD_EQ(inName,"q2") ) { q2=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		if (HX_FIELD_EQ(inName,"wm") ) { wm=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"vpos") ) { vpos=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"vscl") ) { vscl=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vpos2") ) { vpos2=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"vscl2") ) { vscl2=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"skinMaxBones") ) { skinMaxBones=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void BoneAnimation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("skinBuffer","\x5d","\xc3","\x6d","\xe5"));
	outFields->push(HX_HCSTRING("skeletonBones","\xa2","\x2f","\xf5","\x38"));
	outFields->push(HX_HCSTRING("skeletonMats","\x40","\xca","\xaf","\x94"));
	outFields->push(HX_HCSTRING("skeletonBonesBlend","\x4f","\x3d","\xd3","\x02"));
	outFields->push(HX_HCSTRING("skeletonMatsBlend","\xf1","\x65","\xcd","\x06"));
	outFields->push(HX_HCSTRING("absMats","\x65","\x7f","\xdf","\x5a"));
	outFields->push(HX_HCSTRING("applyParent","\x38","\xc5","\x78","\x29"));
	outFields->push(HX_HCSTRING("boneChildren","\xa3","\x3c","\x12","\x2f"));
	outFields->push(HX_HCSTRING("constraintTargets","\x25","\x91","\xc0","\xf3"));
	outFields->push(HX_HCSTRING("constraintTargetsI","\x84","\x6f","\xbe","\x54"));
	outFields->push(HX_HCSTRING("constraintMats","\xd0","\x60","\x3f","\x70"));
	outFields->push(HX_HCSTRING("m","\x6d","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("m1","\x24","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("m2","\x25","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("bm","\xcb","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("nor","\x11","\xd9","\x53","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BoneAnimation_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::object::MeshObject*/ ,(int)offsetof(BoneAnimation_obj,object),HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15")},
	{hx::fsObject /*::iron::data::MeshData*/ ,(int)offsetof(BoneAnimation_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(BoneAnimation_obj,skinBuffer),HX_HCSTRING("skinBuffer","\x5d","\xc3","\x6d","\xe5")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(BoneAnimation_obj,skeletonBones),HX_HCSTRING("skeletonBones","\xa2","\x2f","\xf5","\x38")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,skeletonMats),HX_HCSTRING("skeletonMats","\x40","\xca","\xaf","\x94")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(BoneAnimation_obj,skeletonBonesBlend),HX_HCSTRING("skeletonBonesBlend","\x4f","\x3d","\xd3","\x02")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,skeletonMatsBlend),HX_HCSTRING("skeletonMatsBlend","\xf1","\x65","\xcd","\x06")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,absMats),HX_HCSTRING("absMats","\x65","\x7f","\xdf","\x5a")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(BoneAnimation_obj,applyParent),HX_HCSTRING("applyParent","\x38","\xc5","\x78","\x29")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(BoneAnimation_obj,boneChildren),HX_HCSTRING("boneChildren","\xa3","\x3c","\x12","\x2f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,constraintTargets),HX_HCSTRING("constraintTargets","\x25","\x91","\xc0","\xf3")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,constraintTargetsI),HX_HCSTRING("constraintTargetsI","\x84","\x6f","\xbe","\x54")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(BoneAnimation_obj,constraintMats),HX_HCSTRING("constraintMats","\xd0","\x60","\x3f","\x70")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(BoneAnimation_obj,m),HX_HCSTRING("m","\x6d","\x00","\x00","\x00")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(BoneAnimation_obj,m1),HX_HCSTRING("m1","\x24","\x5f","\x00","\x00")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(BoneAnimation_obj,m2),HX_HCSTRING("m2","\x25","\x5f","\x00","\x00")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(BoneAnimation_obj,bm),HX_HCSTRING("bm","\xcb","\x55","\x00","\x00")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(BoneAnimation_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(BoneAnimation_obj,nor),HX_HCSTRING("nor","\x11","\xd9","\x53","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BoneAnimation_obj,onUpdate),HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BoneAnimation_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BoneAnimation_obj::skinMaxBones,HX_HCSTRING("skinMaxBones","\x08","\xc3","\x01","\x23")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &BoneAnimation_obj::vpos,HX_HCSTRING("vpos","\xde","\x8a","\x54","\x4e")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &BoneAnimation_obj::vscl,HX_HCSTRING("vscl","\x26","\xc7","\x56","\x4e")},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &BoneAnimation_obj::q1,HX_HCSTRING("q1","\xa0","\x62","\x00","\x00")},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &BoneAnimation_obj::q2,HX_HCSTRING("q2","\xa1","\x62","\x00","\x00")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &BoneAnimation_obj::vpos2,HX_HCSTRING("vpos2","\x94","\xf7","\xa4","\x3b")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &BoneAnimation_obj::vscl2,HX_HCSTRING("vscl2","\x4c","\x7a","\x97","\x3d")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &BoneAnimation_obj::wm,HX_HCSTRING("wm","\x16","\x68","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BoneAnimation_obj_sMemberFields[] = {
	HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("skinBuffer","\x5d","\xc3","\x6d","\xe5"),
	HX_HCSTRING("skeletonBones","\xa2","\x2f","\xf5","\x38"),
	HX_HCSTRING("skeletonMats","\x40","\xca","\xaf","\x94"),
	HX_HCSTRING("skeletonBonesBlend","\x4f","\x3d","\xd3","\x02"),
	HX_HCSTRING("skeletonMatsBlend","\xf1","\x65","\xcd","\x06"),
	HX_HCSTRING("absMats","\x65","\x7f","\xdf","\x5a"),
	HX_HCSTRING("applyParent","\x38","\xc5","\x78","\x29"),
	HX_HCSTRING("boneChildren","\xa3","\x3c","\x12","\x2f"),
	HX_HCSTRING("constraintTargets","\x25","\x91","\xc0","\xf3"),
	HX_HCSTRING("constraintTargetsI","\x84","\x6f","\xbe","\x54"),
	HX_HCSTRING("constraintMats","\xd0","\x60","\x3f","\x70"),
	HX_HCSTRING("m","\x6d","\x00","\x00","\x00"),
	HX_HCSTRING("m1","\x24","\x5f","\x00","\x00"),
	HX_HCSTRING("m2","\x25","\x5f","\x00","\x00"),
	HX_HCSTRING("bm","\xcb","\x55","\x00","\x00"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("nor","\x11","\xd9","\x53","\x00"),
	HX_HCSTRING("setSkin","\x3f","\x57","\xd9","\x11"),
	HX_HCSTRING("addBoneChild","\x57","\x61","\xc9","\xa5"),
	HX_HCSTRING("updateBoneChildren","\x4c","\x78","\x1f","\xa7"),
	HX_HCSTRING("setAction","\xf8","\xb0","\xed","\x75"),
	HX_HCSTRING("setActionBlend","\x39","\x24","\x18","\x2f"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateAnim","\xba","\x70","\x26","\xf9"),
	HX_HCSTRING("updateConstraints","\xed","\xfd","\x1d","\x7c"),
	HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"),
	HX_HCSTRING("notifyOnUpdate","\x71","\x84","\x12","\x1d"),
	HX_HCSTRING("updateBonesOnly","\x72","\x5e","\xb9","\x88"),
	HX_HCSTRING("multParent","\x3a","\x75","\x1e","\x63"),
	HX_HCSTRING("multParent2","\xb8","\x1d","\x88","\x57"),
	HX_HCSTRING("updateSkinGpu","\xa6","\xfc","\xc0","\xff"),
	HX_HCSTRING("updateSkinBuffer","\xc6","\x92","\x59","\x2f"),
	HX_HCSTRING("totalFrames","\x8a","\xa2","\xbb","\x72"),
	HX_HCSTRING("getBone","\xfa","\x32","\x9e","\x13"),
	HX_HCSTRING("getBoneIndex","\xb8","\xcd","\x26","\x2e"),
	HX_HCSTRING("getBoneMat","\xc6","\x27","\x47","\x35"),
	HX_HCSTRING("getBoneMatBlend","\xab","\x42","\x37","\xa7"),
	HX_HCSTRING("getAbsMat","\x84","\xae","\x77","\xfe"),
	HX_HCSTRING("getWorldMat","\x24","\x2e","\x7f","\xca"),
	HX_HCSTRING("getBoneLen","\xfb","\x68","\x46","\x35"),
	HX_HCSTRING("solveIK","\x21","\x1d","\x54","\x8d"),
	::String(null()) };

static void BoneAnimation_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::skinMaxBones,"skinMaxBones");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::vpos,"vpos");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::vscl,"vscl");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::q1,"q1");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::q2,"q2");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::vpos2,"vpos2");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::vscl2,"vscl2");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::wm,"wm");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BoneAnimation_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::skinMaxBones,"skinMaxBones");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::vpos,"vpos");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::vscl,"vscl");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::q1,"q1");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::q2,"q2");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::vpos2,"vpos2");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::vscl2,"vscl2");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::wm,"wm");
};

#endif

hx::Class BoneAnimation_obj::__mClass;

static ::String BoneAnimation_obj_sStaticFields[] = {
	HX_HCSTRING("skinMaxBones","\x08","\xc3","\x01","\x23"),
	HX_HCSTRING("vpos","\xde","\x8a","\x54","\x4e"),
	HX_HCSTRING("vscl","\x26","\xc7","\x56","\x4e"),
	HX_HCSTRING("q1","\xa0","\x62","\x00","\x00"),
	HX_HCSTRING("q2","\xa1","\x62","\x00","\x00"),
	HX_HCSTRING("vpos2","\x94","\xf7","\xa4","\x3b"),
	HX_HCSTRING("vscl2","\x4c","\x7a","\x97","\x3d"),
	HX_HCSTRING("wm","\x16","\x68","\x00","\x00"),
	::String(null())
};

void BoneAnimation_obj::__register()
{
	hx::Object *dummy = new BoneAnimation_obj;
	BoneAnimation_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.BoneAnimation","\xf7","\xa9","\x25","\x0c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BoneAnimation_obj::__GetStatic;
	__mClass->mSetStaticField = &BoneAnimation_obj::__SetStatic;
	__mClass->mMarkFunc = BoneAnimation_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BoneAnimation_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BoneAnimation_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BoneAnimation_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BoneAnimation_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BoneAnimation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BoneAnimation_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BoneAnimation_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_12_boot)
HXDLIN(  12)		skinMaxBones = (int)50;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_41_boot)
HXDLIN(  41)		vpos =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_42_boot)
HXDLIN(  42)		vscl =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_43_boot)
HXDLIN(  43)		q1 =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_44_boot)
HXDLIN(  44)		q2 =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_45_boot)
HXDLIN(  45)		vpos2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_46_boot)
HXDLIN(  46)		vscl2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_499_boot)
HXDLIN( 499)		wm = ::iron::math::Mat4_obj::identity();
            	}
}

} // end namespace iron
} // end namespace object
