// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_Geometry
#include <iron/data/Geometry.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_data_ParticleData
#include <iron/data/ParticleData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Particle
#include <iron/object/Particle.h>
#endif
#ifndef INCLUDED_iron_object_ParticleSystem
#include <iron/object/ParticleSystem.h>
#endif
#ifndef INCLUDED_iron_object_Tilesheet
#include <iron/object/Tilesheet.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_system_Time
#include <iron/system/Time.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_45_new,"iron.object.ParticleSystem","new",0xa851df10,"iron.object.ParticleSystem.new","iron/object/ParticleSystem.hx",45,0x6ff9dc40)
HX_DEFINE_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_11_new,"iron.object.ParticleSystem","new",0xa851df10,"iron.object.ParticleSystem.new","iron/object/ParticleSystem.hx",11,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_63_getData,"iron.object.ParticleSystem","getData",0x86892c90,"iron.object.ParticleSystem.getData","iron/object/ParticleSystem.hx",63,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_84_update,"iron.object.ParticleSystem","update",0x2719c559,"iron.object.ParticleSystem.update","iron/object/ParticleSystem.hx",84,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_106_updateGpu,"iron.object.ParticleSystem","updateGpu",0x00999a53,"iron.object.ParticleSystem.updateGpu","iron/object/ParticleSystem.hx",106,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_111_updateCpu,"iron.object.ParticleSystem","updateCpu",0x0096914f,"iron.object.ParticleSystem.updateCpu","iron/object/ParticleSystem.hx",111,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_138_computePos,"iron.object.ParticleSystem","computePos",0xbd41b9ad,"iron.object.ParticleSystem.computePos","iron/object/ParticleSystem.hx",138,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_152_computeNewton,"iron.object.ParticleSystem","computeNewton",0x70768bba,"iron.object.ParticleSystem.computeNewton","iron/object/ParticleSystem.hx",152,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_173_setupGeomGpu,"iron.object.ParticleSystem","setupGeomGpu",0xbb22af23,"iron.object.ParticleSystem.setupGeomGpu","iron/object/ParticleSystem.hx",173,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_196_setupGeomCpu,"iron.object.ParticleSystem","setupGeomCpu",0xbb1fa61f,"iron.object.ParticleSystem.setupGeomCpu","iron/object/ParticleSystem.hx",196,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_235_sort,"iron.object.ParticleSystem","sort",0xa2a6f2ae,"iron.object.ParticleSystem.sort","iron/object/ParticleSystem.hx",235,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_227_sort,"iron.object.ParticleSystem","sort",0xa2a6f2ae,"iron.object.ParticleSystem.sort","iron/object/ParticleSystem.hx",227,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_242_fhash,"iron.object.ParticleSystem","fhash",0x2e8a75e4,"iron.object.ParticleSystem.fhash","iron/object/ParticleSystem.hx",242,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_251_remove,"iron.object.ParticleSystem","remove",0xa49cdb94,"iron.object.ParticleSystem.remove","iron/object/ParticleSystem.hx",251,0x6ff9dc40)
namespace iron{
namespace object{

void ParticleSystem_obj::__construct(::String sceneName, ::Dynamic pref){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::iron::object::ParticleSystem,_gthis) HXARGC(1)
            		void _hx_run( ::iron::data::ParticleData b){
            			HX_GC_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_45_new)
HXLINE(  46)			_gthis->data = b;
HXLINE(  47)			_gthis->r = _gthis->data->raw;
HXLINE(  48)			float _hx_tmp = ( ( ::kha::arrays::Float32ArrayPrivate)(::iron::Scene_obj::active->raw->__Field(HX_("gravity",4e,6e,ff,77),hx::paccDynamic)) )->self.get((int)0);
HXDLIN(  48)			_gthis->gx = (_hx_tmp * ( (float)(_gthis->r->__Field(HX_("weight_gravity",47,71,e0,39),hx::paccDynamic)) ));
HXLINE(  49)			float _hx_tmp1 = ( ( ::kha::arrays::Float32ArrayPrivate)(::iron::Scene_obj::active->raw->__Field(HX_("gravity",4e,6e,ff,77),hx::paccDynamic)) )->self.get((int)1);
HXDLIN(  49)			_gthis->gy = (_hx_tmp1 * ( (float)(_gthis->r->__Field(HX_("weight_gravity",47,71,e0,39),hx::paccDynamic)) ));
HXLINE(  50)			float _hx_tmp2 = ( ( ::kha::arrays::Float32ArrayPrivate)(::iron::Scene_obj::active->raw->__Field(HX_("gravity",4e,6e,ff,77),hx::paccDynamic)) )->self.get((int)2);
HXDLIN(  50)			_gthis->gz = (_hx_tmp2 * ( (float)(_gthis->r->__Field(HX_("weight_gravity",47,71,e0,39),hx::paccDynamic)) ));
HXLINE(  51)			float _hx_tmp3 = ( ( ::kha::arrays::Float32ArrayPrivate)(_gthis->r->__Field(HX_("object_align_factor",09,6f,65,ab),hx::paccDynamic)) )->self.get((int)0);
HXDLIN(  51)			_gthis->alignx = ((Float)_hx_tmp3 / (Float)(int)2);
HXLINE(  52)			float _hx_tmp4 = ( ( ::kha::arrays::Float32ArrayPrivate)(_gthis->r->__Field(HX_("object_align_factor",09,6f,65,ab),hx::paccDynamic)) )->self.get((int)1);
HXDLIN(  52)			_gthis->aligny = ((Float)_hx_tmp4 / (Float)(int)2);
HXLINE(  53)			float _hx_tmp5 = ( ( ::kha::arrays::Float32ArrayPrivate)(_gthis->r->__Field(HX_("object_align_factor",09,6f,65,ab),hx::paccDynamic)) )->self.get((int)2);
HXDLIN(  53)			_gthis->alignz = ((Float)_hx_tmp5 / (Float)(int)2);
HXLINE(  54)			_gthis->lifetime = ((Float)( (float)(_gthis->r->__Field(HX_("lifetime",09,0b,72,6c),hx::paccDynamic)) ) / (Float)_gthis->frameRate);
HXLINE(  55)			_gthis->animtime = ((Float)(( (float)(_gthis->r->__Field(HX_("frame_end",89,db,bf,41),hx::paccDynamic)) ) - ( (float)(_gthis->r->__Field(HX_("frame_start",90,13,a6,29),hx::paccDynamic)) )) / (Float)_gthis->frameRate);
HXLINE(  56)			_gthis->spawnRate = ((Float)((Float)(( (float)(_gthis->r->__Field(HX_("frame_end",89,db,bf,41),hx::paccDynamic)) ) - ( (float)(_gthis->r->__Field(HX_("frame_start",90,13,a6,29),hx::paccDynamic)) )) / (Float)( (int)(_gthis->r->__Field(HX_("count",cf,44,63,4a),hx::paccDynamic)) )) / (Float)_gthis->frameRate);
HXLINE(  57)			{
HXLINE(  57)				int _g1 = (int)0;
HXDLIN(  57)				int _g = ( (int)(_gthis->r->__Field(HX_("count",cf,44,63,4a),hx::paccDynamic)) );
HXDLIN(  57)				while((_g1 < _g)){
HXLINE(  57)					_g1 = (_g1 + (int)1);
HXDLIN(  57)					int i = (_g1 - (int)1);
HXDLIN(  57)					::Array< ::Dynamic> _gthis1 = _gthis->particles;
HXDLIN(  57)					_gthis1->push( ::iron::object::Particle_obj::__alloc( HX_CTX ,i));
            				}
            			}
HXLINE(  58)			_gthis->ready = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_11_new)
HXLINE(  39)		this->m = ::iron::math::Mat4_obj::identity();
HXLINE(  38)		this->lapTime = ((Float)0.0);
HXLINE(  37)		this->lap = (int)0;
HXLINE(  36)		this->count = (int)0;
HXLINE(  35)		this->emitFrom = null();
HXLINE(  20)		this->seed = ((Float)0.0);
HXLINE(  19)		this->spawnRate = ((Float)0.0);
HXLINE(  18)		this->time = ((Float)0.0);
HXLINE(  17)		this->animtime = ((Float)0.0);
HXLINE(  16)		this->lifetime = ((Float)0.0);
HXLINE(  15)		this->frameRate = (int)24;
HXLINE(  41)		 ::iron::object::ParticleSystem _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  42)		this->seed = ( (Float)(pref->__Field(HX_("seed",71,85,50,4c),hx::paccDynamic)) );
HXLINE(  43)		this->particles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  44)		this->ready = false;
HXLINE(  45)		::iron::data::Data_obj::getParticle(sceneName,( (::String)(pref->__Field(HX_("particle",46,3e,91,6c),hx::paccDynamic)) ), ::Dynamic(new _hx_Closure_0(_gthis)));
            	}

Dynamic ParticleSystem_obj::__CreateEmpty() { return new ParticleSystem_obj; }

void *ParticleSystem_obj::_hx_vtable = 0;

Dynamic ParticleSystem_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ParticleSystem_obj > _hx_result = new ParticleSystem_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ParticleSystem_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2815a97c;
}

 ::iron::math::Mat4 ParticleSystem_obj::getData(){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_63_getData)
HXLINE(  64)		{
HXLINE(  64)			float f;
HXDLIN(  64)			if (( (bool)(this->r->__Field(HX_("loop",64,a6,b7,47),hx::paccDynamic)) )) {
HXLINE(  64)				f = this->animtime;
            			}
            			else {
HXLINE(  64)				f = -(this->animtime);
            			}
HXDLIN(  64)			this->m->self->_00 = f;
            		}
HXLINE(  65)		this->m->self->_01 = this->spawnRate;
HXLINE(  66)		this->m->self->_02 = this->lifetime;
HXLINE(  67)		this->m->self->_03 = this->particles->length;
HXLINE(  68)		this->m->self->_10 = this->alignx;
HXLINE(  69)		this->m->self->_11 = this->aligny;
HXLINE(  70)		this->m->self->_12 = this->alignz;
HXLINE(  71)		this->m->self->_13 = ( (float)(this->r->__Field(HX_("factor_random",b3,e2,25,c1),hx::paccDynamic)) );
HXLINE(  72)		this->m->self->_20 = (this->gx * ( (float)(this->r->__Field(HX_("mass",f4,40,56,48),hx::paccDynamic)) ));
HXLINE(  73)		this->m->self->_21 = (this->gy * ( (float)(this->r->__Field(HX_("mass",f4,40,56,48),hx::paccDynamic)) ));
HXLINE(  74)		this->m->self->_22 = (this->gz * ( (float)(this->r->__Field(HX_("mass",f4,40,56,48),hx::paccDynamic)) ));
HXLINE(  75)		this->m->self->_23 = ( (float)(this->r->__Field(HX_("lifetime_random",b9,8b,81,39),hx::paccDynamic)) );
HXLINE(  76)		this->m->self->_30 = this->tilesx;
HXLINE(  77)		this->m->self->_31 = this->tilesy;
HXLINE(  78)		this->m->self->_32 = ((Float)(int)1 / (Float)this->tilesFramerate);
HXLINE(  79)		this->m->self->_33 = this->lapTime;
HXLINE(  80)		return this->m;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ParticleSystem_obj,getData,return )

void ParticleSystem_obj::update( ::iron::object::MeshObject object, ::iron::object::MeshObject owner){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_84_update)
HXLINE(  85)		if (!(this->ready)) {
HXLINE(  85)			return;
            		}
HXLINE(  87)		this->dimx = object->transform->dim->x;
HXLINE(  88)		this->dimy = object->transform->dim->y;
HXLINE(  90)		if (hx::IsNotNull( object->tilesheet )) {
HXLINE(  91)			this->tilesx = ( (int)(object->tilesheet->raw->__Field(HX_("tilesx",53,d7,28,1e),hx::paccDynamic)) );
HXLINE(  92)			this->tilesy = ( (int)(object->tilesheet->raw->__Field(HX_("tilesy",54,d7,28,1e),hx::paccDynamic)) );
HXLINE(  93)			this->tilesFramerate = ( (int)(object->tilesheet->raw->__Field(HX_("framerate",8d,e5,4b,4e),hx::paccDynamic)) );
            		}
HXLINE(  97)		 ::iron::object::ParticleSystem _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  97)		_hx_tmp->time = (_hx_tmp->time + (((Float)0.0166666666666666664) * ::iron::_hx_system::Time_obj::scale));
HXLINE(  98)		this->lap = ::Std_obj::_hx_int(((Float)this->time / (Float)this->animtime));
HXLINE(  99)		Float _hx_tmp1 = this->time;
HXDLIN(  99)		this->lapTime = (_hx_tmp1 - (this->lap * this->animtime));
HXLINE( 100)		this->count = ::Std_obj::_hx_int(((Float)this->lapTime / (Float)this->spawnRate));
HXLINE( 102)		if (( (bool)(this->r->__Field(HX_("gpu_sim",44,f4,1f,20),hx::paccDynamic)) )) {
HXLINE( 102)			this->updateGpu(object,owner);
            		}
            		else {
HXLINE( 102)			this->updateCpu(object,owner);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ParticleSystem_obj,update,(void))

void ParticleSystem_obj::updateGpu( ::iron::object::MeshObject object, ::iron::object::MeshObject owner){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_106_updateGpu)
HXDLIN( 106)		if (!(object->data->geom->instanced)) {
HXDLIN( 106)			this->setupGeomGpu(object,owner);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ParticleSystem_obj,updateGpu,(void))

void ParticleSystem_obj::updateCpu( ::iron::object::MeshObject object, ::iron::object::MeshObject owner){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_111_updateCpu)
HXLINE( 113)		if (!(object->data->geom->instanced)) {
HXLINE( 113)			this->setupGeomCpu(object,owner);
            		}
HXLINE( 114)		if (hx::IsNull( this->emitFrom )) {
HXLINE( 114)			return;
            		}
HXLINE( 116)		if ((( (int)(this->r->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == (int)0)) {
HXLINE( 117)			int _g = (int)0;
HXDLIN( 117)			::Array< ::Dynamic> _g1 = this->particles;
HXDLIN( 117)			while((_g < _g1->length)){
HXLINE( 117)				 ::iron::object::Particle p = _g1->__get(_g).StaticCast<  ::iron::object::Particle >();
HXDLIN( 117)				_g = (_g + (int)1);
HXDLIN( 117)				this->computePos(p,object,this->particles->length,this->lap,this->count);
            			}
            		}
HXLINE( 122)		 ::kha::arrays::Float32ArrayPrivate instancedData = object->data->geom->instancedVB->lock(null(),null());
HXLINE( 123)		{
HXLINE( 123)			int _g11 = (int)0;
HXDLIN( 123)			int _g2 = this->particles->length;
HXDLIN( 123)			while((_g11 < _g2)){
HXLINE( 123)				_g11 = (_g11 + (int)1);
HXDLIN( 123)				int i = (_g11 - (int)1);
HXLINE( 124)				 ::iron::object::Particle p1 = this->particles->__get(i).StaticCast<  ::iron::object::Particle >();
HXLINE( 125)				Float px = p1->x;
HXLINE( 126)				Float py = p1->y;
HXLINE( 127)				Float pz = p1->z;
HXLINE( 128)				 float32array this1 = this->emitFrom->self;
HXDLIN( 128)				px = (px + this1.get((i * (int)3)));
HXLINE( 129)				 float32array this2 = this->emitFrom->self;
HXDLIN( 129)				py = (py + this2.get(((i * (int)3) + (int)1)));
HXLINE( 130)				 float32array this3 = this->emitFrom->self;
HXDLIN( 130)				pz = (pz + this3.get(((i * (int)3) + (int)2)));
HXLINE( 131)				 float32array instancedData1 = instancedData->self;
HXDLIN( 131)				instancedData1.set((i * (int)3),px);
HXLINE( 132)				 float32array instancedData2 = instancedData->self;
HXDLIN( 132)				instancedData2.set(((i * (int)3) + (int)1),py);
HXLINE( 133)				 float32array instancedData3 = instancedData->self;
HXDLIN( 133)				instancedData3.set(((i * (int)3) + (int)2),pz);
            			}
            		}
HXLINE( 135)		object->data->geom->instancedVB->unlock();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ParticleSystem_obj,updateCpu,(void))

void ParticleSystem_obj::computePos( ::iron::object::Particle p, ::iron::object::MeshObject object,int l,int lap,int count){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_138_computePos)
HXLINE( 140)		int i = p->i;
HXLINE( 141)		Float age = this->lapTime;
HXDLIN( 141)		Float age1 = (age - (p->i * this->spawnRate));
HXLINE( 142)		Float age2 = (age1 * this->fhash(i));
HXDLIN( 142)		age1 = (age1 - (age2 * ( (float)(this->r->__Field(HX_("lifetime_random",b9,8b,81,39),hx::paccDynamic)) )));
HXLINE( 145)		if (( (bool)(this->r->__Field(HX_("loop",64,a6,b7,47),hx::paccDynamic)) )) {
HXLINE( 145)			while((age1 < (int)0)){
HXLINE( 145)				age1 = (age1 + this->animtime);
            			}
            		}
HXLINE( 147)		bool _hx_tmp;
HXDLIN( 147)		if (!((age1 < (int)0))) {
HXLINE( 147)			_hx_tmp = (age1 > this->lifetime);
            		}
            		else {
HXLINE( 147)			_hx_tmp = true;
            		}
HXDLIN( 147)		if (_hx_tmp) {
HXLINE( 147)			p->x = (p->y = (p->z = (int)-99999));
HXDLIN( 147)			return;
            		}
HXLINE( 149)		if ((( (int)(this->r->__Field(HX_("physics_type",72,a4,62,49),hx::paccDynamic)) ) == (int)1)) {
HXLINE( 149)			this->computeNewton(p,i,age1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(ParticleSystem_obj,computePos,(void))

void ParticleSystem_obj::computeNewton( ::iron::object::Particle p,int i,Float age){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_152_computeNewton)
HXLINE( 154)		p->x = this->alignx;
HXLINE( 155)		p->y = this->aligny;
HXLINE( 156)		p->z = this->alignz;
HXLINE( 158)		int l = this->particles->length;
HXLINE( 159)		 ::iron::object::Particle p1 = p;
HXDLIN( 159)		Float p2 = p1->x;
HXDLIN( 159)		int p3 = p->i;
HXDLIN( 159)		Float _hx_tmp = this->fhash((p3 + ((int)0 * l)));
HXDLIN( 159)		Float _hx_tmp1 = (_hx_tmp * ( (float)(this->r->__Field(HX_("factor_random",b3,e2,25,c1),hx::paccDynamic)) ));
HXDLIN( 159)		p1->x = (p2 + (_hx_tmp1 - ((Float)( (float)(this->r->__Field(HX_("factor_random",b3,e2,25,c1),hx::paccDynamic)) ) / (Float)(int)2)));
HXLINE( 160)		 ::iron::object::Particle p4 = p;
HXDLIN( 160)		Float p5 = p4->y;
HXDLIN( 160)		Float _hx_tmp2 = this->fhash((p->i + l));
HXDLIN( 160)		Float _hx_tmp3 = (_hx_tmp2 * ( (float)(this->r->__Field(HX_("factor_random",b3,e2,25,c1),hx::paccDynamic)) ));
HXDLIN( 160)		p4->y = (p5 + (_hx_tmp3 - ((Float)( (float)(this->r->__Field(HX_("factor_random",b3,e2,25,c1),hx::paccDynamic)) ) / (Float)(int)2)));
HXLINE( 161)		 ::iron::object::Particle p6 = p;
HXDLIN( 161)		Float p7 = p6->z;
HXDLIN( 161)		int p8 = p->i;
HXDLIN( 161)		Float _hx_tmp4 = this->fhash((p8 + ((int)2 * l)));
HXDLIN( 161)		Float _hx_tmp5 = (_hx_tmp4 * ( (float)(this->r->__Field(HX_("factor_random",b3,e2,25,c1),hx::paccDynamic)) ));
HXDLIN( 161)		p6->z = (p7 + (_hx_tmp5 - ((Float)( (float)(this->r->__Field(HX_("factor_random",b3,e2,25,c1),hx::paccDynamic)) ) / (Float)(int)2)));
HXLINE( 164)		 ::iron::object::Particle p9 = p;
HXDLIN( 164)		p9->x = (p9->x + ((Float)((this->gx * ( (float)(this->r->__Field(HX_("mass",f4,40,56,48),hx::paccDynamic)) )) * age) / (Float)(int)5));
HXLINE( 165)		 ::iron::object::Particle p10 = p;
HXDLIN( 165)		p10->y = (p10->y + ((Float)((this->gy * ( (float)(this->r->__Field(HX_("mass",f4,40,56,48),hx::paccDynamic)) )) * age) / (Float)(int)5));
HXLINE( 166)		 ::iron::object::Particle p11 = p;
HXDLIN( 166)		p11->z = (p11->z + ((Float)((this->gz * ( (float)(this->r->__Field(HX_("mass",f4,40,56,48),hx::paccDynamic)) )) * age) / (Float)(int)5));
HXLINE( 168)		 ::iron::object::Particle p12 = p;
HXDLIN( 168)		p12->x = (p12->x * age);
HXLINE( 169)		 ::iron::object::Particle p13 = p;
HXDLIN( 169)		p13->y = (p13->y * age);
HXLINE( 170)		 ::iron::object::Particle p14 = p;
HXDLIN( 170)		p14->z = (p14->z * age);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ParticleSystem_obj,computeNewton,(void))

void ParticleSystem_obj::setupGeomGpu( ::iron::object::MeshObject object, ::iron::object::MeshObject owner){
            	HX_GC_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_173_setupGeomGpu)
HXLINE( 174)		 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,(this->particles->length * (int)3));
HXDLIN( 174)		 ::kha::arrays::Float32ArrayPrivate instancedData = this1;
HXLINE( 175)		int i = (int)0;
HXLINE( 176)		if ((( (int)(this->r->__Field(HX_("emit_from",16,56,40,fa),hx::paccDynamic)) ) == (int)0)) {
HXLINE( 177)			 ::kha::arrays::Float32ArrayPrivate pa = owner->data->geom->positions;
HXLINE( 178)			{
HXLINE( 178)				int _g = (int)0;
HXDLIN( 178)				::Array< ::Dynamic> _g1 = this->particles;
HXDLIN( 178)				while((_g < _g1->length)){
HXLINE( 178)					 ::iron::object::Particle p = _g1->__get(_g).StaticCast<  ::iron::object::Particle >();
HXDLIN( 178)					_g = (_g + (int)1);
HXLINE( 179)					Float j = this->fhash(i);
HXDLIN( 179)					int j1 = ::Std_obj::_hx_int((j * ((Float)pa->self.length() / (Float)(int)3)));
HXLINE( 180)					{
HXLINE( 180)						 float32array pa1 = pa->self;
HXDLIN( 180)						float value = pa1.get((j1 * (int)3));
HXDLIN( 180)						instancedData->self.set(i,value);
            					}
HXDLIN( 180)					i = (i + (int)1);
HXLINE( 181)					{
HXLINE( 181)						 float32array pa2 = pa->self;
HXDLIN( 181)						float value1 = pa2.get(((j1 * (int)3) + (int)1));
HXDLIN( 181)						instancedData->self.set(i,value1);
            					}
HXDLIN( 181)					i = (i + (int)1);
HXLINE( 182)					{
HXLINE( 182)						 float32array pa3 = pa->self;
HXDLIN( 182)						float value2 = pa3.get(((j1 * (int)3) + (int)2));
HXDLIN( 182)						instancedData->self.set(i,value2);
            					}
HXDLIN( 182)					i = (i + (int)1);
            				}
            			}
            		}
            		else {
HXLINE( 186)			int _g2 = (int)0;
HXDLIN( 186)			::Array< ::Dynamic> _g11 = this->particles;
HXDLIN( 186)			while((_g2 < _g11->length)){
HXLINE( 186)				 ::iron::object::Particle p1 = _g11->__get(_g2).StaticCast<  ::iron::object::Particle >();
HXDLIN( 186)				_g2 = (_g2 + (int)1);
HXLINE( 187)				{
HXLINE( 187)					Float value3 = ((::Math_obj::random() * ((Float)2.0)) - ((Float)1.0));
HXDLIN( 187)					instancedData->self.set(i,(value3 * ((Float)object->transform->dim->x / (Float)((Float)2.0))));
            				}
HXDLIN( 187)				i = (i + (int)1);
HXLINE( 188)				{
HXLINE( 188)					Float value4 = ((::Math_obj::random() * ((Float)2.0)) - ((Float)1.0));
HXDLIN( 188)					instancedData->self.set(i,(value4 * ((Float)object->transform->dim->y / (Float)((Float)2.0))));
            				}
HXDLIN( 188)				i = (i + (int)1);
HXLINE( 189)				{
HXLINE( 189)					Float value5 = ((::Math_obj::random() * ((Float)2.0)) - ((Float)1.0));
HXDLIN( 189)					instancedData->self.set(i,(value5 * ((Float)object->transform->dim->z / (Float)((Float)2.0))));
            				}
HXDLIN( 189)				i = (i + (int)1);
            			}
            		}
HXLINE( 192)		if ((( (float)(this->r->__Field(HX_("particle_size",9a,00,8e,82),hx::paccDynamic)) ) != ((Float)1.0))) {
HXLINE( 192)			object->data->geom->applyScale(( (Float)(this->r->__Field(HX_("particle_size",9a,00,8e,82),hx::paccDynamic)) ),( (Float)(this->r->__Field(HX_("particle_size",9a,00,8e,82),hx::paccDynamic)) ),( (Float)(this->r->__Field(HX_("particle_size",9a,00,8e,82),hx::paccDynamic)) ));
            		}
HXLINE( 193)		object->data->geom->setupInstanced(instancedData,::kha::graphics4::Usage_obj::StaticUsage_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC2(ParticleSystem_obj,setupGeomGpu,(void))

void ParticleSystem_obj::setupGeomCpu( ::iron::object::MeshObject object, ::iron::object::MeshObject owner){
            	HX_GC_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_196_setupGeomCpu)
HXLINE( 197)		 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,(this->particles->length * (int)3));
HXDLIN( 197)		 ::kha::arrays::Float32ArrayPrivate instancedData = this1;
HXLINE( 198)		int i = (int)0;
HXLINE( 199)		{
HXLINE( 199)			int _g = (int)0;
HXDLIN( 199)			::Array< ::Dynamic> _g1 = this->particles;
HXDLIN( 199)			while((_g < _g1->length)){
HXLINE( 199)				 ::iron::object::Particle p = _g1->__get(_g).StaticCast<  ::iron::object::Particle >();
HXDLIN( 199)				_g = (_g + (int)1);
HXLINE( 200)				instancedData->self.set(i,((Float)0.0));
HXDLIN( 200)				i = (i + (int)1);
HXLINE( 201)				instancedData->self.set(i,((Float)0.0));
HXDLIN( 201)				i = (i + (int)1);
HXLINE( 202)				instancedData->self.set(i,((Float)0.0));
HXDLIN( 202)				i = (i + (int)1);
            			}
            		}
HXLINE( 204)		if ((( (float)(this->r->__Field(HX_("particle_size",9a,00,8e,82),hx::paccDynamic)) ) != ((Float)1.0))) {
HXLINE( 204)			object->data->geom->applyScale(( (Float)(this->r->__Field(HX_("particle_size",9a,00,8e,82),hx::paccDynamic)) ),( (Float)(this->r->__Field(HX_("particle_size",9a,00,8e,82),hx::paccDynamic)) ),( (Float)(this->r->__Field(HX_("particle_size",9a,00,8e,82),hx::paccDynamic)) ));
            		}
HXLINE( 205)		object->data->geom->setupInstanced(instancedData,::kha::graphics4::Usage_obj::DynamicUsage_dyn());
HXLINE( 207)		 ::kha::arrays::Float32ArrayPrivate this2 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,(this->particles->length * (int)3));
HXDLIN( 207)		this->emitFrom = this2;
HXLINE( 208)		i = (int)0;
HXLINE( 209)		if ((( (int)(this->r->__Field(HX_("emit_from",16,56,40,fa),hx::paccDynamic)) ) == (int)0)) {
HXLINE( 210)			 ::kha::arrays::Float32ArrayPrivate pa = owner->data->geom->positions;
HXLINE( 211)			{
HXLINE( 211)				int _g2 = (int)0;
HXDLIN( 211)				::Array< ::Dynamic> _g11 = this->particles;
HXDLIN( 211)				while((_g2 < _g11->length)){
HXLINE( 211)					 ::iron::object::Particle p1 = _g11->__get(_g2).StaticCast<  ::iron::object::Particle >();
HXDLIN( 211)					_g2 = (_g2 + (int)1);
HXLINE( 212)					Float j = this->fhash(i);
HXDLIN( 212)					int j1 = ::Std_obj::_hx_int((j * ((Float)pa->self.length() / (Float)(int)3)));
HXLINE( 213)					{
HXLINE( 213)						 ::kha::arrays::Float32ArrayPrivate this3 = this->emitFrom;
HXDLIN( 213)						 float32array pa1 = pa->self;
HXDLIN( 213)						float value = pa1.get((j1 * (int)3));
HXDLIN( 213)						this3->self.set(i,value);
            					}
HXDLIN( 213)					i = (i + (int)1);
HXLINE( 214)					{
HXLINE( 214)						 ::kha::arrays::Float32ArrayPrivate this4 = this->emitFrom;
HXDLIN( 214)						 float32array pa2 = pa->self;
HXDLIN( 214)						float value1 = pa2.get(((j1 * (int)3) + (int)1));
HXDLIN( 214)						this4->self.set(i,value1);
            					}
HXDLIN( 214)					i = (i + (int)1);
HXLINE( 215)					{
HXLINE( 215)						 ::kha::arrays::Float32ArrayPrivate this5 = this->emitFrom;
HXDLIN( 215)						 float32array pa3 = pa->self;
HXDLIN( 215)						float value2 = pa3.get(((j1 * (int)3) + (int)2));
HXDLIN( 215)						this5->self.set(i,value2);
            					}
HXDLIN( 215)					i = (i + (int)1);
            				}
            			}
            		}
            		else {
HXLINE( 219)			int _g3 = (int)0;
HXDLIN( 219)			::Array< ::Dynamic> _g12 = this->particles;
HXDLIN( 219)			while((_g3 < _g12->length)){
HXLINE( 219)				 ::iron::object::Particle p2 = _g12->__get(_g3).StaticCast<  ::iron::object::Particle >();
HXDLIN( 219)				_g3 = (_g3 + (int)1);
HXLINE( 220)				{
HXLINE( 220)					Float value3 = ((::Math_obj::random() * ((Float)2.0)) - ((Float)1.0));
HXDLIN( 220)					this->emitFrom->self.set(i,(value3 * ((Float)object->transform->dim->x / (Float)((Float)2.0))));
            				}
HXDLIN( 220)				i = (i + (int)1);
HXLINE( 221)				{
HXLINE( 221)					Float value4 = ((::Math_obj::random() * ((Float)2.0)) - ((Float)1.0));
HXDLIN( 221)					this->emitFrom->self.set(i,(value4 * ((Float)object->transform->dim->y / (Float)((Float)2.0))));
            				}
HXDLIN( 221)				i = (i + (int)1);
HXLINE( 222)				{
HXLINE( 222)					Float value5 = ((::Math_obj::random() * ((Float)2.0)) - ((Float)1.0));
HXDLIN( 222)					this->emitFrom->self.set(i,(value5 * ((Float)object->transform->dim->z / (Float)((Float)2.0))));
            				}
HXDLIN( 222)				i = (i + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ParticleSystem_obj,setupGeomCpu,(void))

void ParticleSystem_obj::sort(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::iron::object::Particle p1, ::iron::object::Particle p2){
            			HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_235_sort)
HXLINE( 236)			if ((p1->cameraDistance > p2->cameraDistance)) {
HXLINE( 236)				return (int)-1;
            			}
HXLINE( 237)			if ((p1->cameraDistance < p2->cameraDistance)) {
HXLINE( 237)				return (int)1;
            			}
HXLINE( 238)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_227_sort)
HXLINE( 228)		 ::iron::object::CameraObject camera = ::iron::Scene_obj::active->camera;
HXLINE( 229)		 ::iron::math::Vec4 l = camera->transform->loc;
HXLINE( 231)		{
HXLINE( 231)			int _g = (int)0;
HXDLIN( 231)			::Array< ::Dynamic> _g1 = this->particles;
HXDLIN( 231)			while((_g < _g1->length)){
HXLINE( 231)				 ::iron::object::Particle p = _g1->__get(_g).StaticCast<  ::iron::object::Particle >();
HXDLIN( 231)				_g = (_g + (int)1);
HXLINE( 232)				float vx = (p->x - l->x);
HXDLIN( 232)				float vy = (p->y - l->y);
HXDLIN( 232)				float vz = (p->z - l->z);
HXDLIN( 232)				p->cameraDistance = ::Math_obj::sqrt((((vx * vx) + (vy * vy)) + (vz * vz)));
            			}
            		}
HXLINE( 235)		this->particles->sort( ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ParticleSystem_obj,sort,(void))

Float ParticleSystem_obj::fhash(int n){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_242_fhash)
HXLINE( 245)		Float s = (n + ((Float)1.0));
HXLINE( 246)		s = (s * hx::Mod(((Float)9301.0),s));
HXLINE( 247)		s = hx::Mod(((s * ((Float)9301.0)) + ((Float)49297.0)),((Float)233280.0));
HXLINE( 248)		return ((Float)s / (Float)((Float)233280.0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ParticleSystem_obj,fhash,return )

void ParticleSystem_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_251_remove)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ParticleSystem_obj,remove,(void))


hx::ObjectPtr< ParticleSystem_obj > ParticleSystem_obj::__new(::String sceneName, ::Dynamic pref) {
	hx::ObjectPtr< ParticleSystem_obj > __this = new ParticleSystem_obj();
	__this->__construct(sceneName,pref);
	return __this;
}

hx::ObjectPtr< ParticleSystem_obj > ParticleSystem_obj::__alloc(hx::Ctx *_hx_ctx,::String sceneName, ::Dynamic pref) {
	ParticleSystem_obj *__this = (ParticleSystem_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ParticleSystem_obj), true, "iron.object.ParticleSystem"));
	*(void **)__this = ParticleSystem_obj::_hx_vtable;
	__this->__construct(sceneName,pref);
	return __this;
}

ParticleSystem_obj::ParticleSystem_obj()
{
}

void ParticleSystem_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ParticleSystem);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(particles,"particles");
	HX_MARK_MEMBER_NAME(ready,"ready");
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(lifetime,"lifetime");
	HX_MARK_MEMBER_NAME(animtime,"animtime");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(spawnRate,"spawnRate");
	HX_MARK_MEMBER_NAME(seed,"seed");
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(gx,"gx");
	HX_MARK_MEMBER_NAME(gy,"gy");
	HX_MARK_MEMBER_NAME(gz,"gz");
	HX_MARK_MEMBER_NAME(alignx,"alignx");
	HX_MARK_MEMBER_NAME(aligny,"aligny");
	HX_MARK_MEMBER_NAME(alignz,"alignz");
	HX_MARK_MEMBER_NAME(dimx,"dimx");
	HX_MARK_MEMBER_NAME(dimy,"dimy");
	HX_MARK_MEMBER_NAME(tilesx,"tilesx");
	HX_MARK_MEMBER_NAME(tilesy,"tilesy");
	HX_MARK_MEMBER_NAME(tilesFramerate,"tilesFramerate");
	HX_MARK_MEMBER_NAME(emitFrom,"emitFrom");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_MEMBER_NAME(lap,"lap");
	HX_MARK_MEMBER_NAME(lapTime,"lapTime");
	HX_MARK_MEMBER_NAME(m,"m");
	HX_MARK_END_CLASS();
}

void ParticleSystem_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(particles,"particles");
	HX_VISIT_MEMBER_NAME(ready,"ready");
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(lifetime,"lifetime");
	HX_VISIT_MEMBER_NAME(animtime,"animtime");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(spawnRate,"spawnRate");
	HX_VISIT_MEMBER_NAME(seed,"seed");
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(gx,"gx");
	HX_VISIT_MEMBER_NAME(gy,"gy");
	HX_VISIT_MEMBER_NAME(gz,"gz");
	HX_VISIT_MEMBER_NAME(alignx,"alignx");
	HX_VISIT_MEMBER_NAME(aligny,"aligny");
	HX_VISIT_MEMBER_NAME(alignz,"alignz");
	HX_VISIT_MEMBER_NAME(dimx,"dimx");
	HX_VISIT_MEMBER_NAME(dimy,"dimy");
	HX_VISIT_MEMBER_NAME(tilesx,"tilesx");
	HX_VISIT_MEMBER_NAME(tilesy,"tilesy");
	HX_VISIT_MEMBER_NAME(tilesFramerate,"tilesFramerate");
	HX_VISIT_MEMBER_NAME(emitFrom,"emitFrom");
	HX_VISIT_MEMBER_NAME(count,"count");
	HX_VISIT_MEMBER_NAME(lap,"lap");
	HX_VISIT_MEMBER_NAME(lapTime,"lapTime");
	HX_VISIT_MEMBER_NAME(m,"m");
}

hx::Val ParticleSystem_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r ); }
		if (HX_FIELD_EQ(inName,"m") ) { return hx::Val( m ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"gx") ) { return hx::Val( gx ); }
		if (HX_FIELD_EQ(inName,"gy") ) { return hx::Val( gy ); }
		if (HX_FIELD_EQ(inName,"gz") ) { return hx::Val( gz ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"lap") ) { return hx::Val( lap ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		if (HX_FIELD_EQ(inName,"seed") ) { return hx::Val( seed ); }
		if (HX_FIELD_EQ(inName,"dimx") ) { return hx::Val( dimx ); }
		if (HX_FIELD_EQ(inName,"dimy") ) { return hx::Val( dimy ); }
		if (HX_FIELD_EQ(inName,"sort") ) { return hx::Val( sort_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready ); }
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count ); }
		if (HX_FIELD_EQ(inName,"fhash") ) { return hx::Val( fhash_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"alignx") ) { return hx::Val( alignx ); }
		if (HX_FIELD_EQ(inName,"aligny") ) { return hx::Val( aligny ); }
		if (HX_FIELD_EQ(inName,"alignz") ) { return hx::Val( alignz ); }
		if (HX_FIELD_EQ(inName,"tilesx") ) { return hx::Val( tilesx ); }
		if (HX_FIELD_EQ(inName,"tilesy") ) { return hx::Val( tilesy ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lapTime") ) { return hx::Val( lapTime ); }
		if (HX_FIELD_EQ(inName,"getData") ) { return hx::Val( getData_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifetime") ) { return hx::Val( lifetime ); }
		if (HX_FIELD_EQ(inName,"animtime") ) { return hx::Val( animtime ); }
		if (HX_FIELD_EQ(inName,"emitFrom") ) { return hx::Val( emitFrom ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"particles") ) { return hx::Val( particles ); }
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate ); }
		if (HX_FIELD_EQ(inName,"spawnRate") ) { return hx::Val( spawnRate ); }
		if (HX_FIELD_EQ(inName,"updateGpu") ) { return hx::Val( updateGpu_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateCpu") ) { return hx::Val( updateCpu_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"computePos") ) { return hx::Val( computePos_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setupGeomGpu") ) { return hx::Val( setupGeomGpu_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupGeomCpu") ) { return hx::Val( setupGeomCpu_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"computeNewton") ) { return hx::Val( computeNewton_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tilesFramerate") ) { return hx::Val( tilesFramerate ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ParticleSystem_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m") ) { m=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"gx") ) { gx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gy") ) { gy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gz") ) { gz=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"lap") ) { lap=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::iron::data::ParticleData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"seed") ) { seed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dimx") ) { dimx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dimy") ) { dimy=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ready") ) { ready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"alignx") ) { alignx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aligny") ) { aligny=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alignz") ) { alignz=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilesx") ) { tilesx=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilesy") ) { tilesy=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lapTime") ) { lapTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifetime") ) { lifetime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animtime") ) { animtime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"emitFrom") ) { emitFrom=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"particles") ) { particles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameRate") ) { frameRate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spawnRate") ) { spawnRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tilesFramerate") ) { tilesFramerate=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ParticleSystem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("particles","\x6d","\x3f","\x85","\x92"));
	outFields->push(HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"));
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	outFields->push(HX_HCSTRING("lifetime","\x09","\x0b","\x72","\x6c"));
	outFields->push(HX_HCSTRING("animtime","\x9e","\x2e","\x79","\x95"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("spawnRate","\xbb","\x56","\x2f","\xab"));
	outFields->push(HX_HCSTRING("seed","\x71","\x85","\x50","\x4c"));
	outFields->push(HX_HCSTRING("r","\x72","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("gx","\x31","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("gy","\x32","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("gz","\x33","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("alignx","\x13","\x96","\x9a","\x3d"));
	outFields->push(HX_HCSTRING("aligny","\x14","\x96","\x9a","\x3d"));
	outFields->push(HX_HCSTRING("alignz","\x15","\x96","\x9a","\x3d"));
	outFields->push(HX_HCSTRING("dimx","\x30","\x62","\x69","\x42"));
	outFields->push(HX_HCSTRING("dimy","\x31","\x62","\x69","\x42"));
	outFields->push(HX_HCSTRING("tilesx","\x53","\xd7","\x28","\x1e"));
	outFields->push(HX_HCSTRING("tilesy","\x54","\xd7","\x28","\x1e"));
	outFields->push(HX_HCSTRING("tilesFramerate","\x48","\x6f","\x92","\xb8"));
	outFields->push(HX_HCSTRING("emitFrom","\x5d","\x95","\x1a","\x3a"));
	outFields->push(HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"));
	outFields->push(HX_HCSTRING("lap","\x5b","\x48","\x52","\x00"));
	outFields->push(HX_HCSTRING("lapTime","\x08","\x0a","\x63","\x08"));
	outFields->push(HX_HCSTRING("m","\x6d","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ParticleSystem_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::data::ParticleData*/ ,(int)offsetof(ParticleSystem_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(ParticleSystem_obj,particles),HX_HCSTRING("particles","\x6d","\x3f","\x85","\x92")},
	{hx::fsBool,(int)offsetof(ParticleSystem_obj,ready),HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6")},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,frameRate),HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,lifetime),HX_HCSTRING("lifetime","\x09","\x0b","\x72","\x6c")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,animtime),HX_HCSTRING("animtime","\x9e","\x2e","\x79","\x95")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,spawnRate),HX_HCSTRING("spawnRate","\xbb","\x56","\x2f","\xab")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,seed),HX_HCSTRING("seed","\x71","\x85","\x50","\x4c")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ParticleSystem_obj,r),HX_HCSTRING("r","\x72","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,gx),HX_HCSTRING("gx","\x31","\x5a","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,gy),HX_HCSTRING("gy","\x32","\x5a","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,gz),HX_HCSTRING("gz","\x33","\x5a","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,alignx),HX_HCSTRING("alignx","\x13","\x96","\x9a","\x3d")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,aligny),HX_HCSTRING("aligny","\x14","\x96","\x9a","\x3d")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,alignz),HX_HCSTRING("alignz","\x15","\x96","\x9a","\x3d")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,dimx),HX_HCSTRING("dimx","\x30","\x62","\x69","\x42")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,dimy),HX_HCSTRING("dimy","\x31","\x62","\x69","\x42")},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,tilesx),HX_HCSTRING("tilesx","\x53","\xd7","\x28","\x1e")},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,tilesy),HX_HCSTRING("tilesy","\x54","\xd7","\x28","\x1e")},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,tilesFramerate),HX_HCSTRING("tilesFramerate","\x48","\x6f","\x92","\xb8")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(ParticleSystem_obj,emitFrom),HX_HCSTRING("emitFrom","\x5d","\x95","\x1a","\x3a")},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,count),HX_HCSTRING("count","\xcf","\x44","\x63","\x4a")},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,lap),HX_HCSTRING("lap","\x5b","\x48","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,lapTime),HX_HCSTRING("lapTime","\x08","\x0a","\x63","\x08")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(ParticleSystem_obj,m),HX_HCSTRING("m","\x6d","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ParticleSystem_obj_sStaticStorageInfo = 0;
#endif

static ::String ParticleSystem_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("particles","\x6d","\x3f","\x85","\x92"),
	HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"),
	HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"),
	HX_HCSTRING("lifetime","\x09","\x0b","\x72","\x6c"),
	HX_HCSTRING("animtime","\x9e","\x2e","\x79","\x95"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("spawnRate","\xbb","\x56","\x2f","\xab"),
	HX_HCSTRING("seed","\x71","\x85","\x50","\x4c"),
	HX_HCSTRING("r","\x72","\x00","\x00","\x00"),
	HX_HCSTRING("gx","\x31","\x5a","\x00","\x00"),
	HX_HCSTRING("gy","\x32","\x5a","\x00","\x00"),
	HX_HCSTRING("gz","\x33","\x5a","\x00","\x00"),
	HX_HCSTRING("alignx","\x13","\x96","\x9a","\x3d"),
	HX_HCSTRING("aligny","\x14","\x96","\x9a","\x3d"),
	HX_HCSTRING("alignz","\x15","\x96","\x9a","\x3d"),
	HX_HCSTRING("dimx","\x30","\x62","\x69","\x42"),
	HX_HCSTRING("dimy","\x31","\x62","\x69","\x42"),
	HX_HCSTRING("tilesx","\x53","\xd7","\x28","\x1e"),
	HX_HCSTRING("tilesy","\x54","\xd7","\x28","\x1e"),
	HX_HCSTRING("tilesFramerate","\x48","\x6f","\x92","\xb8"),
	HX_HCSTRING("emitFrom","\x5d","\x95","\x1a","\x3a"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("lap","\x5b","\x48","\x52","\x00"),
	HX_HCSTRING("lapTime","\x08","\x0a","\x63","\x08"),
	HX_HCSTRING("m","\x6d","\x00","\x00","\x00"),
	HX_HCSTRING("getData","\xe0","\x05","\xe6","\x14"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateGpu","\xa3","\x67","\xdb","\x82"),
	HX_HCSTRING("updateCpu","\x9f","\x5e","\xd8","\x82"),
	HX_HCSTRING("computePos","\x5d","\x92","\x93","\x34"),
	HX_HCSTRING("computeNewton","\x0a","\x41","\x31","\xdc"),
	HX_HCSTRING("setupGeomGpu","\xd3","\x13","\x20","\x0d"),
	HX_HCSTRING("setupGeomCpu","\xcf","\x0a","\x1d","\x0d"),
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("fhash","\x34","\x5b","\xe7","\xff"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	::String(null()) };

static void ParticleSystem_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ParticleSystem_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ParticleSystem_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ParticleSystem_obj::__mClass,"__mClass");
};

#endif

hx::Class ParticleSystem_obj::__mClass;

void ParticleSystem_obj::__register()
{
	hx::Object *dummy = new ParticleSystem_obj;
	ParticleSystem_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.ParticleSystem","\x1e","\x57","\x99","\xa6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ParticleSystem_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ParticleSystem_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ParticleSystem_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ParticleSystem_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ParticleSystem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ParticleSystem_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace object
