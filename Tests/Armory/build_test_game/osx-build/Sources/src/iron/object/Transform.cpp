// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Constraint
#include <iron/object/Constraint.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_54bddaaeb07ce419_7_new,"iron.object.Transform","new",0x0da9db35,"iron.object.Transform.new","iron/object/Transform.hx",7,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_29_reset,"iron.object.Transform","reset",0x7dd673e4,"iron.object.Transform.reset","iron/object/Transform.hx",29,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_41_update,"iron.object.Transform","update",0x1c5c2e54,"iron.object.Transform.update","iron/object/Transform.hx",41,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_44_prependMatrix,"iron.object.Transform","prependMatrix",0xfd8ac704,"iron.object.Transform.prependMatrix","iron/object/Transform.hx",44,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_50_popPrependMatrix,"iron.object.Transform","popPrependMatrix",0x85c81fa9,"iron.object.Transform.popPrependMatrix","iron/object/Transform.hx",50,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_56_appendMatrix,"iron.object.Transform","appendMatrix",0xe5a4de46,"iron.object.Transform.appendMatrix","iron/object/Transform.hx",56,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_62_popAppendMatrix,"iron.object.Transform","popAppendMatrix",0x8f022141,"iron.object.Transform.popAppendMatrix","iron/object/Transform.hx",62,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_68_composeDelta,"iron.object.Transform","composeDelta",0x3cbcf011,"iron.object.Transform.composeDelta","iron/object/Transform.hx",68,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_77_buildMatrix,"iron.object.Transform","buildMatrix",0x508583e4,"iron.object.Transform.buildMatrix","iron/object/Transform.hx",77,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_110_translate,"iron.object.Transform","translate",0x6b552fe3,"iron.object.Transform.translate","iron/object/Transform.hx",110,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_117_setMatrix,"iron.object.Transform","setMatrix",0x3d450418,"iron.object.Transform.setMatrix","iron/object/Transform.hx",117,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_123_multMatrix,"iron.object.Transform","multMatrix",0xaa40d01c,"iron.object.Transform.multMatrix","iron/object/Transform.hx",123,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_130_decompose,"iron.object.Transform","decompose",0x9c7d1c46,"iron.object.Transform.decompose","iron/object/Transform.hx",130,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_133_rotate,"iron.object.Transform","rotate",0x6076eea6,"iron.object.Transform.rotate","iron/object/Transform.hx",133,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_140_setRotation,"iron.object.Transform","setRotation",0x7d336ed5,"iron.object.Transform.setRotation","iron/object/Transform.hx",140,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_149_computeRadius,"iron.object.Transform","computeRadius",0x5982c63e,"iron.object.Transform.computeRadius","iron/object/Transform.hx",149,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_152_computeDim,"iron.object.Transform","computeDim",0xad629bdc,"iron.object.Transform.computeDim","iron/object/Transform.hx",152,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_160_applyParentInverse,"iron.object.Transform","applyParentInverse",0xd5bcb223,"iron.object.Transform.applyParentInverse","iron/object/Transform.hx",160,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_169_applyParent,"iron.object.Transform","applyParent",0x6dc52d0d,"iron.object.Transform.applyParent","iron/object/Transform.hx",169,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_176_diff,"iron.object.Transform","diff",0xe05ccb90,"iron.object.Transform.diff","iron/object/Transform.hx",176,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_193_look,"iron.object.Transform","look",0xe5ab15ea,"iron.object.Transform.look","iron/object/Transform.hx",193,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_194_right,"iron.object.Transform","right",0x807235f1,"iron.object.Transform.right","iron/object/Transform.hx",194,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_195_up,"iron.object.Transform","up",0x84144d26,"iron.object.Transform.up","iron/object/Transform.hx",195,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_197_worldx,"iron.object.Transform","worldx",0x5ef59a31,"iron.object.Transform.worldx","iron/object/Transform.hx",197,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_198_worldy,"iron.object.Transform","worldy",0x5ef59a32,"iron.object.Transform.worldy","iron/object/Transform.hx",198,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_199_worldz,"iron.object.Transform","worldz",0x5ef59a33,"iron.object.Transform.worldz","iron/object/Transform.hx",199,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_19_boot,"iron.object.Transform","boot",0xdf0ef3bd,"iron.object.Transform.boot","iron/object/Transform.hx",19,0x303963fb)
namespace iron{
namespace object{

void Transform_obj::__construct( ::iron::object::Object object){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_7_new)
HXLINE( 204)		this->dscale = null();
HXLINE( 203)		this->drot = null();
HXLINE( 202)		this->dloc = null();
HXLINE( 175)		this->lastWorld = null();
HXLINE(  22)		this->boneParent = null();
HXLINE(  21)		this->appendMats = null();
HXLINE(  20)		this->prependMats = null();
HXLINE(   9)		this->localOnly = false;
HXLINE(  25)		this->object = object;
HXLINE(  26)		this->reset();
            	}

Dynamic Transform_obj::__CreateEmpty() { return new Transform_obj; }

void *Transform_obj::_hx_vtable = 0;

Dynamic Transform_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Transform_obj > _hx_result = new Transform_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Transform_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x15357341;
}

void Transform_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_29_reset)
HXLINE(  30)		this->world = ::iron::math::Mat4_obj::identity();
HXLINE(  31)		this->local = ::iron::math::Mat4_obj::identity();
HXLINE(  32)		this->loc =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  33)		this->rot =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  34)		this->scale =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)1.0),((Float)1.0),((Float)1.0),null());
HXLINE(  35)		this->dim =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)2.0),((Float)2.0),((Float)2.0),null());
HXLINE(  36)		this->radius = ((Float)1.0);
HXLINE(  37)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,reset,(void))

void Transform_obj::update(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_41_update)
HXDLIN(  41)		if (this->dirty) {
HXDLIN(  41)			this->buildMatrix();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,update,(void))

void Transform_obj::prependMatrix( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_44_prependMatrix)
HXLINE(  45)		if (hx::IsNull( this->prependMats )) {
HXLINE(  45)			this->prependMats = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(  46)		this->prependMats->push(m);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,prependMatrix,(void))

void Transform_obj::popPrependMatrix(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_50_popPrependMatrix)
HXDLIN(  50)		if (hx::IsNotNull( this->prependMats )) {
HXLINE(  51)			this->prependMats->pop().StaticCast<  ::iron::math::Mat4 >();
HXLINE(  52)			if ((this->prependMats->length == (int)0)) {
HXLINE(  52)				this->prependMats = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,popPrependMatrix,(void))

void Transform_obj::appendMatrix( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_56_appendMatrix)
HXLINE(  57)		if (hx::IsNull( this->appendMats )) {
HXLINE(  57)			this->appendMats = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(  58)		this->appendMats->push(m);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,appendMatrix,(void))

void Transform_obj::popAppendMatrix(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_62_popAppendMatrix)
HXDLIN(  62)		if (hx::IsNotNull( this->appendMats )) {
HXLINE(  63)			this->appendMats->pop().StaticCast<  ::iron::math::Mat4 >();
HXLINE(  64)			if ((this->appendMats->length == (int)0)) {
HXLINE(  64)				this->appendMats = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,popAppendMatrix,(void))

void Transform_obj::composeDelta(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_68_composeDelta)
HXLINE(  70)		this->dloc->addvecs(this->loc,this->dloc);
HXLINE(  71)		this->dscale->addvecs(this->dscale,this->scale);
HXLINE(  72)		this->drot->fromEuler(this->_deulerX,this->_deulerY,this->_deulerZ);
HXLINE(  73)		this->drot->multquats(this->rot,this->drot);
HXLINE(  74)		this->local->compose(this->dloc,this->drot,this->dscale);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,composeDelta,(void))

void Transform_obj::buildMatrix(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_77_buildMatrix)
HXLINE(  78)		if (hx::IsNull( this->dloc )) {
HXLINE(  78)			this->local->compose(this->loc,this->rot,this->scale);
            		}
            		else {
HXLINE(  78)			this->composeDelta();
            		}
HXLINE(  80)		if (hx::IsNotNull( this->prependMats )) {
HXLINE(  81)			::iron::object::Transform_obj::temp->setIdentity();
HXLINE(  82)			{
HXLINE(  82)				int _g = (int)0;
HXDLIN(  82)				::Array< ::Dynamic> _g1 = this->prependMats;
HXDLIN(  82)				while((_g < _g1->length)){
HXLINE(  82)					 ::iron::math::Mat4 m = _g1->__get(_g).StaticCast<  ::iron::math::Mat4 >();
HXDLIN(  82)					_g = (_g + (int)1);
HXDLIN(  82)					::iron::object::Transform_obj::temp->multmat2(m);
            				}
            			}
HXLINE(  83)			::iron::object::Transform_obj::temp->multmat2(this->local);
HXLINE(  84)			this->local->setFrom(::iron::object::Transform_obj::temp);
            		}
HXLINE(  86)		if (hx::IsNotNull( this->appendMats )) {
HXLINE(  86)			int _g2 = (int)0;
HXDLIN(  86)			::Array< ::Dynamic> _g11 = this->appendMats;
HXDLIN(  86)			while((_g2 < _g11->length)){
HXLINE(  86)				 ::iron::math::Mat4 m1 = _g11->__get(_g2).StaticCast<  ::iron::math::Mat4 >();
HXDLIN(  86)				_g2 = (_g2 + (int)1);
HXDLIN(  86)				this->local->multmat2(m1);
            			}
            		}
HXLINE(  88)		if (hx::IsNotNull( this->boneParent )) {
HXLINE(  88)			this->local->multmats(this->boneParent,this->local);
            		}
HXLINE(  90)		bool _hx_tmp;
HXDLIN(  90)		if (hx::IsNotNull( this->object->parent )) {
HXLINE(  90)			_hx_tmp = !(this->localOnly);
            		}
            		else {
HXLINE(  90)			_hx_tmp = false;
            		}
HXDLIN(  90)		if (_hx_tmp) {
HXLINE(  91)			this->world->multmat3x4(this->local,this->object->parent->transform->world);
            		}
            		else {
HXLINE(  94)			this->world->setFrom(this->local);
            		}
HXLINE(  98)		if (hx::IsNotNull( this->object->constraints )) {
HXLINE(  98)			int _g3 = (int)0;
HXDLIN(  98)			::Array< ::Dynamic> _g12 = this->object->constraints;
HXDLIN(  98)			while((_g3 < _g12->length)){
HXLINE(  98)				 ::iron::object::Constraint c = _g12->__get(_g3).StaticCast<  ::iron::object::Constraint >();
HXDLIN(  98)				_g3 = (_g3 + (int)1);
HXDLIN(  98)				c->apply(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 100)		this->computeDim();
HXLINE( 103)		{
HXLINE( 103)			int _g4 = (int)0;
HXDLIN( 103)			::Array< ::Dynamic> _g13 = this->object->children;
HXDLIN( 103)			while((_g4 < _g13->length)){
HXLINE( 103)				 ::iron::object::Object n = _g13->__get(_g4).StaticCast<  ::iron::object::Object >();
HXDLIN( 103)				_g4 = (_g4 + (int)1);
HXLINE( 104)				n->transform->buildMatrix();
            			}
            		}
HXLINE( 107)		this->dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,buildMatrix,(void))

void Transform_obj::translate(float x,float y,float z){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_110_translate)
HXLINE( 111)		 ::iron::math::Vec4 _hx_tmp = this->loc;
HXDLIN( 111)		_hx_tmp->x = (_hx_tmp->x + x);
HXLINE( 112)		 ::iron::math::Vec4 _hx_tmp1 = this->loc;
HXDLIN( 112)		_hx_tmp1->y = (_hx_tmp1->y + y);
HXLINE( 113)		 ::iron::math::Vec4 _hx_tmp2 = this->loc;
HXDLIN( 113)		_hx_tmp2->z = (_hx_tmp2->z + z);
HXLINE( 114)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Transform_obj,translate,(void))

void Transform_obj::setMatrix( ::iron::math::Mat4 mat){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_117_setMatrix)
HXLINE( 118)		this->local->setFrom(mat);
HXLINE( 119)		this->decompose();
HXLINE( 120)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,setMatrix,(void))

void Transform_obj::multMatrix( ::iron::math::Mat4 mat){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_123_multMatrix)
HXLINE( 124)		this->local->multmat2(mat);
HXLINE( 125)		this->decompose();
HXLINE( 126)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,multMatrix,(void))

void Transform_obj::decompose(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_130_decompose)
HXDLIN( 130)		this->local->decompose(this->loc,this->rot,this->scale);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,decompose,(void))

void Transform_obj::rotate( ::iron::math::Vec4 axis,float f){
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_133_rotate)
HXLINE( 134)		 ::iron::math::Quat q =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 135)		q->fromAxisAngle(axis,f);
HXLINE( 136)		this->rot->multquats(q,this->rot);
HXLINE( 137)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Transform_obj,rotate,(void))

void Transform_obj::setRotation(float x,float y,float z){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_140_setRotation)
HXLINE( 141)		this->rot->fromEuler(x,y,z);
HXLINE( 142)		this->_eulerX = x;
HXLINE( 143)		this->_eulerY = y;
HXLINE( 144)		this->_eulerZ = z;
HXLINE( 145)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Transform_obj,setRotation,(void))

void Transform_obj::computeRadius(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_149_computeRadius)
HXDLIN( 149)		float _hx_tmp = (this->dim->x * this->dim->x);
HXDLIN( 149)		float _hx_tmp1 = (_hx_tmp + (this->dim->y * this->dim->y));
HXDLIN( 149)		this->radius = ::Math_obj::sqrt((_hx_tmp1 + (this->dim->z * this->dim->z)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,computeRadius,(void))

void Transform_obj::computeDim(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_152_computeDim)
HXLINE( 153)		if (hx::IsNull( this->object->raw )) {
HXLINE( 153)			return;
            		}
HXLINE( 154)		 ::kha::arrays::Float32ArrayPrivate d = ( ( ::kha::arrays::Float32ArrayPrivate)(this->object->raw->__Field(HX_("dimensions",4d,be,9f,dc),hx::paccDynamic)) );
HXLINE( 155)		if (hx::IsNull( d )) {
HXLINE( 155)			 ::iron::math::Vec4 _hx_tmp = this->dim;
HXDLIN( 155)			float _hx_tmp1 = ((int)2 * this->scale->x);
HXDLIN( 155)			float _hx_tmp2 = ((int)2 * this->scale->y);
HXDLIN( 155)			_hx_tmp->set(_hx_tmp1,_hx_tmp2,((int)2 * this->scale->z),null());
            		}
            		else {
HXLINE( 156)			 ::iron::math::Vec4 _hx_tmp3 = this->dim;
HXDLIN( 156)			float _hx_tmp4 = d->self.get((int)0);
HXDLIN( 156)			float _hx_tmp5 = (_hx_tmp4 * this->scale->x);
HXDLIN( 156)			float _hx_tmp6 = d->self.get((int)1);
HXDLIN( 156)			float _hx_tmp7 = (_hx_tmp6 * this->scale->y);
HXDLIN( 156)			float _hx_tmp8 = d->self.get((int)2);
HXDLIN( 156)			_hx_tmp3->set(_hx_tmp5,_hx_tmp7,(_hx_tmp8 * this->scale->z),null());
            		}
HXLINE( 157)		this->computeRadius();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,computeDim,(void))

void Transform_obj::applyParentInverse(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_160_applyParentInverse)
HXLINE( 161)		 ::iron::object::Transform pt = this->object->parent->transform;
HXLINE( 162)		pt->buildMatrix();
HXLINE( 163)		::iron::object::Transform_obj::temp->getInverse(pt->world);
HXLINE( 164)		this->local->multmat2(::iron::object::Transform_obj::temp);
HXLINE( 165)		this->decompose();
HXLINE( 166)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,applyParentInverse,(void))

void Transform_obj::applyParent(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_169_applyParent)
HXLINE( 170)		 ::iron::object::Transform pt = this->object->parent->transform;
HXLINE( 171)		this->local->multmat2(pt->world);
HXLINE( 172)		this->decompose();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,applyParent,(void))

bool Transform_obj::diff(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_176_diff)
HXLINE( 177)		if (hx::IsNull( this->lastWorld )) {
HXLINE( 177)			this->lastWorld = ::iron::math::Mat4_obj::identity()->setFrom(this->world);
HXDLIN( 177)			return false;
            		}
HXLINE( 178)		 ::iron::math::Mat4 a = this->world;
HXLINE( 179)		 ::iron::math::Mat4 b = this->lastWorld;
HXLINE( 180)		bool r;
HXDLIN( 180)		bool r1;
HXDLIN( 180)		bool r2;
HXDLIN( 180)		bool r3;
HXDLIN( 180)		bool r4;
HXDLIN( 180)		bool r5;
HXDLIN( 180)		bool r6;
HXDLIN( 180)		bool r7;
HXDLIN( 180)		bool r8;
HXDLIN( 180)		bool r9;
HXDLIN( 180)		bool r10;
HXDLIN( 180)		bool r11;
HXDLIN( 180)		bool r12;
HXDLIN( 180)		bool r13;
HXDLIN( 180)		bool r14;
HXDLIN( 180)		if ((a->self->_00 == b->self->_00)) {
HXLINE( 180)			r14 = (a->self->_01 != b->self->_01);
            		}
            		else {
HXLINE( 180)			r14 = true;
            		}
HXDLIN( 180)		if (!(r14)) {
HXLINE( 180)			r13 = (a->self->_02 != b->self->_02);
            		}
            		else {
HXLINE( 180)			r13 = true;
            		}
HXDLIN( 180)		if (!(r13)) {
HXLINE( 180)			r12 = (a->self->_03 != b->self->_03);
            		}
            		else {
HXLINE( 180)			r12 = true;
            		}
HXDLIN( 180)		if (!(r12)) {
HXLINE( 180)			r11 = (a->self->_10 != b->self->_10);
            		}
            		else {
HXLINE( 180)			r11 = true;
            		}
HXDLIN( 180)		if (!(r11)) {
HXLINE( 180)			r10 = (a->self->_11 != b->self->_11);
            		}
            		else {
HXLINE( 180)			r10 = true;
            		}
HXDLIN( 180)		if (!(r10)) {
HXLINE( 180)			r9 = (a->self->_12 != b->self->_12);
            		}
            		else {
HXLINE( 180)			r9 = true;
            		}
HXDLIN( 180)		if (!(r9)) {
HXLINE( 180)			r8 = (a->self->_13 != b->self->_13);
            		}
            		else {
HXLINE( 180)			r8 = true;
            		}
HXDLIN( 180)		if (!(r8)) {
HXLINE( 180)			r7 = (a->self->_20 != b->self->_20);
            		}
            		else {
HXLINE( 180)			r7 = true;
            		}
HXDLIN( 180)		if (!(r7)) {
HXLINE( 180)			r6 = (a->self->_21 != b->self->_21);
            		}
            		else {
HXLINE( 180)			r6 = true;
            		}
HXDLIN( 180)		if (!(r6)) {
HXLINE( 180)			r5 = (a->self->_22 != b->self->_22);
            		}
            		else {
HXLINE( 180)			r5 = true;
            		}
HXDLIN( 180)		if (!(r5)) {
HXLINE( 180)			r4 = (a->self->_23 != b->self->_23);
            		}
            		else {
HXLINE( 180)			r4 = true;
            		}
HXDLIN( 180)		if (!(r4)) {
HXLINE( 180)			r3 = (a->self->_30 != b->self->_30);
            		}
            		else {
HXLINE( 180)			r3 = true;
            		}
HXDLIN( 180)		if (!(r3)) {
HXLINE( 180)			r2 = (a->self->_31 != b->self->_31);
            		}
            		else {
HXLINE( 180)			r2 = true;
            		}
HXDLIN( 180)		if (!(r2)) {
HXLINE( 180)			r1 = (a->self->_32 != b->self->_32);
            		}
            		else {
HXLINE( 180)			r1 = true;
            		}
HXDLIN( 180)		if (!(r1)) {
HXLINE( 180)			r = (a->self->_33 != b->self->_33);
            		}
            		else {
HXLINE( 180)			r = true;
            		}
HXLINE( 184)		if (r) {
HXLINE( 184)			this->lastWorld->setFrom(this->world);
            		}
HXLINE( 185)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,diff,return )

 ::iron::math::Vec4 Transform_obj::look(){
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_193_look)
HXDLIN( 193)		 ::iron::math::Mat4 _this = this->world;
HXDLIN( 193)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this->self->_10,_this->self->_11,_this->self->_12,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,look,return )

 ::iron::math::Vec4 Transform_obj::right(){
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_194_right)
HXDLIN( 194)		 ::iron::math::Mat4 _this = this->world;
HXDLIN( 194)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this->self->_00,_this->self->_01,_this->self->_02,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,right,return )

 ::iron::math::Vec4 Transform_obj::up(){
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_195_up)
HXDLIN( 195)		 ::iron::math::Mat4 _this = this->world;
HXDLIN( 195)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this->self->_20,_this->self->_21,_this->self->_22,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,up,return )

float Transform_obj::worldx(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_197_worldx)
HXDLIN( 197)		return this->world->self->_30;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,worldx,return )

float Transform_obj::worldy(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_198_worldy)
HXDLIN( 198)		return this->world->self->_31;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,worldy,return )

float Transform_obj::worldz(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_199_worldz)
HXDLIN( 199)		return this->world->self->_32;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,worldz,return )

 ::iron::math::Mat4 Transform_obj::temp;


hx::ObjectPtr< Transform_obj > Transform_obj::__new( ::iron::object::Object object) {
	hx::ObjectPtr< Transform_obj > __this = new Transform_obj();
	__this->__construct(object);
	return __this;
}

hx::ObjectPtr< Transform_obj > Transform_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::object::Object object) {
	Transform_obj *__this = (Transform_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Transform_obj), true, "iron.object.Transform"));
	*(void **)__this = Transform_obj::_hx_vtable;
	__this->__construct(object);
	return __this;
}

Transform_obj::Transform_obj()
{
}

void Transform_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Transform);
	HX_MARK_MEMBER_NAME(world,"world");
	HX_MARK_MEMBER_NAME(localOnly,"localOnly");
	HX_MARK_MEMBER_NAME(local,"local");
	HX_MARK_MEMBER_NAME(loc,"loc");
	HX_MARK_MEMBER_NAME(rot,"rot");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_MEMBER_NAME(dim,"dim");
	HX_MARK_MEMBER_NAME(radius,"radius");
	HX_MARK_MEMBER_NAME(prependMats,"prependMats");
	HX_MARK_MEMBER_NAME(appendMats,"appendMats");
	HX_MARK_MEMBER_NAME(boneParent,"boneParent");
	HX_MARK_MEMBER_NAME(lastWorld,"lastWorld");
	HX_MARK_MEMBER_NAME(_eulerX,"_eulerX");
	HX_MARK_MEMBER_NAME(_eulerY,"_eulerY");
	HX_MARK_MEMBER_NAME(_eulerZ,"_eulerZ");
	HX_MARK_MEMBER_NAME(dloc,"dloc");
	HX_MARK_MEMBER_NAME(drot,"drot");
	HX_MARK_MEMBER_NAME(dscale,"dscale");
	HX_MARK_MEMBER_NAME(_deulerX,"_deulerX");
	HX_MARK_MEMBER_NAME(_deulerY,"_deulerY");
	HX_MARK_MEMBER_NAME(_deulerZ,"_deulerZ");
	HX_MARK_END_CLASS();
}

void Transform_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(world,"world");
	HX_VISIT_MEMBER_NAME(localOnly,"localOnly");
	HX_VISIT_MEMBER_NAME(local,"local");
	HX_VISIT_MEMBER_NAME(loc,"loc");
	HX_VISIT_MEMBER_NAME(rot,"rot");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(object,"object");
	HX_VISIT_MEMBER_NAME(dim,"dim");
	HX_VISIT_MEMBER_NAME(radius,"radius");
	HX_VISIT_MEMBER_NAME(prependMats,"prependMats");
	HX_VISIT_MEMBER_NAME(appendMats,"appendMats");
	HX_VISIT_MEMBER_NAME(boneParent,"boneParent");
	HX_VISIT_MEMBER_NAME(lastWorld,"lastWorld");
	HX_VISIT_MEMBER_NAME(_eulerX,"_eulerX");
	HX_VISIT_MEMBER_NAME(_eulerY,"_eulerY");
	HX_VISIT_MEMBER_NAME(_eulerZ,"_eulerZ");
	HX_VISIT_MEMBER_NAME(dloc,"dloc");
	HX_VISIT_MEMBER_NAME(drot,"drot");
	HX_VISIT_MEMBER_NAME(dscale,"dscale");
	HX_VISIT_MEMBER_NAME(_deulerX,"_deulerX");
	HX_VISIT_MEMBER_NAME(_deulerY,"_deulerY");
	HX_VISIT_MEMBER_NAME(_deulerZ,"_deulerZ");
}

hx::Val Transform_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { return hx::Val( up_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"loc") ) { return hx::Val( loc ); }
		if (HX_FIELD_EQ(inName,"rot") ) { return hx::Val( rot ); }
		if (HX_FIELD_EQ(inName,"dim") ) { return hx::Val( dim ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"diff") ) { return hx::Val( diff_dyn() ); }
		if (HX_FIELD_EQ(inName,"look") ) { return hx::Val( look_dyn() ); }
		if (HX_FIELD_EQ(inName,"dloc") ) { return hx::Val( dloc ); }
		if (HX_FIELD_EQ(inName,"drot") ) { return hx::Val( drot ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { return hx::Val( world ); }
		if (HX_FIELD_EQ(inName,"local") ) { return hx::Val( local ); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale ); }
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { return hx::Val( object ); }
		if (HX_FIELD_EQ(inName,"radius") ) { return hx::Val( radius ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn() ); }
		if (HX_FIELD_EQ(inName,"worldx") ) { return hx::Val( worldx_dyn() ); }
		if (HX_FIELD_EQ(inName,"worldy") ) { return hx::Val( worldy_dyn() ); }
		if (HX_FIELD_EQ(inName,"worldz") ) { return hx::Val( worldz_dyn() ); }
		if (HX_FIELD_EQ(inName,"dscale") ) { return hx::Val( dscale ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_eulerX") ) { return hx::Val( _eulerX ); }
		if (HX_FIELD_EQ(inName,"_eulerY") ) { return hx::Val( _eulerY ); }
		if (HX_FIELD_EQ(inName,"_eulerZ") ) { return hx::Val( _eulerZ ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_deulerX") ) { return hx::Val( _deulerX ); }
		if (HX_FIELD_EQ(inName,"_deulerY") ) { return hx::Val( _deulerY ); }
		if (HX_FIELD_EQ(inName,"_deulerZ") ) { return hx::Val( _deulerZ ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"localOnly") ) { return hx::Val( localOnly ); }
		if (HX_FIELD_EQ(inName,"translate") ) { return hx::Val( translate_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMatrix") ) { return hx::Val( setMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastWorld") ) { return hx::Val( lastWorld ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"appendMats") ) { return hx::Val( appendMats ); }
		if (HX_FIELD_EQ(inName,"boneParent") ) { return hx::Val( boneParent ); }
		if (HX_FIELD_EQ(inName,"multMatrix") ) { return hx::Val( multMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"computeDim") ) { return hx::Val( computeDim_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"prependMats") ) { return hx::Val( prependMats ); }
		if (HX_FIELD_EQ(inName,"buildMatrix") ) { return hx::Val( buildMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRotation") ) { return hx::Val( setRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyParent") ) { return hx::Val( applyParent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"appendMatrix") ) { return hx::Val( appendMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"composeDelta") ) { return hx::Val( composeDelta_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"prependMatrix") ) { return hx::Val( prependMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"computeRadius") ) { return hx::Val( computeRadius_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"popAppendMatrix") ) { return hx::Val( popAppendMatrix_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"popPrependMatrix") ) { return hx::Val( popPrependMatrix_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"applyParentInverse") ) { return hx::Val( applyParentInverse_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Transform_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { outValue = ( temp ); return true; }
	}
	return false;
}

hx::Val Transform_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"loc") ) { loc=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rot") ) { rot=inValue.Cast<  ::iron::math::Quat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dim") ) { dim=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dloc") ) { dloc=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drot") ) { drot=inValue.Cast<  ::iron::math::Quat >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { world=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"local") ) { local=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::iron::object::Object >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dscale") ) { dscale=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_eulerX") ) { _eulerX=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_eulerY") ) { _eulerY=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_eulerZ") ) { _eulerZ=inValue.Cast< float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_deulerX") ) { _deulerX=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_deulerY") ) { _deulerY=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_deulerZ") ) { _deulerZ=inValue.Cast< float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"localOnly") ) { localOnly=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastWorld") ) { lastWorld=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"appendMats") ) { appendMats=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boneParent") ) { boneParent=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"prependMats") ) { prependMats=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Transform_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { temp=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
	}
	return false;
}

void Transform_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("world","\x52","\x96","\x64","\xce"));
	outFields->push(HX_HCSTRING("localOnly","\x77","\x0c","\xf5","\x0b"));
	outFields->push(HX_HCSTRING("local","\x6b","\xc9","\xf0","\x78"));
	outFields->push(HX_HCSTRING("loc","\x80","\x54","\x52","\x00"));
	outFields->push(HX_HCSTRING("rot","\x17","\xe2","\x56","\x00"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"));
	outFields->push(HX_HCSTRING("dim","\x48","\x3d","\x4c","\x00"));
	outFields->push(HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"));
	outFields->push(HX_HCSTRING("prependMats","\x01","\xa4","\x43","\x6c"));
	outFields->push(HX_HCSTRING("appendMats","\xcd","\x44","\x62","\x56"));
	outFields->push(HX_HCSTRING("boneParent","\x8e","\xc7","\xe5","\x30"));
	outFields->push(HX_HCSTRING("lastWorld","\x1c","\xc4","\x11","\x1b"));
	outFields->push(HX_HCSTRING("_eulerX","\x6e","\x74","\x14","\x76"));
	outFields->push(HX_HCSTRING("_eulerY","\x6f","\x74","\x14","\x76"));
	outFields->push(HX_HCSTRING("_eulerZ","\x70","\x74","\x14","\x76"));
	outFields->push(HX_HCSTRING("dloc","\x9c","\xaa","\x6b","\x42"));
	outFields->push(HX_HCSTRING("drot","\x33","\x38","\x70","\x42"));
	outFields->push(HX_HCSTRING("dscale","\xa6","\xe3","\x7e","\x74"));
	outFields->push(HX_HCSTRING("_deulerX","\xb4","\x1f","\xb8","\x7f"));
	outFields->push(HX_HCSTRING("_deulerY","\xb5","\x1f","\xb8","\x7f"));
	outFields->push(HX_HCSTRING("_deulerZ","\xb6","\x1f","\xb8","\x7f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Transform_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(Transform_obj,world),HX_HCSTRING("world","\x52","\x96","\x64","\xce")},
	{hx::fsBool,(int)offsetof(Transform_obj,localOnly),HX_HCSTRING("localOnly","\x77","\x0c","\xf5","\x0b")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(Transform_obj,local),HX_HCSTRING("local","\x6b","\xc9","\xf0","\x78")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Transform_obj,loc),HX_HCSTRING("loc","\x80","\x54","\x52","\x00")},
	{hx::fsObject /*::iron::math::Quat*/ ,(int)offsetof(Transform_obj,rot),HX_HCSTRING("rot","\x17","\xe2","\x56","\x00")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Transform_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{hx::fsBool,(int)offsetof(Transform_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(Transform_obj,object),HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Transform_obj,dim),HX_HCSTRING("dim","\x48","\x3d","\x4c","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,radius),HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Transform_obj,prependMats),HX_HCSTRING("prependMats","\x01","\xa4","\x43","\x6c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Transform_obj,appendMats),HX_HCSTRING("appendMats","\xcd","\x44","\x62","\x56")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(Transform_obj,boneParent),HX_HCSTRING("boneParent","\x8e","\xc7","\xe5","\x30")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(Transform_obj,lastWorld),HX_HCSTRING("lastWorld","\x1c","\xc4","\x11","\x1b")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_eulerX),HX_HCSTRING("_eulerX","\x6e","\x74","\x14","\x76")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_eulerY),HX_HCSTRING("_eulerY","\x6f","\x74","\x14","\x76")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_eulerZ),HX_HCSTRING("_eulerZ","\x70","\x74","\x14","\x76")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Transform_obj,dloc),HX_HCSTRING("dloc","\x9c","\xaa","\x6b","\x42")},
	{hx::fsObject /*::iron::math::Quat*/ ,(int)offsetof(Transform_obj,drot),HX_HCSTRING("drot","\x33","\x38","\x70","\x42")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Transform_obj,dscale),HX_HCSTRING("dscale","\xa6","\xe3","\x7e","\x74")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_deulerX),HX_HCSTRING("_deulerX","\xb4","\x1f","\xb8","\x7f")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_deulerY),HX_HCSTRING("_deulerY","\xb5","\x1f","\xb8","\x7f")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_deulerZ),HX_HCSTRING("_deulerZ","\xb6","\x1f","\xb8","\x7f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Transform_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &Transform_obj::temp,HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Transform_obj_sMemberFields[] = {
	HX_HCSTRING("world","\x52","\x96","\x64","\xce"),
	HX_HCSTRING("localOnly","\x77","\x0c","\xf5","\x0b"),
	HX_HCSTRING("local","\x6b","\xc9","\xf0","\x78"),
	HX_HCSTRING("loc","\x80","\x54","\x52","\x00"),
	HX_HCSTRING("rot","\x17","\xe2","\x56","\x00"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"),
	HX_HCSTRING("dim","\x48","\x3d","\x4c","\x00"),
	HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"),
	HX_HCSTRING("prependMats","\x01","\xa4","\x43","\x6c"),
	HX_HCSTRING("appendMats","\xcd","\x44","\x62","\x56"),
	HX_HCSTRING("boneParent","\x8e","\xc7","\xe5","\x30"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("prependMatrix","\xef","\xff","\x74","\xbf"),
	HX_HCSTRING("popPrependMatrix","\x9e","\x0b","\x66","\xf1"),
	HX_HCSTRING("appendMatrix","\xbb","\x6b","\x16","\x67"),
	HX_HCSTRING("popAppendMatrix","\xec","\xaa","\x9c","\x4a"),
	HX_HCSTRING("composeDelta","\x86","\x7d","\x2e","\xbe"),
	HX_HCSTRING("buildMatrix","\x0f","\x1c","\x39","\x0c"),
	HX_HCSTRING("translate","\x4e","\xd7","\x7f","\x49"),
	HX_HCSTRING("setMatrix","\x83","\xab","\x6f","\x1b"),
	HX_HCSTRING("multMatrix","\x51","\xa6","\x68","\x31"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("setRotation","\x00","\x07","\xe7","\x38"),
	HX_HCSTRING("computeRadius","\x29","\xff","\x6c","\x1b"),
	HX_HCSTRING("computeDim","\x11","\x72","\x8a","\x34"),
	HX_HCSTRING("applyParentInverse","\x58","\x45","\xa5","\xd5"),
	HX_HCSTRING("applyParent","\x38","\xc5","\x78","\x29"),
	HX_HCSTRING("lastWorld","\x1c","\xc4","\x11","\x1b"),
	HX_HCSTRING("diff","\x05","\x5c","\x69","\x42"),
	HX_HCSTRING("_eulerX","\x6e","\x74","\x14","\x76"),
	HX_HCSTRING("_eulerY","\x6f","\x74","\x14","\x76"),
	HX_HCSTRING("_eulerZ","\x70","\x74","\x14","\x76"),
	HX_HCSTRING("look","\x5f","\xa6","\xb7","\x47"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("up","\x5b","\x66","\x00","\x00"),
	HX_HCSTRING("worldx","\xe6","\xf1","\x9e","\xc9"),
	HX_HCSTRING("worldy","\xe7","\xf1","\x9e","\xc9"),
	HX_HCSTRING("worldz","\xe8","\xf1","\x9e","\xc9"),
	HX_HCSTRING("dloc","\x9c","\xaa","\x6b","\x42"),
	HX_HCSTRING("drot","\x33","\x38","\x70","\x42"),
	HX_HCSTRING("dscale","\xa6","\xe3","\x7e","\x74"),
	HX_HCSTRING("_deulerX","\xb4","\x1f","\xb8","\x7f"),
	HX_HCSTRING("_deulerY","\xb5","\x1f","\xb8","\x7f"),
	HX_HCSTRING("_deulerZ","\xb6","\x1f","\xb8","\x7f"),
	::String(null()) };

static void Transform_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Transform_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Transform_obj::temp,"temp");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Transform_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Transform_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Transform_obj::temp,"temp");
};

#endif

hx::Class Transform_obj::__mClass;

static ::String Transform_obj_sStaticFields[] = {
	HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c"),
	::String(null())
};

void Transform_obj::__register()
{
	hx::Object *dummy = new Transform_obj;
	Transform_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.Transform","\xc3","\x1c","\x0d","\x65");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Transform_obj::__GetStatic;
	__mClass->mSetStaticField = &Transform_obj::__SetStatic;
	__mClass->mMarkFunc = Transform_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Transform_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Transform_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Transform_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Transform_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Transform_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Transform_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Transform_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_19_boot)
HXDLIN(  19)		temp = ::iron::math::Mat4_obj::identity();
            	}
}

} // end namespace iron
} // end namespace object
