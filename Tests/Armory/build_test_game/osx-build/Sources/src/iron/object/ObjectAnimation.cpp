// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_ObjectAnimation
#include <iron/object/ObjectAnimation.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <kha/arrays/Uint32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_baced0ab0039e851_15_new,"iron.object.ObjectAnimation","new",0x4e4ac9ce,"iron.object.ObjectAnimation.new","iron/object/ObjectAnimation.hx",15,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_22_getAction,"iron.object.ObjectAnimation","getAction",0xfbcd84da,"iron.object.ObjectAnimation.getAction","iron/object/ObjectAnimation.hx",22,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_27_play,"iron.object.ObjectAnimation","play",0x347d74c6,"iron.object.ObjectAnimation.play","iron/object/ObjectAnimation.hx",27,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_36_update,"iron.object.ObjectAnimation","update",0xb5a5a55b,"iron.object.ObjectAnimation.update","iron/object/ObjectAnimation.hx",36,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_53_updateObjectAnim,"iron.object.ObjectAnimation","updateObjectAnim",0xf97105ab,"iron.object.ObjectAnimation.updateObjectAnim","iron/object/ObjectAnimation.hx",53,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_66_interpolateLinear,"iron.object.ObjectAnimation","interpolateLinear",0x24e47f74,"iron.object.ObjectAnimation.interpolateLinear","iron/object/ObjectAnimation.hx",66,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_68_interpolateBezier,"iron.object.ObjectAnimation","interpolateBezier",0xdfaa2dae,"iron.object.ObjectAnimation.interpolateBezier","iron/object/ObjectAnimation.hx",68,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_75_interpolateTcb,"iron.object.ObjectAnimation","interpolateTcb",0x28c6af24,"iron.object.ObjectAnimation.interpolateTcb","iron/object/ObjectAnimation.hx",75,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_78_checkFrameIndexT,"iron.object.ObjectAnimation","checkFrameIndexT",0x13f6bef9,"iron.object.ObjectAnimation.checkFrameIndexT","iron/object/ObjectAnimation.hx",78,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_84_updateAnimNonSampled,"iron.object.ObjectAnimation","updateAnimNonSampled",0xbee2eb99,"iron.object.ObjectAnimation.updateAnimNonSampled","iron/object/ObjectAnimation.hx",84,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_155_totalFrames,"iron.object.ObjectAnimation","totalFrames",0x198eb9f8,"iron.object.ObjectAnimation.totalFrames","iron/object/ObjectAnimation.hx",155,0x1d3f6382)
namespace iron{
namespace object{

void ObjectAnimation_obj::__construct( ::iron::object::Object object,::Array< ::Dynamic> oactions){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_15_new)
HXLINE(  16)		this->object = object;
HXLINE(  17)		this->oactions = oactions;
HXLINE(  18)		this->isSkinned = false;
HXLINE(  19)		super::__construct();
            	}

Dynamic ObjectAnimation_obj::__CreateEmpty() { return new ObjectAnimation_obj; }

void *ObjectAnimation_obj::_hx_vtable = 0;

Dynamic ObjectAnimation_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ObjectAnimation_obj > _hx_result = new ObjectAnimation_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ObjectAnimation_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0e495cf6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0e495cf6;
	} else {
		return inClassId==(int)0x1ad734d9;
	}
}

 ::Dynamic ObjectAnimation_obj::getAction(::String action){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_22_getAction)
HXLINE(  23)		{
HXLINE(  23)			int _g = (int)0;
HXDLIN(  23)			::Array< ::Dynamic> _g1 = this->oactions;
HXDLIN(  23)			while((_g < _g1->length)){
HXLINE(  23)				 ::Dynamic a = _g1->__get(_g);
HXDLIN(  23)				_g = (_g + (int)1);
HXDLIN(  23)				bool _hx_tmp;
HXDLIN(  23)				if (hx::IsNotNull( a )) {
HXLINE(  23)					_hx_tmp = (( (::String)( ::Dynamic(a->__Field(HX_("objects",d4,68,4f,82),hx::paccDynamic))->__GetItem((int)0)->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == action);
            				}
            				else {
HXLINE(  23)					_hx_tmp = false;
            				}
HXDLIN(  23)				if (_hx_tmp) {
HXLINE(  23)					return  ::Dynamic(a->__Field(HX_("objects",d4,68,4f,82),hx::paccDynamic))->__GetItem((int)0);
            				}
            			}
            		}
HXLINE(  24)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ObjectAnimation_obj,getAction,return )

void ObjectAnimation_obj::play(::String __o_action, ::Dynamic onComplete,hx::Null< Float >  __o_blendTime,hx::Null< Float >  __o_speed,hx::Null< bool >  __o_loop){
::String action = __o_action.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
Float blendTime = __o_blendTime.Default(((Float)0.0));
Float speed = __o_speed.Default(((Float)1.0));
bool loop = __o_loop.Default(true);
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_27_play)
HXLINE(  28)		this->super::play(action,onComplete,blendTime,speed,loop);
HXLINE(  29)		bool _hx_tmp;
HXDLIN(  29)		if ((this->action == HX_("",00,00,00,00))) {
HXLINE(  29)			_hx_tmp = hx::IsNotNull( this->oactions->__get((int)0) );
            		}
            		else {
HXLINE(  29)			_hx_tmp = false;
            		}
HXDLIN(  29)		if (_hx_tmp) {
HXLINE(  29)			this->action = ( (::String)( ::Dynamic(this->oactions->__get((int)0)->__Field(HX_("objects",d4,68,4f,82),hx::paccDynamic))->__GetItem((int)0)->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
            		}
HXLINE(  30)		this->oaction = this->getAction(this->action);
HXLINE(  31)		if (hx::IsNotNull( this->oaction )) {
HXLINE(  32)			bool _hx_tmp1;
HXDLIN(  32)			if (hx::IsNotNull( this->oaction->__Field(HX_("sampled",fa,c4,c9,83),hx::paccDynamic) )) {
HXLINE(  32)				_hx_tmp1 = ( (bool)(this->oaction->__Field(HX_("sampled",fa,c4,c9,83),hx::paccDynamic)) );
            			}
            			else {
HXLINE(  32)				_hx_tmp1 = false;
            			}
HXDLIN(  32)			this->isSampled = _hx_tmp1;
            		}
            	}


void ObjectAnimation_obj::update(Float delta){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_36_update)
HXLINE(  37)		bool _hx_tmp;
HXDLIN(  37)		bool _hx_tmp1;
HXDLIN(  37)		if (!(!(this->object->visible))) {
HXLINE(  37)			_hx_tmp1 = this->object->culled;
            		}
            		else {
HXLINE(  37)			_hx_tmp1 = true;
            		}
HXDLIN(  37)		if (!(_hx_tmp1)) {
HXLINE(  37)			_hx_tmp = hx::IsNull( this->oaction );
            		}
            		else {
HXLINE(  37)			_hx_tmp = true;
            		}
HXDLIN(  37)		if (_hx_tmp) {
HXLINE(  37)			return;
            		}
HXLINE(  43)		this->super::update(delta);
HXLINE(  44)		if (this->paused) {
HXLINE(  44)			return;
            		}
HXLINE(  45)		if (!(this->isSkinned)) {
HXLINE(  45)			this->updateObjectAnim();
            		}
            	}


void ObjectAnimation_obj::updateObjectAnim(){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_53_updateObjectAnim)
HXDLIN(  53)		if (this->isSampled) {
HXLINE(  54)			this->updateTrack(this->oaction->__Field(HX_("anim",11,86,71,40),hx::paccDynamic));
HXLINE(  55)			this->updateAnimSampled(this->oaction->__Field(HX_("anim",11,86,71,40),hx::paccDynamic),this->object->transform->world);
HXLINE(  56)			this->object->transform->world->decompose(this->object->transform->loc,this->object->transform->rot,this->object->transform->scale);
HXLINE(  57)			{
HXLINE(  57)				int _g = (int)0;
HXDLIN(  57)				::Array< ::Dynamic> _g1 = this->object->children;
HXDLIN(  57)				while((_g < _g1->length)){
HXLINE(  57)					 ::iron::object::Object c = _g1->__get(_g).StaticCast<  ::iron::object::Object >();
HXDLIN(  57)					_g = (_g + (int)1);
HXDLIN(  57)					c->transform->buildMatrix();
            				}
            			}
            		}
            		else {
HXLINE(  60)			this->updateAnimNonSampled(this->oaction->__Field(HX_("anim",11,86,71,40),hx::paccDynamic),this->object->transform);
HXLINE(  61)			this->object->transform->buildMatrix();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ObjectAnimation_obj,updateObjectAnim,(void))

Float ObjectAnimation_obj::interpolateLinear(Float t,Float t1,Float t2){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_66_interpolateLinear)
HXDLIN(  66)		return ((Float)(t - t1) / (Float)(t2 - t1));
            	}


HX_DEFINE_DYNAMIC_FUNC3(ObjectAnimation_obj,interpolateLinear,return )

Float ObjectAnimation_obj::interpolateBezier(Float t,Float t1,Float t2){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_68_interpolateBezier)
HXLINE(  70)		Float k = ((Float)(t - t1) / (Float)(t2 - t1));
HXLINE(  72)		k = ((k * k) * (((Float)3.0) - (((Float)2.0) * k)));
HXLINE(  73)		return k;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ObjectAnimation_obj,interpolateBezier,return )

void ObjectAnimation_obj::interpolateTcb(){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_75_interpolateTcb)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ObjectAnimation_obj,interpolateTcb,(void))

bool ObjectAnimation_obj::checkFrameIndexT( ::kha::arrays::Uint32ArrayPrivate frameValues,Float t){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_78_checkFrameIndexT)
HXDLIN(  78)		if ((this->speed > (int)0)) {
HXLINE(  79)			int _hx_tmp = this->frameIndex;
HXDLIN(  79)			if ((_hx_tmp < (frameValues->self.length() - (int)2))) {
HXLINE(  79)				int _hx_tmp1 = frameValues->self.get((this->frameIndex + (int)1));
HXDLIN(  79)				return (t > (_hx_tmp1 * this->frameTime));
            			}
            			else {
HXLINE(  79)				return false;
            			}
            		}
            		else {
HXLINE(  80)			if ((this->frameIndex > (int)1)) {
HXLINE(  80)				int _hx_tmp2 = frameValues->self.get((this->frameIndex - (int)1));
HXDLIN(  80)				return (t > (_hx_tmp2 * this->frameTime));
            			}
            			else {
HXLINE(  80)				return false;
            			}
            		}
HXLINE(  78)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ObjectAnimation_obj,checkFrameIndexT,return )

void ObjectAnimation_obj::updateAnimNonSampled( ::Dynamic anim, ::iron::object::Transform transform){
            	HX_GC_STACKFRAME(&_hx_pos_baced0ab0039e851_84_updateAnimNonSampled)
HXLINE(  85)		if (hx::IsNull( anim )) {
HXLINE(  85)			return;
            		}
HXLINE(  87)		float total = (anim->__Field(HX_("end",db,03,4d,00),hx::paccDynamic) * this->frameTime);
HXDLIN(  87)		float total1 = (total - (anim->__Field(HX_("begin",29,ea,55,b0),hx::paccDynamic) * this->frameTime));
HXLINE(  89)		if (( (bool)(anim->__Field(HX_("has_delta",13,6e,62,df),hx::paccDynamic)) )) {
HXLINE(  90)			 ::iron::object::Transform t = transform;
HXLINE(  91)			if (hx::IsNull( t->dloc )) {
HXLINE(  91)				t->dloc =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN(  91)				t->drot =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN(  91)				t->dscale =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE(  92)			t->dloc->set((int)0,(int)0,(int)0,null());
HXLINE(  93)			t->dscale->set((int)0,(int)0,(int)0,null());
HXLINE(  94)			t->_deulerX = (t->_deulerY = (t->_deulerZ = ((Float)0.0)));
            		}
HXLINE(  97)		{
HXLINE(  97)			int _g = (int)0;
HXDLIN(  97)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(anim->__Field(HX_("tracks",88,2b,7d,45),hx::paccDynamic)) );
HXDLIN(  97)			while((_g < _g1->length)){
HXLINE(  97)				 ::Dynamic track = _g1->__get(_g);
HXDLIN(  97)				_g = (_g + (int)1);
HXLINE(  99)				if ((this->frameIndex == (int)-1)) {
HXLINE(  99)					this->rewind(track);
            				}
HXLINE( 100)				int sign;
HXDLIN( 100)				if ((this->speed > (int)0)) {
HXLINE( 100)					sign = (int)1;
            				}
            				else {
HXLINE( 100)					sign = (int)-1;
            				}
HXLINE( 103)				Float t1 = this->time;
HXDLIN( 103)				Float t2 = (t1 + (anim->__Field(HX_("begin",29,ea,55,b0),hx::paccDynamic) * this->frameTime));
HXLINE( 104)				while(true){
HXLINE( 104)					 ::kha::arrays::Uint32ArrayPrivate frameValues = ( ( ::kha::arrays::Uint32ArrayPrivate)(track->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)) );
HXDLIN( 104)					bool _hx_tmp;
HXDLIN( 104)					if ((this->speed > (int)0)) {
HXLINE( 104)						int _hx_tmp1 = this->frameIndex;
HXDLIN( 104)						if ((_hx_tmp1 < (frameValues->self.length() - (int)2))) {
HXLINE( 104)							int _hx_tmp2 = frameValues->self.get((this->frameIndex + (int)1));
HXDLIN( 104)							_hx_tmp = (t2 > (_hx_tmp2 * this->frameTime));
            						}
            						else {
HXLINE( 104)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE( 104)						if ((this->frameIndex > (int)1)) {
HXLINE( 104)							int _hx_tmp3 = frameValues->self.get((this->frameIndex - (int)1));
HXDLIN( 104)							_hx_tmp = (t2 > (_hx_tmp3 * this->frameTime));
            						}
            						else {
HXLINE( 104)							_hx_tmp = false;
            						}
            					}
HXDLIN( 104)					if (!(_hx_tmp)) {
HXLINE( 104)						goto _hx_goto_12;
            					}
HXDLIN( 104)					 ::iron::object::ObjectAnimation _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 104)					_hx_tmp4->frameIndex = (_hx_tmp4->frameIndex + sign);
            				}
            				_hx_goto_12:;
HXLINE( 107)				int _hx_tmp5 = this->frameIndex;
HXDLIN( 107)				if ((_hx_tmp5 >= ( ( ::kha::arrays::Uint32ArrayPrivate)(track->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)) )->self.length())) {
HXLINE( 107)					continue;
            				}
HXLINE( 110)				if ((this->time > total1)) {
HXLINE( 111)					if (hx::IsNotNull( this->onComplete )) {
HXLINE( 111)						this->onComplete();
            					}
HXLINE( 112)					this->rewind(track);
HXLINE( 113)					return;
            				}
HXLINE( 116)				int ti = this->frameIndex;
HXLINE( 117)				int t11 = ( ( ::kha::arrays::Uint32ArrayPrivate)(track->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)) )->self.get(ti);
HXDLIN( 117)				float t12 = (t11 * this->frameTime);
HXLINE( 118)				 uint32array this1 = ( ( ::kha::arrays::Uint32ArrayPrivate)(track->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)) )->self;
HXDLIN( 118)				int t21 = this1.get((ti + sign));
HXDLIN( 118)				float t22 = (t21 * this->frameTime);
HXLINE( 119)				 ::Dynamic interpolate = this->interpolateLinear_dyn();
HXLINE( 120)				{
HXLINE( 120)					::String _g2 = ( (::String)(track->__Field(HX_("curve",af,4c,58,4e),hx::paccDynamic)) );
HXDLIN( 120)					::String _hx_switch_0 = _g2;
            					if (  (_hx_switch_0==HX_("bezier",1f,00,66,a7)) ){
HXLINE( 122)						interpolate = this->interpolateBezier_dyn();
HXDLIN( 122)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_0==HX_("linear",e5,51,a0,ec)) ){
HXLINE( 121)						interpolate = this->interpolateLinear_dyn();
HXDLIN( 121)						goto _hx_goto_13;
            					}
            					_hx_goto_13:;
            				}
HXLINE( 125)				Float s = ( (Float)(interpolate(t2,t12,t22)) );
HXLINE( 126)				Float invs = (((Float)1.0) - s);
HXLINE( 127)				float v1 = ( ( ::kha::arrays::Float32ArrayPrivate)(track->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) )->self.get(ti);
HXLINE( 128)				 float32array this2 = ( ( ::kha::arrays::Float32ArrayPrivate)(track->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) )->self;
HXDLIN( 128)				float v2 = this2.get((ti + sign));
HXLINE( 129)				Float v = ((v1 * invs) + (v2 * s));
HXLINE( 131)				{
HXLINE( 131)					::String _g3 = ( (::String)(track->__Field(HX_("target",51,f3,ec,86),hx::paccDynamic)) );
HXDLIN( 131)					::String _hx_switch_1 = _g3;
            					if (  (_hx_switch_1==HX_("dxloc",6c,f1,b5,e3)) ){
HXLINE( 142)						transform->dloc->x = v;
HXDLIN( 142)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dxrot",03,7f,ba,e3)) ){
HXLINE( 145)						transform->_deulerX = v;
HXDLIN( 145)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dxscl",c8,36,bb,e3)) ){
HXLINE( 148)						transform->dscale->x = v;
HXDLIN( 148)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dyloc",0b,28,5f,e4)) ){
HXLINE( 143)						transform->dloc->y = v;
HXDLIN( 143)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dyrot",a2,b5,63,e4)) ){
HXLINE( 146)						transform->_deulerY = v;
HXDLIN( 146)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dyscl",67,6d,64,e4)) ){
HXLINE( 149)						transform->dscale->y = v;
HXDLIN( 149)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dzloc",aa,5e,08,e5)) ){
HXLINE( 144)						transform->dloc->z = v;
HXDLIN( 144)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dzrot",41,ec,0c,e5)) ){
HXLINE( 147)						transform->_deulerZ = v;
HXDLIN( 147)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dzscl",06,a4,0d,e5)) ){
HXLINE( 150)						transform->dscale->z = v;
HXDLIN( 150)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("xloc",08,ef,a3,4f)) ){
HXLINE( 132)						transform->loc->x = v;
HXDLIN( 132)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("xrot",9f,7c,a8,4f)) ){
HXLINE( 135)						transform->setRotation(v,transform->_eulerY,transform->_eulerZ);
HXDLIN( 135)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("xscl",64,34,a9,4f)) ){
HXLINE( 138)						transform->scale->x = v;
HXDLIN( 138)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("yloc",a7,25,4d,50)) ){
HXLINE( 133)						transform->loc->y = v;
HXDLIN( 133)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("yrot",3e,b3,51,50)) ){
HXLINE( 136)						transform->setRotation(transform->_eulerX,v,transform->_eulerZ);
HXDLIN( 136)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("yscl",03,6b,52,50)) ){
HXLINE( 139)						transform->scale->y = v;
HXDLIN( 139)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("zloc",46,5c,f6,50)) ){
HXLINE( 134)						transform->loc->z = v;
HXDLIN( 134)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("zrot",dd,e9,fa,50)) ){
HXLINE( 137)						transform->setRotation(transform->_eulerX,transform->_eulerY,v);
HXDLIN( 137)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("zscl",a2,a1,fb,50)) ){
HXLINE( 140)						transform->scale->z = v;
HXDLIN( 140)						goto _hx_goto_14;
            					}
            					_hx_goto_14:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ObjectAnimation_obj,updateAnimNonSampled,(void))

int ObjectAnimation_obj::totalFrames(){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_155_totalFrames)
HXLINE( 156)		bool _hx_tmp;
HXDLIN( 156)		if (hx::IsNotNull( this->oaction )) {
HXLINE( 156)			_hx_tmp = hx::IsNull( this->oaction->__Field(HX_("anim",11,86,71,40),hx::paccDynamic) );
            		}
            		else {
HXLINE( 156)			_hx_tmp = true;
            		}
HXDLIN( 156)		if (_hx_tmp) {
HXLINE( 156)			return (int)0;
            		}
HXLINE( 157)		return ( ::Dynamic(this->oaction->__Field(HX_("anim",11,86,71,40),hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),hx::paccDynamic) -  ::Dynamic(this->oaction->__Field(HX_("anim",11,86,71,40),hx::paccDynamic))->__Field(HX_("begin",29,ea,55,b0),hx::paccDynamic));
            	}



hx::ObjectPtr< ObjectAnimation_obj > ObjectAnimation_obj::__new( ::iron::object::Object object,::Array< ::Dynamic> oactions) {
	hx::ObjectPtr< ObjectAnimation_obj > __this = new ObjectAnimation_obj();
	__this->__construct(object,oactions);
	return __this;
}

hx::ObjectPtr< ObjectAnimation_obj > ObjectAnimation_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::object::Object object,::Array< ::Dynamic> oactions) {
	ObjectAnimation_obj *__this = (ObjectAnimation_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ObjectAnimation_obj), true, "iron.object.ObjectAnimation"));
	*(void **)__this = ObjectAnimation_obj::_hx_vtable;
	__this->__construct(object,oactions);
	return __this;
}

ObjectAnimation_obj::ObjectAnimation_obj()
{
}

void ObjectAnimation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ObjectAnimation);
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_MEMBER_NAME(oactions,"oactions");
	HX_MARK_MEMBER_NAME(oaction,"oaction");
	 ::iron::object::Animation_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ObjectAnimation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(object,"object");
	HX_VISIT_MEMBER_NAME(oactions,"oactions");
	HX_VISIT_MEMBER_NAME(oaction,"oaction");
	 ::iron::object::Animation_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ObjectAnimation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { return hx::Val( object ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oaction") ) { return hx::Val( oaction ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"oactions") ) { return hx::Val( oactions ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getAction") ) { return hx::Val( getAction_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { return hx::Val( totalFrames_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"interpolateTcb") ) { return hx::Val( interpolateTcb_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateObjectAnim") ) { return hx::Val( updateObjectAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkFrameIndexT") ) { return hx::Val( checkFrameIndexT_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"interpolateLinear") ) { return hx::Val( interpolateLinear_dyn() ); }
		if (HX_FIELD_EQ(inName,"interpolateBezier") ) { return hx::Val( interpolateBezier_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateAnimNonSampled") ) { return hx::Val( updateAnimNonSampled_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ObjectAnimation_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::iron::object::Object >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oaction") ) { oaction=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"oactions") ) { oactions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ObjectAnimation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"));
	outFields->push(HX_HCSTRING("oactions","\x6e","\x7f","\x0d","\x34"));
	outFields->push(HX_HCSTRING("oaction","\x65","\xb9","\x14","\x1e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ObjectAnimation_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(ObjectAnimation_obj,object),HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(ObjectAnimation_obj,oactions),HX_HCSTRING("oactions","\x6e","\x7f","\x0d","\x34")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ObjectAnimation_obj,oaction),HX_HCSTRING("oaction","\x65","\xb9","\x14","\x1e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ObjectAnimation_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectAnimation_obj_sMemberFields[] = {
	HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"),
	HX_HCSTRING("oactions","\x6e","\x7f","\x0d","\x34"),
	HX_HCSTRING("oaction","\x65","\xb9","\x14","\x1e"),
	HX_HCSTRING("getAction","\xec","\xc4","\x9c","\x92"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateObjectAnim","\xd9","\xcb","\x95","\x0c"),
	HX_HCSTRING("interpolateLinear","\x86","\x21","\xed","\xd1"),
	HX_HCSTRING("interpolateBezier","\xc0","\xcf","\xb2","\x8c"),
	HX_HCSTRING("interpolateTcb","\xd2","\xed","\x1b","\x8d"),
	HX_HCSTRING("checkFrameIndexT","\x27","\x85","\x1b","\x27"),
	HX_HCSTRING("updateAnimNonSampled","\xc7","\x60","\x51","\x07"),
	HX_HCSTRING("totalFrames","\x8a","\xa2","\xbb","\x72"),
	::String(null()) };

static void ObjectAnimation_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ObjectAnimation_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ObjectAnimation_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ObjectAnimation_obj::__mClass,"__mClass");
};

#endif

hx::Class ObjectAnimation_obj::__mClass;

void ObjectAnimation_obj::__register()
{
	hx::Object *dummy = new ObjectAnimation_obj;
	ObjectAnimation_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.ObjectAnimation","\xdc","\x8a","\x5a","\x02");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ObjectAnimation_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ObjectAnimation_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ObjectAnimation_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ObjectAnimation_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectAnimation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectAnimation_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace object
