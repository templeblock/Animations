// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_RenderPath
#include <iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_FrustumPlane
#include <iron/object/FrustumPlane.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_System
#include <kha/System.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d44c7901d1565a4b_9_new,"iron.object.CameraObject","new",0xe65d8fbf,"iron.object.CameraObject.new","iron/object/CameraObject.hx",9,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_63_buildProjection,"iron.object.CameraObject","buildProjection",0x3bf93f3c,"iron.object.CameraObject.buildProjection","iron/object/CameraObject.hx",63,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_77_remove,"iron.object.CameraObject","remove",0x48ab8245,"iron.object.CameraObject.remove","iron/object/CameraObject.hx",77,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_82_renderFrame,"iron.object.CameraObject","renderFrame",0xce2b5b56,"iron.object.CameraObject.renderFrame","iron/object/CameraObject.hx",82,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_120_buildMatrix,"iron.object.CameraObject","buildMatrix",0x082fd26e,"iron.object.CameraObject.buildMatrix","iron/object/CameraObject.hx",120,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_191_rotate,"iron.object.CameraObject","rotate",0x0f432c5c,"iron.object.CameraObject.rotate","iron/object/CameraObject.hx",191,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_197_move,"iron.object.CameraObject","move",0xaade96d2,"iron.object.CameraObject.move","iron/object/CameraObject.hx",197,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_202_right,"iron.object.CameraObject","right",0xb4e3a0fb,"iron.object.CameraObject.right","iron/object/CameraObject.hx",202,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_203_up,"iron.object.CameraObject","up",0x54d5f7dc,"iron.object.CameraObject.up","iron/object/CameraObject.hx",203,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_204_look,"iron.object.CameraObject","look",0xaa355a20,"iron.object.CameraObject.look","iron/object/CameraObject.hx",204,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_205_rightWorld,"iron.object.CameraObject","rightWorld",0x8b1df757,"iron.object.CameraObject.rightWorld","iron/object/CameraObject.hx",205,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_206_upWorld,"iron.object.CameraObject","upWorld",0x854010d6,"iron.object.CameraObject.upWorld","iron/object/CameraObject.hx",206,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_207_lookWorld,"iron.object.CameraObject","lookWorld",0x8121f812,"iron.object.CameraObject.lookWorld","iron/object/CameraObject.hx",207,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_209_toString,"iron.object.CameraObject","toString",0xf797f8ed,"iron.object.CameraObject.toString","iron/object/CameraObject.hx",209,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_159_buildViewFrustum,"iron.object.CameraObject","buildViewFrustum",0xbb1fa430,"iron.object.CameraObject.buildViewFrustum","iron/object/CameraObject.hx",159,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_177_sphereInFrustum,"iron.object.CameraObject","sphereInFrustum",0xc7edc30f,"iron.object.CameraObject.sphereInFrustum","iron/object/CameraObject.hx",177,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_26_boot,"iron.object.CameraObject","boot",0xa39937f3,"iron.object.CameraObject.boot","iron/object/CameraObject.hx",26,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_176_boot,"iron.object.CameraObject","boot",0xa39937f3,"iron.object.CameraObject.boot","iron/object/CameraObject.hx",176,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_190_boot,"iron.object.CameraObject","boot",0xa39937f3,"iron.object.CameraObject.boot","iron/object/CameraObject.hx",190,0x9c38de71)
namespace iron{
namespace object{

void CameraObject_obj::__construct( ::iron::data::CameraData data){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_9_new)
HXLINE(  23)		this->frustumPlanes = null();
HXLINE(  21)		this->prevV = null();
HXLINE(  35)		super::__construct();
HXLINE(  37)		this->data = data;
HXLINE(  38)		this->nearPlane = ( (float)(data->raw->__Field(HX_("near_plane",85,54,5f,ca),hx::paccDynamic)) );
HXLINE(  39)		this->farPlane = ( (float)(data->raw->__Field(HX_("far_plane",b4,3b,51,fd),hx::paccDynamic)) );
HXLINE(  45)		this->buildProjection();
HXLINE(  52)		this->V = ::iron::math::Mat4_obj::identity();
HXLINE(  53)		this->VP = ::iron::math::Mat4_obj::identity();
HXLINE(  55)		if (( (bool)(data->raw->__Field(HX_("frustum_culling",53,b5,43,1c),hx::paccDynamic)) )) {
HXLINE(  56)			this->frustumPlanes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  57)			{
HXLINE(  57)				int _g = (int)0;
HXDLIN(  57)				while((_g < (int)6)){
HXLINE(  57)					_g = (_g + (int)1);
HXDLIN(  57)					int i = (_g - (int)1);
HXDLIN(  57)					::Array< ::Dynamic> _hx_tmp = this->frustumPlanes;
HXDLIN(  57)					_hx_tmp->push( ::iron::object::FrustumPlane_obj::__alloc( HX_CTX ));
            				}
            			}
            		}
HXLINE(  60)		::iron::Scene_obj::active->cameras->push(hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic CameraObject_obj::__CreateEmpty() { return new CameraObject_obj; }

void *CameraObject_obj::_hx_vtable = 0;

Dynamic CameraObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CameraObject_obj > _hx_result = new CameraObject_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CameraObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x284f908f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x284f908f;
	} else {
		return inClassId==(int)0x2a486766;
	}
}

void CameraObject_obj::buildProjection(){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_63_buildProjection)
HXLINE(  64)		float aspect;
HXDLIN(  64)		if (hx::IsNotNull( this->data->raw->__Field(HX_("aspect",d8,95,07,4a),hx::paccDynamic) )) {
HXLINE(  64)			aspect = ( (float)(this->data->raw->__Field(HX_("aspect",d8,95,07,4a),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  64)			int aspect1 = ::kha::System_obj::windowWidth(null());
HXDLIN(  64)			aspect = ((Float)aspect1 / (Float)::kha::System_obj::windowHeight(null()));
            		}
HXLINE(  65)		if (hx::IsNotNull( this->data->raw->__Field(HX_("ortho_scale",03,67,00,d0),hx::paccDynamic) )) {
HXLINE(  66)			float sc = ( (float)(this->data->raw->__Field(HX_("ortho_scale",03,67,00,d0),hx::paccDynamic)) );
HXLINE(  67)			this->P = ::iron::math::Mat4_obj::ortho((((int)-1 * aspect) * sc),(aspect * sc),((int)-1 * sc),sc,((int)-1 * this->farPlane),this->farPlane);
            		}
            		else {
HXLINE(  70)			this->P = ::iron::math::Mat4_obj::persp(( (float)(this->data->raw->__Field(HX_("fov",0d,c7,4d,00),hx::paccDynamic)) ),aspect,this->nearPlane,this->farPlane);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,buildProjection,(void))

void CameraObject_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_77_remove)
HXLINE(  78)		::iron::Scene_obj::active->cameras->remove(hx::ObjectPtr<OBJ_>(this));
HXLINE(  79)		this->super::remove();
            	}


void CameraObject_obj::renderFrame(::Dynamic g){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_82_renderFrame)
HXLINE(  88)		this->buildMatrix();
HXLINE(  91)		if (hx::IsNull( this->prevV )) {
HXLINE(  92)			this->prevV = ::iron::math::Mat4_obj::identity();
HXLINE(  93)			this->prevV->setFrom(this->V);
            		}
HXLINE(  96)		::iron::RenderPath_obj::active->renderFrame(g);
HXLINE(  98)		this->prevV->setFrom(this->V);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CameraObject_obj,renderFrame,(void))

void CameraObject_obj::buildMatrix(){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_120_buildMatrix)
HXLINE( 121)		this->transform->buildMatrix();
HXLINE( 125)		 ::iron::math::Vec4 sc = this->transform->world->getScale();
HXLINE( 126)		 ::iron::math::Vec4 _hx_tmp = ::iron::object::CameraObject_obj::temp;
HXDLIN( 126)		Float _hx_tmp1 = ((Float)((Float)1.0) / (Float)sc->x);
HXDLIN( 126)		Float _hx_tmp2 = ((Float)((Float)1.0) / (Float)sc->y);
HXDLIN( 126)		_hx_tmp->set(_hx_tmp1,_hx_tmp2,((Float)((Float)1.0) / (Float)sc->z),null());
HXLINE( 127)		this->transform->world->scale(::iron::object::CameraObject_obj::temp);
HXLINE( 129)		this->V->getInverse(this->transform->world);
HXLINE( 151)		this->VP->multmats(this->P,this->V);
HXLINE( 154)		if (( (bool)(this->data->raw->__Field(HX_("frustum_culling",53,b5,43,1c),hx::paccDynamic)) )) {
HXLINE( 155)			::iron::object::CameraObject_obj::buildViewFrustum(this->VP,this->frustumPlanes);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,buildMatrix,(void))

void CameraObject_obj::rotate( ::iron::math::Vec4 axis,Float f){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_191_rotate)
HXLINE( 192)		::iron::object::CameraObject_obj::q->fromAxisAngle(axis,f);
HXLINE( 193)		this->transform->rot->multquats(::iron::object::CameraObject_obj::q,this->transform->rot);
HXLINE( 194)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC2(CameraObject_obj,rotate,(void))

void CameraObject_obj::move( ::iron::math::Vec4 axis,hx::Null< Float >  __o_f){
Float f = __o_f.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_197_move)
HXLINE( 198)		 ::iron::math::Vec4 _hx_tmp = this->transform->loc;
HXDLIN( 198)		Float _hx_tmp1 = (axis->x * f);
HXDLIN( 198)		Float _hx_tmp2 = (axis->y * f);
HXDLIN( 198)		_hx_tmp->addf(_hx_tmp1,_hx_tmp2,(axis->z * f));
HXLINE( 199)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC2(CameraObject_obj,move,(void))

 ::iron::math::Vec4 CameraObject_obj::right(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_202_right)
HXDLIN( 202)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->transform->local->self->_00,this->transform->local->self->_01,this->transform->local->self->_02,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,right,return )

 ::iron::math::Vec4 CameraObject_obj::up(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_203_up)
HXDLIN( 203)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->transform->local->self->_10,this->transform->local->self->_11,this->transform->local->self->_12,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,up,return )

 ::iron::math::Vec4 CameraObject_obj::look(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_204_look)
HXDLIN( 204)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,-(this->transform->local->self->_20),-(this->transform->local->self->_21),-(this->transform->local->self->_22),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,look,return )

 ::iron::math::Vec4 CameraObject_obj::rightWorld(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_205_rightWorld)
HXDLIN( 205)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->transform->world->self->_00,this->transform->world->self->_01,this->transform->world->self->_02,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,rightWorld,return )

 ::iron::math::Vec4 CameraObject_obj::upWorld(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_206_upWorld)
HXDLIN( 206)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->transform->world->self->_10,this->transform->world->self->_11,this->transform->world->self->_12,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,upWorld,return )

 ::iron::math::Vec4 CameraObject_obj::lookWorld(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_207_lookWorld)
HXDLIN( 207)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,-(this->transform->world->self->_20),-(this->transform->world->self->_21),-(this->transform->world->self->_22),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,lookWorld,return )

::String CameraObject_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_209_toString)
HXDLIN( 209)		return (HX_("Camera Object ",06,5c,1f,3c) + this->name);
            	}


 ::iron::math::Vec4 CameraObject_obj::temp;

void CameraObject_obj::buildViewFrustum( ::iron::math::Mat4 VP,::Array< ::Dynamic> frustumPlanes){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_159_buildViewFrustum)
HXLINE( 161)		{
HXLINE( 161)			 ::iron::object::FrustumPlane _this = frustumPlanes->__get((int)0).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 161)			Float w = (VP->self->_33 + VP->self->_30);
HXDLIN( 161)			_this->normal->set((VP->self->_03 + VP->self->_00),(VP->self->_13 + VP->self->_10),(VP->self->_23 + VP->self->_20),null());
HXDLIN( 161)			_this->constant = w;
            		}
HXLINE( 163)		{
HXLINE( 163)			 ::iron::object::FrustumPlane _this1 = frustumPlanes->__get((int)1).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 163)			Float w1 = (VP->self->_33 - VP->self->_30);
HXDLIN( 163)			_this1->normal->set((VP->self->_03 - VP->self->_00),(VP->self->_13 - VP->self->_10),(VP->self->_23 - VP->self->_20),null());
HXDLIN( 163)			_this1->constant = w1;
            		}
HXLINE( 165)		{
HXLINE( 165)			 ::iron::object::FrustumPlane _this2 = frustumPlanes->__get((int)2).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 165)			Float w2 = (VP->self->_33 - VP->self->_31);
HXDLIN( 165)			_this2->normal->set((VP->self->_03 - VP->self->_01),(VP->self->_13 - VP->self->_11),(VP->self->_23 - VP->self->_21),null());
HXDLIN( 165)			_this2->constant = w2;
            		}
HXLINE( 167)		{
HXLINE( 167)			 ::iron::object::FrustumPlane _this3 = frustumPlanes->__get((int)3).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 167)			Float w3 = (VP->self->_33 + VP->self->_31);
HXDLIN( 167)			_this3->normal->set((VP->self->_03 + VP->self->_01),(VP->self->_13 + VP->self->_11),(VP->self->_23 + VP->self->_21),null());
HXDLIN( 167)			_this3->constant = w3;
            		}
HXLINE( 169)		{
HXLINE( 169)			 ::iron::object::FrustumPlane _this4 = frustumPlanes->__get((int)4).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 169)			Float w4 = VP->self->_32;
HXDLIN( 169)			_this4->normal->set(VP->self->_02,VP->self->_12,VP->self->_22,null());
HXDLIN( 169)			_this4->constant = w4;
            		}
HXLINE( 171)		{
HXLINE( 171)			 ::iron::object::FrustumPlane _this5 = frustumPlanes->__get((int)5).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 171)			Float w5 = (VP->self->_33 - VP->self->_32);
HXDLIN( 171)			_this5->normal->set((VP->self->_03 - VP->self->_02),(VP->self->_13 - VP->self->_12),(VP->self->_23 - VP->self->_22),null());
HXDLIN( 171)			_this5->constant = w5;
            		}
HXLINE( 173)		{
HXLINE( 173)			int _g = (int)0;
HXDLIN( 173)			while((_g < frustumPlanes->length)){
HXLINE( 173)				 ::iron::object::FrustumPlane plane = frustumPlanes->__get(_g).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 173)				_g = (_g + (int)1);
HXDLIN( 173)				plane->normalize();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CameraObject_obj,buildViewFrustum,(void))

 ::iron::math::Vec4 CameraObject_obj::sphereCenter;

bool CameraObject_obj::sphereInFrustum(::Array< ::Dynamic> frustumPlanes, ::iron::object::Transform t,hx::Null< Float >  __o_radiusScale,hx::Null< Float >  __o_offsetX,hx::Null< Float >  __o_offsetY,hx::Null< Float >  __o_offsetZ){
Float radiusScale = __o_radiusScale.Default(((Float)1.0));
Float offsetX = __o_offsetX.Default(((Float)0.0));
Float offsetY = __o_offsetY.Default(((Float)0.0));
Float offsetZ = __o_offsetZ.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_177_sphereInFrustum)
HXLINE( 179)		Float radius = (t->radius * radiusScale);
HXLINE( 180)		{
HXLINE( 180)			int _g = (int)0;
HXDLIN( 180)			while((_g < frustumPlanes->length)){
HXLINE( 180)				 ::iron::object::FrustumPlane plane = frustumPlanes->__get(_g).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 180)				_g = (_g + (int)1);
HXLINE( 181)				 ::iron::math::Vec4 _hx_tmp = ::iron::object::CameraObject_obj::sphereCenter;
HXDLIN( 181)				Float _hx_tmp1 = (t->world->self->_30 + offsetX);
HXDLIN( 181)				Float _hx_tmp2 = (t->world->self->_31 + offsetY);
HXDLIN( 181)				_hx_tmp->set(_hx_tmp1,_hx_tmp2,(t->world->self->_32 + offsetZ),null());
HXLINE( 183)				Float _hx_tmp3 = plane->distanceToSphere(::iron::object::CameraObject_obj::sphereCenter,radius);
HXDLIN( 183)				if (((_hx_tmp3 + (radius * (int)2)) < (int)0)) {
HXLINE( 184)					return false;
            				}
            			}
            		}
HXLINE( 187)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CameraObject_obj,sphereInFrustum,return )

 ::iron::math::Quat CameraObject_obj::q;


hx::ObjectPtr< CameraObject_obj > CameraObject_obj::__new( ::iron::data::CameraData data) {
	hx::ObjectPtr< CameraObject_obj > __this = new CameraObject_obj();
	__this->__construct(data);
	return __this;
}

hx::ObjectPtr< CameraObject_obj > CameraObject_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::data::CameraData data) {
	CameraObject_obj *__this = (CameraObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CameraObject_obj), true, "iron.object.CameraObject"));
	*(void **)__this = CameraObject_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

CameraObject_obj::CameraObject_obj()
{
}

void CameraObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CameraObject);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(P,"P");
	HX_MARK_MEMBER_NAME(V,"V");
	HX_MARK_MEMBER_NAME(prevV,"prevV");
	HX_MARK_MEMBER_NAME(VP,"VP");
	HX_MARK_MEMBER_NAME(frustumPlanes,"frustumPlanes");
	HX_MARK_MEMBER_NAME(nearPlane,"nearPlane");
	HX_MARK_MEMBER_NAME(farPlane,"farPlane");
	 ::iron::object::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CameraObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(P,"P");
	HX_VISIT_MEMBER_NAME(V,"V");
	HX_VISIT_MEMBER_NAME(prevV,"prevV");
	HX_VISIT_MEMBER_NAME(VP,"VP");
	HX_VISIT_MEMBER_NAME(frustumPlanes,"frustumPlanes");
	HX_VISIT_MEMBER_NAME(nearPlane,"nearPlane");
	HX_VISIT_MEMBER_NAME(farPlane,"farPlane");
	 ::iron::object::Object_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CameraObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { return hx::Val( P ); }
		if (HX_FIELD_EQ(inName,"V") ) { return hx::Val( V ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"VP") ) { return hx::Val( VP ); }
		if (HX_FIELD_EQ(inName,"up") ) { return hx::Val( up_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		if (HX_FIELD_EQ(inName,"look") ) { return hx::Val( look_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"prevV") ) { return hx::Val( prevV ); }
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"upWorld") ) { return hx::Val( upWorld_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"farPlane") ) { return hx::Val( farPlane ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nearPlane") ) { return hx::Val( nearPlane ); }
		if (HX_FIELD_EQ(inName,"lookWorld") ) { return hx::Val( lookWorld_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightWorld") ) { return hx::Val( rightWorld_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"renderFrame") ) { return hx::Val( renderFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"buildMatrix") ) { return hx::Val( buildMatrix_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"frustumPlanes") ) { return hx::Val( frustumPlanes ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buildProjection") ) { return hx::Val( buildProjection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CameraObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { outValue = ( q ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { outValue = ( temp ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sphereCenter") ) { outValue = ( sphereCenter ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sphereInFrustum") ) { outValue = sphereInFrustum_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"buildViewFrustum") ) { outValue = buildViewFrustum_dyn(); return true; }
	}
	return false;
}

hx::Val CameraObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { P=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"V") ) { V=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"VP") ) { VP=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::iron::data::CameraData >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"prevV") ) { prevV=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"farPlane") ) { farPlane=inValue.Cast< float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nearPlane") ) { nearPlane=inValue.Cast< float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"frustumPlanes") ) { frustumPlanes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CameraObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { q=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { temp=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sphereCenter") ) { sphereCenter=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
	}
	return false;
}

void CameraObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("P","\x50","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("V","\x56","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("prevV","\x03","\x56","\x88","\xc8"));
	outFields->push(HX_HCSTRING("VP","\x3a","\x4b","\x00","\x00"));
	outFields->push(HX_HCSTRING("frustumPlanes","\x99","\x03","\x66","\x33"));
	outFields->push(HX_HCSTRING("nearPlane","\x54","\xb4","\xae","\xe2"));
	outFields->push(HX_HCSTRING("farPlane","\x05","\x08","\x26","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CameraObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::data::CameraData*/ ,(int)offsetof(CameraObject_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(CameraObject_obj,P),HX_HCSTRING("P","\x50","\x00","\x00","\x00")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(CameraObject_obj,V),HX_HCSTRING("V","\x56","\x00","\x00","\x00")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(CameraObject_obj,prevV),HX_HCSTRING("prevV","\x03","\x56","\x88","\xc8")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(CameraObject_obj,VP),HX_HCSTRING("VP","\x3a","\x4b","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(CameraObject_obj,frustumPlanes),HX_HCSTRING("frustumPlanes","\x99","\x03","\x66","\x33")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(CameraObject_obj,nearPlane),HX_HCSTRING("nearPlane","\x54","\xb4","\xae","\xe2")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(CameraObject_obj,farPlane),HX_HCSTRING("farPlane","\x05","\x08","\x26","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo CameraObject_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &CameraObject_obj::temp,HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &CameraObject_obj::sphereCenter,HX_HCSTRING("sphereCenter","\xc2","\x90","\xaa","\x5c")},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &CameraObject_obj::q,HX_HCSTRING("q","\x71","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String CameraObject_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("P","\x50","\x00","\x00","\x00"),
	HX_HCSTRING("V","\x56","\x00","\x00","\x00"),
	HX_HCSTRING("prevV","\x03","\x56","\x88","\xc8"),
	HX_HCSTRING("VP","\x3a","\x4b","\x00","\x00"),
	HX_HCSTRING("frustumPlanes","\x99","\x03","\x66","\x33"),
	HX_HCSTRING("nearPlane","\x54","\xb4","\xae","\xe2"),
	HX_HCSTRING("farPlane","\x05","\x08","\x26","\x78"),
	HX_HCSTRING("buildProjection","\x5d","\x6d","\x5e","\x6c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("renderFrame","\xf7","\xa4","\x34","\xd2"),
	HX_HCSTRING("buildMatrix","\x0f","\x1c","\x39","\x0c"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("move","\x11","\xe3","\x60","\x48"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("up","\x5b","\x66","\x00","\x00"),
	HX_HCSTRING("look","\x5f","\xa6","\xb7","\x47"),
	HX_HCSTRING("rightWorld","\xd6","\x7c","\x29","\xd1"),
	HX_HCSTRING("upWorld","\xf7","\xb5","\xd9","\x2a"),
	HX_HCSTRING("lookWorld","\x73","\xe7","\x47","\xfc"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void CameraObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CameraObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CameraObject_obj::temp,"temp");
	HX_MARK_MEMBER_NAME(CameraObject_obj::sphereCenter,"sphereCenter");
	HX_MARK_MEMBER_NAME(CameraObject_obj::q,"q");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CameraObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CameraObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CameraObject_obj::temp,"temp");
	HX_VISIT_MEMBER_NAME(CameraObject_obj::sphereCenter,"sphereCenter");
	HX_VISIT_MEMBER_NAME(CameraObject_obj::q,"q");
};

#endif

hx::Class CameraObject_obj::__mClass;

static ::String CameraObject_obj_sStaticFields[] = {
	HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c"),
	HX_HCSTRING("buildViewFrustum","\xef","\xd2","\x42","\xe3"),
	HX_HCSTRING("sphereCenter","\xc2","\x90","\xaa","\x5c"),
	HX_HCSTRING("sphereInFrustum","\x30","\xf1","\x52","\xf8"),
	HX_HCSTRING("q","\x71","\x00","\x00","\x00"),
	::String(null())
};

void CameraObject_obj::__register()
{
	hx::Object *dummy = new CameraObject_obj;
	CameraObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.CameraObject","\x4d","\x44","\xd5","\x23");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CameraObject_obj::__GetStatic;
	__mClass->mSetStaticField = &CameraObject_obj::__SetStatic;
	__mClass->mMarkFunc = CameraObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CameraObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CameraObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CameraObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CameraObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CameraObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CameraObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CameraObject_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_26_boot)
HXDLIN(  26)		temp =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_176_boot)
HXDLIN( 176)		sphereCenter =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_190_boot)
HXDLIN( 190)		q =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace iron
} // end namespace object
