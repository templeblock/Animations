// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_object_Particle
#include <iron/object/Particle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_de4ea3a7df512131_256_new,"iron.object.Particle","new",0x13777b41,"iron.object.Particle.new","iron/object/ParticleSystem.hx",256,0x6ff9dc40)
namespace iron{
namespace object{

void Particle_obj::__construct(int i){
            	HX_STACKFRAME(&_hx_pos_de4ea3a7df512131_256_new)
HXLINE( 260)		this->z = ((Float)0.0);
HXLINE( 259)		this->y = ((Float)0.0);
HXLINE( 258)		this->x = ((Float)0.0);
HXLINE( 262)		this->i = i;
            	}

Dynamic Particle_obj::__CreateEmpty() { return new Particle_obj; }

void *Particle_obj::_hx_vtable = 0;

Dynamic Particle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Particle_obj > _hx_result = new Particle_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Particle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0effce69;
}


Particle_obj::Particle_obj()
{
}

hx::Val Particle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i ); }
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cameraDistance") ) { return hx::Val( cameraDistance ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Particle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cameraDistance") ) { cameraDistance=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Particle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("i","\x69","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("cameraDistance","\xfa","\x42","\x86","\x61"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Particle_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Particle_obj,i),HX_HCSTRING("i","\x69","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Particle_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Particle_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Particle_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Particle_obj,cameraDistance),HX_HCSTRING("cameraDistance","\xfa","\x42","\x86","\x61")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Particle_obj_sStaticStorageInfo = 0;
#endif

static ::String Particle_obj_sMemberFields[] = {
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	HX_HCSTRING("cameraDistance","\xfa","\x42","\x86","\x61"),
	::String(null()) };

static void Particle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Particle_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Particle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Particle_obj::__mClass,"__mClass");
};

#endif

hx::Class Particle_obj::__mClass;

void Particle_obj::__register()
{
	hx::Object *dummy = new Particle_obj;
	Particle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.object.Particle","\xcf","\xc6","\xee","\x5e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Particle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Particle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Particle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Particle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Particle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Particle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace object
