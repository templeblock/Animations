// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_zip_Reader
#include <haxe/zip/Reader.h>
#endif
#ifndef INCLUDED_iron_RenderPath
#include <iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_LampData
#include <iron/data/LampData.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_data_ParticleData
#include <iron/data/ParticleData.h>
#endif
#ifndef INCLUDED_iron_data_ShaderData
#include <iron/data/ShaderData.h>
#endif
#ifndef INCLUDED_iron_data_WorldData
#include <iron/data/WorldData.h>
#endif
#ifndef INCLUDED_iron_system_ArmPack
#include <iron/system/ArmPack.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <kha/Sound.h>
#endif
#ifndef INCLUDED_kha_Video
#include <kha/Video.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <kha/internal/BytesBlob.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_514b96931615595e_25_new,"iron.data.Data","new",0xd6d8755a,"iron.data.Data.new","iron/data/Data.hx",25,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_27_deleteAll,"iron.data.Data","deleteAll",0xdf4aba30,"iron.data.Data.deleteAll","iron/data/Data.hx",27,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_54_clearSceneData,"iron.data.Data","clearSceneData",0x9e0f2f8f,"iron.data.Data.clearSceneData","iron/data/Data.hx",54,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_78_getMesh,"iron.data.Data","getMesh",0x2cafa39d,"iron.data.Data.getMesh","iron/data/Data.hx",78,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_68_getMesh,"iron.data.Data","getMesh",0x2cafa39d,"iron.data.Data.getMesh","iron/data/Data.hx",68,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_86_deleteMesh,"iron.data.Data","deleteMesh",0x8a0175fe,"iron.data.Data.deleteMesh","iron/data/Data.hx",86,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_104_getLamp,"iron.data.Data","getLamp",0x2c035ec8,"iron.data.Data.getLamp","iron/data/Data.hx",104,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_95_getLamp,"iron.data.Data","getLamp",0x2c035ec8,"iron.data.Data.getLamp","iron/data/Data.hx",95,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_121_getCamera,"iron.data.Data","getCamera",0x21706c55,"iron.data.Data.getCamera","iron/data/Data.hx",121,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_112_getCamera,"iron.data.Data","getCamera",0x21706c55,"iron.data.Data.getCamera","iron/data/Data.hx",112,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_138_getMaterial,"iron.data.Data","getMaterial",0xb8224e57,"iron.data.Data.getMaterial","iron/data/Data.hx",138,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_129_getMaterial,"iron.data.Data","getMaterial",0xb8224e57,"iron.data.Data.getMaterial","iron/data/Data.hx",129,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_155_getParticle,"iron.data.Data","getParticle",0x340e2ff6,"iron.data.Data.getParticle","iron/data/Data.hx",155,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_146_getParticle,"iron.data.Data","getParticle",0x340e2ff6,"iron.data.Data.getParticle","iron/data/Data.hx",146,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_174_getWorld,"iron.data.Data","getWorld",0xb59cb6a2,"iron.data.Data.getWorld","iron/data/Data.hx",174,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_163_getWorld,"iron.data.Data","getWorld",0xb59cb6a2,"iron.data.Data.getWorld","iron/data/Data.hx",163,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_211_getShader,"iron.data.Data","getShader",0x8704e4d5,"iron.data.Data.getShader","iron/data/Data.hx",211,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_199_getShader,"iron.data.Data","getShader",0x8704e4d5,"iron.data.Data.getShader","iron/data/Data.hx",199,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_233_getSceneRaw,"iron.data.Data","getSceneRaw",0x89137dac,"iron.data.Data.getSceneRaw","iron/data/Data.hx",233,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_219_getSceneRaw,"iron.data.Data","getSceneRaw",0x89137dac,"iron.data.Data.getSceneRaw","iron/data/Data.hx",219,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_268_returnSceneRaw,"iron.data.Data","returnSceneRaw",0x0dd90612,"iron.data.Data.returnSceneRaw","iron/data/Data.hx",268,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_319_getMeshRawByName,"iron.data.Data","getMeshRawByName",0x723d346d,"iron.data.Data.getMeshRawByName","iron/data/Data.hx",319,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_325_getLampRawByName,"iron.data.Data","getLampRawByName",0x229c3be2,"iron.data.Data.getLampRawByName","iron/data/Data.hx",325,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_331_getCameraRawByName,"iron.data.Data","getCameraRawByName",0x48a994b5,"iron.data.Data.getCameraRawByName","iron/data/Data.hx",331,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_337_getMaterialRawByName,"iron.data.Data","getMaterialRawByName",0x12406273,"iron.data.Data.getMaterialRawByName","iron/data/Data.hx",337,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_343_getParticleRawByName,"iron.data.Data","getParticleRawByName",0x2290d4f4,"iron.data.Data.getParticleRawByName","iron/data/Data.hx",343,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_349_getWorldRawByName,"iron.data.Data","getWorldRawByName",0x2c0a18c8,"iron.data.Data.getWorldRawByName","iron/data/Data.hx",349,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_361_getShaderRawByName,"iron.data.Data","getShaderRawByName",0x9e020c35,"iron.data.Data.getShaderRawByName","iron/data/Data.hx",361,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_367_getSpeakerRawByName,"iron.data.Data","getSpeakerRawByName",0x9b12287b,"iron.data.Data.getSpeakerRawByName","iron/data/Data.hx",367,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_386_getBlob,"iron.data.Data","getBlob",0x256f970d,"iron.data.Data.getBlob","iron/data/Data.hx",386,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_377_getBlob,"iron.data.Data","getBlob",0x256f970d,"iron.data.Data.getBlob","iron/data/Data.hx",377,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_409_getImage,"iron.data.Data","getImage",0xa4a13fab,"iron.data.Data.getImage","iron/data/Data.hx",409,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_395_getImage,"iron.data.Data","getImage",0xa4a13fab,"iron.data.Data.getImage","iron/data/Data.hx",395,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_438_getSound,"iron.data.Data","getSound",0x6804ad1f,"iron.data.Data.getSound","iron/data/Data.hx",438,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_418_getSound,"iron.data.Data","getSound",0x6804ad1f,"iron.data.Data.getSound","iron/data/Data.hx",418,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_463_getVideo,"iron.data.Data","getVideo",0x1e3434cb,"iron.data.Data.getVideo","iron/data/Data.hx",463,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_451_getVideo,"iron.data.Data","getVideo",0x1e3434cb,"iron.data.Data.getVideo","iron/data/Data.hx",451,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_481_getFont,"iron.data.Data","getFont",0x2816b77f,"iron.data.Data.getFont","iron/data/Data.hx",481,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_472_getFont,"iron.data.Data","getFont",0x2816b77f,"iron.data.Data.getFont","iron/data/Data.hx",472,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_9_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",9,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_10_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",10,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_11_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",11,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_12_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",12,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_13_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",13,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_14_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",14,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_15_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",15,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_17_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",17,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_19_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",19,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_20_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",20,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_21_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",21,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_22_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",22,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_23_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",23,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_67_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",67,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_94_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",94,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_111_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",111,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_128_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",128,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_145_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",145,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_162_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",162,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_198_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",198,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_218_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",218,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_374_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",374,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_376_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",376,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_394_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",394,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_417_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",417,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_450_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",450,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_471_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",471,0x68f3e2f6)
namespace iron{
namespace data{

void Data_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_25_new)
            	}

Dynamic Data_obj::__CreateEmpty() { return new Data_obj; }

void *Data_obj::_hx_vtable = 0;

Dynamic Data_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Data_obj > _hx_result = new Data_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Data_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x25e6a720;
}

 ::haxe::ds::StringMap Data_obj::cachedSceneRaws;

 ::haxe::ds::StringMap Data_obj::cachedMeshes;

 ::haxe::ds::StringMap Data_obj::cachedLamps;

 ::haxe::ds::StringMap Data_obj::cachedCameras;

 ::haxe::ds::StringMap Data_obj::cachedMaterials;

 ::haxe::ds::StringMap Data_obj::cachedParticles;

 ::haxe::ds::StringMap Data_obj::cachedWorlds;

 ::haxe::ds::StringMap Data_obj::cachedShaders;

 ::haxe::ds::StringMap Data_obj::cachedBlobs;

 ::haxe::ds::StringMap Data_obj::cachedImages;

 ::haxe::ds::StringMap Data_obj::cachedSounds;

 ::haxe::ds::StringMap Data_obj::cachedVideos;

 ::haxe::ds::StringMap Data_obj::cachedFonts;

void Data_obj::deleteAll(){
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_27_deleteAll)
HXLINE(  28)		{
HXLINE(  28)			 ::Dynamic c = ::iron::data::Data_obj::cachedMeshes->iterator();
HXDLIN(  28)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  28)				 ::iron::data::MeshData c1 = ( ( ::iron::data::MeshData)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  28)				c1->_hx_delete();
            			}
            		}
HXLINE(  29)		::iron::data::Data_obj::cachedMeshes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  30)		{
HXLINE(  30)			 ::Dynamic c2 = ::iron::data::Data_obj::cachedShaders->iterator();
HXDLIN(  30)			while(( (bool)(c2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  30)				 ::iron::data::ShaderData c3 = ( ( ::iron::data::ShaderData)(c2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  30)				c3->_hx_delete();
            			}
            		}
HXLINE(  31)		::iron::data::Data_obj::cachedShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  32)		::iron::data::Data_obj::cachedSceneRaws =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  33)		::iron::data::Data_obj::cachedLamps =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  34)		::iron::data::Data_obj::cachedCameras =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  35)		::iron::data::Data_obj::cachedMaterials =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  36)		::iron::data::Data_obj::cachedParticles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  37)		::iron::data::Data_obj::cachedWorlds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  39)		if (hx::IsNotNull( ::iron::RenderPath_obj::active )) {
HXLINE(  39)			::iron::RenderPath_obj::active->unload();
            		}
HXLINE(  41)		{
HXLINE(  41)			 ::Dynamic c4 = ::iron::data::Data_obj::cachedBlobs->iterator();
HXDLIN(  41)			while(( (bool)(c4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  41)				 ::kha::internal::BytesBlob c5 = ( ( ::kha::internal::BytesBlob)(c4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  41)				c5->unload();
            			}
            		}
HXLINE(  42)		::iron::data::Data_obj::cachedBlobs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  43)		{
HXLINE(  43)			 ::Dynamic c6 = ::iron::data::Data_obj::cachedImages->iterator();
HXDLIN(  43)			while(( (bool)(c6->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  43)				 ::kha::Image c7 = ( ( ::kha::Image)(c6->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  43)				c7->unload();
            			}
            		}
HXLINE(  44)		::iron::data::Data_obj::cachedImages =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  45)		{
HXLINE(  45)			 ::Dynamic c8 = ::iron::data::Data_obj::cachedSounds->iterator();
HXDLIN(  45)			while(( (bool)(c8->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  45)				 ::kha::Sound c9 = ( ( ::kha::Sound)(c8->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  45)				c9->unload();
            			}
            		}
HXLINE(  46)		::iron::data::Data_obj::cachedSounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  47)		{
HXLINE(  47)			 ::Dynamic c10 = ::iron::data::Data_obj::cachedVideos->iterator();
HXDLIN(  47)			while(( (bool)(c10->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  47)				 ::kha::Video c11 = ( ( ::kha::Video)(c10->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  47)				c11->unload();
            			}
            		}
HXLINE(  48)		::iron::data::Data_obj::cachedVideos =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  49)		{
HXLINE(  49)			 ::Dynamic c12 = ::iron::data::Data_obj::cachedFonts->iterator();
HXDLIN(  49)			while(( (bool)(c12->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  49)				 ::kha::Kravur c13 = ( ( ::kha::Kravur)(c12->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  49)				c13->unload();
            			}
            		}
HXLINE(  50)		::iron::data::Data_obj::cachedFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Data_obj,deleteAll,(void))

void Data_obj::clearSceneData(){
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_54_clearSceneData)
HXLINE(  55)		::iron::data::Data_obj::cachedSceneRaws =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  56)		::iron::data::Data_obj::cachedMeshes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  57)		::iron::data::Data_obj::cachedLamps =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  58)		::iron::data::Data_obj::cachedMaterials =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  59)		::iron::data::Data_obj::cachedCameras =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  60)		::iron::data::Data_obj::cachedParticles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  61)		::iron::data::Data_obj::cachedWorlds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  63)		::iron::data::Data_obj::cachedShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  64)		::iron::data::Data_obj::cachedBlobs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Data_obj,clearSceneData,(void))

 ::haxe::ds::StringMap Data_obj::loadingMeshes;

void Data_obj::getMesh(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,name,::String,handle,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::MeshData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_78_getMesh)
HXLINE(  79)			::iron::data::Data_obj::cachedMeshes->set((file + name),b);
HXLINE(  80)			b->handle = handle;
HXLINE(  81)			{
HXLINE(  81)				int _g = (int)0;
HXDLIN(  81)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingMeshes->get((file + name))) );
HXDLIN(  81)				while((_g < _g1->length)){
HXLINE(  81)					 ::Dynamic f = _g1->__get(_g);
HXDLIN(  81)					_g = (_g + (int)1);
HXDLIN(  81)					f(b);
            				}
            			}
HXLINE(  82)			::iron::data::Data_obj::loadingMeshes->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_68_getMesh)
HXLINE(  69)		::String handle = (file + name);
HXLINE(  70)		 ::iron::data::MeshData cached = ::iron::data::Data_obj::cachedMeshes->get(handle).StaticCast<  ::iron::data::MeshData >();
HXLINE(  71)		if (hx::IsNotNull( cached )) {
HXLINE(  71)			done(cached);
HXDLIN(  71)			return;
            		}
HXLINE(  73)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingMeshes->get(handle)) );
HXLINE(  74)		if (hx::IsNotNull( loading )) {
HXLINE(  74)			loading->push(done);
HXDLIN(  74)			return;
            		}
HXLINE(  76)		::iron::data::Data_obj::loadingMeshes->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE(  78)		::iron::data::MeshData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,handle,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getMesh,(void))

void Data_obj::deleteMesh(::String handle){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_86_deleteMesh)
HXLINE(  88)		 ::iron::data::MeshData mesh = ::iron::data::Data_obj::cachedMeshes->get(handle).StaticCast<  ::iron::data::MeshData >();
HXLINE(  89)		if (hx::IsNull( mesh )) {
HXLINE(  89)			return;
            		}
HXLINE(  90)		mesh->_hx_delete();
HXLINE(  91)		::iron::data::Data_obj::cachedMeshes->remove(handle);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,deleteMesh,(void))

 ::haxe::ds::StringMap Data_obj::loadingLamps;

void Data_obj::getLamp(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::LampData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_104_getLamp)
HXLINE( 105)			::iron::data::Data_obj::cachedLamps->set((file + name),b);
HXLINE( 106)			{
HXLINE( 106)				int _g = (int)0;
HXDLIN( 106)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingLamps->get((file + name))) );
HXDLIN( 106)				while((_g < _g1->length)){
HXLINE( 106)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 106)					_g = (_g + (int)1);
HXDLIN( 106)					f(b);
            				}
            			}
HXLINE( 107)			::iron::data::Data_obj::loadingLamps->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_95_getLamp)
HXLINE(  96)		 ::iron::data::LampData cached = ::iron::data::Data_obj::cachedLamps->get((file + name)).StaticCast<  ::iron::data::LampData >();
HXLINE(  97)		if (hx::IsNotNull( cached )) {
HXLINE(  97)			done(cached);
HXDLIN(  97)			return;
            		}
HXLINE(  99)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingLamps->get((file + name))) );
HXLINE( 100)		if (hx::IsNotNull( loading )) {
HXLINE( 100)			loading->push(done);
HXDLIN( 100)			return;
            		}
HXLINE( 102)		::iron::data::Data_obj::loadingLamps->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 104)		::iron::data::LampData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getLamp,(void))

 ::haxe::ds::StringMap Data_obj::loadingCameras;

void Data_obj::getCamera(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::CameraData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_121_getCamera)
HXLINE( 122)			::iron::data::Data_obj::cachedCameras->set((file + name),b);
HXLINE( 123)			{
HXLINE( 123)				int _g = (int)0;
HXDLIN( 123)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingCameras->get((file + name))) );
HXDLIN( 123)				while((_g < _g1->length)){
HXLINE( 123)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 123)					_g = (_g + (int)1);
HXDLIN( 123)					f(b);
            				}
            			}
HXLINE( 124)			::iron::data::Data_obj::loadingCameras->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_112_getCamera)
HXLINE( 113)		 ::iron::data::CameraData cached = ::iron::data::Data_obj::cachedCameras->get((file + name)).StaticCast<  ::iron::data::CameraData >();
HXLINE( 114)		if (hx::IsNotNull( cached )) {
HXLINE( 114)			done(cached);
HXDLIN( 114)			return;
            		}
HXLINE( 116)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingCameras->get((file + name))) );
HXLINE( 117)		if (hx::IsNotNull( loading )) {
HXLINE( 117)			loading->push(done);
HXDLIN( 117)			return;
            		}
HXLINE( 119)		::iron::data::Data_obj::loadingCameras->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 121)		::iron::data::CameraData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getCamera,(void))

 ::haxe::ds::StringMap Data_obj::loadingMaterials;

void Data_obj::getMaterial(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::MaterialData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_138_getMaterial)
HXLINE( 139)			::iron::data::Data_obj::cachedMaterials->set((file + name),b);
HXLINE( 140)			{
HXLINE( 140)				int _g = (int)0;
HXDLIN( 140)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingMaterials->get((file + name))) );
HXDLIN( 140)				while((_g < _g1->length)){
HXLINE( 140)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 140)					_g = (_g + (int)1);
HXDLIN( 140)					f(b);
            				}
            			}
HXLINE( 141)			::iron::data::Data_obj::loadingMaterials->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_129_getMaterial)
HXLINE( 130)		 ::iron::data::MaterialData cached = ::iron::data::Data_obj::cachedMaterials->get((file + name)).StaticCast<  ::iron::data::MaterialData >();
HXLINE( 131)		if (hx::IsNotNull( cached )) {
HXLINE( 131)			done(cached);
HXDLIN( 131)			return;
            		}
HXLINE( 133)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingMaterials->get((file + name))) );
HXLINE( 134)		if (hx::IsNotNull( loading )) {
HXLINE( 134)			loading->push(done);
HXDLIN( 134)			return;
            		}
HXLINE( 136)		::iron::data::Data_obj::loadingMaterials->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 138)		::iron::data::MaterialData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getMaterial,(void))

 ::haxe::ds::StringMap Data_obj::loadingParticles;

void Data_obj::getParticle(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::ParticleData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_155_getParticle)
HXLINE( 156)			::iron::data::Data_obj::cachedParticles->set((file + name),b);
HXLINE( 157)			{
HXLINE( 157)				int _g = (int)0;
HXDLIN( 157)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingParticles->get((file + name))) );
HXDLIN( 157)				while((_g < _g1->length)){
HXLINE( 157)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 157)					_g = (_g + (int)1);
HXDLIN( 157)					f(b);
            				}
            			}
HXLINE( 158)			::iron::data::Data_obj::loadingParticles->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_146_getParticle)
HXLINE( 147)		 ::iron::data::ParticleData cached = ::iron::data::Data_obj::cachedParticles->get((file + name)).StaticCast<  ::iron::data::ParticleData >();
HXLINE( 148)		if (hx::IsNotNull( cached )) {
HXLINE( 148)			done(cached);
HXDLIN( 148)			return;
            		}
HXLINE( 150)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingParticles->get((file + name))) );
HXLINE( 151)		if (hx::IsNotNull( loading )) {
HXLINE( 151)			loading->push(done);
HXDLIN( 151)			return;
            		}
HXLINE( 153)		::iron::data::Data_obj::loadingParticles->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 155)		::iron::data::ParticleData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getParticle,(void))

 ::haxe::ds::StringMap Data_obj::loadingWorlds;

void Data_obj::getWorld(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::WorldData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_174_getWorld)
HXLINE( 175)			::iron::data::Data_obj::cachedWorlds->set((file + name),b);
HXLINE( 176)			{
HXLINE( 176)				int _g = (int)0;
HXDLIN( 176)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingWorlds->get((file + name))) );
HXDLIN( 176)				while((_g < _g1->length)){
HXLINE( 176)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 176)					_g = (_g + (int)1);
HXDLIN( 176)					f(b);
            				}
            			}
HXLINE( 177)			::iron::data::Data_obj::loadingWorlds->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_163_getWorld)
HXLINE( 164)		if (hx::IsNull( name )) {
HXLINE( 164)			done(null());
HXDLIN( 164)			return;
            		}
HXLINE( 166)		 ::iron::data::WorldData cached = ::iron::data::Data_obj::cachedWorlds->get((file + name)).StaticCast<  ::iron::data::WorldData >();
HXLINE( 167)		if (hx::IsNotNull( cached )) {
HXLINE( 167)			done(cached);
HXDLIN( 167)			return;
            		}
HXLINE( 169)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingWorlds->get((file + name))) );
HXLINE( 170)		if (hx::IsNotNull( loading )) {
HXLINE( 170)			loading->push(done);
HXDLIN( 170)			return;
            		}
HXLINE( 172)		::iron::data::Data_obj::loadingWorlds->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 174)		::iron::data::WorldData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getWorld,(void))

 ::haxe::ds::StringMap Data_obj::loadingShaders;

void Data_obj::getShader(::String file,::String name, ::Dynamic overrideContext, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,cacheName) HXARGC(1)
            		void _hx_run( ::iron::data::ShaderData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_211_getShader)
HXLINE( 212)			::iron::data::Data_obj::cachedShaders->set(cacheName,b);
HXLINE( 213)			{
HXLINE( 213)				int _g = (int)0;
HXDLIN( 213)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingShaders->get(cacheName)) );
HXDLIN( 213)				while((_g < _g1->length)){
HXLINE( 213)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 213)					_g = (_g + (int)1);
HXDLIN( 213)					f(b);
            				}
            			}
HXLINE( 214)			::iron::data::Data_obj::loadingShaders->remove(cacheName);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_199_getShader)
HXLINE( 201)		::String cacheName = name;
HXLINE( 202)		if (hx::IsNotNull( overrideContext )) {
HXLINE( 202)			cacheName = (cacheName + HX_("2",32,00,00,00));
            		}
HXLINE( 203)		 ::iron::data::ShaderData cached = ::iron::data::Data_obj::cachedShaders->get(cacheName).StaticCast<  ::iron::data::ShaderData >();
HXLINE( 204)		if (hx::IsNotNull( cached )) {
HXLINE( 204)			done(cached);
HXDLIN( 204)			return;
            		}
HXLINE( 206)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingShaders->get(cacheName)) );
HXLINE( 207)		if (hx::IsNotNull( loading )) {
HXLINE( 207)			loading->push(done);
HXDLIN( 207)			return;
            		}
HXLINE( 209)		::iron::data::Data_obj::loadingShaders->set(cacheName,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 211)		::iron::data::ShaderData_obj::parse(file,name,overrideContext, ::Dynamic(new _hx_Closure_0(cacheName)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Data_obj,getShader,(void))

 ::haxe::ds::StringMap Data_obj::loadingSceneRaws;

void Data_obj::getSceneRaw(::String file, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,bool,isJson,::String,file,bool,compressed) HXARGC(1)
            		void _hx_run( ::kha::internal::BytesBlob b){
            			HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_233_getSceneRaw)
HXLINE( 235)			if (compressed) {
HXLINE( 237)				 ::haxe::io::BytesInput input =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,b->toBytes(),null(),null());
HXLINE( 238)				 ::Dynamic entry = ::haxe::zip::Reader_obj::readZip(input)->first();
HXLINE( 239)				if (hx::IsNull( entry )) {
HXLINE( 240)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 240)					_hx_tmp((HX_("Failed to uncompress ",83,31,30,44) + file),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),240,HX_("iron.data.Data",68,80,30,b4),HX_("getSceneRaw",b2,4e,8a,e7)));
HXLINE( 241)					return;
            				}
HXLINE( 243)				if (( (bool)(entry->__Field(HX_("compressed",81,4c,da,67),hx::paccDynamic)) )) {
HXLINE( 243)					b = ::kha::internal::BytesBlob_obj::fromBytes(::haxe::zip::Reader_obj::unzip(entry));
            				}
            				else {
HXLINE( 244)					b = ::kha::internal::BytesBlob_obj::fromBytes(( ( ::haxe::io::Bytes)(entry->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) ));
            				}
            			}
HXLINE( 254)			 ::Dynamic parsed = null();
HXLINE( 255)			if (isJson) {
HXLINE( 256)				::String s = b->toString();
HXLINE( 257)				if ((s.charAt((int)0) == HX_("{",7b,00,00,00))) {
HXLINE( 257)					parsed =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,s)->parseRec();
            				}
            				else {
HXLINE( 257)					 ::haxe::io::BytesInput i =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,b->toBytes(),null(),null());
HXDLIN( 257)					i->set_bigEndian(true);
HXDLIN( 257)					parsed = ::iron::_hx_system::ArmPack_obj::read(i);
            				}
            			}
            			else {
HXLINE( 260)				 ::haxe::io::BytesInput i1 =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,b->toBytes(),null(),null());
HXDLIN( 260)				i1->set_bigEndian(true);
HXDLIN( 260)				parsed = ::iron::_hx_system::ArmPack_obj::read(i1);
            			}
HXLINE( 263)			::iron::data::Data_obj::returnSceneRaw(file,parsed);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_219_getSceneRaw)
HXLINE( 220)		 ::Dynamic cached = ::iron::data::Data_obj::cachedSceneRaws->get(file);
HXLINE( 221)		if (hx::IsNotNull( cached )) {
HXLINE( 221)			done(cached);
HXDLIN( 221)			return;
            		}
HXLINE( 223)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingSceneRaws->get(file)) );
HXLINE( 224)		if (hx::IsNotNull( loading )) {
HXLINE( 224)			loading->push(done);
HXDLIN( 224)			return;
            		}
HXLINE( 226)		::iron::data::Data_obj::loadingSceneRaws->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 229)		bool compressed = ::StringTools_obj::endsWith(file,HX_(".zip",73,bf,c4,1e));
HXLINE( 230)		bool isJson = ::StringTools_obj::endsWith(file,HX_(".json",56,f1,d6,c2));
HXLINE( 231)		::String ext;
HXDLIN( 231)		bool ext1;
HXDLIN( 231)		bool ext2;
HXDLIN( 231)		if (!(compressed)) {
HXLINE( 231)			ext2 = isJson;
            		}
            		else {
HXLINE( 231)			ext2 = true;
            		}
HXDLIN( 231)		if (!(ext2)) {
HXLINE( 231)			ext1 = ::StringTools_obj::endsWith(file,HX_(".arm",ee,ce,b1,1e));
            		}
            		else {
HXLINE( 231)			ext1 = true;
            		}
HXDLIN( 231)		if (ext1) {
HXLINE( 231)			ext = HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 231)			ext = HX_(".arm",ee,ce,b1,1e);
            		}
HXLINE( 233)		::iron::data::Data_obj::getBlob((file + ext), ::Dynamic(new _hx_Closure_0(isJson,file,compressed)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getSceneRaw,(void))

void Data_obj::returnSceneRaw(::String file, ::Dynamic parsed){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_268_returnSceneRaw)
HXLINE( 269)		::iron::data::Data_obj::cachedSceneRaws->set(file,parsed);
HXLINE( 270)		{
HXLINE( 270)			int _g = (int)0;
HXDLIN( 270)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingSceneRaws->get(file)) );
HXDLIN( 270)			while((_g < _g1->length)){
HXLINE( 270)				 ::Dynamic f = _g1->__get(_g);
HXDLIN( 270)				_g = (_g + (int)1);
HXDLIN( 270)				f(parsed);
            			}
            		}
HXLINE( 271)		::iron::data::Data_obj::loadingSceneRaws->remove(file);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,returnSceneRaw,(void))

 ::Dynamic Data_obj::getMeshRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_319_getMeshRawByName)
HXLINE( 320)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 320)			return datas->__get((int)0);
            		}
HXLINE( 321)		{
HXLINE( 321)			int _g = (int)0;
HXDLIN( 321)			while((_g < datas->length)){
HXLINE( 321)				 ::Dynamic dat = datas->__get(_g);
HXDLIN( 321)				_g = (_g + (int)1);
HXDLIN( 321)				if ((( (::String)(dat->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 321)					return dat;
            				}
            			}
            		}
HXLINE( 322)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getMeshRawByName,return )

 ::Dynamic Data_obj::getLampRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_325_getLampRawByName)
HXLINE( 326)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 326)			return datas->__get((int)0);
            		}
HXLINE( 327)		{
HXLINE( 327)			int _g = (int)0;
HXDLIN( 327)			while((_g < datas->length)){
HXLINE( 327)				 ::Dynamic dat = datas->__get(_g);
HXDLIN( 327)				_g = (_g + (int)1);
HXDLIN( 327)				if ((( (::String)(dat->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 327)					return dat;
            				}
            			}
            		}
HXLINE( 328)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getLampRawByName,return )

 ::Dynamic Data_obj::getCameraRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_331_getCameraRawByName)
HXLINE( 332)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 332)			return datas->__get((int)0);
            		}
HXLINE( 333)		{
HXLINE( 333)			int _g = (int)0;
HXDLIN( 333)			while((_g < datas->length)){
HXLINE( 333)				 ::Dynamic dat = datas->__get(_g);
HXDLIN( 333)				_g = (_g + (int)1);
HXDLIN( 333)				if ((( (::String)(dat->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 333)					return dat;
            				}
            			}
            		}
HXLINE( 334)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getCameraRawByName,return )

 ::Dynamic Data_obj::getMaterialRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_337_getMaterialRawByName)
HXLINE( 338)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 338)			return datas->__get((int)0);
            		}
HXLINE( 339)		{
HXLINE( 339)			int _g = (int)0;
HXDLIN( 339)			while((_g < datas->length)){
HXLINE( 339)				 ::Dynamic dat = datas->__get(_g);
HXDLIN( 339)				_g = (_g + (int)1);
HXDLIN( 339)				if ((( (::String)(dat->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 339)					return dat;
            				}
            			}
            		}
HXLINE( 340)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getMaterialRawByName,return )

 ::Dynamic Data_obj::getParticleRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_343_getParticleRawByName)
HXLINE( 344)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 344)			return datas->__get((int)0);
            		}
HXLINE( 345)		{
HXLINE( 345)			int _g = (int)0;
HXDLIN( 345)			while((_g < datas->length)){
HXLINE( 345)				 ::Dynamic dat = datas->__get(_g);
HXDLIN( 345)				_g = (_g + (int)1);
HXDLIN( 345)				if ((( (::String)(dat->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 345)					return dat;
            				}
            			}
            		}
HXLINE( 346)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getParticleRawByName,return )

 ::Dynamic Data_obj::getWorldRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_349_getWorldRawByName)
HXLINE( 350)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 350)			return datas->__get((int)0);
            		}
HXLINE( 351)		{
HXLINE( 351)			int _g = (int)0;
HXDLIN( 351)			while((_g < datas->length)){
HXLINE( 351)				 ::Dynamic dat = datas->__get(_g);
HXDLIN( 351)				_g = (_g + (int)1);
HXDLIN( 351)				if ((( (::String)(dat->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 351)					return dat;
            				}
            			}
            		}
HXLINE( 352)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getWorldRawByName,return )

 ::Dynamic Data_obj::getShaderRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_361_getShaderRawByName)
HXLINE( 362)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 362)			return datas->__get((int)0);
            		}
HXLINE( 363)		{
HXLINE( 363)			int _g = (int)0;
HXDLIN( 363)			while((_g < datas->length)){
HXLINE( 363)				 ::Dynamic dat = datas->__get(_g);
HXDLIN( 363)				_g = (_g + (int)1);
HXDLIN( 363)				if ((( (::String)(dat->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 363)					return dat;
            				}
            			}
            		}
HXLINE( 364)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getShaderRawByName,return )

 ::Dynamic Data_obj::getSpeakerRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_367_getSpeakerRawByName)
HXLINE( 368)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 368)			return datas->__get((int)0);
            		}
HXLINE( 369)		{
HXLINE( 369)			int _g = (int)0;
HXDLIN( 369)			while((_g < datas->length)){
HXLINE( 369)				 ::Dynamic dat = datas->__get(_g);
HXDLIN( 369)				_g = (_g + (int)1);
HXDLIN( 369)				if ((( (::String)(dat->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 369)					return dat;
            				}
            			}
            		}
HXLINE( 370)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getSpeakerRawByName,return )

int Data_obj::assetsLoaded;

 ::haxe::ds::StringMap Data_obj::loadingBlobs;

void Data_obj::getBlob(::String file, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,file) HXARGC(1)
            		void _hx_run( ::kha::internal::BytesBlob b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_386_getBlob)
HXLINE( 387)			::iron::data::Data_obj::cachedBlobs->set(file,b);
HXLINE( 388)			{
HXLINE( 388)				int _g = (int)0;
HXDLIN( 388)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingBlobs->get(file)) );
HXDLIN( 388)				while((_g < _g1->length)){
HXLINE( 388)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 388)					_g = (_g + (int)1);
HXDLIN( 388)					f(b);
            				}
            			}
HXLINE( 389)			::iron::data::Data_obj::loadingBlobs->remove(file);
HXLINE( 390)			::iron::data::Data_obj::assetsLoaded++;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_377_getBlob)
HXLINE( 378)		 ::kha::internal::BytesBlob cached = ::iron::data::Data_obj::cachedBlobs->get(file).StaticCast<  ::kha::internal::BytesBlob >();
HXLINE( 379)		if (hx::IsNotNull( cached )) {
HXLINE( 379)			done(cached);
HXDLIN( 379)			return;
            		}
HXLINE( 381)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingBlobs->get(file)) );
HXLINE( 382)		if (hx::IsNotNull( loading )) {
HXLINE( 382)			loading->push(done);
HXDLIN( 382)			return;
            		}
HXLINE( 384)		::iron::data::Data_obj::loadingBlobs->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 386)		::kha::Assets_obj::loadBlobFromPath(file, ::Dynamic(new _hx_Closure_0(file)),null(),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),386,HX_("iron.data.Data",68,80,30,b4),HX_("getBlob",13,ed,9b,13)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getBlob,(void))

 ::haxe::ds::StringMap Data_obj::loadingImages;

void Data_obj::getImage(::String file, ::Dynamic done,hx::Null< bool >  __o_readable,::String __o_format){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,file) HXARGC(1)
            		void _hx_run( ::kha::Image b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_409_getImage)
HXLINE( 410)			::iron::data::Data_obj::cachedImages->set(file,b);
HXLINE( 411)			{
HXLINE( 411)				int _g = (int)0;
HXDLIN( 411)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingImages->get(file)) );
HXDLIN( 411)				while((_g < _g1->length)){
HXLINE( 411)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 411)					_g = (_g + (int)1);
HXDLIN( 411)					f(b);
            				}
            			}
HXLINE( 412)			::iron::data::Data_obj::loadingImages->remove(file);
HXLINE( 413)			::iron::data::Data_obj::assetsLoaded++;
            		}
            		HX_END_LOCAL_FUNC1((void))

bool readable = __o_readable.Default(false);
::String format = __o_format.Default(HX_HCSTRING("RGBA32","\x53","\x5a","\x88","\xd6"));
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_395_getImage)
HXLINE( 397)		file = (file.substring((int)0,(file.length - (int)4)) + HX_(".k",7d,28,00,00));
HXLINE( 400)		 ::kha::Image cached = ::iron::data::Data_obj::cachedImages->get(file).StaticCast<  ::kha::Image >();
HXLINE( 401)		if (hx::IsNotNull( cached )) {
HXLINE( 401)			done(cached);
HXDLIN( 401)			return;
            		}
HXLINE( 403)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingImages->get(file)) );
HXLINE( 404)		if (hx::IsNotNull( loading )) {
HXLINE( 404)			loading->push(done);
HXDLIN( 404)			return;
            		}
HXLINE( 406)		::iron::data::Data_obj::loadingImages->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 409)		::kha::Assets_obj::loadImageFromPath(file,readable, ::Dynamic(new _hx_Closure_0(file)),null(),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),409,HX_("iron.data.Data",68,80,30,b4),HX_("getImage",e5,2e,40,1d)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Data_obj,getImage,(void))

 ::haxe::ds::StringMap Data_obj::loadingSounds;

void Data_obj::getSound(::String file, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::String,file) HXARGC(1)
            		void _hx_run( ::kha::Sound b){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,file, ::kha::Sound,b) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_514b96931615595e_438_getSound)
HXLINE( 440)				::iron::data::Data_obj::cachedSounds->set(file,b);
HXLINE( 441)				{
HXLINE( 441)					int _g = (int)0;
HXDLIN( 441)					::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingSounds->get(file)) );
HXDLIN( 441)					while((_g < _g1->length)){
HXLINE( 441)						 ::Dynamic f = _g1->__get(_g);
HXDLIN( 441)						_g = (_g + (int)1);
HXDLIN( 441)						f(b);
            					}
            				}
HXLINE( 442)				::iron::data::Data_obj::loadingSounds->remove(file);
HXLINE( 443)				::iron::data::Data_obj::assetsLoaded++;
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_STACKFRAME(&_hx_pos_514b96931615595e_438_getSound)
HXLINE( 438)			b->uncompress( ::Dynamic(new _hx_Closure_0(file,b)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_418_getSound)
HXLINE( 425)		if (::StringTools_obj::endsWith(file,HX_(".wav",be,71,c2,1e))) {
HXLINE( 425)			file = (file.substring((int)0,(file.length - (int)4)) + HX_(".ogg",e1,64,bc,1e));
            		}
HXLINE( 428)		 ::kha::Sound cached = ::iron::data::Data_obj::cachedSounds->get(file).StaticCast<  ::kha::Sound >();
HXLINE( 429)		if (hx::IsNotNull( cached )) {
HXLINE( 429)			done(cached);
HXDLIN( 429)			return;
            		}
HXLINE( 431)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingSounds->get(file)) );
HXLINE( 432)		if (hx::IsNotNull( loading )) {
HXLINE( 432)			loading->push(done);
HXDLIN( 432)			return;
            		}
HXLINE( 434)		::iron::data::Data_obj::loadingSounds->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 436)		::kha::Assets_obj::loadSoundFromPath(file, ::Dynamic(new _hx_Closure_1(file)),null(),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),436,HX_("iron.data.Data",68,80,30,b4),HX_("getSound",59,9c,a3,e0)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getSound,(void))

 ::haxe::ds::StringMap Data_obj::loadingVideos;

void Data_obj::getVideo(::String file, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,file) HXARGC(1)
            		void _hx_run( ::kha::Video b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_463_getVideo)
HXLINE( 464)			::iron::data::Data_obj::cachedVideos->set(file,b);
HXLINE( 465)			{
HXLINE( 465)				int _g = (int)0;
HXDLIN( 465)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingVideos->get(file)) );
HXDLIN( 465)				while((_g < _g1->length)){
HXLINE( 465)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 465)					_g = (_g + (int)1);
HXDLIN( 465)					f(b);
            				}
            			}
HXLINE( 466)			::iron::data::Data_obj::loadingVideos->remove(file);
HXLINE( 467)			::iron::data::Data_obj::assetsLoaded++;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_451_getVideo)
HXLINE( 453)		file = (file.substring((int)0,(file.length - (int)4)) + HX_(".avi",66,d2,b1,1e));
HXLINE( 455)		 ::kha::Video cached = ::iron::data::Data_obj::cachedVideos->get(file).StaticCast<  ::kha::Video >();
HXLINE( 456)		if (hx::IsNotNull( cached )) {
HXLINE( 456)			done(cached);
HXDLIN( 456)			return;
            		}
HXLINE( 458)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingVideos->get(file)) );
HXLINE( 459)		if (hx::IsNotNull( loading )) {
HXLINE( 459)			loading->push(done);
HXDLIN( 459)			return;
            		}
HXLINE( 461)		::iron::data::Data_obj::loadingVideos->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 463)		::kha::Assets_obj::loadVideoFromPath(file, ::Dynamic(new _hx_Closure_0(file)),null(),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),463,HX_("iron.data.Data",68,80,30,b4),HX_("getVideo",05,24,d3,96)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getVideo,(void))

 ::haxe::ds::StringMap Data_obj::loadingFonts;

void Data_obj::getFont(::String file, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,file) HXARGC(1)
            		void _hx_run( ::kha::Kravur b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_481_getFont)
HXLINE( 482)			::iron::data::Data_obj::cachedFonts->set(file,b);
HXLINE( 483)			{
HXLINE( 483)				int _g = (int)0;
HXDLIN( 483)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingFonts->get(file)) );
HXDLIN( 483)				while((_g < _g1->length)){
HXLINE( 483)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 483)					_g = (_g + (int)1);
HXDLIN( 483)					f(b);
            				}
            			}
HXLINE( 484)			::iron::data::Data_obj::loadingFonts->remove(file);
HXLINE( 485)			::iron::data::Data_obj::assetsLoaded++;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_472_getFont)
HXLINE( 473)		 ::kha::Kravur cached = ::iron::data::Data_obj::cachedFonts->get(file).StaticCast<  ::kha::Kravur >();
HXLINE( 474)		if (hx::IsNotNull( cached )) {
HXLINE( 474)			done(cached);
HXDLIN( 474)			return;
            		}
HXLINE( 476)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingFonts->get(file)) );
HXLINE( 477)		if (hx::IsNotNull( loading )) {
HXLINE( 477)			loading->push(done);
HXDLIN( 477)			return;
            		}
HXLINE( 479)		::iron::data::Data_obj::loadingFonts->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 481)		::kha::Assets_obj::loadFontFromPath(file, ::Dynamic(new _hx_Closure_0(file)),null(),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),481,HX_("iron.data.Data",68,80,30,b4),HX_("getFont",85,0d,43,16)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getFont,(void))


Data_obj::Data_obj()
{
}

bool Data_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getMesh") ) { outValue = getMesh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLamp") ) { outValue = getLamp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBlob") ) { outValue = getBlob_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getWorld") ) { outValue = getWorld_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getImage") ) { outValue = getImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSound") ) { outValue = getSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVideo") ) { outValue = getVideo_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"deleteAll") ) { outValue = deleteAll_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getCamera") ) { outValue = getCamera_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getShader") ) { outValue = getShader_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"deleteMesh") ) { outValue = deleteMesh_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cachedLamps") ) { outValue = ( cachedLamps ); return true; }
		if (HX_FIELD_EQ(inName,"cachedBlobs") ) { outValue = ( cachedBlobs ); return true; }
		if (HX_FIELD_EQ(inName,"cachedFonts") ) { outValue = ( cachedFonts ); return true; }
		if (HX_FIELD_EQ(inName,"getMaterial") ) { outValue = getMaterial_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getParticle") ) { outValue = getParticle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSceneRaw") ) { outValue = getSceneRaw_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cachedMeshes") ) { outValue = ( cachedMeshes ); return true; }
		if (HX_FIELD_EQ(inName,"cachedWorlds") ) { outValue = ( cachedWorlds ); return true; }
		if (HX_FIELD_EQ(inName,"cachedImages") ) { outValue = ( cachedImages ); return true; }
		if (HX_FIELD_EQ(inName,"cachedSounds") ) { outValue = ( cachedSounds ); return true; }
		if (HX_FIELD_EQ(inName,"cachedVideos") ) { outValue = ( cachedVideos ); return true; }
		if (HX_FIELD_EQ(inName,"loadingLamps") ) { outValue = ( loadingLamps ); return true; }
		if (HX_FIELD_EQ(inName,"assetsLoaded") ) { outValue = ( assetsLoaded ); return true; }
		if (HX_FIELD_EQ(inName,"loadingBlobs") ) { outValue = ( loadingBlobs ); return true; }
		if (HX_FIELD_EQ(inName,"loadingFonts") ) { outValue = ( loadingFonts ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cachedCameras") ) { outValue = ( cachedCameras ); return true; }
		if (HX_FIELD_EQ(inName,"cachedShaders") ) { outValue = ( cachedShaders ); return true; }
		if (HX_FIELD_EQ(inName,"loadingMeshes") ) { outValue = ( loadingMeshes ); return true; }
		if (HX_FIELD_EQ(inName,"loadingWorlds") ) { outValue = ( loadingWorlds ); return true; }
		if (HX_FIELD_EQ(inName,"loadingImages") ) { outValue = ( loadingImages ); return true; }
		if (HX_FIELD_EQ(inName,"loadingSounds") ) { outValue = ( loadingSounds ); return true; }
		if (HX_FIELD_EQ(inName,"loadingVideos") ) { outValue = ( loadingVideos ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"clearSceneData") ) { outValue = clearSceneData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadingCameras") ) { outValue = ( loadingCameras ); return true; }
		if (HX_FIELD_EQ(inName,"loadingShaders") ) { outValue = ( loadingShaders ); return true; }
		if (HX_FIELD_EQ(inName,"returnSceneRaw") ) { outValue = returnSceneRaw_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cachedSceneRaws") ) { outValue = ( cachedSceneRaws ); return true; }
		if (HX_FIELD_EQ(inName,"cachedMaterials") ) { outValue = ( cachedMaterials ); return true; }
		if (HX_FIELD_EQ(inName,"cachedParticles") ) { outValue = ( cachedParticles ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadingMaterials") ) { outValue = ( loadingMaterials ); return true; }
		if (HX_FIELD_EQ(inName,"loadingParticles") ) { outValue = ( loadingParticles ); return true; }
		if (HX_FIELD_EQ(inName,"loadingSceneRaws") ) { outValue = ( loadingSceneRaws ); return true; }
		if (HX_FIELD_EQ(inName,"getMeshRawByName") ) { outValue = getMeshRawByName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLampRawByName") ) { outValue = getLampRawByName_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getWorldRawByName") ) { outValue = getWorldRawByName_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getCameraRawByName") ) { outValue = getCameraRawByName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getShaderRawByName") ) { outValue = getShaderRawByName_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getSpeakerRawByName") ) { outValue = getSpeakerRawByName_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getMaterialRawByName") ) { outValue = getMaterialRawByName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getParticleRawByName") ) { outValue = getParticleRawByName_dyn(); return true; }
	}
	return false;
}

bool Data_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"cachedLamps") ) { cachedLamps=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedBlobs") ) { cachedBlobs=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedFonts") ) { cachedFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cachedMeshes") ) { cachedMeshes=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedWorlds") ) { cachedWorlds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedImages") ) { cachedImages=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedSounds") ) { cachedSounds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedVideos") ) { cachedVideos=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingLamps") ) { loadingLamps=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"assetsLoaded") ) { assetsLoaded=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingBlobs") ) { loadingBlobs=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingFonts") ) { loadingFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cachedCameras") ) { cachedCameras=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedShaders") ) { cachedShaders=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingMeshes") ) { loadingMeshes=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingWorlds") ) { loadingWorlds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingImages") ) { loadingImages=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingSounds") ) { loadingSounds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingVideos") ) { loadingVideos=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadingCameras") ) { loadingCameras=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingShaders") ) { loadingShaders=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cachedSceneRaws") ) { cachedSceneRaws=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedMaterials") ) { cachedMaterials=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedParticles") ) { cachedParticles=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadingMaterials") ) { loadingMaterials=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingParticles") ) { loadingParticles=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingSceneRaws") ) { loadingSceneRaws=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Data_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Data_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedSceneRaws,HX_HCSTRING("cachedSceneRaws","\xb5","\x64","\xfe","\x48")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedMeshes,HX_HCSTRING("cachedMeshes","\x1d","\xa1","\xbc","\x5c")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedLamps,HX_HCSTRING("cachedLamps","\x19","\xad","\xa1","\xe8")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedCameras,HX_HCSTRING("cachedCameras","\x6c","\xf2","\xb2","\x18")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedMaterials,HX_HCSTRING("cachedMaterials","\xaa","\x29","\xe6","\x46")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedParticles,HX_HCSTRING("cachedParticles","\x2b","\xb3","\x5f","\x39")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedWorlds,HX_HCSTRING("cachedWorlds","\x63","\xdb","\xa9","\x1d")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedShaders,HX_HCSTRING("cachedShaders","\xec","\xe9","\x07","\x95")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedBlobs,HX_HCSTRING("cachedBlobs","\x34","\xb1","\xe6","\x2d")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedImages,HX_HCSTRING("cachedImages","\x3a","\x3a","\x9d","\x52")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedSounds,HX_HCSTRING("cachedSounds","\x46","\x92","\x39","\x86")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedVideos,HX_HCSTRING("cachedVideos","\x1a","\xc1","\xa0","\x39")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedFonts,HX_HCSTRING("cachedFonts","\x82","\xf4","\x7b","\x7d")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingMeshes,HX_HCSTRING("loadingMeshes","\x37","\xff","\xac","\xf1")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingLamps,HX_HCSTRING("loadingLamps","\x3f","\x10","\x48","\x65")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingCameras,HX_HCSTRING("loadingCameras","\x12","\xeb","\x14","\xd6")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingMaterials,HX_HCSTRING("loadingMaterials","\xd0","\x17","\x34","\x9b")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingParticles,HX_HCSTRING("loadingParticles","\x51","\xa1","\xad","\x8d")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingWorlds,HX_HCSTRING("loadingWorlds","\x7d","\x39","\x9a","\xb2")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingShaders,HX_HCSTRING("loadingShaders","\x92","\xe2","\x69","\x52")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingSceneRaws,HX_HCSTRING("loadingSceneRaws","\xdb","\x52","\x4c","\x9d")},
	{hx::fsInt,(void *) &Data_obj::assetsLoaded,HX_HCSTRING("assetsLoaded","\xe8","\xc8","\x28","\x8e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingBlobs,HX_HCSTRING("loadingBlobs","\x5a","\x14","\x8d","\xaa")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingImages,HX_HCSTRING("loadingImages","\x54","\x98","\x8d","\xe7")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingSounds,HX_HCSTRING("loadingSounds","\x60","\xf0","\x29","\x1b")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingVideos,HX_HCSTRING("loadingVideos","\x34","\x1f","\x91","\xce")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingFonts,HX_HCSTRING("loadingFonts","\xa8","\x57","\x22","\xfa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Data_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Data_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Data_obj::cachedSceneRaws,"cachedSceneRaws");
	HX_MARK_MEMBER_NAME(Data_obj::cachedMeshes,"cachedMeshes");
	HX_MARK_MEMBER_NAME(Data_obj::cachedLamps,"cachedLamps");
	HX_MARK_MEMBER_NAME(Data_obj::cachedCameras,"cachedCameras");
	HX_MARK_MEMBER_NAME(Data_obj::cachedMaterials,"cachedMaterials");
	HX_MARK_MEMBER_NAME(Data_obj::cachedParticles,"cachedParticles");
	HX_MARK_MEMBER_NAME(Data_obj::cachedWorlds,"cachedWorlds");
	HX_MARK_MEMBER_NAME(Data_obj::cachedShaders,"cachedShaders");
	HX_MARK_MEMBER_NAME(Data_obj::cachedBlobs,"cachedBlobs");
	HX_MARK_MEMBER_NAME(Data_obj::cachedImages,"cachedImages");
	HX_MARK_MEMBER_NAME(Data_obj::cachedSounds,"cachedSounds");
	HX_MARK_MEMBER_NAME(Data_obj::cachedVideos,"cachedVideos");
	HX_MARK_MEMBER_NAME(Data_obj::cachedFonts,"cachedFonts");
	HX_MARK_MEMBER_NAME(Data_obj::loadingMeshes,"loadingMeshes");
	HX_MARK_MEMBER_NAME(Data_obj::loadingLamps,"loadingLamps");
	HX_MARK_MEMBER_NAME(Data_obj::loadingCameras,"loadingCameras");
	HX_MARK_MEMBER_NAME(Data_obj::loadingMaterials,"loadingMaterials");
	HX_MARK_MEMBER_NAME(Data_obj::loadingParticles,"loadingParticles");
	HX_MARK_MEMBER_NAME(Data_obj::loadingWorlds,"loadingWorlds");
	HX_MARK_MEMBER_NAME(Data_obj::loadingShaders,"loadingShaders");
	HX_MARK_MEMBER_NAME(Data_obj::loadingSceneRaws,"loadingSceneRaws");
	HX_MARK_MEMBER_NAME(Data_obj::assetsLoaded,"assetsLoaded");
	HX_MARK_MEMBER_NAME(Data_obj::loadingBlobs,"loadingBlobs");
	HX_MARK_MEMBER_NAME(Data_obj::loadingImages,"loadingImages");
	HX_MARK_MEMBER_NAME(Data_obj::loadingSounds,"loadingSounds");
	HX_MARK_MEMBER_NAME(Data_obj::loadingVideos,"loadingVideos");
	HX_MARK_MEMBER_NAME(Data_obj::loadingFonts,"loadingFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Data_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Data_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedSceneRaws,"cachedSceneRaws");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedMeshes,"cachedMeshes");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedLamps,"cachedLamps");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedCameras,"cachedCameras");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedMaterials,"cachedMaterials");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedParticles,"cachedParticles");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedWorlds,"cachedWorlds");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedShaders,"cachedShaders");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedBlobs,"cachedBlobs");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedImages,"cachedImages");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedSounds,"cachedSounds");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedVideos,"cachedVideos");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedFonts,"cachedFonts");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingMeshes,"loadingMeshes");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingLamps,"loadingLamps");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingCameras,"loadingCameras");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingMaterials,"loadingMaterials");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingParticles,"loadingParticles");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingWorlds,"loadingWorlds");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingShaders,"loadingShaders");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingSceneRaws,"loadingSceneRaws");
	HX_VISIT_MEMBER_NAME(Data_obj::assetsLoaded,"assetsLoaded");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingBlobs,"loadingBlobs");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingImages,"loadingImages");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingSounds,"loadingSounds");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingVideos,"loadingVideos");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingFonts,"loadingFonts");
};

#endif

hx::Class Data_obj::__mClass;

static ::String Data_obj_sStaticFields[] = {
	HX_HCSTRING("cachedSceneRaws","\xb5","\x64","\xfe","\x48"),
	HX_HCSTRING("cachedMeshes","\x1d","\xa1","\xbc","\x5c"),
	HX_HCSTRING("cachedLamps","\x19","\xad","\xa1","\xe8"),
	HX_HCSTRING("cachedCameras","\x6c","\xf2","\xb2","\x18"),
	HX_HCSTRING("cachedMaterials","\xaa","\x29","\xe6","\x46"),
	HX_HCSTRING("cachedParticles","\x2b","\xb3","\x5f","\x39"),
	HX_HCSTRING("cachedWorlds","\x63","\xdb","\xa9","\x1d"),
	HX_HCSTRING("cachedShaders","\xec","\xe9","\x07","\x95"),
	HX_HCSTRING("cachedBlobs","\x34","\xb1","\xe6","\x2d"),
	HX_HCSTRING("cachedImages","\x3a","\x3a","\x9d","\x52"),
	HX_HCSTRING("cachedSounds","\x46","\x92","\x39","\x86"),
	HX_HCSTRING("cachedVideos","\x1a","\xc1","\xa0","\x39"),
	HX_HCSTRING("cachedFonts","\x82","\xf4","\x7b","\x7d"),
	HX_HCSTRING("deleteAll","\xb6","\x1d","\xbd","\xf1"),
	HX_HCSTRING("clearSceneData","\x49","\x46","\xe8","\x56"),
	HX_HCSTRING("loadingMeshes","\x37","\xff","\xac","\xf1"),
	HX_HCSTRING("getMesh","\xa3","\xf9","\xdb","\x1a"),
	HX_HCSTRING("deleteMesh","\xb8","\x27","\xa6","\x9b"),
	HX_HCSTRING("loadingLamps","\x3f","\x10","\x48","\x65"),
	HX_HCSTRING("getLamp","\xce","\xb4","\x2f","\x1a"),
	HX_HCSTRING("loadingCameras","\x12","\xeb","\x14","\xd6"),
	HX_HCSTRING("getCamera","\xdb","\xcf","\xe2","\x33"),
	HX_HCSTRING("loadingMaterials","\xd0","\x17","\x34","\x9b"),
	HX_HCSTRING("getMaterial","\x5d","\x1f","\x99","\x16"),
	HX_HCSTRING("loadingParticles","\x51","\xa1","\xad","\x8d"),
	HX_HCSTRING("getParticle","\xfc","\x00","\x85","\x92"),
	HX_HCSTRING("loadingWorlds","\x7d","\x39","\x9a","\xb2"),
	HX_HCSTRING("getWorld","\xdc","\xa5","\x3b","\x2e"),
	HX_HCSTRING("loadingShaders","\x92","\xe2","\x69","\x52"),
	HX_HCSTRING("getShader","\x5b","\x48","\x77","\x99"),
	HX_HCSTRING("loadingSceneRaws","\xdb","\x52","\x4c","\x9d"),
	HX_HCSTRING("getSceneRaw","\xb2","\x4e","\x8a","\xe7"),
	HX_HCSTRING("returnSceneRaw","\xcc","\x1c","\xb2","\xc6"),
	HX_HCSTRING("getMeshRawByName","\xa7","\xed","\x94","\xe4"),
	HX_HCSTRING("getLampRawByName","\x1c","\xf5","\xf3","\x94"),
	HX_HCSTRING("getCameraRawByName","\x6f","\x90","\x4d","\xcb"),
	HX_HCSTRING("getMaterialRawByName","\xad","\x40","\xa6","\x82"),
	HX_HCSTRING("getParticleRawByName","\x2e","\xb3","\xf6","\x92"),
	HX_HCSTRING("getWorldRawByName","\x4e","\x72","\x74","\xc6"),
	HX_HCSTRING("getShaderRawByName","\xef","\x07","\xa6","\x20"),
	HX_HCSTRING("getSpeakerRawByName","\x81","\x6f","\xea","\x67"),
	HX_HCSTRING("assetsLoaded","\xe8","\xc8","\x28","\x8e"),
	HX_HCSTRING("loadingBlobs","\x5a","\x14","\x8d","\xaa"),
	HX_HCSTRING("getBlob","\x13","\xed","\x9b","\x13"),
	HX_HCSTRING("loadingImages","\x54","\x98","\x8d","\xe7"),
	HX_HCSTRING("getImage","\xe5","\x2e","\x40","\x1d"),
	HX_HCSTRING("loadingSounds","\x60","\xf0","\x29","\x1b"),
	HX_HCSTRING("getSound","\x59","\x9c","\xa3","\xe0"),
	HX_HCSTRING("loadingVideos","\x34","\x1f","\x91","\xce"),
	HX_HCSTRING("getVideo","\x05","\x24","\xd3","\x96"),
	HX_HCSTRING("loadingFonts","\xa8","\x57","\x22","\xfa"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	::String(null())
};

void Data_obj::__register()
{
	hx::Object *dummy = new Data_obj;
	Data_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.data.Data","\x68","\x80","\x30","\xb4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Data_obj::__GetStatic;
	__mClass->mSetStaticField = &Data_obj::__SetStatic;
	__mClass->mMarkFunc = Data_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Data_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Data_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Data_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Data_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Data_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Data_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_9_boot)
HXDLIN(   9)		cachedSceneRaws =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_10_boot)
HXDLIN(  10)		cachedMeshes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_11_boot)
HXDLIN(  11)		cachedLamps =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_12_boot)
HXDLIN(  12)		cachedCameras =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_13_boot)
HXDLIN(  13)		cachedMaterials =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_14_boot)
HXDLIN(  14)		cachedParticles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_15_boot)
HXDLIN(  15)		cachedWorlds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_17_boot)
HXDLIN(  17)		cachedShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_19_boot)
HXDLIN(  19)		cachedBlobs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_20_boot)
HXDLIN(  20)		cachedImages =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_21_boot)
HXDLIN(  21)		cachedSounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_22_boot)
HXDLIN(  22)		cachedVideos =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_23_boot)
HXDLIN(  23)		cachedFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_67_boot)
HXDLIN(  67)		loadingMeshes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_94_boot)
HXDLIN(  94)		loadingLamps =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_111_boot)
HXDLIN( 111)		loadingCameras =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_128_boot)
HXDLIN( 128)		loadingMaterials =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_145_boot)
HXDLIN( 145)		loadingParticles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_162_boot)
HXDLIN( 162)		loadingWorlds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_198_boot)
HXDLIN( 198)		loadingShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_218_boot)
HXDLIN( 218)		loadingSceneRaws =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_374_boot)
HXDLIN( 374)		assetsLoaded = (int)0;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_376_boot)
HXDLIN( 376)		loadingBlobs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_394_boot)
HXDLIN( 394)		loadingImages =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_417_boot)
HXDLIN( 417)		loadingSounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_450_boot)
HXDLIN( 450)		loadingVideos =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_471_boot)
HXDLIN( 471)		loadingFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace iron
} // end namespace data
