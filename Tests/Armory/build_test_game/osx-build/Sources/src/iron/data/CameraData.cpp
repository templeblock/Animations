// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <kha/graphics4/TextureFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89fb19bd3df090a0_5_new,"iron.data.CameraData","new",0xb066a79f,"iron.data.CameraData.new","iron/data/CameraData.hx",5,0x17bad851)
HX_LOCAL_STACK_FRAME(_hx_pos_89fb19bd3df090a0_27_parse,"iron.data.CameraData","parse",0xb93bf532,"iron.data.CameraData.parse","iron/data/CameraData.hx",27,0x17bad851)
namespace iron{
namespace data{

void CameraData_obj::__construct( ::Dynamic raw, ::Dynamic done,::String __o_file){
::String file = __o_file.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_89fb19bd3df090a0_5_new)
HXLINE(   9)		this->renderTarget = null();
HXLINE(  12)		super::__construct();
HXLINE(  13)		this->raw = raw;
HXLINE(  14)		this->name = ( (::String)(raw->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE(  16)		if (( (bool)(raw->__Field(HX_("render_to_texture",60,10,25,06),hx::paccDynamic)) )) {
HXLINE(  17)			this->renderTarget = ::kha::Image_obj::createRenderTarget(( (int)(raw->__Field(HX_("texture_resolution_x",89,48,d9,a4),hx::paccDynamic)) ),( (int)(raw->__Field(HX_("texture_resolution_y",8a,48,d9,a4),hx::paccDynamic)) ),::kha::graphics4::TextureFormat_obj::RGBA32_dyn(),(int)0,null(),null());
            		}
HXLINE(  23)		done(hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic CameraData_obj::__CreateEmpty() { return new CameraData_obj; }

void *CameraData_obj::_hx_vtable = 0;

Dynamic CameraData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CameraData_obj > _hx_result = new CameraData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool CameraData_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25e6a720) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25e6a720;
	} else {
		return inClassId==(int)0x272a8181;
	}
}

void CameraData_obj::parse(::String name,::String id, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,name,::String,id, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic format){
            			HX_GC_STACKFRAME(&_hx_pos_89fb19bd3df090a0_27_parse)
HXLINE(  28)			 ::Dynamic raw = ::iron::data::Data_obj::getCameraRawByName(( (::Array< ::Dynamic>)(format->__Field(HX_("camera_datas",af,a6,c9,64),hx::paccDynamic)) ),id);
HXLINE(  29)			if (hx::IsNull( raw )) {
HXLINE(  30)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  30)				_hx_tmp(((HX_("Camera data \"",a7,00,d0,d7) + id) + HX_("\" not found!",4a,86,fb,0a)),hx::SourceInfo(HX_("CameraData.hx",8f,22,aa,61),30,HX_("iron.data.CameraData",2d,ec,bc,89),HX_("parse",33,90,55,bd)));
HXLINE(  31)				done(null());
            			}
HXLINE(  33)			 ::iron::data::CameraData_obj::__alloc( HX_CTX ,raw,done,name);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_89fb19bd3df090a0_27_parse)
HXDLIN(  27)		::iron::data::Data_obj::getSceneRaw(name, ::Dynamic(new _hx_Closure_0(name,id,done)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CameraData_obj,parse,(void))


hx::ObjectPtr< CameraData_obj > CameraData_obj::__new( ::Dynamic raw, ::Dynamic done,::String __o_file) {
	hx::ObjectPtr< CameraData_obj > __this = new CameraData_obj();
	__this->__construct(raw,done,__o_file);
	return __this;
}

hx::ObjectPtr< CameraData_obj > CameraData_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic raw, ::Dynamic done,::String __o_file) {
	CameraData_obj *__this = (CameraData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CameraData_obj), true, "iron.data.CameraData"));
	*(void **)__this = CameraData_obj::_hx_vtable;
	__this->__construct(raw,done,__o_file);
	return __this;
}

CameraData_obj::CameraData_obj()
{
}

void CameraData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CameraData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(renderTarget,"renderTarget");
	HX_MARK_END_CLASS();
}

void CameraData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(renderTarget,"renderTarget");
}

hx::Val CameraData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderTarget") ) { return hx::Val( renderTarget ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CameraData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
	}
	return false;
}

hx::Val CameraData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderTarget") ) { renderTarget=inValue.Cast<  ::kha::Image >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CameraData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"));
	outFields->push(HX_HCSTRING("renderTarget","\x47","\xf7","\x42","\xf6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CameraData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(CameraData_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(CameraData_obj,raw),HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00")},
	{hx::fsObject /*::kha::Image*/ ,(int)offsetof(CameraData_obj,renderTarget),HX_HCSTRING("renderTarget","\x47","\xf7","\x42","\xf6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CameraData_obj_sStaticStorageInfo = 0;
#endif

static ::String CameraData_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"),
	HX_HCSTRING("renderTarget","\x47","\xf7","\x42","\xf6"),
	::String(null()) };

static void CameraData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CameraData_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CameraData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CameraData_obj::__mClass,"__mClass");
};

#endif

hx::Class CameraData_obj::__mClass;

static ::String CameraData_obj_sStaticFields[] = {
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	::String(null())
};

void CameraData_obj::__register()
{
	hx::Object *dummy = new CameraData_obj;
	CameraData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.data.CameraData","\x2d","\xec","\xbc","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CameraData_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CameraData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CameraData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CameraData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CameraData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CameraData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CameraData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CameraData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
