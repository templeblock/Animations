// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_StreamSector
#include <iron/data/StreamSector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ed4b2704ebf427d9_26_new,"iron.data.StreamSector","new",0x912c4f76,"iron.data.StreamSector.new","iron/data/SceneStream.hx",26,0x35736370)
namespace iron{
namespace data{

void StreamSector_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ed4b2704ebf427d9_26_new)
HXDLIN(  26)		this->handles = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic StreamSector_obj::__CreateEmpty() { return new StreamSector_obj; }

void *StreamSector_obj::_hx_vtable = 0;

Dynamic StreamSector_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StreamSector_obj > _hx_result = new StreamSector_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StreamSector_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0bf0c7a0;
}


StreamSector_obj::StreamSector_obj()
{
}

void StreamSector_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StreamSector);
	HX_MARK_MEMBER_NAME(handles,"handles");
	HX_MARK_END_CLASS();
}

void StreamSector_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(handles,"handles");
}

hx::Val StreamSector_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"handles") ) { return hx::Val( handles ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val StreamSector_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"handles") ) { handles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StreamSector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("handles","\xcb","\xaf","\xd5","\x45"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo StreamSector_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(StreamSector_obj,handles),HX_HCSTRING("handles","\xcb","\xaf","\xd5","\x45")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *StreamSector_obj_sStaticStorageInfo = 0;
#endif

static ::String StreamSector_obj_sMemberFields[] = {
	HX_HCSTRING("handles","\xcb","\xaf","\xd5","\x45"),
	::String(null()) };

static void StreamSector_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StreamSector_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StreamSector_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StreamSector_obj::__mClass,"__mClass");
};

#endif

hx::Class StreamSector_obj::__mClass;

void StreamSector_obj::__register()
{
	hx::Object *dummy = new StreamSector_obj;
	StreamSector_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.data.StreamSector","\x84","\x1c","\x4e","\xfa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StreamSector_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StreamSector_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StreamSector_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StreamSector_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StreamSector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StreamSector_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
