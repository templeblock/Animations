// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_MaterialContext
#include <iron/data/MaterialContext.h>
#endif
#ifndef INCLUDED_iron_data_ShaderContext
#include <iron/data/ShaderContext.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c2b72e234e45c502_79_new,"iron.data.MaterialContext","new",0x1d15a47c,"iron.data.MaterialContext.new","iron/data/MaterialData.hx",79,0x327b930f)
static const int _hx_array_data_415af68a_4[] = {
	(int)0,
};
HX_DEFINE_STACK_FRAME(_hx_pos_c2b72e234e45c502_104_new,"iron.data.MaterialContext","new",0x1d15a47c,"iron.data.MaterialContext.new","iron/data/MaterialData.hx",104,0x327b930f)
static const int _hx_array_data_415af68a_6[] = {
	(int)0,
};
HX_DEFINE_STACK_FRAME(_hx_pos_c2b72e234e45c502_117_new,"iron.data.MaterialContext","new",0x1d15a47c,"iron.data.MaterialContext.new","iron/data/MaterialData.hx",117,0x327b930f)
HX_LOCAL_STACK_FRAME(_hx_pos_c2b72e234e45c502_148_setTextureParameters,"iron.data.MaterialContext","setTextureParameters",0x742b05c7,"iron.data.MaterialContext.setTextureParameters","iron/data/MaterialData.hx",148,0x327b930f)
HX_LOCAL_STACK_FRAME(_hx_pos_c2b72e234e45c502_83_boot,"iron.data.MaterialContext","boot",0x4df34896,"iron.data.MaterialContext.boot","iron/data/MaterialData.hx",83,0x327b930f)
namespace iron{
namespace data{

void MaterialContext_obj::__construct( ::Dynamic raw, ::Dynamic done){
            	HX_STACKFRAME(&_hx_pos_c2b72e234e45c502_79_new)
HXLINE(  82)		this->id = (int)0;
HXLINE(  81)		this->textures = null();
HXLINE(  85)		 ::iron::data::MaterialContext _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  86)		this->raw = raw;
HXLINE(  87)		this->id = ::iron::data::MaterialContext_obj::num++;
HXLINE(  89)		bool _hx_tmp;
HXDLIN(  89)		if (hx::IsNotNull( ( (::Array< ::Dynamic>)(raw->__Field(HX_("bind_textures",3a,d9,41,d5),hx::paccDynamic)) ) )) {
HXLINE(  89)			_hx_tmp = (( (::Array< ::Dynamic>)(raw->__Field(HX_("bind_textures",3a,d9,41,d5),hx::paccDynamic)) )->length > (int)0);
            		}
            		else {
HXLINE(  89)			_hx_tmp = false;
            		}
HXDLIN(  89)		if (_hx_tmp) {
HXLINE(  91)			::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(( (::Array< ::Dynamic>)(raw->__Field(HX_("bind_textures",3a,d9,41,d5),hx::paccDynamic)) )->length);
HXDLIN(  91)			this->textures = this1;
HXLINE(  92)			::Array< int > texturesLoaded = ::Array_obj< int >::fromData( _hx_array_data_415af68a_4,1);
HXLINE(  94)			{
HXLINE(  94)				int _g1 = (int)0;
HXDLIN(  94)				int _g = ( (::Array< ::Dynamic>)(raw->__Field(HX_("bind_textures",3a,d9,41,d5),hx::paccDynamic)) )->length;
HXDLIN(  94)				while((_g1 < _g)){
            					HX_BEGIN_LOCAL_FUNC_S6(hx::LocalFunc,_hx_Closure_1, ::iron::data::MaterialContext,_gthis, ::Dynamic,tex, ::Dynamic,raw,::Array< int >,texturesLoaded, ::Dynamic,done,int,i) HXARGC(1)
            					void _hx_run( ::kha::Image image){
            						HX_STACKFRAME(&_hx_pos_c2b72e234e45c502_104_new)
HXLINE( 105)						_gthis->textures->__unsafe_set(i,image);
HXLINE( 106)						texturesLoaded[(int)0]++;
HXLINE( 109)						if (hx::IsNotNull( ( (::Array< ::String >)(tex->__Field(HX_("mipmaps",eb,a9,53,75),hx::paccDynamic)) ) )) {
HXLINE( 110)							::Array< ::Dynamic> mipmaps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 111)							while((mipmaps->length < ( (::Array< ::String >)(tex->__Field(HX_("mipmaps",eb,a9,53,75),hx::paccDynamic)) )->length)){
HXLINE( 111)								mipmaps->push(null());
            							}
HXLINE( 112)							::Array< int > mipmapsLoaded = ::Array_obj< int >::fromData( _hx_array_data_415af68a_6,1);
HXLINE( 114)							{
HXLINE( 114)								int _g3 = (int)0;
HXDLIN( 114)								int _g2 = ( (::Array< ::String >)(tex->__Field(HX_("mipmaps",eb,a9,53,75),hx::paccDynamic)) )->length;
HXDLIN( 114)								while((_g3 < _g2)){
            									HX_BEGIN_LOCAL_FUNC_S9(hx::LocalFunc,_hx_Closure_0, ::iron::data::MaterialContext,_gthis, ::Dynamic,tex,::Array< int >,mipmapsLoaded, ::Dynamic,raw,int,j,::Array< int >,texturesLoaded,::Array< ::Dynamic>,mipmaps, ::Dynamic,done, ::kha::Image,image) HXARGC(1)
            									void _hx_run( ::kha::Image mipimg){
            										HX_STACKFRAME(&_hx_pos_c2b72e234e45c502_117_new)
HXLINE( 118)										mipmaps[j] = mipimg;
HXLINE( 119)										mipmapsLoaded[(int)0]++;
HXLINE( 121)										if ((mipmapsLoaded->__get((int)0) == ( (::Array< ::String >)(tex->__Field(HX_("mipmaps",eb,a9,53,75),hx::paccDynamic)) )->length)) {
HXLINE( 122)											image->setMipmaps(mipmaps);
HXLINE( 123)											tex->__SetField(HX_("mipmaps",eb,a9,53,75),null(),hx::paccDynamic);
HXLINE( 124)											tex->__SetField(HX_("generate_mipmaps",a1,1f,a0,3c),false,hx::paccDynamic);
HXLINE( 126)											if ((texturesLoaded->__get((int)0) == ( (::Array< ::Dynamic>)(raw->__Field(HX_("bind_textures",3a,d9,41,d5),hx::paccDynamic)) )->length)) {
HXLINE( 126)												done(_gthis);
            											}
            										}
            									}
            									HX_END_LOCAL_FUNC1((void))

HXLINE( 114)									_g3 = (_g3 + (int)1);
HXDLIN( 114)									int j = (_g3 - (int)1);
HXLINE( 115)									::String name = ( (::String)( ::Dynamic(tex->__Field(HX_("mipmaps",eb,a9,53,75),hx::paccDynamic))->__GetItem(j)) );
HXLINE( 117)									::iron::data::Data_obj::getImage(name, ::Dynamic(new _hx_Closure_0(_gthis,tex,mipmapsLoaded,raw,j,texturesLoaded,mipmaps,done,image)),null(),null());
            								}
            							}
            						}
            						else {
HXLINE( 131)							bool _hx_tmp2;
HXDLIN( 131)							if (hx::IsEq( tex->__Field(HX_("generate_mipmaps",a1,1f,a0,3c),hx::paccDynamic),true )) {
HXLINE( 131)								_hx_tmp2 = hx::IsNotNull( image );
            							}
            							else {
HXLINE( 131)								_hx_tmp2 = false;
            							}
HXDLIN( 131)							if (_hx_tmp2) {
HXLINE( 132)								image->generateMipmaps((int)1000);
HXLINE( 133)								tex->__SetField(HX_("mipmaps",eb,a9,53,75),null(),hx::paccDynamic);
HXLINE( 134)								tex->__SetField(HX_("generate_mipmaps",a1,1f,a0,3c),false,hx::paccDynamic);
HXLINE( 136)								if ((texturesLoaded->__get((int)0) == ( (::Array< ::Dynamic>)(raw->__Field(HX_("bind_textures",3a,d9,41,d5),hx::paccDynamic)) )->length)) {
HXLINE( 136)									done(_gthis);
            								}
            							}
            							else {
HXLINE( 138)								if ((texturesLoaded->__get((int)0) == ( (::Array< ::Dynamic>)(raw->__Field(HX_("bind_textures",3a,d9,41,d5),hx::paccDynamic)) )->length)) {
HXLINE( 138)									done(_gthis);
            								}
            							}
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(  94)					_g1 = (_g1 + (int)1);
HXDLIN(  94)					int i = (_g1 - (int)1);
HXLINE(  95)					 ::Dynamic tex =  ::Dynamic(raw->__Field(HX_("bind_textures",3a,d9,41,d5),hx::paccDynamic))->__GetItem(i);
HXLINE(  98)					if ((( (::String)(tex->__Field(HX_("file",7c,ce,bb,43),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE(  99)						texturesLoaded[(int)0]++;
HXLINE( 100)						if ((texturesLoaded->__get((int)0) == ( (::Array< ::Dynamic>)(raw->__Field(HX_("bind_textures",3a,d9,41,d5),hx::paccDynamic)) )->length)) {
HXLINE( 100)							done(hx::ObjectPtr<OBJ_>(this));
            						}
HXLINE( 101)						continue;
            					}
HXLINE( 140)					::String _hx_tmp1;
HXDLIN( 140)					if (hx::IsNotNull( ( (::String)(tex->__Field(HX_("format",37,8f,8e,fd),hx::paccDynamic)) ) )) {
HXLINE( 140)						_hx_tmp1 = ( (::String)(tex->__Field(HX_("format",37,8f,8e,fd),hx::paccDynamic)) );
            					}
            					else {
HXLINE( 140)						_hx_tmp1 = HX_("RGBA32",53,5a,88,d6);
            					}
HXLINE( 104)					::iron::data::Data_obj::getImage(( (::String)(tex->__Field(HX_("file",7c,ce,bb,43),hx::paccDynamic)) ), ::Dynamic(new _hx_Closure_1(_gthis,tex,raw,texturesLoaded,done,i)),false,_hx_tmp1);
            				}
            			}
            		}
            		else {
HXLINE( 143)			done(hx::ObjectPtr<OBJ_>(this));
            		}
            	}

Dynamic MaterialContext_obj::__CreateEmpty() { return new MaterialContext_obj; }

void *MaterialContext_obj::_hx_vtable = 0;

Dynamic MaterialContext_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MaterialContext_obj > _hx_result = new MaterialContext_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MaterialContext_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b415ad2;
}

void MaterialContext_obj::setTextureParameters(::Dynamic g,int textureIndex, ::iron::data::ShaderContext context,int unitIndex){
            	HX_STACKFRAME(&_hx_pos_c2b72e234e45c502_148_setTextureParameters)
HXDLIN( 148)		if (!(context->paramsSet->__get(unitIndex))) {
HXLINE( 149)			context->setTextureParameters(g,unitIndex, ::Dynamic(this->raw->__Field(HX_("bind_textures",3a,d9,41,d5),hx::paccDynamic))->__GetItem(textureIndex));
HXLINE( 151)			context->paramsSet[unitIndex] = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(MaterialContext_obj,setTextureParameters,(void))

int MaterialContext_obj::num;


hx::ObjectPtr< MaterialContext_obj > MaterialContext_obj::__new( ::Dynamic raw, ::Dynamic done) {
	hx::ObjectPtr< MaterialContext_obj > __this = new MaterialContext_obj();
	__this->__construct(raw,done);
	return __this;
}

hx::ObjectPtr< MaterialContext_obj > MaterialContext_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic raw, ::Dynamic done) {
	MaterialContext_obj *__this = (MaterialContext_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MaterialContext_obj), true, "iron.data.MaterialContext"));
	*(void **)__this = MaterialContext_obj::_hx_vtable;
	__this->__construct(raw,done);
	return __this;
}

MaterialContext_obj::MaterialContext_obj()
{
}

void MaterialContext_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MaterialContext);
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(textures,"textures");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_END_CLASS();
}

void MaterialContext_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(textures,"textures");
	HX_VISIT_MEMBER_NAME(id,"id");
}

hx::Val MaterialContext_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textures") ) { return hx::Val( textures ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setTextureParameters") ) { return hx::Val( setTextureParameters_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MaterialContext_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { outValue = ( num ); return true; }
	}
	return false;
}

hx::Val MaterialContext_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textures") ) { textures=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MaterialContext_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { num=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void MaterialContext_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"));
	outFields->push(HX_HCSTRING("textures","\x38","\xf7","\xce","\x65"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MaterialContext_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(MaterialContext_obj,raw),HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MaterialContext_obj,textures),HX_HCSTRING("textures","\x38","\xf7","\xce","\x65")},
	{hx::fsInt,(int)offsetof(MaterialContext_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MaterialContext_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &MaterialContext_obj::num,HX_HCSTRING("num","\x46","\xde","\x53","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MaterialContext_obj_sMemberFields[] = {
	HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"),
	HX_HCSTRING("textures","\x38","\xf7","\xce","\x65"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("setTextureParameters","\x63","\x39","\x4d","\x35"),
	::String(null()) };

static void MaterialContext_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MaterialContext_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MaterialContext_obj::num,"num");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MaterialContext_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MaterialContext_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MaterialContext_obj::num,"num");
};

#endif

hx::Class MaterialContext_obj::__mClass;

static ::String MaterialContext_obj_sStaticFields[] = {
	HX_HCSTRING("num","\x46","\xde","\x53","\x00"),
	::String(null())
};

void MaterialContext_obj::__register()
{
	hx::Object *dummy = new MaterialContext_obj;
	MaterialContext_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.data.MaterialContext","\x8a","\xf6","\x5a","\x41");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MaterialContext_obj::__GetStatic;
	__mClass->mSetStaticField = &MaterialContext_obj::__SetStatic;
	__mClass->mMarkFunc = MaterialContext_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MaterialContext_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MaterialContext_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MaterialContext_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MaterialContext_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MaterialContext_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MaterialContext_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MaterialContext_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c2b72e234e45c502_83_boot)
HXDLIN(  83)		num = (int)0;
            	}
}

} // end namespace iron
} // end namespace data
