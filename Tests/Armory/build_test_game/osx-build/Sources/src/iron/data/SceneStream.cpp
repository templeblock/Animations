// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_Armature
#include <iron/data/Armature.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_data_SceneStream
#include <iron/data/SceneStream.h>
#endif
#ifndef INCLUDED_iron_data_StreamSector
#include <iron/data/StreamSector.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aaba7c7334ee0e2d_29_new,"iron.data.SceneStream","new",0x96ac8c60,"iron.data.SceneStream.new","iron/data/SceneStream.hx",29,0x35736370)
HX_LOCAL_STACK_FRAME(_hx_pos_aaba7c7334ee0e2d_41_sceneTotal,"iron.data.SceneStream","sceneTotal",0xddd17ad8,"iron.data.SceneStream.sceneTotal","iron/data/SceneStream.hx",41,0x35736370)
HX_LOCAL_STACK_FRAME(_hx_pos_aaba7c7334ee0e2d_49_add,"iron.data.SceneStream","add",0x96a2ae21,"iron.data.SceneStream.add","iron/data/SceneStream.hx",49,0x35736370)
HX_LOCAL_STACK_FRAME(_hx_pos_aaba7c7334ee0e2d_52_setup,"iron.data.SceneStream","setup",0xe52f6a7d,"iron.data.SceneStream.setup","iron/data/SceneStream.hx",52,0x35736370)
HX_LOCAL_STACK_FRAME(_hx_pos_aaba7c7334ee0e2d_57_update,"iron.data.SceneStream","update",0xbbca4a09,"iron.data.SceneStream.update","iron/data/SceneStream.hx",57,0x35736370)
HX_LOCAL_STACK_FRAME(_hx_pos_aaba7c7334ee0e2d_91_update,"iron.data.SceneStream","update",0xbbca4a09,"iron.data.SceneStream.update","iron/data/SceneStream.hx",91,0x35736370)
namespace iron{
namespace data{

void SceneStream_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_aaba7c7334ee0e2d_29_new)
HXLINE(  37)		this->unloadDistance = (int)-1;
HXLINE(  36)		this->loadDistance = (int)-1;
HXLINE(  34)		this->loading = (int)0;
HXLINE(  33)		this->loadMax = (int)8;
HXLINE(  32)		this->checkPos = (int)0;
HXLINE(  31)		this->checkMax = (int)64;
HXLINE(  45)		this->sectors = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::iron::data::StreamSector_obj::__alloc( HX_CTX ));
            	}

Dynamic SceneStream_obj::__CreateEmpty() { return new SceneStream_obj; }

void *SceneStream_obj::_hx_vtable = 0;

Dynamic SceneStream_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SceneStream_obj > _hx_result = new SceneStream_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SceneStream_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1094309a;
}

int SceneStream_obj::sceneTotal(){
            	HX_STACKFRAME(&_hx_pos_aaba7c7334ee0e2d_41_sceneTotal)
HXDLIN(  41)		return this->sectors->__get((int)0).StaticCast<  ::iron::data::StreamSector >()->handles->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SceneStream_obj,sceneTotal,return )

void SceneStream_obj::add(::String object_file,::String data_ref,::String sceneName, ::iron::data::Armature armature,::Array< ::Dynamic> materials, ::iron::object::Object parent, ::Dynamic obj){
            	HX_STACKFRAME(&_hx_pos_aaba7c7334ee0e2d_49_add)
HXDLIN(  49)		this->sectors->__get((int)0).StaticCast<  ::iron::data::StreamSector >()->handles->push( ::Dynamic(hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("data_ref",7e,d1,bc,93),data_ref)
            			->setFixed(1,HX_("sceneName",b7,0d,7f,9f),sceneName)
            			->setFixed(2,HX_("materials",ec,b5,0b,a0),materials)
            			->setFixed(3,HX_("object_file",3c,97,ce,d2),object_file)
            			->setFixed(4,HX_("armature",79,a4,76,ec),armature)
            			->setFixed(5,HX_("parent",2a,05,7e,ed),parent)
            			->setFixed(6,HX_("obj",f7,8f,54,00),obj)
            			->setFixed(7,HX_("loading",7c,ce,f2,08),false)
            			->setFixed(8,HX_("object",bf,7e,3f,15),null())));
            	}


HX_DEFINE_DYNAMIC_FUNC7(SceneStream_obj,add,(void))

void SceneStream_obj::setup( ::iron::object::CameraObject camera){
            	HX_STACKFRAME(&_hx_pos_aaba7c7334ee0e2d_52_setup)
HXLINE(  53)		this->loadDistance = ::Std_obj::_hx_int((( (float)(camera->data->raw->__Field(HX_("far_plane",b4,3b,51,fd),hx::paccDynamic)) ) * ((Float)1.1)));
HXLINE(  54)		this->unloadDistance = ::Std_obj::_hx_int((( (float)(camera->data->raw->__Field(HX_("far_plane",b4,3b,51,fd),hx::paccDynamic)) ) * ((Float)1.5)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(SceneStream_obj,setup,(void))

void SceneStream_obj::update( ::iron::object::CameraObject camera){
            	HX_STACKFRAME(&_hx_pos_aaba7c7334ee0e2d_57_update)
HXDLIN(  57)		 ::iron::data::SceneStream _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  58)		if ((this->loadDistance == (int)-1)) {
HXLINE(  58)			this->setup(camera);
            		}
HXLINE(  60)		if ((this->loading >= this->loadMax)) {
HXLINE(  60)			return;
            		}
HXLINE(  62)		 ::iron::data::StreamSector sec = this->sectors->__get((int)0).StaticCast<  ::iron::data::StreamSector >();
HXLINE(  63)		int to = ::Std_obj::_hx_int(::Math_obj::min(this->checkMax,sec->handles->length));
HXLINE(  64)		{
HXLINE(  64)			int _g1 = (int)0;
HXDLIN(  64)			int _g = to;
HXDLIN(  64)			while((_g1 < _g)){
HXLINE(  64)				_g1 = (_g1 + (int)1);
HXDLIN(  64)				int i = (_g1 - (int)1);
HXLINE(  66)				 ::Dynamic h = sec->handles->__get(this->checkPos);
HXLINE(  67)				this->checkPos++;
HXLINE(  68)				if ((this->checkPos >= sec->handles->length)) {
HXLINE(  68)					this->checkPos = (int)0;
            				}
HXLINE(  71)				float camX = camera->transform->world->self->_30;
HXLINE(  72)				float camY = camera->transform->world->self->_31;
HXLINE(  73)				float camZ = camera->transform->world->self->_32;
HXLINE(  74)				float hx = ( ( ::kha::arrays::Float32ArrayPrivate)( ::Dynamic( ::Dynamic(h->__Field(HX_("obj",f7,8f,54,00),hx::paccDynamic))->__Field(HX_("transform",6c,2d,93,45),hx::paccDynamic))->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) )->self.get((int)3);
HXLINE(  75)				float hy = ( ( ::kha::arrays::Float32ArrayPrivate)( ::Dynamic( ::Dynamic(h->__Field(HX_("obj",f7,8f,54,00),hx::paccDynamic))->__Field(HX_("transform",6c,2d,93,45),hx::paccDynamic))->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) )->self.get((int)7);
HXLINE(  76)				float hz = ( ( ::kha::arrays::Float32ArrayPrivate)( ::Dynamic( ::Dynamic(h->__Field(HX_("obj",f7,8f,54,00),hx::paccDynamic))->__Field(HX_("transform",6c,2d,93,45),hx::paccDynamic))->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) )->self.get((int)11);
HXLINE(  77)				float vx = (camX - hx);
HXDLIN(  77)				float vy = (camY - hy);
HXDLIN(  77)				float vz = (camZ - hz);
HXDLIN(  77)				float cameraDistance = ::Math_obj::sqrt((((vx * vx) + (vy * vy)) + (vz * vz)));
HXLINE(  78)				 ::kha::arrays::Float32ArrayPrivate dim = ( ( ::kha::arrays::Float32ArrayPrivate)( ::Dynamic(h->__Field(HX_("obj",f7,8f,54,00),hx::paccDynamic))->__Field(HX_("dimensions",4d,be,9f,dc),hx::paccDynamic)) );
HXLINE(  79)				if (hx::IsNotNull( dim )) {
HXLINE(  80)					float r = dim->self.get((int)0);
HXLINE(  81)					if ((dim->self.get((int)1) > r)) {
HXLINE(  81)						r = dim->self.get((int)1);
            					}
HXLINE(  82)					if ((dim->self.get((int)2) > r)) {
HXLINE(  82)						r = dim->self.get((int)2);
            					}
HXLINE(  83)					cameraDistance = (cameraDistance - r);
            				}
HXLINE(  88)				bool _hx_tmp;
HXDLIN(  88)				bool _hx_tmp1;
HXDLIN(  88)				if ((cameraDistance < this->loadDistance)) {
HXLINE(  88)					_hx_tmp1 = hx::IsNull( ( ( ::iron::object::MeshObject)(h->__Field(HX_("object",bf,7e,3f,15),hx::paccDynamic)) ) );
            				}
            				else {
HXLINE(  88)					_hx_tmp1 = false;
            				}
HXDLIN(  88)				if (_hx_tmp1) {
HXLINE(  88)					_hx_tmp = !(( (bool)(h->__Field(HX_("loading",7c,ce,f2,08),hx::paccDynamic)) ));
            				}
            				else {
HXLINE(  88)					_hx_tmp = false;
            				}
HXDLIN(  88)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::iron::data::SceneStream,_gthis, ::Dynamic,h) HXARGC(1)
            					void _hx_run( ::iron::object::Object object){
            						HX_STACKFRAME(&_hx_pos_aaba7c7334ee0e2d_91_update)
HXLINE(  92)						h->__SetField(HX_("object",bf,7e,3f,15),hx::TCast<  ::iron::object::MeshObject >::cast(object),hx::paccDynamic);
HXLINE(  93)						h->__SetField(HX_("loading",7c,ce,f2,08),false,hx::paccDynamic);
HXLINE(  94)						_gthis->loading--;
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(  89)					h->__SetField(HX_("loading",7c,ce,f2,08),true,hx::paccDynamic);
HXLINE(  90)					this->loading++;
HXLINE(  91)					::iron::Scene_obj::active->returnMeshObject(( (::String)(h->__Field(HX_("object_file",3c,97,ce,d2),hx::paccDynamic)) ),( (::String)(h->__Field(HX_("data_ref",7e,d1,bc,93),hx::paccDynamic)) ),( (::String)(h->__Field(HX_("sceneName",b7,0d,7f,9f),hx::paccDynamic)) ),( ( ::iron::data::Armature)(h->__Field(HX_("armature",79,a4,76,ec),hx::paccDynamic)) ),( (::Array< ::Dynamic>)(h->__Field(HX_("materials",ec,b5,0b,a0),hx::paccDynamic)) ),( ( ::iron::object::Object)(h->__Field(HX_("parent",2a,05,7e,ed),hx::paccDynamic)) ),h->__Field(HX_("obj",f7,8f,54,00),hx::paccDynamic), ::Dynamic(new _hx_Closure_0(_gthis,h)));
HXLINE(  96)					if ((this->loading >= this->loadMax)) {
HXLINE(  96)						return;
            					}
            				}
            				else {
HXLINE(  99)					bool _hx_tmp2;
HXDLIN(  99)					if ((cameraDistance > this->unloadDistance)) {
HXLINE(  99)						_hx_tmp2 = hx::IsNotNull( ( ( ::iron::object::MeshObject)(h->__Field(HX_("object",bf,7e,3f,15),hx::paccDynamic)) ) );
            					}
            					else {
HXLINE(  99)						_hx_tmp2 = false;
            					}
HXDLIN(  99)					if (_hx_tmp2) {
HXLINE( 100)						( ( ::iron::object::MeshObject)(h->__Field(HX_("object",bf,7e,3f,15),hx::paccDynamic)) )->remove();
HXLINE( 101)						if ((( ( ::iron::object::MeshObject)(h->__Field(HX_("object",bf,7e,3f,15),hx::paccDynamic)) )->data->refcount <= (int)0)) {
HXLINE( 102)							::iron::data::Data_obj::deleteMesh((( (::String)(h->__Field(HX_("object_file",3c,97,ce,d2),hx::paccDynamic)) ) + ( (::String)(h->__Field(HX_("data_ref",7e,d1,bc,93),hx::paccDynamic)) )));
            						}
HXLINE( 104)						h->__SetField(HX_("object",bf,7e,3f,15),null(),hx::paccDynamic);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SceneStream_obj,update,(void))


hx::ObjectPtr< SceneStream_obj > SceneStream_obj::__new() {
	hx::ObjectPtr< SceneStream_obj > __this = new SceneStream_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SceneStream_obj > SceneStream_obj::__alloc(hx::Ctx *_hx_ctx) {
	SceneStream_obj *__this = (SceneStream_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SceneStream_obj), true, "iron.data.SceneStream"));
	*(void **)__this = SceneStream_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SceneStream_obj::SceneStream_obj()
{
}

void SceneStream_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SceneStream);
	HX_MARK_MEMBER_NAME(checkMax,"checkMax");
	HX_MARK_MEMBER_NAME(checkPos,"checkPos");
	HX_MARK_MEMBER_NAME(loadMax,"loadMax");
	HX_MARK_MEMBER_NAME(loading,"loading");
	HX_MARK_MEMBER_NAME(loadDistance,"loadDistance");
	HX_MARK_MEMBER_NAME(unloadDistance,"unloadDistance");
	HX_MARK_MEMBER_NAME(sectors,"sectors");
	HX_MARK_END_CLASS();
}

void SceneStream_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(checkMax,"checkMax");
	HX_VISIT_MEMBER_NAME(checkPos,"checkPos");
	HX_VISIT_MEMBER_NAME(loadMax,"loadMax");
	HX_VISIT_MEMBER_NAME(loading,"loading");
	HX_VISIT_MEMBER_NAME(loadDistance,"loadDistance");
	HX_VISIT_MEMBER_NAME(unloadDistance,"unloadDistance");
	HX_VISIT_MEMBER_NAME(sectors,"sectors");
}

hx::Val SceneStream_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadMax") ) { return hx::Val( loadMax ); }
		if (HX_FIELD_EQ(inName,"loading") ) { return hx::Val( loading ); }
		if (HX_FIELD_EQ(inName,"sectors") ) { return hx::Val( sectors ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"checkMax") ) { return hx::Val( checkMax ); }
		if (HX_FIELD_EQ(inName,"checkPos") ) { return hx::Val( checkPos ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sceneTotal") ) { return hx::Val( sceneTotal_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadDistance") ) { return hx::Val( loadDistance ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"unloadDistance") ) { return hx::Val( unloadDistance ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SceneStream_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"loadMax") ) { loadMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loading") ) { loading=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sectors") ) { sectors=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"checkMax") ) { checkMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checkPos") ) { checkPos=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadDistance") ) { loadDistance=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"unloadDistance") ) { unloadDistance=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SceneStream_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("checkMax","\xbc","\xd6","\xe5","\xac"));
	outFields->push(HX_HCSTRING("checkPos","\xac","\x29","\xe8","\xac"));
	outFields->push(HX_HCSTRING("loadMax","\x1e","\x84","\xdd","\x08"));
	outFields->push(HX_HCSTRING("loading","\x7c","\xce","\xf2","\x08"));
	outFields->push(HX_HCSTRING("loadDistance","\x7b","\x7f","\x62","\x25"));
	outFields->push(HX_HCSTRING("unloadDistance","\x54","\x87","\x4f","\x17"));
	outFields->push(HX_HCSTRING("sectors","\x0d","\x96","\xdc","\x5d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SceneStream_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(SceneStream_obj,checkMax),HX_HCSTRING("checkMax","\xbc","\xd6","\xe5","\xac")},
	{hx::fsInt,(int)offsetof(SceneStream_obj,checkPos),HX_HCSTRING("checkPos","\xac","\x29","\xe8","\xac")},
	{hx::fsInt,(int)offsetof(SceneStream_obj,loadMax),HX_HCSTRING("loadMax","\x1e","\x84","\xdd","\x08")},
	{hx::fsInt,(int)offsetof(SceneStream_obj,loading),HX_HCSTRING("loading","\x7c","\xce","\xf2","\x08")},
	{hx::fsInt,(int)offsetof(SceneStream_obj,loadDistance),HX_HCSTRING("loadDistance","\x7b","\x7f","\x62","\x25")},
	{hx::fsInt,(int)offsetof(SceneStream_obj,unloadDistance),HX_HCSTRING("unloadDistance","\x54","\x87","\x4f","\x17")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(SceneStream_obj,sectors),HX_HCSTRING("sectors","\x0d","\x96","\xdc","\x5d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SceneStream_obj_sStaticStorageInfo = 0;
#endif

static ::String SceneStream_obj_sMemberFields[] = {
	HX_HCSTRING("checkMax","\xbc","\xd6","\xe5","\xac"),
	HX_HCSTRING("checkPos","\xac","\x29","\xe8","\xac"),
	HX_HCSTRING("loadMax","\x1e","\x84","\xdd","\x08"),
	HX_HCSTRING("loading","\x7c","\xce","\xf2","\x08"),
	HX_HCSTRING("loadDistance","\x7b","\x7f","\x62","\x25"),
	HX_HCSTRING("unloadDistance","\x54","\x87","\x4f","\x17"),
	HX_HCSTRING("sectors","\x0d","\x96","\xdc","\x5d"),
	HX_HCSTRING("sceneTotal","\xd8","\xb6","\x5a","\x6d"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void SceneStream_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SceneStream_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SceneStream_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SceneStream_obj::__mClass,"__mClass");
};

#endif

hx::Class SceneStream_obj::__mClass;

void SceneStream_obj::__register()
{
	hx::Object *dummy = new SceneStream_obj;
	SceneStream_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.data.SceneStream","\x6e","\x1c","\x1f","\xee");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SceneStream_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SceneStream_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SceneStream_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SceneStream_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SceneStream_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SceneStream_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
