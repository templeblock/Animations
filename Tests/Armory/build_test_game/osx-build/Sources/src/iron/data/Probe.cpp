// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_Probe
#include <iron/data/Probe.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_system_ArmPack
#include <iron/system/ArmPack.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <kha/internal/BytesBlob.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_77bd9c7931c84973_139_new,"iron.data.Probe","new",0xed6bc924,"iron.data.Probe.new","iron/data/WorldData.hx",139,0xd6d38740)
HX_DEFINE_STACK_FRAME(_hx_pos_77bd9c7931c84973_144_new,"iron.data.Probe","new",0xed6bc924,"iron.data.Probe.new","iron/data/WorldData.hx",144,0xd6d38740)
static const int _hx_array_data_ea47a732_4[] = {
	(int)0,
};
HX_DEFINE_STACK_FRAME(_hx_pos_77bd9c7931c84973_154_new,"iron.data.Probe","new",0xed6bc924,"iron.data.Probe.new","iron/data/WorldData.hx",154,0xd6d38740)
HX_DEFINE_STACK_FRAME(_hx_pos_77bd9c7931c84973_136_new,"iron.data.Probe","new",0xed6bc924,"iron.data.Probe.new","iron/data/WorldData.hx",136,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_77bd9c7931c84973_170_mipsSet,"iron.data.Probe","mipsSet",0x783df347,"iron.data.Probe.mipsSet","iron/data/WorldData.hx",170,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_77bd9c7931c84973_183_setIrradiance,"iron.data.Probe","setIrradiance",0x4cd990b2,"iron.data.Probe.setIrradiance","iron/data/WorldData.hx",183,0xd6d38740)
static const float _hx_array_data_ea47a732_11[] = {
	0.775966,1.167610,1.498638,0.133694,0.215281,0.056659,-0.022268,-0.019376,-0.010651,0.000279,0.000185,0.0,0.0,-0.000393,-0.000775,0.010973,0.027268,0.043918,0.085267,0.073670,0.038877,0.0,0.0,0.0,0.135177,0.115614,0.060794,
};
HX_LOCAL_STACK_FRAME(_hx_pos_77bd9c7931c84973_192_setIrradiance,"iron.data.Probe","setIrradiance",0x4cd990b2,"iron.data.Probe.setIrradiance","iron/data/WorldData.hx",192,0xd6d38740)
namespace iron{
namespace data{

void Probe_obj::__construct( ::Dynamic raw, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_2, ::iron::data::Probe,_gthis, ::Dynamic,raw, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::kha::arrays::Float32ArrayPrivate irr){
            			HX_STACKFRAME(&_hx_pos_77bd9c7931c84973_139_new)
HXLINE( 140)			_gthis->irradiance = irr;
HXLINE( 142)			if (hx::IsNotNull( ( (::String)(raw->__Field(HX_("radiance",c3,4f,4d,eb),hx::paccDynamic)) ) )) {
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_1, ::iron::data::Probe,_gthis, ::Dynamic,raw, ::Dynamic,done) HXARGC(1)
            				void _hx_run( ::kha::Image rad){
            					HX_STACKFRAME(&_hx_pos_77bd9c7931c84973_144_new)
HXLINE( 146)					_gthis->radiance = rad;
HXLINE( 147)					::Array< ::Dynamic> radianceMipmaps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 148)					while(hx::IsLess( radianceMipmaps->length,raw->__Field(HX_("radiance_mipmaps",2f,4e,a3,5c),hx::paccDynamic) )){
HXLINE( 148)						radianceMipmaps->push(null());
            					}
HXLINE( 149)					::String raw1 = ( (::String)(raw->__Field(HX_("radiance",c3,4f,4d,eb),hx::paccDynamic)) );
HXDLIN( 149)					::String ext = raw1.substring((( (::String)(raw->__Field(HX_("radiance",c3,4f,4d,eb),hx::paccDynamic)) ).length - (int)4),null());
HXLINE( 150)					::String raw2 = ( (::String)(raw->__Field(HX_("radiance",c3,4f,4d,eb),hx::paccDynamic)) );
HXDLIN( 150)					::String base = raw2.substring((int)0,(( (::String)(raw->__Field(HX_("radiance",c3,4f,4d,eb),hx::paccDynamic)) ).length - (int)4));
HXLINE( 152)					::Array< int > mipsLoaded = ::Array_obj< int >::fromData( _hx_array_data_ea47a732_4,1);
HXLINE( 153)					{
HXLINE( 153)						int _g1 = (int)0;
HXDLIN( 153)						int _g = ( (int)(raw->__Field(HX_("radiance_mipmaps",2f,4e,a3,5c),hx::paccDynamic)) );
HXDLIN( 153)						while((_g1 < _g)){
            							HX_BEGIN_LOCAL_FUNC_S6(hx::LocalFunc,_hx_Closure_0, ::iron::data::Probe,_gthis,::Array< int >,mipsLoaded, ::Dynamic,raw, ::Dynamic,done,int,i,::Array< ::Dynamic>,radianceMipmaps) HXARGC(1)
            							void _hx_run( ::kha::Image mipimg){
            								HX_STACKFRAME(&_hx_pos_77bd9c7931c84973_154_new)
HXLINE( 155)								radianceMipmaps[i] = mipimg;
HXLINE( 156)								mipsLoaded[(int)0]++;
HXLINE( 158)								if (hx::IsEq( mipsLoaded->__get((int)0),raw->__Field(HX_("radiance_mipmaps",2f,4e,a3,5c),hx::paccDynamic) )) {
HXLINE( 159)									_gthis->radiance->setMipmaps(radianceMipmaps);
HXLINE( 160)									_gthis->mipsSet(done);
            								}
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE( 153)							_g1 = (_g1 + (int)1);
HXDLIN( 153)							int i = (_g1 - (int)1);
HXLINE( 154)							::iron::data::Data_obj::getImage((((base + HX_("_",5f,00,00,00)) + i) + ext), ::Dynamic(new _hx_Closure_0(_gthis,mipsLoaded,raw,done,i,radianceMipmaps)),true,null());
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 144)				::iron::data::Data_obj::getImage(( (::String)(raw->__Field(HX_("radiance",c3,4f,4d,eb),hx::paccDynamic)) ), ::Dynamic(new _hx_Closure_1(_gthis,raw,done)),null(),null());
            			}
            			else {
HXLINE( 166)				_gthis->mipsSet(done);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_77bd9c7931c84973_136_new)
HXDLIN( 136)		 ::iron::data::Probe _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 137)		this->raw = raw;
HXLINE( 139)		this->setIrradiance( ::Dynamic(new _hx_Closure_2(_gthis,raw,done)));
            	}

Dynamic Probe_obj::__CreateEmpty() { return new Probe_obj; }

void *Probe_obj::_hx_vtable = 0;

Dynamic Probe_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Probe_obj > _hx_result = new Probe_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Probe_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x26fcb096;
}

void Probe_obj::mipsSet( ::Dynamic done){
            	HX_GC_STACKFRAME(&_hx_pos_77bd9c7931c84973_170_mipsSet)
HXLINE( 172)		float _hx_tmp = ( ( ::kha::arrays::Float32ArrayPrivate)(this->raw->__Field(HX_("volume",da,29,53,5f),hx::paccDynamic)) )->self.get((int)0);
HXDLIN( 172)		float _hx_tmp1 = ( ( ::kha::arrays::Float32ArrayPrivate)(this->raw->__Field(HX_("volume",da,29,53,5f),hx::paccDynamic)) )->self.get((int)1);
HXDLIN( 172)		this->volume =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,( ( ::kha::arrays::Float32ArrayPrivate)(this->raw->__Field(HX_("volume",da,29,53,5f),hx::paccDynamic)) )->self.get((int)2),null());
HXLINE( 173)		float _hx_tmp2 = ( ( ::kha::arrays::Float32ArrayPrivate)(this->raw->__Field(HX_("volume_center",da,5c,9b,be),hx::paccDynamic)) )->self.get((int)0);
HXDLIN( 173)		float _hx_tmp3 = ( ( ::kha::arrays::Float32ArrayPrivate)(this->raw->__Field(HX_("volume_center",da,5c,9b,be),hx::paccDynamic)) )->self.get((int)1);
HXDLIN( 173)		this->volumeCenter =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_hx_tmp2,_hx_tmp3,( ( ::kha::arrays::Float32ArrayPrivate)(this->raw->__Field(HX_("volume_center",da,5c,9b,be),hx::paccDynamic)) )->self.get((int)2),null());
HXLINE( 175)		float _hx_tmp4 = (this->volumeCenter->x - this->volume->x);
HXDLIN( 175)		float _hx_tmp5 = (this->volumeCenter->y - this->volume->y);
HXDLIN( 175)		this->volumeMin =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_hx_tmp4,_hx_tmp5,(this->volumeCenter->z - this->volume->z),null());
HXLINE( 176)		float _hx_tmp6 = (this->volumeCenter->x + this->volume->x);
HXDLIN( 176)		float _hx_tmp7 = (this->volumeCenter->y + this->volume->y);
HXDLIN( 176)		this->volumeMax =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_hx_tmp6,_hx_tmp7,(this->volumeCenter->z + this->volume->z),null());
HXLINE( 178)		done(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Probe_obj,mipsSet,(void))

void Probe_obj::setIrradiance( ::Dynamic done){
            	HX_GC_STACKFRAME(&_hx_pos_77bd9c7931c84973_183_setIrradiance)
HXDLIN( 183)		if ((( (::String)(this->raw->__Field(HX_("irradiance",ac,3c,59,b9),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 185)			::Array< float > ar = ::Array_obj< float >::fromData( _hx_array_data_ea47a732_11,27);
HXLINE( 186)			 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,ar->length);
HXDLIN( 186)			 ::kha::arrays::Float32ArrayPrivate _hx_far = this1;
HXLINE( 187)			{
HXLINE( 187)				int _g1 = (int)0;
HXDLIN( 187)				int _g = _hx_far->self.length();
HXDLIN( 187)				while((_g1 < _g)){
HXLINE( 187)					_g1 = (_g1 + (int)1);
HXDLIN( 187)					int i = (_g1 - (int)1);
HXDLIN( 187)					 float32array far1 = _hx_far->self;
HXDLIN( 187)					far1.set(i,ar->__get(i));
            				}
            			}
HXLINE( 188)			done(_hx_far);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,ext, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::kha::internal::BytesBlob b){
            				HX_GC_STACKFRAME(&_hx_pos_77bd9c7931c84973_192_setIrradiance)
HXLINE( 193)				 ::Dynamic irradianceParsed;
HXDLIN( 193)				if ((ext == HX_("",00,00,00,00))) {
HXLINE( 193)					irradianceParsed =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,b->toString())->parseRec();
            				}
            				else {
HXLINE( 195)					 ::haxe::io::BytesInput i1 =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,b->toBytes(),null(),null());
HXDLIN( 195)					i1->set_bigEndian(true);
HXLINE( 193)					irradianceParsed = ::iron::_hx_system::ArmPack_obj::read(i1);
            				}
HXLINE( 196)				 ::kha::arrays::Float32ArrayPrivate this2 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,(int)28);
HXDLIN( 196)				 ::kha::arrays::Float32ArrayPrivate irr = this2;
HXLINE( 197)				{
HXLINE( 197)					int _g2 = (int)0;
HXDLIN( 197)					while((_g2 < (int)27)){
HXLINE( 197)						_g2 = (_g2 + (int)1);
HXDLIN( 197)						int i2 = (_g2 - (int)1);
HXDLIN( 197)						{
HXLINE( 197)							float value = ( ( ::kha::arrays::Float32ArrayPrivate)(irradianceParsed->__Field(HX_("irradiance",ac,3c,59,b9),hx::paccDynamic)) )->self.get(i2);
HXDLIN( 197)							irr->self.set(i2,value);
            						}
            					}
            				}
HXLINE( 198)				irr->self.set((int)27,((Float)0.0));
HXLINE( 199)				done(irr);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 191)			::String ext;
HXDLIN( 191)			if (::StringTools_obj::endsWith(( (::String)(this->raw->__Field(HX_("irradiance",ac,3c,59,b9),hx::paccDynamic)) ),HX_(".json",56,f1,d6,c2))) {
HXLINE( 191)				ext = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 191)				ext = HX_(".arm",ee,ce,b1,1e);
            			}
HXLINE( 192)			::iron::data::Data_obj::getBlob((( (::String)(this->raw->__Field(HX_("irradiance",ac,3c,59,b9),hx::paccDynamic)) ) + ext), ::Dynamic(new _hx_Closure_0(ext,done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Probe_obj,setIrradiance,(void))


hx::ObjectPtr< Probe_obj > Probe_obj::__new( ::Dynamic raw, ::Dynamic done) {
	hx::ObjectPtr< Probe_obj > __this = new Probe_obj();
	__this->__construct(raw,done);
	return __this;
}

hx::ObjectPtr< Probe_obj > Probe_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic raw, ::Dynamic done) {
	Probe_obj *__this = (Probe_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Probe_obj), true, "iron.data.Probe"));
	*(void **)__this = Probe_obj::_hx_vtable;
	__this->__construct(raw,done);
	return __this;
}

Probe_obj::Probe_obj()
{
}

void Probe_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Probe);
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(radiance,"radiance");
	HX_MARK_MEMBER_NAME(irradiance,"irradiance");
	HX_MARK_MEMBER_NAME(volume,"volume");
	HX_MARK_MEMBER_NAME(volumeCenter,"volumeCenter");
	HX_MARK_MEMBER_NAME(volumeMin,"volumeMin");
	HX_MARK_MEMBER_NAME(volumeMax,"volumeMax");
	HX_MARK_END_CLASS();
}

void Probe_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(radiance,"radiance");
	HX_VISIT_MEMBER_NAME(irradiance,"irradiance");
	HX_VISIT_MEMBER_NAME(volume,"volume");
	HX_VISIT_MEMBER_NAME(volumeCenter,"volumeCenter");
	HX_VISIT_MEMBER_NAME(volumeMin,"volumeMin");
	HX_VISIT_MEMBER_NAME(volumeMax,"volumeMax");
}

hx::Val Probe_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"volume") ) { return hx::Val( volume ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mipsSet") ) { return hx::Val( mipsSet_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"radiance") ) { return hx::Val( radiance ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"volumeMin") ) { return hx::Val( volumeMin ); }
		if (HX_FIELD_EQ(inName,"volumeMax") ) { return hx::Val( volumeMax ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"irradiance") ) { return hx::Val( irradiance ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"volumeCenter") ) { return hx::Val( volumeCenter ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setIrradiance") ) { return hx::Val( setIrradiance_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Probe_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"volume") ) { volume=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"radiance") ) { radiance=inValue.Cast<  ::kha::Image >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"volumeMin") ) { volumeMin=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volumeMax") ) { volumeMax=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"irradiance") ) { irradiance=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"volumeCenter") ) { volumeCenter=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Probe_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"));
	outFields->push(HX_HCSTRING("radiance","\xc3","\x4f","\x4d","\xeb"));
	outFields->push(HX_HCSTRING("irradiance","\xac","\x3c","\x59","\xb9"));
	outFields->push(HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"));
	outFields->push(HX_HCSTRING("volumeCenter","\x4f","\xa3","\x4e","\xb3"));
	outFields->push(HX_HCSTRING("volumeMin","\xd8","\xc3","\x9f","\x60"));
	outFields->push(HX_HCSTRING("volumeMax","\xea","\xbc","\x9f","\x60"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Probe_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Probe_obj,raw),HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00")},
	{hx::fsObject /*::kha::Image*/ ,(int)offsetof(Probe_obj,radiance),HX_HCSTRING("radiance","\xc3","\x4f","\x4d","\xeb")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Probe_obj,irradiance),HX_HCSTRING("irradiance","\xac","\x3c","\x59","\xb9")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Probe_obj,volume),HX_HCSTRING("volume","\xda","\x29","\x53","\x5f")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Probe_obj,volumeCenter),HX_HCSTRING("volumeCenter","\x4f","\xa3","\x4e","\xb3")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Probe_obj,volumeMin),HX_HCSTRING("volumeMin","\xd8","\xc3","\x9f","\x60")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Probe_obj,volumeMax),HX_HCSTRING("volumeMax","\xea","\xbc","\x9f","\x60")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Probe_obj_sStaticStorageInfo = 0;
#endif

static ::String Probe_obj_sMemberFields[] = {
	HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"),
	HX_HCSTRING("radiance","\xc3","\x4f","\x4d","\xeb"),
	HX_HCSTRING("irradiance","\xac","\x3c","\x59","\xb9"),
	HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"),
	HX_HCSTRING("volumeCenter","\x4f","\xa3","\x4e","\xb3"),
	HX_HCSTRING("volumeMin","\xd8","\xc3","\x9f","\x60"),
	HX_HCSTRING("volumeMax","\xea","\xbc","\x9f","\x60"),
	HX_HCSTRING("mipsSet","\x83","\x48","\x40","\x79"),
	HX_HCSTRING("setIrradiance","\xee","\x7a","\xd1","\x5a"),
	::String(null()) };

static void Probe_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Probe_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Probe_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Probe_obj::__mClass,"__mClass");
};

#endif

hx::Class Probe_obj::__mClass;

void Probe_obj::__register()
{
	hx::Object *dummy = new Probe_obj;
	Probe_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.data.Probe","\x32","\xa7","\x47","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Probe_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Probe_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Probe_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Probe_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Probe_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Probe_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
