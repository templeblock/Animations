// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_iron_RenderPath
#include <iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_data_Bucket
#include <iron/data/Bucket.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_Geometry
#include <iron/data/Geometry.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_data_MeshBatch
#include <iron/data/MeshBatch.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_data_ShaderContext
#include <iron/data/ShaderContext.h>
#endif
#ifndef INCLUDED_iron_data_ShaderData
#include <iron/data/ShaderData.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_LampObject
#include <iron/object/LampObject.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_83d7be08c6e85d14_16_new,"iron.data.MeshBatch","new",0x57bdfc01,"iron.data.MeshBatch.new","iron/data/MeshBatch.hx",16,0xa201aaef)
HX_LOCAL_STACK_FRAME(_hx_pos_83d7be08c6e85d14_26_remove,"iron.data.MeshBatch","remove",0x81f6ab43,"iron.data.MeshBatch.remove","iron/data/MeshBatch.hx",26,0xa201aaef)
HX_LOCAL_STACK_FRAME(_hx_pos_83d7be08c6e85d14_38_addMesh,"iron.data.MeshBatch","addMesh",0xc7759ccf,"iron.data.MeshBatch.addMesh","iron/data/MeshBatch.hx",38,0xa201aaef)
HX_LOCAL_STACK_FRAME(_hx_pos_83d7be08c6e85d14_53_removeMesh,"iron.data.MeshBatch","removeMesh",0x01337ed0,"iron.data.MeshBatch.removeMesh","iron/data/MeshBatch.hx",53,0xa201aaef)
HX_LOCAL_STACK_FRAME(_hx_pos_83d7be08c6e85d14_60_render,"iron.data.MeshBatch","render",0x82977a55,"iron.data.MeshBatch.render","iron/data/MeshBatch.hx",60,0xa201aaef)
HX_LOCAL_STACK_FRAME(_hx_pos_83d7be08c6e85d14_30_isLod,"iron.data.MeshBatch","isLod",0x68559498,"iron.data.MeshBatch.isLod","iron/data/MeshBatch.hx",30,0xa201aaef)
HX_LOCAL_STACK_FRAME(_hx_pos_83d7be08c6e85d14_35_isBatchable,"iron.data.MeshBatch","isBatchable",0xe20ba5ab,"iron.data.MeshBatch.isBatchable","iron/data/MeshBatch.hx",35,0xa201aaef)
namespace iron{
namespace data{

void MeshBatch_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_83d7be08c6e85d14_16_new)
HXLINE(  19)		this->nonBatched = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  18)		this->buckets =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}

Dynamic MeshBatch_obj::__CreateEmpty() { return new MeshBatch_obj; }

void *MeshBatch_obj::_hx_vtable = 0;

Dynamic MeshBatch_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MeshBatch_obj > _hx_result = new MeshBatch_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MeshBatch_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x502065d7;
}

void MeshBatch_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_83d7be08c6e85d14_26_remove)
HXDLIN(  26)		 ::Dynamic b = this->buckets->iterator();
HXDLIN(  26)		while(( (bool)(b->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN(  26)			 ::iron::data::Bucket b1 = ( ( ::iron::data::Bucket)(b->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  26)			this->remove();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshBatch_obj,remove,(void))

void MeshBatch_obj::addMesh( ::iron::object::MeshObject m){
            	HX_GC_STACKFRAME(&_hx_pos_83d7be08c6e85d14_38_addMesh)
HXLINE(  39)		if (!(::iron::data::MeshBatch_obj::isBatchable(m))) {
HXLINE(  40)			this->nonBatched->push(m);
HXLINE(  41)			return;
            		}
HXLINE(  44)		 ::iron::data::ShaderData shader = ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(m->materials,(int)0)) )->shader;
HXLINE(  45)		 ::iron::data::Bucket b = this->buckets->get(shader).StaticCast<  ::iron::data::Bucket >();
HXLINE(  46)		if (hx::IsNull( b )) {
HXLINE(  47)			b =  ::iron::data::Bucket_obj::__alloc( HX_CTX ,shader);
HXLINE(  48)			this->buckets->set(shader,b);
            		}
HXLINE(  50)		b->addMesh(m);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshBatch_obj,addMesh,(void))

void MeshBatch_obj::removeMesh( ::iron::object::MeshObject m){
            	HX_STACKFRAME(&_hx_pos_83d7be08c6e85d14_53_removeMesh)
HXLINE(  54)		 ::iron::data::ShaderData shader = ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(m->materials,(int)0)) )->shader;
HXLINE(  55)		 ::iron::data::Bucket b = this->buckets->get(shader).StaticCast<  ::iron::data::Bucket >();
HXLINE(  56)		if (hx::IsNotNull( b )) {
HXLINE(  56)			b->removeMesh(m);
            		}
            		else {
HXLINE(  57)			this->nonBatched->remove(m);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshBatch_obj,removeMesh,(void))

void MeshBatch_obj::render(::Dynamic g,::String context, ::iron::object::CameraObject camera, ::iron::object::LampObject lamp,::Array< ::String > bindParams){
            	HX_STACKFRAME(&_hx_pos_83d7be08c6e85d14_60_render)
HXLINE(  62)		{
HXLINE(  62)			 ::Dynamic b = this->buckets->iterator();
HXDLIN(  62)			while(( (bool)(b->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  62)				 ::iron::data::Bucket b1 = ( ( ::iron::data::Bucket)(b->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  64)				if (!(b1->batched)) {
HXLINE(  64)					b1->batch();
            				}
HXLINE(  66)				bool _hx_tmp;
HXDLIN(  66)				if ((b1->meshes->length > (int)0)) {
HXLINE(  66)					_hx_tmp = b1->meshes->__get((int)0).StaticCast<  ::iron::object::MeshObject >()->cullMaterial(context);
            				}
            				else {
HXLINE(  66)					_hx_tmp = false;
            				}
HXDLIN(  66)				if (_hx_tmp) {
HXLINE(  66)					continue;
            				}
HXLINE(  68)				::kha::graphics4::Graphics_obj::setPipeline(g,b1->shader->getContext(context)->pipeState);
HXLINE(  73)				::kha::graphics4::Graphics_obj::setVertexBuffer(g,b1->vertexBuffer);
HXLINE(  75)				::kha::graphics4::Graphics_obj::setIndexBuffer(g,b1->indexBuffer);
HXLINE(  78)				::iron::RenderPath_obj::sortMeshes(b1->meshes,camera);
HXLINE(  80)				{
HXLINE(  80)					int _g = (int)0;
HXDLIN(  80)					::Array< ::Dynamic> _g1 = b1->meshes;
HXDLIN(  80)					while((_g < _g1->length)){
HXLINE(  80)						 ::iron::object::MeshObject m = _g1->__get(_g).StaticCast<  ::iron::object::MeshObject >();
HXDLIN(  80)						_g = (_g + (int)1);
HXLINE(  81)						m->renderBatch(g,context,camera,lamp,bindParams,m->data->start,m->data->count);
            					}
            				}
            			}
            		}
HXLINE(  92)		{
HXLINE(  92)			int _g2 = (int)0;
HXDLIN(  92)			::Array< ::Dynamic> _g11 = this->nonBatched;
HXDLIN(  92)			while((_g2 < _g11->length)){
HXLINE(  92)				 ::iron::object::MeshObject m1 = _g11->__get(_g2).StaticCast<  ::iron::object::MeshObject >();
HXDLIN(  92)				_g2 = (_g2 + (int)1);
HXLINE(  93)				m1->render(g,context,camera,lamp,bindParams);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(MeshBatch_obj,render,(void))

bool MeshBatch_obj::isLod( ::iron::object::MeshObject m){
            	HX_STACKFRAME(&_hx_pos_83d7be08c6e85d14_30_isLod)
HXDLIN(  30)		bool _hx_tmp;
HXDLIN(  30)		if (hx::IsNotNull( m->raw )) {
HXDLIN(  30)			_hx_tmp = hx::IsNotNull( ( (::Array< ::Dynamic>)(m->raw->__Field(HX_("lods",d2,9c,b7,47),hx::paccDynamic)) ) );
            		}
            		else {
HXDLIN(  30)			_hx_tmp = false;
            		}
HXDLIN(  30)		if (_hx_tmp) {
HXDLIN(  30)			return (( (::Array< ::Dynamic>)(m->raw->__Field(HX_("lods",d2,9c,b7,47),hx::paccDynamic)) )->length > (int)0);
            		}
            		else {
HXDLIN(  30)			return false;
            		}
HXDLIN(  30)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MeshBatch_obj,isLod,return )

bool MeshBatch_obj::isBatchable( ::iron::object::MeshObject m){
            	HX_STACKFRAME(&_hx_pos_83d7be08c6e85d14_35_isBatchable)
HXDLIN(  35)		bool _hx_tmp;
HXDLIN(  35)		bool _hx_tmp1;
HXDLIN(  35)		bool _hx_tmp2;
HXDLIN(  35)		bool _hx_tmp3;
HXDLIN(  35)		if (!(m->data->isSkinned)) {
HXDLIN(  35)			_hx_tmp3 = hx::IsNull( m->materials );
            		}
            		else {
HXDLIN(  35)			_hx_tmp3 = true;
            		}
HXDLIN(  35)		if (!(_hx_tmp3)) {
HXDLIN(  35)			_hx_tmp2 = (m->materials->length > (int)1);
            		}
            		else {
HXDLIN(  35)			_hx_tmp2 = true;
            		}
HXDLIN(  35)		if (!(_hx_tmp2)) {
HXDLIN(  35)			_hx_tmp1 = ::iron::data::MeshBatch_obj::isLod(m);
            		}
            		else {
HXDLIN(  35)			_hx_tmp1 = true;
            		}
HXDLIN(  35)		if (!(_hx_tmp1)) {
HXDLIN(  35)			_hx_tmp = m->data->geom->instanced;
            		}
            		else {
HXDLIN(  35)			_hx_tmp = true;
            		}
HXDLIN(  35)		return !(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MeshBatch_obj,isBatchable,return )


hx::ObjectPtr< MeshBatch_obj > MeshBatch_obj::__new() {
	hx::ObjectPtr< MeshBatch_obj > __this = new MeshBatch_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< MeshBatch_obj > MeshBatch_obj::__alloc(hx::Ctx *_hx_ctx) {
	MeshBatch_obj *__this = (MeshBatch_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MeshBatch_obj), true, "iron.data.MeshBatch"));
	*(void **)__this = MeshBatch_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MeshBatch_obj::MeshBatch_obj()
{
}

void MeshBatch_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MeshBatch);
	HX_MARK_MEMBER_NAME(buckets,"buckets");
	HX_MARK_MEMBER_NAME(nonBatched,"nonBatched");
	HX_MARK_END_CLASS();
}

void MeshBatch_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buckets,"buckets");
	HX_VISIT_MEMBER_NAME(nonBatched,"nonBatched");
}

hx::Val MeshBatch_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"buckets") ) { return hx::Val( buckets ); }
		if (HX_FIELD_EQ(inName,"addMesh") ) { return hx::Val( addMesh_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nonBatched") ) { return hx::Val( nonBatched ); }
		if (HX_FIELD_EQ(inName,"removeMesh") ) { return hx::Val( removeMesh_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MeshBatch_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isLod") ) { outValue = isLod_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isBatchable") ) { outValue = isBatchable_dyn(); return true; }
	}
	return false;
}

hx::Val MeshBatch_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"buckets") ) { buckets=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nonBatched") ) { nonBatched=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MeshBatch_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buckets","\xc9","\xf8","\xaa","\xfa"));
	outFields->push(HX_HCSTRING("nonBatched","\x0c","\x5d","\xba","\x37"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MeshBatch_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(MeshBatch_obj,buckets),HX_HCSTRING("buckets","\xc9","\xf8","\xaa","\xfa")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MeshBatch_obj,nonBatched),HX_HCSTRING("nonBatched","\x0c","\x5d","\xba","\x37")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MeshBatch_obj_sStaticStorageInfo = 0;
#endif

static ::String MeshBatch_obj_sMemberFields[] = {
	HX_HCSTRING("buckets","\xc9","\xf8","\xaa","\xfa"),
	HX_HCSTRING("nonBatched","\x0c","\x5d","\xba","\x37"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("addMesh","\xae","\x8c","\x96","\x84"),
	HX_HCSTRING("removeMesh","\x51","\x84","\x78","\xc5"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null()) };

static void MeshBatch_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MeshBatch_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MeshBatch_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MeshBatch_obj::__mClass,"__mClass");
};

#endif

hx::Class MeshBatch_obj::__mClass;

static ::String MeshBatch_obj_sStaticFields[] = {
	HX_HCSTRING("isLod","\xb7","\x7e","\x50","\xc1"),
	HX_HCSTRING("isBatchable","\x0a","\x71","\x2b","\xda"),
	::String(null())
};

void MeshBatch_obj::__register()
{
	hx::Object *dummy = new MeshBatch_obj;
	MeshBatch_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.data.MeshBatch","\x8f","\xe7","\x35","\x94");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MeshBatch_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MeshBatch_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MeshBatch_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MeshBatch_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MeshBatch_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MeshBatch_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MeshBatch_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MeshBatch_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
