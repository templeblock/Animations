// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_data_Armature
#include <iron/data/Armature.h>
#endif
#ifndef INCLUDED_iron_data_Geometry
#include <iron/data/Geometry.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexElement
#include <kha/graphics4/VertexElement.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0883a6c134c4202b_14_new,"iron.data.Geometry","new",0x7cdf7ce2,"iron.data.Geometry.new","iron/data/Geometry.hx",14,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_105_delete,"iron.data.Geometry","delete",0x1dce50e9,"iron.data.Geometry.delete","iron/data/Geometry.hx",105,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_127_applyScale,"iron.data.Geometry","applyScale",0x0f4011fa,"iron.data.Geometry.applyScale","iron/data/Geometry.hx",127,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_147_setupInstanced,"iron.data.Geometry","setupInstanced",0x40e5fbb0,"iron.data.Geometry.setupInstanced","iron/data/Geometry.hx",147,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_175_sortInstanced,"iron.data.Geometry","sortInstanced",0xe27d82f3,"iron.data.Geometry.sortInstanced","iron/data/Geometry.hx",175,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_167_sortInstanced,"iron.data.Geometry","sortInstanced",0xe27d82f3,"iron.data.Geometry.sortInstanced","iron/data/Geometry.hx",167,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_189_copyVertices,"iron.data.Geometry","copyVertices",0x2e5e280c,"iron.data.Geometry.copyVertices","iron/data/Geometry.hx",189,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_255_getVerticesLength,"iron.data.Geometry","getVerticesLength",0xd4c704f7,"iron.data.Geometry.getVerticesLength","iron/data/Geometry.hx",255,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_284_hasAttrib,"iron.data.Geometry","hasAttrib",0xa1809446,"iron.data.Geometry.hasAttrib","iron/data/Geometry.hx",284,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_289_get,"iron.data.Geometry","get",0x7cda2d18,"iron.data.Geometry.get","iron/data/Geometry.hx",289,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_314_build,"iron.data.Geometry","build",0x331c2c30,"iron.data.Geometry.build","iron/data/Geometry.hx",314,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_386_getVerticesCount,"iron.data.Geometry","getVerticesCount",0x82e141de,"iron.data.Geometry.getVerticesCount","iron/data/Geometry.hx",386,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_391_addArmature,"iron.data.Geometry","addArmature",0xee81da3c,"iron.data.Geometry.addArmature","iron/data/Geometry.hx",391,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_396_addAction,"iron.data.Geometry","addAction",0x4ee56ab9,"iron.data.Geometry.addAction","iron/data/Geometry.hx",396,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_423_initSkeletonTransforms,"iron.data.Geometry","initSkeletonTransforms",0xa88c79a2,"iron.data.Geometry.initSkeletonTransforms","iron/data/Geometry.hx",423,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_450_calculateAABB,"iron.data.Geometry","calculateAABB",0x362dce08,"iron.data.Geometry.calculateAABB","iron/data/Geometry.hx",450,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_114_getVertexStructure,"iron.data.Geometry","getVertexStructure",0xc54e21f7,"iron.data.Geometry.getVertexStructure","iron/data/Geometry.hx",114,0x3ca6746e)
HX_LOCAL_STACK_FRAME(_hx_pos_0883a6c134c4202b_202_buildVertices,"iron.data.Geometry","buildVertices",0xfe335849,"iron.data.Geometry.buildVertices","iron/data/Geometry.hx",202,0x3ca6746e)
namespace iron{
namespace data{

void Geometry_obj::__construct(::Array< ::Dynamic> indices,::Array< int > materialIndices, ::kha::arrays::Float32ArrayPrivate positions, ::kha::arrays::Float32ArrayPrivate normals, ::kha::arrays::Float32ArrayPrivate uvs, ::kha::arrays::Float32ArrayPrivate uvs1, ::kha::arrays::Float32ArrayPrivate cols, ::kha::arrays::Float32ArrayPrivate tangents, ::kha::arrays::Float32ArrayPrivate bones, ::kha::arrays::Float32ArrayPrivate weights, ::kha::graphics4::Usage usage, ::kha::arrays::Float32ArrayPrivate instanceOffsets){
            	HX_GC_STACKFRAME(&_hx_pos_0883a6c134c4202b_14_new)
HXLINE(  67)		this->mats = null();
HXLINE(  66)		this->actions = null();
HXLINE(  64)		this->skeletonBoneLens = null();
HXLINE(  63)		this->skeletonBoneRefs = null();
HXLINE(  62)		this->skeletonTransformsI = null();
HXLINE(  60)		this->skinBoneWeights = null();
HXLINE(  59)		this->skinBoneIndices = null();
HXLINE(  58)		this->skinBoneCounts = null();
HXLINE(  50)		this->aabb = null();
HXLINE(  37)		this->instanceCount = (int)0;
HXLINE(  36)		this->instanced = false;
HXLINE(  35)		this->instancedVB = null();
HXLINE(  28)		this->numTris = (int)0;
HXLINE(  25)		this->ready = false;
HXLINE(  23)		this->count = (int)-1;
HXLINE(  22)		this->start = (int)0;
HXLINE(  19)		this->vertexBufferMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  82)		if (hx::IsNull( usage )) {
HXLINE(  82)			usage = ::kha::graphics4::Usage_obj::StaticUsage_dyn();
            		}
HXLINE(  84)		this->indices = indices;
HXLINE(  85)		this->materialIndices = materialIndices;
HXLINE(  86)		this->usage = usage;
HXLINE(  88)		this->positions = positions;
HXLINE(  89)		this->normals = normals;
HXLINE(  90)		this->uvs = uvs;
HXLINE(  91)		this->uvs1 = uvs1;
HXLINE(  92)		this->cols = cols;
HXLINE(  93)		this->tangents = tangents;
HXLINE(  94)		this->bones = bones;
HXLINE(  95)		this->weights = weights;
HXLINE(  96)		this->instanceOffsets = instanceOffsets;
HXLINE(  99)		this->_hx_struct = ::iron::data::Geometry_obj::getVertexStructure(hx::IsNotNull( positions ),hx::IsNotNull( normals ),hx::IsNotNull( uvs ),hx::IsNotNull( uvs1 ),hx::IsNotNull( cols ),hx::IsNotNull( tangents ),hx::IsNotNull( bones ),hx::IsNotNull( weights ));
HXLINE( 100)		this->structLength = ::Std_obj::_hx_int(((Float)this->_hx_struct->byteSize() / (Float)(int)4));
HXLINE( 101)		this->structStr = HX_("",00,00,00,00);
HXLINE( 102)		{
HXLINE( 102)			int _g = (int)0;
HXDLIN( 102)			::Array< ::Dynamic> _g1 = this->_hx_struct->elements;
HXDLIN( 102)			while((_g < _g1->length)){
HXLINE( 102)				 ::kha::graphics4::VertexElement e = _g1->__get(_g).StaticCast<  ::kha::graphics4::VertexElement >();
HXDLIN( 102)				_g = (_g + (int)1);
HXDLIN( 102)				 ::iron::data::Geometry _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 102)				_hx_tmp->structStr = (_hx_tmp->structStr + e->name);
            			}
            		}
            	}

Dynamic Geometry_obj::__CreateEmpty() { return new Geometry_obj; }

void *Geometry_obj::_hx_vtable = 0;

Dynamic Geometry_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Geometry_obj > _hx_result = new Geometry_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11]);
	return _hx_result;
}

bool Geometry_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fb2fc44;
}

void Geometry_obj::_hx_delete(){
            	HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_105_delete)
HXLINE( 109)		this->vertexBuffer->_hx_delete();
HXLINE( 111)		{
HXLINE( 111)			int _g = (int)0;
HXDLIN( 111)			::Array< ::Dynamic> _g1 = this->indexBuffers;
HXDLIN( 111)			while((_g < _g1->length)){
HXLINE( 111)				 ::kha::graphics4::IndexBuffer buf = _g1->__get(_g).StaticCast<  ::kha::graphics4::IndexBuffer >();
HXDLIN( 111)				_g = (_g + (int)1);
HXDLIN( 111)				buf->_hx_delete();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,_hx_delete,(void))

void Geometry_obj::applyScale(Float sx,Float sy,Float sz){
            	HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_127_applyScale)
HXLINE( 137)		 ::kha::arrays::Float32ArrayPrivate vertices = this->vertexBuffer->lock(null(),null());
HXLINE( 138)		{
HXLINE( 138)			int _g1 = (int)0;
HXDLIN( 138)			int _g = vertices->self.length();
HXDLIN( 138)			int _g2 = ::Std_obj::_hx_int(((Float)_g / (Float)this->structLength));
HXDLIN( 138)			while((_g1 < _g2)){
HXLINE( 138)				_g1 = (_g1 + (int)1);
HXDLIN( 138)				int i = (_g1 - (int)1);
HXLINE( 139)				{
HXLINE( 139)					int _g21 = (i * this->structLength);
HXDLIN( 139)					 ::kha::arrays::Float32ArrayPrivate _g3 = vertices;
HXDLIN( 139)					{
HXLINE( 139)						float value = (_g3->self.get(_g21) * sx);
HXDLIN( 139)						_g3->self.set(_g21,value);
            					}
            				}
HXLINE( 140)				{
HXLINE( 140)					int _g22 = ((i * this->structLength) + (int)1);
HXDLIN( 140)					 ::kha::arrays::Float32ArrayPrivate _g31 = vertices;
HXDLIN( 140)					{
HXLINE( 140)						float value1 = (_g31->self.get(_g22) * sy);
HXDLIN( 140)						_g31->self.set(_g22,value1);
            					}
            				}
HXLINE( 141)				{
HXLINE( 141)					int _g23 = ((i * this->structLength) + (int)2);
HXDLIN( 141)					 ::kha::arrays::Float32ArrayPrivate _g32 = vertices;
HXDLIN( 141)					{
HXLINE( 141)						float value2 = (_g32->self.get(_g23) * sz);
HXDLIN( 141)						_g32->self.set(_g23,value2);
            					}
            				}
            			}
            		}
HXLINE( 143)		this->vertexBuffer->unlock();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Geometry_obj,applyScale,(void))

void Geometry_obj::setupInstanced( ::kha::arrays::Float32ArrayPrivate offsets, ::kha::graphics4::Usage usage){
            	HX_GC_STACKFRAME(&_hx_pos_0883a6c134c4202b_147_setupInstanced)
HXLINE( 149)		this->offsetVecs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 150)		{
HXLINE( 150)			int _g1 = (int)0;
HXDLIN( 150)			int _g = ::Std_obj::_hx_int(((Float)offsets->self.length() / (Float)(int)3));
HXDLIN( 150)			while((_g1 < _g)){
HXLINE( 150)				_g1 = (_g1 + (int)1);
HXDLIN( 150)				int i = (_g1 - (int)1);
HXLINE( 151)				::Array< ::Dynamic> _hx_tmp = this->offsetVecs;
HXDLIN( 151)				 float32array offsets1 = offsets->self;
HXDLIN( 151)				float _hx_tmp1 = offsets1.get((i * (int)3));
HXDLIN( 151)				 float32array offsets2 = offsets->self;
HXDLIN( 151)				float _hx_tmp2 = offsets2.get(((i * (int)3) + (int)1));
HXDLIN( 151)				 float32array offsets3 = offsets->self;
HXDLIN( 151)				_hx_tmp->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,offsets3.get(((i * (int)3) + (int)2)),null()));
            			}
            		}
HXLINE( 154)		this->instanced = true;
HXLINE( 155)		this->instanceCount = ::Std_obj::_hx_int(((Float)offsets->self.length() / (Float)(int)3));
HXLINE( 157)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE( 158)		structure->instanced = true;
HXLINE( 159)		structure->add(HX_("off",6f,93,54,00),::kha::graphics4::VertexData_obj::Float3_dyn());
HXLINE( 161)		this->instancedVB =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,this->instanceCount,structure,usage,(int)1,null());
HXLINE( 162)		 ::kha::arrays::Float32ArrayPrivate vertices = this->instancedVB->lock(null(),null());
HXLINE( 163)		{
HXLINE( 163)			int _g11 = (int)0;
HXDLIN( 163)			int _g2 = vertices->self.length();
HXDLIN( 163)			while((_g11 < _g2)){
HXLINE( 163)				_g11 = (_g11 + (int)1);
HXDLIN( 163)				int i1 = (_g11 - (int)1);
HXDLIN( 163)				{
HXLINE( 163)					float value = offsets->self.get(i1);
HXDLIN( 163)					vertices->self.set(i1,value);
            				}
            			}
            		}
HXLINE( 164)		this->instancedVB->unlock();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Geometry_obj,setupInstanced,(void))

void Geometry_obj::sortInstanced(Float camX,Float camY,Float camZ){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::iron::math::Vec4 a, ::iron::math::Vec4 b){
            			HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_175_sortInstanced)
HXLINE( 175)			if ((a->w > b->w)) {
HXLINE( 175)				return (int)1;
            			}
            			else {
HXLINE( 175)				return (int)-1;
            			}
HXDLIN( 175)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_167_sortInstanced)
HXLINE( 169)		{
HXLINE( 169)			int _g = (int)0;
HXDLIN( 169)			::Array< ::Dynamic> _g1 = this->offsetVecs;
HXDLIN( 169)			while((_g < _g1->length)){
HXLINE( 169)				 ::iron::math::Vec4 v = _g1->__get(_g).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 169)				_g = (_g + (int)1);
HXLINE( 171)				float vx = (camX - v->x);
HXDLIN( 171)				float vy = (camY - v->y);
HXDLIN( 171)				float vz = (camZ - v->z);
HXDLIN( 171)				v->w = ::Math_obj::sqrt((((vx * vx) + (vy * vy)) + (vz * vz)));
            			}
            		}
HXLINE( 174)		this->offsetVecs->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 178)		 ::kha::graphics4::VertexBuffer vb = this->instancedVB;
HXLINE( 179)		 ::kha::arrays::Float32ArrayPrivate vertices = vb->lock(null(),null());
HXLINE( 180)		{
HXLINE( 180)			int _g11 = (int)0;
HXDLIN( 180)			int _g2 = ::Std_obj::_hx_int(((Float)vertices->self.length() / (Float)(int)3));
HXDLIN( 180)			while((_g11 < _g2)){
HXLINE( 180)				_g11 = (_g11 + (int)1);
HXDLIN( 180)				int i = (_g11 - (int)1);
HXLINE( 181)				{
HXLINE( 181)					 float32array vertices1 = vertices->self;
HXDLIN( 181)					vertices1.set((i * (int)3),this->offsetVecs->__get(i).StaticCast<  ::iron::math::Vec4 >()->x);
            				}
HXLINE( 182)				{
HXLINE( 182)					 float32array vertices2 = vertices->self;
HXDLIN( 182)					vertices2.set(((i * (int)3) + (int)1),this->offsetVecs->__get(i).StaticCast<  ::iron::math::Vec4 >()->y);
            				}
HXLINE( 183)				{
HXLINE( 183)					 float32array vertices3 = vertices->self;
HXDLIN( 183)					vertices3.set(((i * (int)3) + (int)2),this->offsetVecs->__get(i).StaticCast<  ::iron::math::Vec4 >()->z);
            				}
            			}
            		}
HXLINE( 185)		vb->unlock();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Geometry_obj,sortInstanced,(void))

void Geometry_obj::copyVertices( ::kha::arrays::Float32ArrayPrivate vertices,hx::Null< int >  __o_offset){
int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_189_copyVertices)
HXDLIN( 189)		::iron::data::Geometry_obj::buildVertices(vertices,this->positions,this->normals,this->uvs,this->uvs1,this->cols,this->tangents,this->bones,this->weights,offset,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(Geometry_obj,copyVertices,(void))

int Geometry_obj::getVerticesLength(){
            	HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_255_getVerticesLength)
HXLINE( 256)		int res = this->positions->self.length();
HXLINE( 257)		if (hx::IsNotNull( this->normals )) {
HXLINE( 257)			res = (res + this->normals->self.length());
            		}
HXLINE( 258)		if (hx::IsNotNull( this->uvs )) {
HXLINE( 258)			res = (res + this->uvs->self.length());
            		}
HXLINE( 259)		if (hx::IsNotNull( this->uvs1 )) {
HXLINE( 259)			res = (res + this->uvs1->self.length());
            		}
HXLINE( 260)		if (hx::IsNotNull( this->cols )) {
HXLINE( 260)			res = (res + this->cols->self.length());
            		}
HXLINE( 261)		if (hx::IsNotNull( this->tangents )) {
HXLINE( 261)			res = (res + this->tangents->self.length());
            		}
HXLINE( 262)		if (hx::IsNotNull( this->bones )) {
HXLINE( 262)			res = (res + this->bones->self.length());
            		}
HXLINE( 263)		if (hx::IsNotNull( this->weights )) {
HXLINE( 263)			res = (res + this->weights->self.length());
            		}
HXLINE( 264)		return res;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,getVerticesLength,return )

bool Geometry_obj::hasAttrib(::String s,::Array< ::Dynamic> vs){
            	HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_284_hasAttrib)
HXLINE( 285)		{
HXLINE( 285)			int _g = (int)0;
HXDLIN( 285)			while((_g < vs->length)){
HXLINE( 285)				 ::Dynamic e = vs->__get(_g);
HXDLIN( 285)				_g = (_g + (int)1);
HXDLIN( 285)				if ((( (::String)(e->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == s)) {
HXLINE( 285)					return true;
            				}
            			}
            		}
HXLINE( 286)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Geometry_obj,hasAttrib,return )

 ::kha::graphics4::VertexBuffer Geometry_obj::get(::Array< ::Dynamic> vs){
            	HX_GC_STACKFRAME(&_hx_pos_0883a6c134c4202b_289_get)
HXLINE( 290)		::String s = HX_("",00,00,00,00);
HXLINE( 291)		{
HXLINE( 291)			int _g = (int)0;
HXDLIN( 291)			while((_g < vs->length)){
HXLINE( 291)				 ::Dynamic e = vs->__get(_g);
HXDLIN( 291)				_g = (_g + (int)1);
HXDLIN( 291)				s = (s + ( (::String)(e->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
            			}
            		}
HXLINE( 292)		 ::kha::graphics4::VertexBuffer vb = this->vertexBufferMap->get(s).StaticCast<  ::kha::graphics4::VertexBuffer >();
HXLINE( 293)		if (hx::IsNull( vb )) {
HXLINE( 295)			bool apos = this->hasAttrib(HX_("pos",94,5d,55,00),vs);
HXLINE( 296)			bool anor = this->hasAttrib(HX_("nor",11,d9,53,00),vs);
HXLINE( 297)			bool atex = this->hasAttrib(HX_("tex",e7,5d,58,00),vs);
HXLINE( 298)			bool atex1 = this->hasAttrib(HX_("tex1",6a,cc,f9,4c),vs);
HXLINE( 299)			bool acol = this->hasAttrib(HX_("col",40,80,4b,00),vs);
HXLINE( 300)			bool atang = this->hasAttrib(HX_("tang",e6,ba,f6,4c),vs);
HXLINE( 301)			bool abone = this->hasAttrib(HX_("bone",44,83,1b,41),vs);
HXLINE( 302)			bool aweight = this->hasAttrib(HX_("weight",78,71,a6,01),vs);
HXLINE( 303)			 ::kha::graphics4::VertexStructure _hx_struct = ::iron::data::Geometry_obj::getVertexStructure(apos,anor,atex,atex1,acol,atang,abone,aweight);
HXLINE( 304)			int vb1 = ::Std_obj::_hx_int(((Float)this->positions->self.length() / (Float)(int)3));
HXDLIN( 304)			vb =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,vb1,_hx_struct,this->usage,null(),null());
HXLINE( 305)			this->vertices = vb->lock(null(),null());
HXLINE( 306)			 ::kha::arrays::Float32ArrayPrivate _hx_tmp;
HXDLIN( 306)			if (apos) {
HXLINE( 306)				_hx_tmp = this->positions;
            			}
            			else {
HXLINE( 306)				_hx_tmp = null();
            			}
HXDLIN( 306)			 ::kha::arrays::Float32ArrayPrivate _hx_tmp1;
HXDLIN( 306)			if (anor) {
HXLINE( 306)				_hx_tmp1 = this->normals;
            			}
            			else {
HXLINE( 306)				_hx_tmp1 = null();
            			}
HXDLIN( 306)			 ::kha::arrays::Float32ArrayPrivate _hx_tmp2;
HXDLIN( 306)			if (atex) {
HXLINE( 306)				_hx_tmp2 = this->uvs;
            			}
            			else {
HXLINE( 306)				_hx_tmp2 = null();
            			}
HXDLIN( 306)			 ::kha::arrays::Float32ArrayPrivate _hx_tmp3;
HXDLIN( 306)			if (atex1) {
HXLINE( 306)				_hx_tmp3 = this->uvs1;
            			}
            			else {
HXLINE( 306)				_hx_tmp3 = null();
            			}
HXDLIN( 306)			 ::kha::arrays::Float32ArrayPrivate _hx_tmp4;
HXDLIN( 306)			if (acol) {
HXLINE( 306)				_hx_tmp4 = this->cols;
            			}
            			else {
HXLINE( 306)				_hx_tmp4 = null();
            			}
HXDLIN( 306)			 ::kha::arrays::Float32ArrayPrivate _hx_tmp5;
HXDLIN( 306)			if (atang) {
HXLINE( 306)				_hx_tmp5 = this->tangents;
            			}
            			else {
HXLINE( 306)				_hx_tmp5 = null();
            			}
HXDLIN( 306)			 ::kha::arrays::Float32ArrayPrivate _hx_tmp6;
HXDLIN( 306)			if (abone) {
HXLINE( 306)				_hx_tmp6 = this->bones;
            			}
            			else {
HXLINE( 306)				_hx_tmp6 = null();
            			}
HXDLIN( 306)			 ::kha::arrays::Float32ArrayPrivate _hx_tmp7;
HXDLIN( 306)			if (aweight) {
HXLINE( 306)				_hx_tmp7 = this->weights;
            			}
            			else {
HXLINE( 306)				_hx_tmp7 = null();
            			}
HXDLIN( 306)			bool _hx_tmp8;
HXDLIN( 306)			if (atex) {
HXLINE( 306)				_hx_tmp8 = hx::IsNull( this->uvs );
            			}
            			else {
HXLINE( 306)				_hx_tmp8 = false;
            			}
HXDLIN( 306)			::iron::data::Geometry_obj::buildVertices(this->vertices,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,(int)0,_hx_tmp8);
HXLINE( 307)			vb->unlock();
HXLINE( 308)			this->vertexBufferMap->set(s,vb);
            		}
HXLINE( 310)		return vb;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,get,return )

void Geometry_obj::build(){
            	HX_GC_STACKFRAME(&_hx_pos_0883a6c134c4202b_314_build)
HXLINE( 315)		if (this->ready) {
HXLINE( 315)			return;
            		}
HXLINE( 329)		int _hx_tmp = ::Std_obj::_hx_int(((Float)this->positions->self.length() / (Float)(int)3));
HXDLIN( 329)		this->vertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,_hx_tmp,this->_hx_struct,this->usage,null(),null());
HXLINE( 330)		this->vertices = this->vertexBuffer->lock(null(),null());
HXLINE( 331)		::iron::data::Geometry_obj::buildVertices(this->vertices,this->positions,this->normals,this->uvs,this->uvs1,this->cols,this->tangents,this->bones,this->weights,null(),null());
HXLINE( 332)		this->vertexBuffer->unlock();
HXLINE( 333)		this->vertexBufferMap->set(this->structStr,this->vertexBuffer);
HXLINE( 336)		this->indexBuffers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 337)		{
HXLINE( 337)			int _g = (int)0;
HXDLIN( 337)			::Array< ::Dynamic> _g1 = this->indices;
HXDLIN( 337)			while((_g < _g1->length)){
HXLINE( 337)				 ::kha::arrays::Uint32ArrayPrivate id = _g1->__get(_g).StaticCast<  ::kha::arrays::Uint32ArrayPrivate >();
HXDLIN( 337)				_g = (_g + (int)1);
HXLINE( 338)				if ((id->self.length() == (int)0)) {
HXLINE( 341)					continue;
            				}
HXLINE( 343)				int indexBuffer = id->self.length();
HXDLIN( 343)				 ::kha::graphics4::IndexBuffer indexBuffer1 =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,indexBuffer,this->usage,null());
HXLINE( 344)				 ::iron::data::Geometry _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 344)				int _hx_tmp2 = _hx_tmp1->numTris;
HXDLIN( 344)				_hx_tmp1->numTris = (_hx_tmp2 + ::Std_obj::_hx_int(((Float)id->self.length() / (Float)(int)3)));
HXLINE( 349)				 ::kha::arrays::Uint32ArrayPrivate indicesA = indexBuffer1->lock(null(),null());
HXLINE( 350)				{
HXLINE( 350)					int _g3 = (int)0;
HXDLIN( 350)					int _g2 = indicesA->self.length();
HXDLIN( 350)					while((_g3 < _g2)){
HXLINE( 350)						_g3 = (_g3 + (int)1);
HXDLIN( 350)						int i = (_g3 - (int)1);
HXDLIN( 350)						{
HXLINE( 350)							int value = id->self.get(i);
HXDLIN( 350)							indicesA->self.set(i,value);
            						}
            					}
            				}
HXLINE( 353)				indexBuffer1->unlock();
HXLINE( 355)				this->indexBuffers->push(indexBuffer1);
            			}
            		}
HXLINE( 359)		if (hx::IsNotNull( this->instanceOffsets )) {
HXLINE( 359)			this->setupInstanced(this->instanceOffsets,this->usage);
            		}
HXLINE( 361)		this->ready = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,build,(void))

int Geometry_obj::getVerticesCount(){
            	HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_386_getVerticesCount)
HXDLIN( 386)		return ::Std_obj::_hx_int(((Float)this->positions->self.length() / (Float)(int)3));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,getVerticesCount,return )

void Geometry_obj::addArmature( ::iron::data::Armature armature){
            	HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_391_addArmature)
HXDLIN( 391)		int _g = (int)0;
HXDLIN( 391)		::Array< ::Dynamic> _g1 = armature->actions;
HXDLIN( 391)		while((_g < _g1->length)){
HXDLIN( 391)			 ::Dynamic a = _g1->__get(_g);
HXDLIN( 391)			_g = (_g + (int)1);
HXLINE( 392)			this->addAction(( (::Array< ::Dynamic>)(a->__Field(HX_("bones",af,58,f7,b6),hx::paccDynamic)) ),( (::String)(a->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,addArmature,(void))

void Geometry_obj::addAction(::Array< ::Dynamic> bones,::String name){
            	HX_GC_STACKFRAME(&_hx_pos_0883a6c134c4202b_396_addAction)
HXLINE( 397)		if (hx::IsNull( bones )) {
HXLINE( 397)			return;
            		}
HXLINE( 398)		if (hx::IsNull( this->actions )) {
HXLINE( 399)			this->actions =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 400)			this->mats =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 402)		if (hx::IsNotNull( ( (::Array< ::Dynamic>)(this->actions->get(name)) ) )) {
HXLINE( 402)			return;
            		}
HXLINE( 403)		::Array< ::Dynamic> actionBones = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 406)		{
HXLINE( 406)			int _g = (int)0;
HXDLIN( 406)			::Array< ::String > _g1 = this->skeletonBoneRefs;
HXDLIN( 406)			while((_g < _g1->length)){
HXLINE( 406)				::String s = _g1->__get(_g);
HXDLIN( 406)				_g = (_g + (int)1);
HXLINE( 407)				{
HXLINE( 407)					int _g2 = (int)0;
HXDLIN( 407)					while((_g2 < bones->length)){
HXLINE( 407)						 ::Dynamic b = bones->__get(_g2);
HXDLIN( 407)						_g2 = (_g2 + (int)1);
HXLINE( 408)						if ((( (::String)(b->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == s)) {
HXLINE( 409)							actionBones->push(b);
            						}
            					}
            				}
            			}
            		}
HXLINE( 413)		this->actions->set(name,actionBones);
HXLINE( 415)		::Array< ::Dynamic> actionMats = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 416)		{
HXLINE( 416)			int _g3 = (int)0;
HXDLIN( 416)			while((_g3 < actionBones->length)){
HXLINE( 416)				 ::Dynamic b1 = actionBones->__get(_g3);
HXDLIN( 416)				_g3 = (_g3 + (int)1);
HXLINE( 417)				actionMats->push(::iron::math::Mat4_obj::fromFloat32Array(( ( ::kha::arrays::Float32ArrayPrivate)( ::Dynamic(b1->__Field(HX_("transform",6c,2d,93,45),hx::paccDynamic))->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) ),null()));
            			}
            		}
HXLINE( 420)		this->mats->set(name,actionMats);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Geometry_obj,addAction,(void))

void Geometry_obj::initSkeletonTransforms(::Array< ::Dynamic> transformsI){
            	HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_423_initSkeletonTransforms)
HXLINE( 424)		this->skeletonTransformsI = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 429)		{
HXLINE( 429)			int _g = (int)0;
HXDLIN( 429)			while((_g < transformsI->length)){
HXLINE( 429)				 ::kha::arrays::Float32ArrayPrivate t = transformsI->__get(_g).StaticCast<  ::kha::arrays::Float32ArrayPrivate >();
HXDLIN( 429)				_g = (_g + (int)1);
HXLINE( 430)				 ::iron::math::Mat4 mi = ::iron::math::Mat4_obj::fromFloat32Array(t,null());
HXLINE( 431)				this->skeletonTransformsI->push(mi);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Geometry_obj,initSkeletonTransforms,(void))

void Geometry_obj::calculateAABB(){
            	HX_GC_STACKFRAME(&_hx_pos_0883a6c134c4202b_450_calculateAABB)
HXLINE( 451)		 ::iron::math::Vec4 aabbMin =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)-0.01),((Float)-0.01),((Float)-0.01),null());
HXLINE( 452)		 ::iron::math::Vec4 aabbMax =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)0.01),((Float)0.01),((Float)0.01),null());
HXLINE( 453)		this->aabb =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 454)		int i = (int)0;
HXLINE( 455)		while((i < this->positions->self.length())){
HXLINE( 456)			float _hx_tmp = this->positions->self.get(i);
HXDLIN( 456)			if ((_hx_tmp > aabbMax->x)) {
HXLINE( 456)				aabbMax->x = this->positions->self.get(i);
            			}
HXLINE( 457)			 float32array this1 = this->positions->self;
HXDLIN( 457)			float _hx_tmp1 = this1.get((i + (int)1));
HXDLIN( 457)			if ((_hx_tmp1 > aabbMax->y)) {
HXLINE( 457)				 float32array this2 = this->positions->self;
HXDLIN( 457)				aabbMax->y = this2.get((i + (int)1));
            			}
HXLINE( 458)			 float32array this3 = this->positions->self;
HXDLIN( 458)			float _hx_tmp2 = this3.get((i + (int)2));
HXDLIN( 458)			if ((_hx_tmp2 > aabbMax->z)) {
HXLINE( 458)				 float32array this4 = this->positions->self;
HXDLIN( 458)				aabbMax->z = this4.get((i + (int)2));
            			}
HXLINE( 459)			float _hx_tmp3 = this->positions->self.get(i);
HXDLIN( 459)			if ((_hx_tmp3 < aabbMin->x)) {
HXLINE( 459)				aabbMin->x = this->positions->self.get(i);
            			}
HXLINE( 460)			 float32array this5 = this->positions->self;
HXDLIN( 460)			float _hx_tmp4 = this5.get((i + (int)1));
HXDLIN( 460)			if ((_hx_tmp4 < aabbMin->y)) {
HXLINE( 460)				 float32array this6 = this->positions->self;
HXDLIN( 460)				aabbMin->y = this6.get((i + (int)1));
            			}
HXLINE( 461)			 float32array this7 = this->positions->self;
HXDLIN( 461)			float _hx_tmp5 = this7.get((i + (int)2));
HXDLIN( 461)			if ((_hx_tmp5 < aabbMin->z)) {
HXLINE( 461)				 float32array this8 = this->positions->self;
HXDLIN( 461)				aabbMin->z = this8.get((i + (int)2));
            			}
HXLINE( 462)			i = (i + (int)3);
            		}
HXLINE( 464)		Float _hx_tmp6 = ::Math_obj::abs(aabbMin->x);
HXDLIN( 464)		this->aabb->x = (_hx_tmp6 + ::Math_obj::abs(aabbMax->x));
HXLINE( 465)		Float _hx_tmp7 = ::Math_obj::abs(aabbMin->y);
HXDLIN( 465)		this->aabb->y = (_hx_tmp7 + ::Math_obj::abs(aabbMax->y));
HXLINE( 466)		Float _hx_tmp8 = ::Math_obj::abs(aabbMin->z);
HXDLIN( 466)		this->aabb->z = (_hx_tmp8 + ::Math_obj::abs(aabbMax->z));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Geometry_obj,calculateAABB,(void))

 ::kha::graphics4::VertexStructure Geometry_obj::getVertexStructure(hx::Null< bool >  __o_pos,hx::Null< bool >  __o_nor,hx::Null< bool >  __o_tex,hx::Null< bool >  __o_tex1,hx::Null< bool >  __o_col,hx::Null< bool >  __o_tang,hx::Null< bool >  __o_bone,hx::Null< bool >  __o_weight){
bool pos = __o_pos.Default(false);
bool nor = __o_nor.Default(false);
bool tex = __o_tex.Default(false);
bool tex1 = __o_tex1.Default(false);
bool col = __o_col.Default(false);
bool tang = __o_tang.Default(false);
bool bone = __o_bone.Default(false);
bool weight = __o_weight.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_0883a6c134c4202b_114_getVertexStructure)
HXLINE( 115)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE( 116)		if (pos) {
HXLINE( 116)			structure->add(HX_("pos",94,5d,55,00),::kha::graphics4::VertexData_obj::Float3_dyn());
            		}
HXLINE( 117)		if (nor) {
HXLINE( 117)			structure->add(HX_("nor",11,d9,53,00),::kha::graphics4::VertexData_obj::Float3_dyn());
            		}
HXLINE( 118)		if (tex) {
HXLINE( 118)			structure->add(HX_("tex",e7,5d,58,00),::kha::graphics4::VertexData_obj::Float2_dyn());
            		}
HXLINE( 119)		if (tex1) {
HXLINE( 119)			structure->add(HX_("tex1",6a,cc,f9,4c),::kha::graphics4::VertexData_obj::Float2_dyn());
            		}
HXLINE( 120)		if (col) {
HXLINE( 120)			structure->add(HX_("col",40,80,4b,00),::kha::graphics4::VertexData_obj::Float3_dyn());
            		}
HXLINE( 121)		if (tang) {
HXLINE( 121)			structure->add(HX_("tang",e6,ba,f6,4c),::kha::graphics4::VertexData_obj::Float3_dyn());
            		}
HXLINE( 122)		if (bone) {
HXLINE( 122)			structure->add(HX_("bone",44,83,1b,41),::kha::graphics4::VertexData_obj::Float4_dyn());
            		}
HXLINE( 123)		if (weight) {
HXLINE( 123)			structure->add(HX_("weight",78,71,a6,01),::kha::graphics4::VertexData_obj::Float4_dyn());
            		}
HXLINE( 124)		return structure;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Geometry_obj,getVertexStructure,return )

void Geometry_obj::buildVertices( ::kha::arrays::Float32ArrayPrivate vertices, ::kha::arrays::Float32ArrayPrivate pa, ::kha::arrays::Float32ArrayPrivate na, ::kha::arrays::Float32ArrayPrivate uva, ::kha::arrays::Float32ArrayPrivate uva1, ::kha::arrays::Float32ArrayPrivate ca, ::kha::arrays::Float32ArrayPrivate tanga, ::kha::arrays::Float32ArrayPrivate bonea, ::kha::arrays::Float32ArrayPrivate weighta,hx::Null< int >  __o_offset,hx::Null< bool >  __o_fakeUVs){
int offset = __o_offset.Default(0);
bool fakeUVs = __o_fakeUVs.Default(false);
            	HX_STACKFRAME(&_hx_pos_0883a6c134c4202b_202_buildVertices)
HXLINE( 204)		int numVertices = ::Std_obj::_hx_int(((Float)pa->self.length() / (Float)(int)3));
HXLINE( 205)		int di = ((int)-1 + offset);
HXLINE( 206)		{
HXLINE( 206)			int _g1 = (int)0;
HXDLIN( 206)			int _g = numVertices;
HXDLIN( 206)			while((_g1 < _g)){
HXLINE( 206)				_g1 = (_g1 + (int)1);
HXDLIN( 206)				int i = (_g1 - (int)1);
HXLINE( 207)				{
HXLINE( 207)					di = (di + (int)1);
HXDLIN( 207)					 float32array pa1 = pa->self;
HXDLIN( 207)					float value = pa1.get((i * (int)3));
HXDLIN( 207)					vertices->self.set(di,value);
            				}
HXLINE( 208)				{
HXLINE( 208)					di = (di + (int)1);
HXDLIN( 208)					 float32array pa2 = pa->self;
HXDLIN( 208)					float value1 = pa2.get(((i * (int)3) + (int)1));
HXDLIN( 208)					vertices->self.set(di,value1);
            				}
HXLINE( 209)				{
HXLINE( 209)					di = (di + (int)1);
HXDLIN( 209)					 float32array pa3 = pa->self;
HXDLIN( 209)					float value2 = pa3.get(((i * (int)3) + (int)2));
HXDLIN( 209)					vertices->self.set(di,value2);
            				}
HXLINE( 211)				if (hx::IsNotNull( na )) {
HXLINE( 212)					{
HXLINE( 212)						di = (di + (int)1);
HXDLIN( 212)						 float32array na1 = na->self;
HXDLIN( 212)						float value3 = na1.get((i * (int)3));
HXDLIN( 212)						vertices->self.set(di,value3);
            					}
HXLINE( 213)					{
HXLINE( 213)						di = (di + (int)1);
HXDLIN( 213)						 float32array na2 = na->self;
HXDLIN( 213)						float value4 = na2.get(((i * (int)3) + (int)1));
HXDLIN( 213)						vertices->self.set(di,value4);
            					}
HXLINE( 214)					{
HXLINE( 214)						di = (di + (int)1);
HXDLIN( 214)						 float32array na3 = na->self;
HXDLIN( 214)						float value5 = na3.get(((i * (int)3) + (int)2));
HXDLIN( 214)						vertices->self.set(di,value5);
            					}
            				}
HXLINE( 216)				if (hx::IsNotNull( uva )) {
HXLINE( 217)					{
HXLINE( 217)						di = (di + (int)1);
HXDLIN( 217)						 float32array uva2 = uva->self;
HXDLIN( 217)						float value6 = uva2.get((i * (int)2));
HXDLIN( 217)						vertices->self.set(di,value6);
            					}
HXLINE( 218)					{
HXLINE( 218)						di = (di + (int)1);
HXDLIN( 218)						 float32array uva3 = uva->self;
HXDLIN( 218)						float value7 = uva3.get(((i * (int)2) + (int)1));
HXDLIN( 218)						vertices->self.set(di,value7);
            					}
            				}
            				else {
HXLINE( 220)					if (fakeUVs) {
HXLINE( 221)						{
HXLINE( 221)							di = (di + (int)1);
HXDLIN( 221)							vertices->self.set(di,((Float)0.0));
            						}
HXLINE( 222)						{
HXLINE( 222)							di = (di + (int)1);
HXDLIN( 222)							vertices->self.set(di,((Float)0.0));
            						}
            					}
            				}
HXLINE( 224)				if (hx::IsNotNull( uva1 )) {
HXLINE( 225)					{
HXLINE( 225)						di = (di + (int)1);
HXDLIN( 225)						 float32array uva11 = uva1->self;
HXDLIN( 225)						float value8 = uva11.get((i * (int)2));
HXDLIN( 225)						vertices->self.set(di,value8);
            					}
HXLINE( 226)					{
HXLINE( 226)						di = (di + (int)1);
HXDLIN( 226)						 float32array uva12 = uva1->self;
HXDLIN( 226)						float value9 = uva12.get(((i * (int)2) + (int)1));
HXDLIN( 226)						vertices->self.set(di,value9);
            					}
            				}
HXLINE( 228)				if (hx::IsNotNull( ca )) {
HXLINE( 229)					{
HXLINE( 229)						di = (di + (int)1);
HXDLIN( 229)						 float32array ca1 = ca->self;
HXDLIN( 229)						float value10 = ca1.get((i * (int)3));
HXDLIN( 229)						vertices->self.set(di,value10);
            					}
HXLINE( 230)					{
HXLINE( 230)						di = (di + (int)1);
HXDLIN( 230)						 float32array ca2 = ca->self;
HXDLIN( 230)						float value11 = ca2.get(((i * (int)3) + (int)1));
HXDLIN( 230)						vertices->self.set(di,value11);
            					}
HXLINE( 231)					{
HXLINE( 231)						di = (di + (int)1);
HXDLIN( 231)						 float32array ca3 = ca->self;
HXDLIN( 231)						float value12 = ca3.get(((i * (int)3) + (int)2));
HXDLIN( 231)						vertices->self.set(di,value12);
            					}
            				}
HXLINE( 234)				if (hx::IsNotNull( tanga )) {
HXLINE( 235)					{
HXLINE( 235)						di = (di + (int)1);
HXDLIN( 235)						 float32array tanga1 = tanga->self;
HXDLIN( 235)						float value13 = tanga1.get((i * (int)3));
HXDLIN( 235)						vertices->self.set(di,value13);
            					}
HXLINE( 236)					{
HXLINE( 236)						di = (di + (int)1);
HXDLIN( 236)						 float32array tanga2 = tanga->self;
HXDLIN( 236)						float value14 = tanga2.get(((i * (int)3) + (int)1));
HXDLIN( 236)						vertices->self.set(di,value14);
            					}
HXLINE( 237)					{
HXLINE( 237)						di = (di + (int)1);
HXDLIN( 237)						 float32array tanga3 = tanga->self;
HXDLIN( 237)						float value15 = tanga3.get(((i * (int)3) + (int)2));
HXDLIN( 237)						vertices->self.set(di,value15);
            					}
            				}
HXLINE( 240)				if (hx::IsNotNull( bonea )) {
HXLINE( 241)					{
HXLINE( 241)						di = (di + (int)1);
HXDLIN( 241)						 float32array bonea1 = bonea->self;
HXDLIN( 241)						float value16 = bonea1.get((i * (int)4));
HXDLIN( 241)						vertices->self.set(di,value16);
            					}
HXLINE( 242)					{
HXLINE( 242)						di = (di + (int)1);
HXDLIN( 242)						 float32array bonea2 = bonea->self;
HXDLIN( 242)						float value17 = bonea2.get(((i * (int)4) + (int)1));
HXDLIN( 242)						vertices->self.set(di,value17);
            					}
HXLINE( 243)					{
HXLINE( 243)						di = (di + (int)1);
HXDLIN( 243)						 float32array bonea3 = bonea->self;
HXDLIN( 243)						float value18 = bonea3.get(((i * (int)4) + (int)2));
HXDLIN( 243)						vertices->self.set(di,value18);
            					}
HXLINE( 244)					{
HXLINE( 244)						di = (di + (int)1);
HXDLIN( 244)						 float32array bonea4 = bonea->self;
HXDLIN( 244)						float value19 = bonea4.get(((i * (int)4) + (int)3));
HXDLIN( 244)						vertices->self.set(di,value19);
            					}
            				}
HXLINE( 246)				if (hx::IsNotNull( weighta )) {
HXLINE( 247)					{
HXLINE( 247)						di = (di + (int)1);
HXDLIN( 247)						 float32array weighta1 = weighta->self;
HXDLIN( 247)						float value20 = weighta1.get((i * (int)4));
HXDLIN( 247)						vertices->self.set(di,value20);
            					}
HXLINE( 248)					{
HXLINE( 248)						di = (di + (int)1);
HXDLIN( 248)						 float32array weighta2 = weighta->self;
HXDLIN( 248)						float value21 = weighta2.get(((i * (int)4) + (int)1));
HXDLIN( 248)						vertices->self.set(di,value21);
            					}
HXLINE( 249)					{
HXLINE( 249)						di = (di + (int)1);
HXDLIN( 249)						 float32array weighta3 = weighta->self;
HXDLIN( 249)						float value22 = weighta3.get(((i * (int)4) + (int)2));
HXDLIN( 249)						vertices->self.set(di,value22);
            					}
HXLINE( 250)					{
HXLINE( 250)						di = (di + (int)1);
HXDLIN( 250)						 float32array weighta4 = weighta->self;
HXDLIN( 250)						float value23 = weighta4.get(((i * (int)4) + (int)3));
HXDLIN( 250)						vertices->self.set(di,value23);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(Geometry_obj,buildVertices,(void))


hx::ObjectPtr< Geometry_obj > Geometry_obj::__new(::Array< ::Dynamic> indices,::Array< int > materialIndices, ::kha::arrays::Float32ArrayPrivate positions, ::kha::arrays::Float32ArrayPrivate normals, ::kha::arrays::Float32ArrayPrivate uvs, ::kha::arrays::Float32ArrayPrivate uvs1, ::kha::arrays::Float32ArrayPrivate cols, ::kha::arrays::Float32ArrayPrivate tangents, ::kha::arrays::Float32ArrayPrivate bones, ::kha::arrays::Float32ArrayPrivate weights, ::kha::graphics4::Usage usage, ::kha::arrays::Float32ArrayPrivate instanceOffsets) {
	hx::ObjectPtr< Geometry_obj > __this = new Geometry_obj();
	__this->__construct(indices,materialIndices,positions,normals,uvs,uvs1,cols,tangents,bones,weights,usage,instanceOffsets);
	return __this;
}

hx::ObjectPtr< Geometry_obj > Geometry_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> indices,::Array< int > materialIndices, ::kha::arrays::Float32ArrayPrivate positions, ::kha::arrays::Float32ArrayPrivate normals, ::kha::arrays::Float32ArrayPrivate uvs, ::kha::arrays::Float32ArrayPrivate uvs1, ::kha::arrays::Float32ArrayPrivate cols, ::kha::arrays::Float32ArrayPrivate tangents, ::kha::arrays::Float32ArrayPrivate bones, ::kha::arrays::Float32ArrayPrivate weights, ::kha::graphics4::Usage usage, ::kha::arrays::Float32ArrayPrivate instanceOffsets) {
	Geometry_obj *__this = (Geometry_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Geometry_obj), true, "iron.data.Geometry"));
	*(void **)__this = Geometry_obj::_hx_vtable;
	__this->__construct(indices,materialIndices,positions,normals,uvs,uvs1,cols,tangents,bones,weights,usage,instanceOffsets);
	return __this;
}

Geometry_obj::Geometry_obj()
{
}

void Geometry_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Geometry);
	HX_MARK_MEMBER_NAME(vertexBuffer,"vertexBuffer");
	HX_MARK_MEMBER_NAME(vertexBufferMap,"vertexBufferMap");
	HX_MARK_MEMBER_NAME(indexBuffers,"indexBuffers");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_MEMBER_NAME(ready,"ready");
	HX_MARK_MEMBER_NAME(vertices,"vertices");
	HX_MARK_MEMBER_NAME(indices,"indices");
	HX_MARK_MEMBER_NAME(numTris,"numTris");
	HX_MARK_MEMBER_NAME(materialIndices,"materialIndices");
	HX_MARK_MEMBER_NAME(_hx_struct,"struct");
	HX_MARK_MEMBER_NAME(structLength,"structLength");
	HX_MARK_MEMBER_NAME(structStr,"structStr");
	HX_MARK_MEMBER_NAME(usage,"usage");
	HX_MARK_MEMBER_NAME(instancedVB,"instancedVB");
	HX_MARK_MEMBER_NAME(instanced,"instanced");
	HX_MARK_MEMBER_NAME(instanceCount,"instanceCount");
	HX_MARK_MEMBER_NAME(positions,"positions");
	HX_MARK_MEMBER_NAME(normals,"normals");
	HX_MARK_MEMBER_NAME(uvs,"uvs");
	HX_MARK_MEMBER_NAME(uvs1,"uvs1");
	HX_MARK_MEMBER_NAME(cols,"cols");
	HX_MARK_MEMBER_NAME(tangents,"tangents");
	HX_MARK_MEMBER_NAME(bones,"bones");
	HX_MARK_MEMBER_NAME(weights,"weights");
	HX_MARK_MEMBER_NAME(instanceOffsets,"instanceOffsets");
	HX_MARK_MEMBER_NAME(offsetVecs,"offsetVecs");
	HX_MARK_MEMBER_NAME(aabb,"aabb");
	HX_MARK_MEMBER_NAME(skinBoneCounts,"skinBoneCounts");
	HX_MARK_MEMBER_NAME(skinBoneIndices,"skinBoneIndices");
	HX_MARK_MEMBER_NAME(skinBoneWeights,"skinBoneWeights");
	HX_MARK_MEMBER_NAME(skeletonTransformsI,"skeletonTransformsI");
	HX_MARK_MEMBER_NAME(skeletonBoneRefs,"skeletonBoneRefs");
	HX_MARK_MEMBER_NAME(skeletonBoneLens,"skeletonBoneLens");
	HX_MARK_MEMBER_NAME(actions,"actions");
	HX_MARK_MEMBER_NAME(mats,"mats");
	HX_MARK_END_CLASS();
}

void Geometry_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vertexBuffer,"vertexBuffer");
	HX_VISIT_MEMBER_NAME(vertexBufferMap,"vertexBufferMap");
	HX_VISIT_MEMBER_NAME(indexBuffers,"indexBuffers");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(count,"count");
	HX_VISIT_MEMBER_NAME(ready,"ready");
	HX_VISIT_MEMBER_NAME(vertices,"vertices");
	HX_VISIT_MEMBER_NAME(indices,"indices");
	HX_VISIT_MEMBER_NAME(numTris,"numTris");
	HX_VISIT_MEMBER_NAME(materialIndices,"materialIndices");
	HX_VISIT_MEMBER_NAME(_hx_struct,"struct");
	HX_VISIT_MEMBER_NAME(structLength,"structLength");
	HX_VISIT_MEMBER_NAME(structStr,"structStr");
	HX_VISIT_MEMBER_NAME(usage,"usage");
	HX_VISIT_MEMBER_NAME(instancedVB,"instancedVB");
	HX_VISIT_MEMBER_NAME(instanced,"instanced");
	HX_VISIT_MEMBER_NAME(instanceCount,"instanceCount");
	HX_VISIT_MEMBER_NAME(positions,"positions");
	HX_VISIT_MEMBER_NAME(normals,"normals");
	HX_VISIT_MEMBER_NAME(uvs,"uvs");
	HX_VISIT_MEMBER_NAME(uvs1,"uvs1");
	HX_VISIT_MEMBER_NAME(cols,"cols");
	HX_VISIT_MEMBER_NAME(tangents,"tangents");
	HX_VISIT_MEMBER_NAME(bones,"bones");
	HX_VISIT_MEMBER_NAME(weights,"weights");
	HX_VISIT_MEMBER_NAME(instanceOffsets,"instanceOffsets");
	HX_VISIT_MEMBER_NAME(offsetVecs,"offsetVecs");
	HX_VISIT_MEMBER_NAME(aabb,"aabb");
	HX_VISIT_MEMBER_NAME(skinBoneCounts,"skinBoneCounts");
	HX_VISIT_MEMBER_NAME(skinBoneIndices,"skinBoneIndices");
	HX_VISIT_MEMBER_NAME(skinBoneWeights,"skinBoneWeights");
	HX_VISIT_MEMBER_NAME(skeletonTransformsI,"skeletonTransformsI");
	HX_VISIT_MEMBER_NAME(skeletonBoneRefs,"skeletonBoneRefs");
	HX_VISIT_MEMBER_NAME(skeletonBoneLens,"skeletonBoneLens");
	HX_VISIT_MEMBER_NAME(actions,"actions");
	HX_VISIT_MEMBER_NAME(mats,"mats");
}

hx::Val Geometry_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uvs") ) { return hx::Val( uvs ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"uvs1") ) { return hx::Val( uvs1 ); }
		if (HX_FIELD_EQ(inName,"cols") ) { return hx::Val( cols ); }
		if (HX_FIELD_EQ(inName,"aabb") ) { return hx::Val( aabb ); }
		if (HX_FIELD_EQ(inName,"mats") ) { return hx::Val( mats ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count ); }
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready ); }
		if (HX_FIELD_EQ(inName,"usage") ) { return hx::Val( usage ); }
		if (HX_FIELD_EQ(inName,"bones") ) { return hx::Val( bones ); }
		if (HX_FIELD_EQ(inName,"build") ) { return hx::Val( build_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"struct") ) { return hx::Val( _hx_struct ); }
		if (HX_FIELD_EQ(inName,"delete") ) { return hx::Val( _hx_delete_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indices") ) { return hx::Val( indices ); }
		if (HX_FIELD_EQ(inName,"numTris") ) { return hx::Val( numTris ); }
		if (HX_FIELD_EQ(inName,"normals") ) { return hx::Val( normals ); }
		if (HX_FIELD_EQ(inName,"weights") ) { return hx::Val( weights ); }
		if (HX_FIELD_EQ(inName,"actions") ) { return hx::Val( actions ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { return hx::Val( vertices ); }
		if (HX_FIELD_EQ(inName,"tangents") ) { return hx::Val( tangents ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"structStr") ) { return hx::Val( structStr ); }
		if (HX_FIELD_EQ(inName,"instanced") ) { return hx::Val( instanced ); }
		if (HX_FIELD_EQ(inName,"positions") ) { return hx::Val( positions ); }
		if (HX_FIELD_EQ(inName,"hasAttrib") ) { return hx::Val( hasAttrib_dyn() ); }
		if (HX_FIELD_EQ(inName,"addAction") ) { return hx::Val( addAction_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"offsetVecs") ) { return hx::Val( offsetVecs ); }
		if (HX_FIELD_EQ(inName,"applyScale") ) { return hx::Val( applyScale_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"instancedVB") ) { return hx::Val( instancedVB ); }
		if (HX_FIELD_EQ(inName,"addArmature") ) { return hx::Val( addArmature_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vertexBuffer") ) { return hx::Val( vertexBuffer ); }
		if (HX_FIELD_EQ(inName,"indexBuffers") ) { return hx::Val( indexBuffers ); }
		if (HX_FIELD_EQ(inName,"structLength") ) { return hx::Val( structLength ); }
		if (HX_FIELD_EQ(inName,"copyVertices") ) { return hx::Val( copyVertices_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"instanceCount") ) { return hx::Val( instanceCount ); }
		if (HX_FIELD_EQ(inName,"sortInstanced") ) { return hx::Val( sortInstanced_dyn() ); }
		if (HX_FIELD_EQ(inName,"calculateAABB") ) { return hx::Val( calculateAABB_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"skinBoneCounts") ) { return hx::Val( skinBoneCounts ); }
		if (HX_FIELD_EQ(inName,"setupInstanced") ) { return hx::Val( setupInstanced_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"vertexBufferMap") ) { return hx::Val( vertexBufferMap ); }
		if (HX_FIELD_EQ(inName,"materialIndices") ) { return hx::Val( materialIndices ); }
		if (HX_FIELD_EQ(inName,"instanceOffsets") ) { return hx::Val( instanceOffsets ); }
		if (HX_FIELD_EQ(inName,"skinBoneIndices") ) { return hx::Val( skinBoneIndices ); }
		if (HX_FIELD_EQ(inName,"skinBoneWeights") ) { return hx::Val( skinBoneWeights ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skeletonBoneRefs") ) { return hx::Val( skeletonBoneRefs ); }
		if (HX_FIELD_EQ(inName,"skeletonBoneLens") ) { return hx::Val( skeletonBoneLens ); }
		if (HX_FIELD_EQ(inName,"getVerticesCount") ) { return hx::Val( getVerticesCount_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getVerticesLength") ) { return hx::Val( getVerticesLength_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"skeletonTransformsI") ) { return hx::Val( skeletonTransformsI ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"initSkeletonTransforms") ) { return hx::Val( initSkeletonTransforms_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Geometry_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"buildVertices") ) { outValue = buildVertices_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getVertexStructure") ) { outValue = getVertexStructure_dyn(); return true; }
	}
	return false;
}

hx::Val Geometry_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uvs") ) { uvs=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"uvs1") ) { uvs1=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cols") ) { cols=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aabb") ) { aabb=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mats") ) { mats=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ready") ) { ready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"usage") ) { usage=inValue.Cast<  ::kha::graphics4::Usage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bones") ) { bones=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"struct") ) { _hx_struct=inValue.Cast<  ::kha::graphics4::VertexStructure >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indices") ) { indices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numTris") ) { numTris=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"normals") ) { normals=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weights") ) { weights=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"actions") ) { actions=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tangents") ) { tangents=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"structStr") ) { structStr=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instanced") ) { instanced=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positions") ) { positions=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"offsetVecs") ) { offsetVecs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"instancedVB") ) { instancedVB=inValue.Cast<  ::kha::graphics4::VertexBuffer >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vertexBuffer") ) { vertexBuffer=inValue.Cast<  ::kha::graphics4::VertexBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexBuffers") ) { indexBuffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"structLength") ) { structLength=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"instanceCount") ) { instanceCount=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"skinBoneCounts") ) { skinBoneCounts=inValue.Cast<  ::kha::arrays::Uint32ArrayPrivate >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"vertexBufferMap") ) { vertexBufferMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"materialIndices") ) { materialIndices=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instanceOffsets") ) { instanceOffsets=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skinBoneIndices") ) { skinBoneIndices=inValue.Cast<  ::kha::arrays::Uint32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skinBoneWeights") ) { skinBoneWeights=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skeletonBoneRefs") ) { skeletonBoneRefs=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skeletonBoneLens") ) { skeletonBoneLens=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"skeletonTransformsI") ) { skeletonTransformsI=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Geometry_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vertexBuffer","\x84","\xaf","\xa9","\x70"));
	outFields->push(HX_HCSTRING("vertexBufferMap","\x78","\x9d","\xc8","\xa2"));
	outFields->push(HX_HCSTRING("indexBuffers","\x81","\x96","\xf2","\xfb"));
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	outFields->push(HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"));
	outFields->push(HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"));
	outFields->push(HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"));
	outFields->push(HX_HCSTRING("indices","\x27","\x47","\x54","\xe3"));
	outFields->push(HX_HCSTRING("numTris","\x4e","\x42","\x84","\xa0"));
	outFields->push(HX_HCSTRING("materialIndices","\x40","\x05","\x8c","\xbf"));
	outFields->push(HX_HCSTRING("struct","\x55","\x3a","\x39","\x11"));
	outFields->push(HX_HCSTRING("structLength","\x1b","\x31","\x1d","\xc1"));
	outFields->push(HX_HCSTRING("structStr","\x5c","\x89","\x35","\x47"));
	outFields->push(HX_HCSTRING("usage","\x21","\x5d","\x2f","\xaa"));
	outFields->push(HX_HCSTRING("instancedVB","\x1b","\x38","\x25","\x29"));
	outFields->push(HX_HCSTRING("instanced","\x2f","\x83","\x1a","\x4b"));
	outFields->push(HX_HCSTRING("instanceCount","\xfa","\xf8","\x6b","\xb7"));
	outFields->push(HX_HCSTRING("positions","\xaa","\xf3","\x51","\xd0"));
	outFields->push(HX_HCSTRING("normals","\x6c","\x70","\xda","\x2b"));
	outFields->push(HX_HCSTRING("uvs","\xf2","\x2e","\x59","\x00"));
	outFields->push(HX_HCSTRING("uvs1","\xff","\xe4","\xaf","\x4d"));
	outFields->push(HX_HCSTRING("cols","\x33","\xb8","\xc4","\x41"));
	outFields->push(HX_HCSTRING("tangents","\x0e","\x90","\x1b","\x39"));
	outFields->push(HX_HCSTRING("bones","\xaf","\x58","\xf7","\xb6"));
	outFields->push(HX_HCSTRING("weights","\xfb","\xd7","\xfc","\x6f"));
	outFields->push(HX_HCSTRING("instanceOffsets","\x6b","\x5e","\x23","\x1f"));
	outFields->push(HX_HCSTRING("offsetVecs","\xd2","\xb0","\x63","\x4a"));
	outFields->push(HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40"));
	outFields->push(HX_HCSTRING("skinBoneCounts","\x05","\xac","\xf8","\xf8"));
	outFields->push(HX_HCSTRING("skinBoneIndices","\xc6","\x64","\x98","\xa6"));
	outFields->push(HX_HCSTRING("skinBoneWeights","\x9a","\xf5","\x40","\x33"));
	outFields->push(HX_HCSTRING("skeletonTransformsI","\x15","\xd4","\xac","\x3a"));
	outFields->push(HX_HCSTRING("skeletonBoneRefs","\x11","\xb4","\xc3","\x74"));
	outFields->push(HX_HCSTRING("skeletonBoneLens","\x4f","\x73","\xcc","\x70"));
	outFields->push(HX_HCSTRING("actions","\xfd","\x03","\x2e","\x67"));
	outFields->push(HX_HCSTRING("mats","\xd3","\x41","\x56","\x48"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Geometry_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::VertexBuffer*/ ,(int)offsetof(Geometry_obj,vertexBuffer),HX_HCSTRING("vertexBuffer","\x84","\xaf","\xa9","\x70")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Geometry_obj,vertexBufferMap),HX_HCSTRING("vertexBufferMap","\x78","\x9d","\xc8","\xa2")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Geometry_obj,indexBuffers),HX_HCSTRING("indexBuffers","\x81","\x96","\xf2","\xfb")},
	{hx::fsInt,(int)offsetof(Geometry_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{hx::fsInt,(int)offsetof(Geometry_obj,count),HX_HCSTRING("count","\xcf","\x44","\x63","\x4a")},
	{hx::fsBool,(int)offsetof(Geometry_obj,ready),HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,vertices),HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Geometry_obj,indices),HX_HCSTRING("indices","\x27","\x47","\x54","\xe3")},
	{hx::fsInt,(int)offsetof(Geometry_obj,numTris),HX_HCSTRING("numTris","\x4e","\x42","\x84","\xa0")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Geometry_obj,materialIndices),HX_HCSTRING("materialIndices","\x40","\x05","\x8c","\xbf")},
	{hx::fsObject /*::kha::graphics4::VertexStructure*/ ,(int)offsetof(Geometry_obj,_hx_struct),HX_HCSTRING("struct","\x55","\x3a","\x39","\x11")},
	{hx::fsInt,(int)offsetof(Geometry_obj,structLength),HX_HCSTRING("structLength","\x1b","\x31","\x1d","\xc1")},
	{hx::fsString,(int)offsetof(Geometry_obj,structStr),HX_HCSTRING("structStr","\x5c","\x89","\x35","\x47")},
	{hx::fsObject /*::kha::graphics4::Usage*/ ,(int)offsetof(Geometry_obj,usage),HX_HCSTRING("usage","\x21","\x5d","\x2f","\xaa")},
	{hx::fsObject /*::kha::graphics4::VertexBuffer*/ ,(int)offsetof(Geometry_obj,instancedVB),HX_HCSTRING("instancedVB","\x1b","\x38","\x25","\x29")},
	{hx::fsBool,(int)offsetof(Geometry_obj,instanced),HX_HCSTRING("instanced","\x2f","\x83","\x1a","\x4b")},
	{hx::fsInt,(int)offsetof(Geometry_obj,instanceCount),HX_HCSTRING("instanceCount","\xfa","\xf8","\x6b","\xb7")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,positions),HX_HCSTRING("positions","\xaa","\xf3","\x51","\xd0")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,normals),HX_HCSTRING("normals","\x6c","\x70","\xda","\x2b")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,uvs),HX_HCSTRING("uvs","\xf2","\x2e","\x59","\x00")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,uvs1),HX_HCSTRING("uvs1","\xff","\xe4","\xaf","\x4d")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,cols),HX_HCSTRING("cols","\x33","\xb8","\xc4","\x41")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,tangents),HX_HCSTRING("tangents","\x0e","\x90","\x1b","\x39")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,bones),HX_HCSTRING("bones","\xaf","\x58","\xf7","\xb6")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,weights),HX_HCSTRING("weights","\xfb","\xd7","\xfc","\x6f")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,instanceOffsets),HX_HCSTRING("instanceOffsets","\x6b","\x5e","\x23","\x1f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Geometry_obj,offsetVecs),HX_HCSTRING("offsetVecs","\xd2","\xb0","\x63","\x4a")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Geometry_obj,aabb),HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40")},
	{hx::fsObject /*::kha::arrays::Uint32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,skinBoneCounts),HX_HCSTRING("skinBoneCounts","\x05","\xac","\xf8","\xf8")},
	{hx::fsObject /*::kha::arrays::Uint32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,skinBoneIndices),HX_HCSTRING("skinBoneIndices","\xc6","\x64","\x98","\xa6")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,skinBoneWeights),HX_HCSTRING("skinBoneWeights","\x9a","\xf5","\x40","\x33")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Geometry_obj,skeletonTransformsI),HX_HCSTRING("skeletonTransformsI","\x15","\xd4","\xac","\x3a")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Geometry_obj,skeletonBoneRefs),HX_HCSTRING("skeletonBoneRefs","\x11","\xb4","\xc3","\x74")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Geometry_obj,skeletonBoneLens),HX_HCSTRING("skeletonBoneLens","\x4f","\x73","\xcc","\x70")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Geometry_obj,actions),HX_HCSTRING("actions","\xfd","\x03","\x2e","\x67")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Geometry_obj,mats),HX_HCSTRING("mats","\xd3","\x41","\x56","\x48")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Geometry_obj_sStaticStorageInfo = 0;
#endif

static ::String Geometry_obj_sMemberFields[] = {
	HX_HCSTRING("vertexBuffer","\x84","\xaf","\xa9","\x70"),
	HX_HCSTRING("vertexBufferMap","\x78","\x9d","\xc8","\xa2"),
	HX_HCSTRING("indexBuffers","\x81","\x96","\xf2","\xfb"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"),
	HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"),
	HX_HCSTRING("indices","\x27","\x47","\x54","\xe3"),
	HX_HCSTRING("numTris","\x4e","\x42","\x84","\xa0"),
	HX_HCSTRING("materialIndices","\x40","\x05","\x8c","\xbf"),
	HX_HCSTRING("struct","\x55","\x3a","\x39","\x11"),
	HX_HCSTRING("structLength","\x1b","\x31","\x1d","\xc1"),
	HX_HCSTRING("structStr","\x5c","\x89","\x35","\x47"),
	HX_HCSTRING("usage","\x21","\x5d","\x2f","\xaa"),
	HX_HCSTRING("instancedVB","\x1b","\x38","\x25","\x29"),
	HX_HCSTRING("instanced","\x2f","\x83","\x1a","\x4b"),
	HX_HCSTRING("instanceCount","\xfa","\xf8","\x6b","\xb7"),
	HX_HCSTRING("positions","\xaa","\xf3","\x51","\xd0"),
	HX_HCSTRING("normals","\x6c","\x70","\xda","\x2b"),
	HX_HCSTRING("uvs","\xf2","\x2e","\x59","\x00"),
	HX_HCSTRING("uvs1","\xff","\xe4","\xaf","\x4d"),
	HX_HCSTRING("cols","\x33","\xb8","\xc4","\x41"),
	HX_HCSTRING("tangents","\x0e","\x90","\x1b","\x39"),
	HX_HCSTRING("bones","\xaf","\x58","\xf7","\xb6"),
	HX_HCSTRING("weights","\xfb","\xd7","\xfc","\x6f"),
	HX_HCSTRING("instanceOffsets","\x6b","\x5e","\x23","\x1f"),
	HX_HCSTRING("offsetVecs","\xd2","\xb0","\x63","\x4a"),
	HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40"),
	HX_HCSTRING("skinBoneCounts","\x05","\xac","\xf8","\xf8"),
	HX_HCSTRING("skinBoneIndices","\xc6","\x64","\x98","\xa6"),
	HX_HCSTRING("skinBoneWeights","\x9a","\xf5","\x40","\x33"),
	HX_HCSTRING("skeletonTransformsI","\x15","\xd4","\xac","\x3a"),
	HX_HCSTRING("skeletonBoneRefs","\x11","\xb4","\xc3","\x74"),
	HX_HCSTRING("skeletonBoneLens","\x4f","\x73","\xcc","\x70"),
	HX_HCSTRING("actions","\xfd","\x03","\x2e","\x67"),
	HX_HCSTRING("mats","\xd3","\x41","\x56","\x48"),
	HX_HCSTRING("delete","\x2b","\xc0","\xd8","\x6a"),
	HX_HCSTRING("applyScale","\x3c","\x4a","\x20","\x24"),
	HX_HCSTRING("setupInstanced","\xf2","\x7c","\xb4","\xb6"),
	HX_HCSTRING("sortInstanced","\xf1","\x5f","\x30","\x49"),
	HX_HCSTRING("copyVertices","\xce","\x74","\xee","\x65"),
	HX_HCSTRING("getVerticesLength","\xf5","\x38","\xdf","\xe3"),
	HX_HCSTRING("hasAttrib","\x44","\x9a","\x05","\x21"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("build","\x2e","\xdb","\xea","\xba"),
	HX_HCSTRING("getVerticesCount","\xa0","\x17","\x44","\xea"),
	HX_HCSTRING("addArmature","\xba","\xdb","\xd2","\x1d"),
	HX_HCSTRING("addAction","\xb7","\x70","\x6a","\xce"),
	HX_HCSTRING("initSkeletonTransforms","\xe4","\x0c","\x81","\xa4"),
	HX_HCSTRING("calculateAABB","\x06","\xab","\xe0","\x9c"),
	::String(null()) };

static void Geometry_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Geometry_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Geometry_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Geometry_obj::__mClass,"__mClass");
};

#endif

hx::Class Geometry_obj::__mClass;

static ::String Geometry_obj_sStaticFields[] = {
	HX_HCSTRING("getVertexStructure","\x39","\x6c","\x63","\xeb"),
	HX_HCSTRING("buildVertices","\x47","\x35","\xe6","\x64"),
	::String(null())
};

void Geometry_obj::__register()
{
	hx::Object *dummy = new Geometry_obj;
	Geometry_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.data.Geometry","\xf0","\x23","\x2b","\x36");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Geometry_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Geometry_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Geometry_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Geometry_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Geometry_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Geometry_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Geometry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Geometry_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
