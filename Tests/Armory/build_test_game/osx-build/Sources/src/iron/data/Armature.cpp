// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_Armature
#include <iron/data/Armature.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_923e11e163e0590e_6_new,"iron.data.Armature","new",0x194f0e29,"iron.data.Armature.new","iron/data/Armature.hx",6,0x6fdce907)
HX_DEFINE_STACK_FRAME(_hx_pos_923e11e163e0590e_17_new,"iron.data.Armature","new",0x194f0e29,"iron.data.Armature.new","iron/data/Armature.hx",17,0x6fdce907)
HX_LOCAL_STACK_FRAME(_hx_pos_923e11e163e0590e_22_initMats,"iron.data.Armature","initMats",0xe8f09a9a,"iron.data.Armature.initMats","iron/data/Armature.hx",22,0x6fdce907)
HX_LOCAL_STACK_FRAME(_hx_pos_923e11e163e0590e_35_getAction,"iron.data.Armature","getAction",0x5d7dff75,"iron.data.Armature.getAction","iron/data/Armature.hx",35,0x6fdce907)
HX_LOCAL_STACK_FRAME(_hx_pos_923e11e163e0590e_40_setParents,"iron.data.Armature","setParents",0xedd7a1de,"iron.data.Armature.setParents","iron/data/Armature.hx",40,0x6fdce907)
HX_LOCAL_STACK_FRAME(_hx_pos_923e11e163e0590e_49_traverseBones,"iron.data.Armature","traverseBones",0xd40718a6,"iron.data.Armature.traverseBones","iron/data/Armature.hx",49,0x6fdce907)
HX_LOCAL_STACK_FRAME(_hx_pos_923e11e163e0590e_54_traverseBonesStep,"iron.data.Armature","traverseBonesStep",0x4d2c7712,"iron.data.Armature.traverseBonesStep","iron/data/Armature.hx",54,0x6fdce907)
namespace iron{
namespace data{

void Armature_obj::__construct(::String name,::Array< ::Dynamic> actions){
            	HX_STACKFRAME(&_hx_pos_923e11e163e0590e_6_new)
HXLINE(   9)		this->matsReady = false;
HXLINE(   8)		this->actions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  12)		this->name = name;
HXLINE(  14)		{
HXLINE(  14)			int _g = (int)0;
HXDLIN(  14)			while((_g < actions->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,bones) HXARGC(1)
            				void _hx_run( ::Dynamic object){
            					HX_STACKFRAME(&_hx_pos_923e11e163e0590e_17_new)
HXLINE(  17)					bones->push(object);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  14)				 ::Dynamic a = actions->__get(_g);
HXDLIN(  14)				_g = (_g + (int)1);
HXLINE(  15)				{
HXLINE(  15)					int _g1 = (int)0;
HXDLIN(  15)					::Array< ::Dynamic> _g2 = ( (::Array< ::Dynamic>)(a->__Field(HX_("objects",d4,68,4f,82),hx::paccDynamic)) );
HXDLIN(  15)					while((_g1 < _g2->length)){
HXLINE(  15)						 ::Dynamic o = _g2->__get(_g1);
HXDLIN(  15)						_g1 = (_g1 + (int)1);
HXDLIN(  15)						::iron::data::Armature_obj::setParents(o);
            					}
            				}
HXLINE(  16)				::Array< ::Dynamic> bones = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  17)				::iron::data::Armature_obj::traverseBones(( (::Array< ::Dynamic>)(a->__Field(HX_("objects",d4,68,4f,82),hx::paccDynamic)) ), ::Dynamic(new _hx_Closure_0(bones)));
HXLINE(  18)				this->actions->push( ::Dynamic(hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("bones",af,58,f7,b6),bones)
            					->setFixed(1,HX_("mats",d3,41,56,48),null())
            					->setFixed(2,HX_("name",4b,72,ff,48), ::Dynamic(a->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)))));
            			}
            		}
            	}

Dynamic Armature_obj::__CreateEmpty() { return new Armature_obj; }

void *Armature_obj::_hx_vtable = 0;

Dynamic Armature_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Armature_obj > _hx_result = new Armature_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Armature_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0074a86f;
}

void Armature_obj::initMats(){
            	HX_STACKFRAME(&_hx_pos_923e11e163e0590e_22_initMats)
HXLINE(  23)		if (this->matsReady) {
HXLINE(  23)			return;
            		}
HXLINE(  24)		this->matsReady = true;
HXLINE(  26)		{
HXLINE(  26)			int _g = (int)0;
HXDLIN(  26)			::Array< ::Dynamic> _g1 = this->actions;
HXDLIN(  26)			while((_g < _g1->length)){
HXLINE(  26)				 ::Dynamic a = _g1->__get(_g);
HXDLIN(  26)				_g = (_g + (int)1);
HXLINE(  27)				if (hx::IsNotNull( ( (::Array< ::Dynamic>)(a->__Field(HX_("mats",d3,41,56,48),hx::paccDynamic)) ) )) {
HXLINE(  27)					continue;
            				}
HXLINE(  28)				a->__SetField(HX_("mats",d3,41,56,48),::Array_obj< ::Dynamic>::__new(0),hx::paccDynamic);
HXLINE(  29)				{
HXLINE(  29)					int _g2 = (int)0;
HXDLIN(  29)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(a->__Field(HX_("bones",af,58,f7,b6),hx::paccDynamic)) );
HXDLIN(  29)					while((_g2 < _g3->length)){
HXLINE(  29)						 ::Dynamic b = _g3->__get(_g2);
HXDLIN(  29)						_g2 = (_g2 + (int)1);
HXLINE(  30)						::Array< ::Dynamic> a1 = ( (::Array< ::Dynamic>)(a->__Field(HX_("mats",d3,41,56,48),hx::paccDynamic)) );
HXDLIN(  30)						a1->push(::iron::math::Mat4_obj::fromFloat32Array(( ( ::kha::arrays::Float32ArrayPrivate)( ::Dynamic(b->__Field(HX_("transform",6c,2d,93,45),hx::paccDynamic))->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) ),null()));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Armature_obj,initMats,(void))

 ::Dynamic Armature_obj::getAction(::String name){
            	HX_STACKFRAME(&_hx_pos_923e11e163e0590e_35_getAction)
HXLINE(  36)		{
HXLINE(  36)			int _g = (int)0;
HXDLIN(  36)			::Array< ::Dynamic> _g1 = this->actions;
HXDLIN(  36)			while((_g < _g1->length)){
HXLINE(  36)				 ::Dynamic a = _g1->__get(_g);
HXDLIN(  36)				_g = (_g + (int)1);
HXDLIN(  36)				if ((( (::String)(a->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE(  36)					return a;
            				}
            			}
            		}
HXLINE(  37)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Armature_obj,getAction,return )

void Armature_obj::setParents( ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_923e11e163e0590e_40_setParents)
HXLINE(  41)		if (hx::IsNull( ( (::Array< ::Dynamic>)(object->__Field(HX_("children",3f,19,6a,70),hx::paccDynamic)) ) )) {
HXLINE(  41)			return;
            		}
HXLINE(  42)		{
HXLINE(  42)			int _g = (int)0;
HXDLIN(  42)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(object->__Field(HX_("children",3f,19,6a,70),hx::paccDynamic)) );
HXDLIN(  42)			while((_g < _g1->length)){
HXLINE(  42)				 ::Dynamic o = _g1->__get(_g);
HXDLIN(  42)				_g = (_g + (int)1);
HXLINE(  43)				o->__SetField(HX_("parent",2a,05,7e,ed),object,hx::paccDynamic);
HXLINE(  44)				::iron::data::Armature_obj::setParents(o);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Armature_obj,setParents,(void))

void Armature_obj::traverseBones(::Array< ::Dynamic> objects, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_923e11e163e0590e_49_traverseBones)
HXDLIN(  49)		int _g1 = (int)0;
HXDLIN(  49)		int _g = objects->length;
HXDLIN(  49)		while((_g1 < _g)){
HXDLIN(  49)			_g1 = (_g1 + (int)1);
HXDLIN(  49)			int i = (_g1 - (int)1);
HXLINE(  50)			::iron::data::Armature_obj::traverseBonesStep(objects->__get(i),callback);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Armature_obj,traverseBones,(void))

void Armature_obj::traverseBonesStep( ::Dynamic object, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_923e11e163e0590e_54_traverseBonesStep)
HXLINE(  55)		if ((( (::String)(object->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("bone_object",9a,bd,c7,6d))) {
HXLINE(  55)			callback(object);
            		}
HXLINE(  56)		if (hx::IsNull( ( (::Array< ::Dynamic>)(object->__Field(HX_("children",3f,19,6a,70),hx::paccDynamic)) ) )) {
HXLINE(  56)			return;
            		}
HXLINE(  57)		{
HXLINE(  57)			int _g1 = (int)0;
HXDLIN(  57)			int _g = ( (::Array< ::Dynamic>)(object->__Field(HX_("children",3f,19,6a,70),hx::paccDynamic)) )->length;
HXDLIN(  57)			while((_g1 < _g)){
HXLINE(  57)				_g1 = (_g1 + (int)1);
HXDLIN(  57)				int i = (_g1 - (int)1);
HXLINE(  58)				::iron::data::Armature_obj::traverseBonesStep( ::Dynamic(object->__Field(HX_("children",3f,19,6a,70),hx::paccDynamic))->__GetItem(i),callback);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Armature_obj,traverseBonesStep,(void))


hx::ObjectPtr< Armature_obj > Armature_obj::__new(::String name,::Array< ::Dynamic> actions) {
	hx::ObjectPtr< Armature_obj > __this = new Armature_obj();
	__this->__construct(name,actions);
	return __this;
}

hx::ObjectPtr< Armature_obj > Armature_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::Array< ::Dynamic> actions) {
	Armature_obj *__this = (Armature_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Armature_obj), true, "iron.data.Armature"));
	*(void **)__this = Armature_obj::_hx_vtable;
	__this->__construct(name,actions);
	return __this;
}

Armature_obj::Armature_obj()
{
}

void Armature_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Armature);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(actions,"actions");
	HX_MARK_MEMBER_NAME(matsReady,"matsReady");
	HX_MARK_END_CLASS();
}

void Armature_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(actions,"actions");
	HX_VISIT_MEMBER_NAME(matsReady,"matsReady");
}

hx::Val Armature_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"actions") ) { return hx::Val( actions ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"initMats") ) { return hx::Val( initMats_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"matsReady") ) { return hx::Val( matsReady ); }
		if (HX_FIELD_EQ(inName,"getAction") ) { return hx::Val( getAction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Armature_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"setParents") ) { outValue = setParents_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"traverseBones") ) { outValue = traverseBones_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"traverseBonesStep") ) { outValue = traverseBonesStep_dyn(); return true; }
	}
	return false;
}

hx::Val Armature_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"actions") ) { actions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"matsReady") ) { matsReady=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Armature_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("actions","\xfd","\x03","\x2e","\x67"));
	outFields->push(HX_HCSTRING("matsReady","\x90","\x51","\x93","\xc9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Armature_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Armature_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Armature_obj,actions),HX_HCSTRING("actions","\xfd","\x03","\x2e","\x67")},
	{hx::fsBool,(int)offsetof(Armature_obj,matsReady),HX_HCSTRING("matsReady","\x90","\x51","\x93","\xc9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Armature_obj_sStaticStorageInfo = 0;
#endif

static ::String Armature_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("actions","\xfd","\x03","\x2e","\x67"),
	HX_HCSTRING("matsReady","\x90","\x51","\x93","\xc9"),
	HX_HCSTRING("initMats","\x03","\x71","\x0d","\x4d"),
	HX_HCSTRING("getAction","\xec","\xc4","\x9c","\x92"),
	::String(null()) };

static void Armature_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Armature_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Armature_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Armature_obj::__mClass,"__mClass");
};

#endif

hx::Class Armature_obj::__mClass;

static ::String Armature_obj_sStaticFields[] = {
	HX_HCSTRING("setParents","\x87","\xa4","\xa5","\x33"),
	HX_HCSTRING("traverseBones","\x9d","\x65","\x1b","\x65"),
	HX_HCSTRING("traverseBonesStep","\x89","\x0b","\x50","\xa4"),
	::String(null())
};

void Armature_obj::__register()
{
	hx::Object *dummy = new Armature_obj;
	Armature_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.data.Armature","\xb7","\xc5","\xf8","\x4f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Armature_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Armature_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Armature_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Armature_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Armature_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Armature_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Armature_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Armature_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
