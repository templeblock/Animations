// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_iron_data_ShaderContext
#include <iron/data/ShaderContext.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingOperation
#include <kha/graphics4/BlendingOperation.h>
#endif
#ifndef INCLUDED_kha_graphics4_CompareMode
#include <kha/graphics4/CompareMode.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_CullMode
#include <kha/graphics4/CullMode.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_GeometryShader
#include <kha/graphics4/GeometryShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_MipMapFilter
#include <kha/graphics4/MipMapFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_StencilAction
#include <kha/graphics4/StencilAction.h>
#endif
#ifndef INCLUDED_kha_graphics4_TessellationControlShader
#include <kha/graphics4/TessellationControlShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_TessellationEvaluationShader
#include <kha/graphics4/TessellationEvaluationShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureAddressing
#include <kha/graphics4/TextureAddressing.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFilter
#include <kha/graphics4/TextureFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_66_new,"iron.data.ShaderContext","new",0x4728323e,"iron.data.ShaderContext.new","iron/data/ShaderData.hx",66,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_94_compile,"iron.data.ShaderContext","compile",0x757cce51,"iron.data.ShaderContext.compile","iron/data/ShaderData.hx",94,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_237_finishCompile,"iron.data.ShaderContext","finishCompile",0xef5cb0be,"iron.data.ShaderContext.finishCompile","iron/data/ShaderData.hx",237,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_258_sizeToVD,"iron.data.ShaderContext","sizeToVD",0xc0ba202c,"iron.data.ShaderContext.sizeToVD","iron/data/ShaderData.hx",258,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_266_parseVertexStructure,"iron.data.ShaderContext","parseVertexStructure",0x8406199e,"iron.data.ShaderContext.parseVertexStructure","iron/data/ShaderData.hx",266,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_290_deleteShader,"iron.data.ShaderContext","deleteShader",0xba645812,"iron.data.ShaderContext.deleteShader","iron/data/ShaderData.hx",290,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_293_delete,"iron.data.ShaderContext","delete",0xd0f45d0d,"iron.data.ShaderContext.delete","iron/data/ShaderData.hx",293,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_303_getCompareMode,"iron.data.ShaderContext","getCompareMode",0x14017094,"iron.data.ShaderContext.getCompareMode","iron/data/ShaderData.hx",303,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_317_getCullMode,"iron.data.ShaderContext","getCullMode",0x77c738c9,"iron.data.ShaderContext.getCullMode","iron/data/ShaderData.hx",317,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_325_getBlendingOperation,"iron.data.ShaderContext","getBlendingOperation",0x900523a2,"iron.data.ShaderContext.getBlendingOperation","iron/data/ShaderData.hx",325,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_336_getBlendingFactor,"iron.data.ShaderContext","getBlendingFactor",0x5b384e74,"iron.data.ShaderContext.getBlendingFactor","iron/data/ShaderData.hx",336,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_352_getTextureAddresing,"iron.data.ShaderContext","getTextureAddresing",0x3b559a9c,"iron.data.ShaderContext.getTextureAddresing","iron/data/ShaderData.hx",352,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_360_getTextureFilter,"iron.data.ShaderContext","getTextureFilter",0x05fee7df,"iron.data.ShaderContext.getTextureFilter","iron/data/ShaderData.hx",360,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_368_getMipmapFilter,"iron.data.ShaderContext","getMipmapFilter",0x269da3f4,"iron.data.ShaderContext.getMipmapFilter","iron/data/ShaderData.hx",368,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_376_addConstant,"iron.data.ShaderContext","addConstant",0x77f06883,"iron.data.ShaderContext.addConstant","iron/data/ShaderData.hx",376,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_379_addTexture,"iron.data.ShaderContext","addTexture",0xb913aa9c,"iron.data.ShaderContext.addTexture","iron/data/ShaderData.hx",379,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_385_setTextureParameters,"iron.data.ShaderContext","setTextureParameters",0xd024ddc5,"iron.data.ShaderContext.setTextureParameters","iron/data/ShaderData.hx",385,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_278_getStructureRect,"iron.data.ShaderContext","getStructureRect",0xc52b57e3,"iron.data.ShaderContext.getStructureRect","iron/data/ShaderData.hx",278,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_77_boot,"iron.data.ShaderContext","boot",0xf41cc494,"iron.data.ShaderContext.boot","iron/data/ShaderData.hx",77,0x8b5e6fd1)
namespace iron{
namespace data{

void ShaderContext_obj::__construct( ::Dynamic raw, ::Dynamic overrideContext, ::Dynamic done){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_66_new)
HXLINE(  75)		this->instancing = false;
HXLINE(  80)		this->raw = raw;
HXLINE(  81)		this->overrideContext = overrideContext;
HXLINE(  83)		if ((( (::String)(raw->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == HX_("rect",24,4d,a7,4b))) {
HXLINE(  84)			this->structure = ::iron::data::ShaderContext_obj::getStructureRect();
HXLINE(  85)			this->instancing = false;
            		}
            		else {
HXLINE(  88)			this->parseVertexStructure();
            		}
HXLINE(  91)		this->compile(done);
            	}

Dynamic ShaderContext_obj::__CreateEmpty() { return new ShaderContext_obj; }

void *ShaderContext_obj::_hx_vtable = 0;

Dynamic ShaderContext_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ShaderContext_obj > _hx_result = new ShaderContext_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ShaderContext_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x44627278;
}

void ShaderContext_obj::compile( ::Dynamic done){
            	HX_GC_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_94_compile)
HXLINE(  95)		if (hx::IsNotNull( this->pipeState )) {
HXLINE(  95)			this->pipeState->_hx_delete();
            		}
HXLINE(  96)		this->pipeState =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(  97)		this->constants = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  98)		this->textureUnits = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  99)		this->paramsSet = ::Array_obj< bool >::__new(0);
HXLINE( 102)		if (this->instancing) {
HXLINE( 103)			 ::kha::graphics4::VertexStructure instStruct =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE( 104)			instStruct->add(HX_("off",6f,93,54,00),::kha::graphics4::VertexData_obj::Float3_dyn());
HXLINE( 105)			instStruct->instanced = true;
HXLINE( 106)			this->pipeState->inputLayout = ::Array_obj< ::Dynamic>::__new(2)->init(0,this->structure)->init(1,instStruct);
            		}
            		else {
HXLINE( 110)			this->pipeState->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->structure);
            		}
HXLINE( 114)		this->pipeState->depthWrite = ( (bool)(this->raw->__Field(HX_("depth_write",63,c9,b5,19),hx::paccDynamic)) );
HXLINE( 115)		this->pipeState->depthMode = this->getCompareMode(( (::String)(this->raw->__Field(HX_("compare_mode",7d,60,f4,04),hx::paccDynamic)) ));
HXLINE( 118)		if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("stencil_mode",c6,ff,af,c5),hx::paccDynamic)) ) )) {
HXLINE( 119)			if ((( (::String)(this->raw->__Field(HX_("stencil_mode",c6,ff,af,c5),hx::paccDynamic)) ) == HX_("always",cf,0e,d7,46))) {
HXLINE( 120)				this->pipeState->stencilMode = ::kha::graphics4::CompareMode_obj::Always_dyn();
            			}
            			else {
HXLINE( 121)				if ((( (::String)(this->raw->__Field(HX_("stencil_mode",c6,ff,af,c5),hx::paccDynamic)) ) == HX_("equal",b4,cf,82,72))) {
HXLINE( 122)					this->pipeState->stencilMode = ::kha::graphics4::CompareMode_obj::Equal_dyn();
            				}
            				else {
HXLINE( 123)					if ((( (::String)(this->raw->__Field(HX_("stencil_mode",c6,ff,af,c5),hx::paccDynamic)) ) == HX_("not_equal",48,80,be,b6))) {
HXLINE( 124)						this->pipeState->stencilMode = ::kha::graphics4::CompareMode_obj::NotEqual_dyn();
            					}
            				}
            			}
            		}
HXLINE( 126)		if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("stencil_pass",34,11,a1,c7),hx::paccDynamic)) ) )) {
HXLINE( 127)			if ((( (::String)(this->raw->__Field(HX_("stencil_pass",34,11,a1,c7),hx::paccDynamic)) ) == HX_("replace",34,48,28,ab))) {
HXLINE( 128)				this->pipeState->stencilBothPass = ::kha::graphics4::StencilAction_obj::Replace_dyn();
            			}
            			else {
HXLINE( 129)				if ((( (::String)(this->raw->__Field(HX_("stencil_pass",34,11,a1,c7),hx::paccDynamic)) ) == HX_("keep",85,d0,06,47))) {
HXLINE( 130)					this->pipeState->stencilBothPass = ::kha::graphics4::StencilAction_obj::Keep_dyn();
            				}
            			}
            		}
HXLINE( 132)		bool _hx_tmp;
HXDLIN( 132)		if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("stencil_fail",41,e6,04,c1),hx::paccDynamic)) ) )) {
HXLINE( 132)			_hx_tmp = (( (::String)(this->raw->__Field(HX_("stencil_fail",41,e6,04,c1),hx::paccDynamic)) ) == HX_("keep",85,d0,06,47));
            		}
            		else {
HXLINE( 132)			_hx_tmp = false;
            		}
HXDLIN( 132)		if (_hx_tmp) {
HXLINE( 133)			this->pipeState->stencilDepthFail = ::kha::graphics4::StencilAction_obj::Keep_dyn();
HXLINE( 134)			this->pipeState->stencilFail = ::kha::graphics4::StencilAction_obj::Keep_dyn();
            		}
HXLINE( 136)		if (hx::IsNotNull( this->raw->__Field(HX_("stencil_reference_value",3a,f1,d8,44),hx::paccDynamic) )) {
HXLINE( 137)			this->pipeState->stencilReferenceValue = ( (int)(this->raw->__Field(HX_("stencil_reference_value",3a,f1,d8,44),hx::paccDynamic)) );
            		}
HXLINE( 143)		this->pipeState->cullMode = this->getCullMode(( (::String)(this->raw->__Field(HX_("cull_mode",50,c4,74,6c),hx::paccDynamic)) ));
HXLINE( 146)		if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("blend_source",49,f6,96,02),hx::paccDynamic)) ) )) {
HXLINE( 146)			this->pipeState->blendSource = this->getBlendingFactor(( (::String)(this->raw->__Field(HX_("blend_source",49,f6,96,02),hx::paccDynamic)) ));
            		}
HXLINE( 147)		if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("blend_destination",60,d6,9d,4e),hx::paccDynamic)) ) )) {
HXLINE( 147)			this->pipeState->blendDestination = this->getBlendingFactor(( (::String)(this->raw->__Field(HX_("blend_destination",60,d6,9d,4e),hx::paccDynamic)) ));
            		}
HXLINE( 148)		if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("blend_operation",79,d7,69,41),hx::paccDynamic)) ) )) {
HXLINE( 148)			this->pipeState->blendOperation = this->getBlendingOperation(( (::String)(this->raw->__Field(HX_("blend_operation",79,d7,69,41),hx::paccDynamic)) ));
            		}
HXLINE( 149)		if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("alpha_blend_source",0a,1f,b7,8a),hx::paccDynamic)) ) )) {
HXLINE( 149)			this->pipeState->alphaBlendSource = this->getBlendingFactor(( (::String)(this->raw->__Field(HX_("alpha_blend_source",0a,1f,b7,8a),hx::paccDynamic)) ));
            		}
HXLINE( 150)		if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("alpha_blend_destination",ff,51,cd,c3),hx::paccDynamic)) ) )) {
HXLINE( 150)			this->pipeState->alphaBlendDestination = this->getBlendingFactor(( (::String)(this->raw->__Field(HX_("alpha_blend_destination",ff,51,cd,c3),hx::paccDynamic)) ));
            		}
HXLINE( 151)		if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("alpha_blend_operation",58,dd,64,7d),hx::paccDynamic)) ) )) {
HXLINE( 151)			this->pipeState->alphaBlendOperation = this->getBlendingOperation(( (::String)(this->raw->__Field(HX_("alpha_blend_operation",58,dd,64,7d),hx::paccDynamic)) ));
            		}
HXLINE( 154)		if (hx::IsNotNull( this->raw->__Field(HX_("color_write_red",95,8d,56,11),hx::paccDynamic) )) {
HXLINE( 154)			this->pipeState->colorWriteMaskRed = ( (bool)(this->raw->__Field(HX_("color_write_red",95,8d,56,11),hx::paccDynamic)) );
            		}
HXLINE( 155)		if (hx::IsNotNull( this->raw->__Field(HX_("color_write_green",07,5c,75,b1),hx::paccDynamic) )) {
HXLINE( 155)			this->pipeState->colorWriteMaskGreen = ( (bool)(this->raw->__Field(HX_("color_write_green",07,5c,75,b1),hx::paccDynamic)) );
            		}
HXLINE( 156)		if (hx::IsNotNull( this->raw->__Field(HX_("color_write_blue",d6,49,d7,0f),hx::paccDynamic) )) {
HXLINE( 156)			this->pipeState->colorWriteMaskBlue = ( (bool)(this->raw->__Field(HX_("color_write_blue",d6,49,d7,0f),hx::paccDynamic)) );
            		}
HXLINE( 157)		if (hx::IsNotNull( this->raw->__Field(HX_("color_write_alpha",a2,f4,1e,39),hx::paccDynamic) )) {
HXLINE( 157)			this->pipeState->colorWriteMaskAlpha = ( (bool)(this->raw->__Field(HX_("color_write_alpha",a2,f4,1e,39),hx::paccDynamic)) );
            		}
HXLINE( 160)		if (hx::IsNotNull( this->raw->__Field(HX_("conservative_raster",0f,38,63,6e),hx::paccDynamic) )) {
HXLINE( 160)			this->pipeState->conservativeRasterization = ( (bool)(this->raw->__Field(HX_("conservative_raster",0f,38,63,6e),hx::paccDynamic)) );
            		}
HXLINE( 163)		if (( (bool)(this->raw->__Field(HX_("shader_from_source",f6,0e,37,d1),hx::paccDynamic)) )) {
HXLINE( 164)			this->pipeState->fragmentShader = ::kha::graphics4::FragmentShader_obj::fromSource(( (::String)(this->raw->__Field(HX_("fragment_shader",f4,0a,a9,c5),hx::paccDynamic)) ));
HXLINE( 165)			this->pipeState->vertexShader = ::kha::graphics4::VertexShader_obj::fromSource(( (::String)(this->raw->__Field(HX_("vertex_shader",e0,e9,85,30),hx::paccDynamic)) ));
HXLINE( 175)			this->finishCompile(done);
            		}
            		else {
HXLINE( 219)			::String _hx_tmp1 = ::StringTools_obj::replace(( (::String)(this->raw->__Field(HX_("fragment_shader",f4,0a,a9,c5),hx::paccDynamic)) ),HX_(".",2e,00,00,00),HX_("_",5f,00,00,00));
HXDLIN( 219)			this->pipeState->fragmentShader = ( ( ::kha::graphics4::FragmentShader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),_hx_tmp1)) );
HXLINE( 220)			::String _hx_tmp2 = ::StringTools_obj::replace(( (::String)(this->raw->__Field(HX_("vertex_shader",e0,e9,85,30),hx::paccDynamic)) ),HX_(".",2e,00,00,00),HX_("_",5f,00,00,00));
HXDLIN( 220)			this->pipeState->vertexShader = ( ( ::kha::graphics4::VertexShader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),_hx_tmp2)) );
HXLINE( 222)			if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("geometry_shader",52,68,06,7a),hx::paccDynamic)) ) )) {
HXLINE( 223)				::String _hx_tmp3 = ::StringTools_obj::replace(( (::String)(this->raw->__Field(HX_("geometry_shader",52,68,06,7a),hx::paccDynamic)) ),HX_(".",2e,00,00,00),HX_("_",5f,00,00,00));
HXDLIN( 223)				this->pipeState->geometryShader = ( ( ::kha::graphics4::GeometryShader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),_hx_tmp3)) );
            			}
HXLINE( 225)			if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("tesscontrol_shader",18,8f,62,58),hx::paccDynamic)) ) )) {
HXLINE( 226)				::String _hx_tmp4 = ::StringTools_obj::replace(( (::String)(this->raw->__Field(HX_("tesscontrol_shader",18,8f,62,58),hx::paccDynamic)) ),HX_(".",2e,00,00,00),HX_("_",5f,00,00,00));
HXDLIN( 226)				this->pipeState->tessellationControlShader = ( ( ::kha::graphics4::TessellationControlShader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),_hx_tmp4)) );
            			}
HXLINE( 228)			if (hx::IsNotNull( ( (::String)(this->raw->__Field(HX_("tesseval_shader",f7,37,49,43),hx::paccDynamic)) ) )) {
HXLINE( 229)				::String _hx_tmp5 = ::StringTools_obj::replace(( (::String)(this->raw->__Field(HX_("tesseval_shader",f7,37,49,43),hx::paccDynamic)) ),HX_(".",2e,00,00,00),HX_("_",5f,00,00,00));
HXDLIN( 229)				this->pipeState->tessellationEvaluationShader = ( ( ::kha::graphics4::TessellationEvaluationShader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),_hx_tmp5)) );
            			}
HXLINE( 231)			this->finishCompile(done);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,compile,(void))

void ShaderContext_obj::finishCompile( ::Dynamic done){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_237_finishCompile)
HXLINE( 239)		if (hx::IsNotNull( this->overrideContext )) {
HXLINE( 240)			if (hx::IsNotNull( ( (::String)(this->overrideContext->__Field(HX_("cull_mode",50,c4,74,6c),hx::paccDynamic)) ) )) {
HXLINE( 241)				this->pipeState->cullMode = this->getCullMode(( (::String)(this->overrideContext->__Field(HX_("cull_mode",50,c4,74,6c),hx::paccDynamic)) ));
            			}
            		}
HXLINE( 245)		this->pipeState->compile();
HXLINE( 247)		if (hx::IsNotNull( ( (::Array< ::Dynamic>)(this->raw->__Field(HX_("constants",8f,76,6b,44),hx::paccDynamic)) ) )) {
HXLINE( 248)			int _g = (int)0;
HXDLIN( 248)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->raw->__Field(HX_("constants",8f,76,6b,44),hx::paccDynamic)) );
HXDLIN( 248)			while((_g < _g1->length)){
HXLINE( 248)				 ::Dynamic c = _g1->__get(_g);
HXDLIN( 248)				_g = (_g + (int)1);
HXDLIN( 248)				this->addConstant(c);
            			}
            		}
HXLINE( 251)		if (hx::IsNotNull( ( (::Array< ::Dynamic>)(this->raw->__Field(HX_("texture_units",cb,0f,52,01),hx::paccDynamic)) ) )) {
HXLINE( 252)			int _g2 = (int)0;
HXDLIN( 252)			::Array< ::Dynamic> _g11 = ( (::Array< ::Dynamic>)(this->raw->__Field(HX_("texture_units",cb,0f,52,01),hx::paccDynamic)) );
HXDLIN( 252)			while((_g2 < _g11->length)){
HXLINE( 252)				 ::Dynamic tu = _g11->__get(_g2);
HXDLIN( 252)				_g2 = (_g2 + (int)1);
HXDLIN( 252)				this->addTexture(tu);
            			}
            		}
HXLINE( 255)		done(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,finishCompile,(void))

 ::kha::graphics4::VertexData ShaderContext_obj::sizeToVD(int size){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_258_sizeToVD)
HXLINE( 259)		if ((size == (int)1)) {
HXLINE( 259)			return ::kha::graphics4::VertexData_obj::Float1_dyn();
            		}
            		else {
HXLINE( 260)			if ((size == (int)2)) {
HXLINE( 260)				return ::kha::graphics4::VertexData_obj::Float2_dyn();
            			}
            			else {
HXLINE( 261)				if ((size == (int)3)) {
HXLINE( 261)					return ::kha::graphics4::VertexData_obj::Float3_dyn();
            				}
            				else {
HXLINE( 262)					if ((size == (int)4)) {
HXLINE( 262)						return ::kha::graphics4::VertexData_obj::Float4_dyn();
            					}
            				}
            			}
            		}
HXLINE( 263)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,sizeToVD,return )

void ShaderContext_obj::parseVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_266_parseVertexStructure)
HXLINE( 267)		this->structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE( 268)		{
HXLINE( 268)			int _g = (int)0;
HXDLIN( 268)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->raw->__Field(HX_("vertex_structure",58,50,9b,df),hx::paccDynamic)) );
HXDLIN( 268)			while((_g < _g1->length)){
HXLINE( 268)				 ::Dynamic vs = _g1->__get(_g);
HXDLIN( 268)				_g = (_g + (int)1);
HXLINE( 269)				if ((( (::String)(vs->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == HX_("off",6f,93,54,00))) {
HXLINE( 270)					this->instancing = true;
HXLINE( 271)					continue;
            				}
HXLINE( 274)				 ::kha::graphics4::VertexStructure _hx_tmp = this->structure;
HXDLIN( 274)				::String vs1 = ( (::String)(vs->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXDLIN( 274)				_hx_tmp->add(vs1,this->sizeToVD(( (int)(vs->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) )));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ShaderContext_obj,parseVertexStructure,(void))

void ShaderContext_obj::deleteShader( ::Dynamic shader){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_290_deleteShader)
HXDLIN( 290)		shader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,deleteShader,(void))

void ShaderContext_obj::_hx_delete(){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_293_delete)
HXLINE( 294)		if (hx::IsNotNull( this->pipeState->fragmentShader )) {
HXLINE( 294)			this->pipeState->fragmentShader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            		}
HXLINE( 295)		if (hx::IsNotNull( this->pipeState->vertexShader )) {
HXLINE( 295)			this->pipeState->vertexShader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            		}
HXLINE( 296)		if (hx::IsNotNull( this->pipeState->geometryShader )) {
HXLINE( 296)			this->pipeState->geometryShader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            		}
HXLINE( 297)		if (hx::IsNotNull( this->pipeState->tessellationControlShader )) {
HXLINE( 297)			this->pipeState->tessellationControlShader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            		}
HXLINE( 298)		if (hx::IsNotNull( this->pipeState->tessellationEvaluationShader )) {
HXLINE( 298)			this->pipeState->tessellationEvaluationShader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            		}
HXLINE( 299)		this->pipeState->_hx_delete();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ShaderContext_obj,_hx_delete,(void))

 ::kha::graphics4::CompareMode ShaderContext_obj::getCompareMode(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_303_getCompareMode)
HXDLIN( 303)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("always",cf,0e,d7,46)) ){
HXLINE( 304)			return ::kha::graphics4::CompareMode_obj::Always_dyn();
HXDLIN( 304)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("equal",b4,cf,82,72)) ){
HXLINE( 310)			return ::kha::graphics4::CompareMode_obj::Equal_dyn();
HXDLIN( 310)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("greater",fa,90,c0,b7)) ){
HXLINE( 308)			return ::kha::graphics4::CompareMode_obj::Greater_dyn();
HXDLIN( 308)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("greater_equal",6f,9f,ec,24)) ){
HXLINE( 309)			return ::kha::graphics4::CompareMode_obj::GreaterEqual_dyn();
HXDLIN( 309)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("less",59,13,b0,47)) ){
HXLINE( 306)			return ::kha::graphics4::CompareMode_obj::Less_dyn();
HXDLIN( 306)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("less_equal",0e,b3,e0,26)) ){
HXLINE( 307)			return ::kha::graphics4::CompareMode_obj::LessEqual_dyn();
HXDLIN( 307)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("never",8c,3e,30,99)) ){
HXLINE( 305)			return ::kha::graphics4::CompareMode_obj::Never_dyn();
HXDLIN( 305)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("not_equal",48,80,be,b6)) ){
HXLINE( 311)			return ::kha::graphics4::CompareMode_obj::NotEqual_dyn();
HXDLIN( 311)			goto _hx_goto_10;
            		}
            		/* default */{
HXLINE( 312)			return ::kha::graphics4::CompareMode_obj::Less_dyn();
            		}
            		_hx_goto_10:;
HXLINE( 303)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getCompareMode,return )

 ::kha::graphics4::CullMode ShaderContext_obj::getCullMode(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_317_getCullMode)
HXDLIN( 317)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("clockwise",f2,7d,9f,3c)) ){
HXLINE( 319)			return ::kha::graphics4::CullMode_obj::Clockwise_dyn();
HXDLIN( 319)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("none",b8,12,0a,49)) ){
HXLINE( 318)			return ::kha::graphics4::CullMode_obj::None_dyn();
HXDLIN( 318)			goto _hx_goto_12;
            		}
            		/* default */{
HXLINE( 320)			return ::kha::graphics4::CullMode_obj::CounterClockwise_dyn();
            		}
            		_hx_goto_12:;
HXLINE( 317)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getCullMode,return )

 ::kha::graphics4::BlendingOperation ShaderContext_obj::getBlendingOperation(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_325_getBlendingOperation)
HXDLIN( 325)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("add",21,f2,49,00)) ){
HXLINE( 326)			return ::kha::graphics4::BlendingOperation_obj::Add_dyn();
HXDLIN( 326)			goto _hx_goto_14;
            		}
            		if (  (_hx_switch_0==HX_("max",a4,0a,53,00)) ){
HXLINE( 330)			return ::kha::graphics4::BlendingOperation_obj::Max_dyn();
HXDLIN( 330)			goto _hx_goto_14;
            		}
            		if (  (_hx_switch_0==HX_("min",92,11,53,00)) ){
HXLINE( 329)			return ::kha::graphics4::BlendingOperation_obj::Min_dyn();
HXDLIN( 329)			goto _hx_goto_14;
            		}
            		if (  (_hx_switch_0==HX_("reverse_subtract",11,ff,bf,03)) ){
HXLINE( 328)			return ::kha::graphics4::BlendingOperation_obj::ReverseSubtract_dyn();
HXDLIN( 328)			goto _hx_goto_14;
            		}
            		if (  (_hx_switch_0==HX_("subtract",14,75,11,f8)) ){
HXLINE( 327)			return ::kha::graphics4::BlendingOperation_obj::Subtract_dyn();
HXDLIN( 327)			goto _hx_goto_14;
            		}
            		/* default */{
HXLINE( 331)			return ::kha::graphics4::BlendingOperation_obj::Add_dyn();
            		}
            		_hx_goto_14:;
HXLINE( 325)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getBlendingOperation,return )

 ::kha::graphics4::BlendingFactor ShaderContext_obj::getBlendingFactor(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_336_getBlendingFactor)
HXDLIN( 336)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("blend_one",38,c4,1d,18)) ){
HXLINE( 337)			return ::kha::graphics4::BlendingFactor_obj::BlendOne_dyn();
HXDLIN( 337)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("blend_zero",16,7d,2c,09)) ){
HXLINE( 338)			return ::kha::graphics4::BlendingFactor_obj::BlendZero_dyn();
HXDLIN( 338)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("destination_alpha",ad,d7,a4,00)) ){
HXLINE( 340)			return ::kha::graphics4::BlendingFactor_obj::DestinationAlpha_dyn();
HXDLIN( 340)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("destination_color",b2,a1,6a,29)) ){
HXLINE( 344)			return ::kha::graphics4::BlendingFactor_obj::DestinationColor_dyn();
HXDLIN( 344)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("inverse_destination_alpha",1e,74,d8,af)) ){
HXLINE( 342)			return ::kha::graphics4::BlendingFactor_obj::InverseDestinationAlpha_dyn();
HXDLIN( 342)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("inverse_destination_color",23,3e,9e,d8)) ){
HXLINE( 346)			return ::kha::graphics4::BlendingFactor_obj::InverseDestinationColor_dyn();
HXDLIN( 346)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("inverse_source_alpha",e9,ee,63,7f)) ){
HXLINE( 341)			return ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXDLIN( 341)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("inverse_source_color",ee,b8,29,a8)) ){
HXLINE( 345)			return ::kha::graphics4::BlendingFactor_obj::InverseSourceColor_dyn();
HXDLIN( 345)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("source_alpha",ba,35,f0,de)) ){
HXLINE( 339)			return ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXDLIN( 339)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("source_color",bf,ff,b5,07)) ){
HXLINE( 343)			return ::kha::graphics4::BlendingFactor_obj::SourceColor_dyn();
HXDLIN( 343)			goto _hx_goto_16;
            		}
            		/* default */{
HXLINE( 347)			return ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
            		}
            		_hx_goto_16:;
HXLINE( 336)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getBlendingFactor,return )

 ::kha::graphics4::TextureAddressing ShaderContext_obj::getTextureAddresing(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_352_getTextureAddresing)
HXDLIN( 352)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("mirror",3f,72,aa,55)) ){
HXLINE( 354)			return ::kha::graphics4::TextureAddressing_obj::Mirror_dyn();
HXDLIN( 354)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==HX_("repeat",5b,97,7c,06)) ){
HXLINE( 353)			return ::kha::graphics4::TextureAddressing_obj::Repeat_dyn();
HXDLIN( 353)			goto _hx_goto_18;
            		}
            		/* default */{
HXLINE( 355)			return ::kha::graphics4::TextureAddressing_obj::Clamp_dyn();
            		}
            		_hx_goto_18:;
HXLINE( 352)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getTextureAddresing,return )

 ::kha::graphics4::TextureFilter ShaderContext_obj::getTextureFilter(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_360_getTextureFilter)
HXDLIN( 360)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("linear",e5,51,a0,ec)) ){
HXLINE( 362)			return ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
HXDLIN( 362)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("point",50,b4,8f,c6)) ){
HXLINE( 361)			return ::kha::graphics4::TextureFilter_obj::PointFilter_dyn();
HXDLIN( 361)			goto _hx_goto_20;
            		}
            		/* default */{
HXLINE( 363)			return ::kha::graphics4::TextureFilter_obj::AnisotropicFilter_dyn();
            		}
            		_hx_goto_20:;
HXLINE( 360)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getTextureFilter,return )

 ::kha::graphics4::MipMapFilter ShaderContext_obj::getMipmapFilter(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_368_getMipmapFilter)
HXDLIN( 368)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("no",41,60,00,00)) ){
HXLINE( 369)			return ::kha::graphics4::MipMapFilter_obj::NoMipFilter_dyn();
HXDLIN( 369)			goto _hx_goto_22;
            		}
            		if (  (_hx_switch_0==HX_("point",50,b4,8f,c6)) ){
HXLINE( 370)			return ::kha::graphics4::MipMapFilter_obj::PointMipFilter_dyn();
HXDLIN( 370)			goto _hx_goto_22;
            		}
            		/* default */{
HXLINE( 371)			return ::kha::graphics4::MipMapFilter_obj::LinearMipFilter_dyn();
            		}
            		_hx_goto_22:;
HXLINE( 368)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getMipmapFilter,return )

void ShaderContext_obj::addConstant( ::Dynamic c){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_376_addConstant)
HXDLIN( 376)		::Array< ::Dynamic> _hx_tmp = this->constants;
HXDLIN( 376)		_hx_tmp->push(this->pipeState->getConstantLocation(( (::String)(c->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,addConstant,(void))

void ShaderContext_obj::addTexture( ::Dynamic tu){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_379_addTexture)
HXLINE( 380)		::Dynamic unit = this->pipeState->getTextureUnit(( (::String)(tu->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
HXLINE( 381)		this->textureUnits->push(unit);
HXLINE( 382)		this->paramsSet->push(false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,addTexture,(void))

void ShaderContext_obj::setTextureParameters(::Dynamic g,int unitIndex, ::Dynamic tex){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_385_setTextureParameters)
HXLINE( 387)		::Dynamic unit = this->textureUnits->__get(unitIndex);
HXLINE( 389)		 ::kha::graphics4::TextureAddressing _hx_tmp;
HXDLIN( 389)		if (hx::IsNull( ( (::String)(tex->__Field(HX_("u_addressing",78,8a,42,e3),hx::paccDynamic)) ) )) {
HXLINE( 389)			_hx_tmp = ::kha::graphics4::TextureAddressing_obj::Repeat_dyn();
            		}
            		else {
HXLINE( 389)			_hx_tmp = this->getTextureAddresing(( (::String)(tex->__Field(HX_("u_addressing",78,8a,42,e3),hx::paccDynamic)) ));
            		}
HXLINE( 390)		 ::kha::graphics4::TextureAddressing _hx_tmp1;
HXDLIN( 390)		if (hx::IsNull( ( (::String)(tex->__Field(HX_("v_addressing",17,f8,01,25),hx::paccDynamic)) ) )) {
HXLINE( 390)			_hx_tmp1 = ::kha::graphics4::TextureAddressing_obj::Repeat_dyn();
            		}
            		else {
HXLINE( 390)			_hx_tmp1 = this->getTextureAddresing(( (::String)(tex->__Field(HX_("v_addressing",17,f8,01,25),hx::paccDynamic)) ));
            		}
HXLINE( 391)		 ::kha::graphics4::TextureFilter _hx_tmp2;
HXDLIN( 391)		if (hx::IsNull( ( (::String)(tex->__Field(HX_("min_filter",05,56,12,ec),hx::paccDynamic)) ) )) {
HXLINE( 391)			_hx_tmp2 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 391)			_hx_tmp2 = this->getTextureFilter(( (::String)(tex->__Field(HX_("min_filter",05,56,12,ec),hx::paccDynamic)) ));
            		}
HXLINE( 392)		 ::kha::graphics4::TextureFilter _hx_tmp3;
HXDLIN( 392)		if (hx::IsNull( ( (::String)(tex->__Field(HX_("mag_filter",24,ef,25,c4),hx::paccDynamic)) ) )) {
HXLINE( 392)			_hx_tmp3 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 392)			_hx_tmp3 = this->getTextureFilter(( (::String)(tex->__Field(HX_("mag_filter",24,ef,25,c4),hx::paccDynamic)) ));
            		}
HXLINE( 393)		 ::kha::graphics4::MipMapFilter _hx_tmp4;
HXDLIN( 393)		if (hx::IsNull( ( (::String)(tex->__Field(HX_("mipmap_filter",cf,44,b4,d2),hx::paccDynamic)) ) )) {
HXLINE( 393)			_hx_tmp4 = ::kha::graphics4::MipMapFilter_obj::NoMipFilter_dyn();
            		}
            		else {
HXLINE( 393)			_hx_tmp4 = this->getMipmapFilter(( (::String)(tex->__Field(HX_("mipmap_filter",cf,44,b4,d2),hx::paccDynamic)) ));
            		}
HXLINE( 388)		::kha::graphics4::Graphics_obj::setTextureParameters(g,unit,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ShaderContext_obj,setTextureParameters,(void))

 ::kha::graphics4::VertexStructure ShaderContext_obj::structureRect;

 ::kha::graphics4::VertexStructure ShaderContext_obj::getStructureRect(){
            	HX_GC_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_278_getStructureRect)
HXLINE( 279)		if (hx::IsNull( ::iron::data::ShaderContext_obj::structureRect )) {
HXLINE( 280)			::iron::data::ShaderContext_obj::structureRect =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE( 281)			::iron::data::ShaderContext_obj::structureRect->add(HX_("pos",94,5d,55,00),::kha::graphics4::VertexData_obj::Float2_dyn());
            		}
HXLINE( 283)		return ::iron::data::ShaderContext_obj::structureRect;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ShaderContext_obj,getStructureRect,return )


hx::ObjectPtr< ShaderContext_obj > ShaderContext_obj::__new( ::Dynamic raw, ::Dynamic overrideContext, ::Dynamic done) {
	hx::ObjectPtr< ShaderContext_obj > __this = new ShaderContext_obj();
	__this->__construct(raw,overrideContext,done);
	return __this;
}

hx::ObjectPtr< ShaderContext_obj > ShaderContext_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic raw, ::Dynamic overrideContext, ::Dynamic done) {
	ShaderContext_obj *__this = (ShaderContext_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ShaderContext_obj), true, "iron.data.ShaderContext"));
	*(void **)__this = ShaderContext_obj::_hx_vtable;
	__this->__construct(raw,overrideContext,done);
	return __this;
}

ShaderContext_obj::ShaderContext_obj()
{
}

void ShaderContext_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ShaderContext);
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(pipeState,"pipeState");
	HX_MARK_MEMBER_NAME(constants,"constants");
	HX_MARK_MEMBER_NAME(textureUnits,"textureUnits");
	HX_MARK_MEMBER_NAME(paramsSet,"paramsSet");
	HX_MARK_MEMBER_NAME(structure,"structure");
	HX_MARK_MEMBER_NAME(instancing,"instancing");
	HX_MARK_MEMBER_NAME(overrideContext,"overrideContext");
	HX_MARK_END_CLASS();
}

void ShaderContext_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(pipeState,"pipeState");
	HX_VISIT_MEMBER_NAME(constants,"constants");
	HX_VISIT_MEMBER_NAME(textureUnits,"textureUnits");
	HX_VISIT_MEMBER_NAME(paramsSet,"paramsSet");
	HX_VISIT_MEMBER_NAME(structure,"structure");
	HX_VISIT_MEMBER_NAME(instancing,"instancing");
	HX_VISIT_MEMBER_NAME(overrideContext,"overrideContext");
}

hx::Val ShaderContext_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"delete") ) { return hx::Val( _hx_delete_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compile") ) { return hx::Val( compile_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sizeToVD") ) { return hx::Val( sizeToVD_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pipeState") ) { return hx::Val( pipeState ); }
		if (HX_FIELD_EQ(inName,"constants") ) { return hx::Val( constants ); }
		if (HX_FIELD_EQ(inName,"paramsSet") ) { return hx::Val( paramsSet ); }
		if (HX_FIELD_EQ(inName,"structure") ) { return hx::Val( structure ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"instancing") ) { return hx::Val( instancing ); }
		if (HX_FIELD_EQ(inName,"addTexture") ) { return hx::Val( addTexture_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getCullMode") ) { return hx::Val( getCullMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"addConstant") ) { return hx::Val( addConstant_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"textureUnits") ) { return hx::Val( textureUnits ); }
		if (HX_FIELD_EQ(inName,"deleteShader") ) { return hx::Val( deleteShader_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"finishCompile") ) { return hx::Val( finishCompile_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCompareMode") ) { return hx::Val( getCompareMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"overrideContext") ) { return hx::Val( overrideContext ); }
		if (HX_FIELD_EQ(inName,"getMipmapFilter") ) { return hx::Val( getMipmapFilter_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getTextureFilter") ) { return hx::Val( getTextureFilter_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getBlendingFactor") ) { return hx::Val( getBlendingFactor_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getTextureAddresing") ) { return hx::Val( getTextureAddresing_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"parseVertexStructure") ) { return hx::Val( parseVertexStructure_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBlendingOperation") ) { return hx::Val( getBlendingOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextureParameters") ) { return hx::Val( setTextureParameters_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ShaderContext_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"structureRect") ) { outValue = ( structureRect ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getStructureRect") ) { outValue = getStructureRect_dyn(); return true; }
	}
	return false;
}

hx::Val ShaderContext_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pipeState") ) { pipeState=inValue.Cast<  ::kha::graphics4::PipelineState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constants") ) { constants=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paramsSet") ) { paramsSet=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"structure") ) { structure=inValue.Cast<  ::kha::graphics4::VertexStructure >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"instancing") ) { instancing=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"textureUnits") ) { textureUnits=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"overrideContext") ) { overrideContext=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ShaderContext_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"structureRect") ) { structureRect=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
	}
	return false;
}

void ShaderContext_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"));
	outFields->push(HX_HCSTRING("pipeState","\x03","\x0b","\xf7","\x69"));
	outFields->push(HX_HCSTRING("constants","\x8f","\x76","\x6b","\x44"));
	outFields->push(HX_HCSTRING("textureUnits","\x94","\x16","\x87","\x9f"));
	outFields->push(HX_HCSTRING("paramsSet","\xfc","\x27","\xd8","\x51"));
	outFields->push(HX_HCSTRING("structure","\x33","\x54","\x4f","\x47"));
	outFields->push(HX_HCSTRING("instancing","\x12","\x58","\x1b","\x6c"));
	outFields->push(HX_HCSTRING("overrideContext","\x03","\xbd","\xc2","\x40"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ShaderContext_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ShaderContext_obj,raw),HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00")},
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(int)offsetof(ShaderContext_obj,pipeState),HX_HCSTRING("pipeState","\x03","\x0b","\xf7","\x69")},
	{hx::fsObject /*Array< ::kha::graphics4::ConstantLocation >*/ ,(int)offsetof(ShaderContext_obj,constants),HX_HCSTRING("constants","\x8f","\x76","\x6b","\x44")},
	{hx::fsObject /*Array< ::kha::graphics4::TextureUnit >*/ ,(int)offsetof(ShaderContext_obj,textureUnits),HX_HCSTRING("textureUnits","\x94","\x16","\x87","\x9f")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(ShaderContext_obj,paramsSet),HX_HCSTRING("paramsSet","\xfc","\x27","\xd8","\x51")},
	{hx::fsObject /*::kha::graphics4::VertexStructure*/ ,(int)offsetof(ShaderContext_obj,structure),HX_HCSTRING("structure","\x33","\x54","\x4f","\x47")},
	{hx::fsBool,(int)offsetof(ShaderContext_obj,instancing),HX_HCSTRING("instancing","\x12","\x58","\x1b","\x6c")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ShaderContext_obj,overrideContext),HX_HCSTRING("overrideContext","\x03","\xbd","\xc2","\x40")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ShaderContext_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::VertexStructure*/ ,(void *) &ShaderContext_obj::structureRect,HX_HCSTRING("structureRect","\xf7","\x62","\x79","\xd7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ShaderContext_obj_sMemberFields[] = {
	HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"),
	HX_HCSTRING("pipeState","\x03","\x0b","\xf7","\x69"),
	HX_HCSTRING("constants","\x8f","\x76","\x6b","\x44"),
	HX_HCSTRING("textureUnits","\x94","\x16","\x87","\x9f"),
	HX_HCSTRING("paramsSet","\xfc","\x27","\xd8","\x51"),
	HX_HCSTRING("structure","\x33","\x54","\x4f","\x47"),
	HX_HCSTRING("instancing","\x12","\x58","\x1b","\x6c"),
	HX_HCSTRING("overrideContext","\x03","\xbd","\xc2","\x40"),
	HX_HCSTRING("compile","\x73","\x25","\x6f","\x83"),
	HX_HCSTRING("finishCompile","\x60","\x0d","\x04","\x50"),
	HX_HCSTRING("sizeToVD","\xca","\x06","\xd4","\xe6"),
	HX_HCSTRING("parseVertexStructure","\x3c","\x75","\x2e","\xe9"),
	HX_HCSTRING("deleteShader","\xb0","\xe5","\xb8","\x83"),
	HX_HCSTRING("delete","\x2b","\xc0","\xd8","\x6a"),
	HX_HCSTRING("getCompareMode","\xb2","\x21","\xcb","\x45"),
	HX_HCSTRING("getCullMode","\xeb","\xc8","\xd0","\xd6"),
	HX_HCSTRING("getBlendingOperation","\x40","\x7f","\x2d","\xf5"),
	HX_HCSTRING("getBlendingFactor","\x16","\xa4","\xa7","\xbf"),
	HX_HCSTRING("getTextureAddresing","\xbe","\x1c","\x7f","\x1a"),
	HX_HCSTRING("getTextureFilter","\x7d","\x9c","\x6d","\x82"),
	HX_HCSTRING("getMipmapFilter","\x16","\xed","\x4e","\x85"),
	HX_HCSTRING("addConstant","\xa5","\xf8","\xf9","\xd6"),
	HX_HCSTRING("addTexture","\xba","\xf4","\x6a","\x06"),
	HX_HCSTRING("setTextureParameters","\x63","\x39","\x4d","\x35"),
	::String(null()) };

static void ShaderContext_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ShaderContext_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ShaderContext_obj::structureRect,"structureRect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ShaderContext_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ShaderContext_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ShaderContext_obj::structureRect,"structureRect");
};

#endif

hx::Class ShaderContext_obj::__mClass;

static ::String ShaderContext_obj_sStaticFields[] = {
	HX_HCSTRING("structureRect","\xf7","\x62","\x79","\xd7"),
	HX_HCSTRING("getStructureRect","\x81","\x0c","\x9a","\x41"),
	::String(null())
};

void ShaderContext_obj::__register()
{
	hx::Object *dummy = new ShaderContext_obj;
	ShaderContext_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.data.ShaderContext","\x4c","\xfb","\x5e","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ShaderContext_obj::__GetStatic;
	__mClass->mSetStaticField = &ShaderContext_obj::__SetStatic;
	__mClass->mMarkFunc = ShaderContext_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ShaderContext_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ShaderContext_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ShaderContext_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ShaderContext_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShaderContext_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShaderContext_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ShaderContext_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_77_boot)
HXDLIN(  77)		structureRect = null();
            	}
}

} // end namespace iron
} // end namespace data
