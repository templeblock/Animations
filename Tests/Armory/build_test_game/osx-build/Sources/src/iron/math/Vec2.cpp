// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_iron_math_Vec2
#include <iron/math/Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c62c015329862ff_9_new,"iron.math.Vec2","new",0x5ca1a130,"iron.math.Vec2.new","iron/math/Vec2.hx",9,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_15_cross,"iron.math.Vec2","cross",0xb45a0450,"iron.math.Vec2.cross","iron/math/Vec2.hx",15,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_18_set,"iron.math.Vec2","set",0x5ca56c72,"iron.math.Vec2.set","iron/math/Vec2.hx",18,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_24_add,"iron.math.Vec2","add",0x5c97c2f1,"iron.math.Vec2.add","iron/math/Vec2.hx",24,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_30_addf,"iron.math.Vec2","addf",0xa832d055,"iron.math.Vec2.addf","iron/math/Vec2.hx",30,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_36_addvecs,"iron.math.Vec2","addvecs",0xc27eb710,"iron.math.Vec2.addvecs","iron/math/Vec2.hx",36,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_42_subvecs,"iron.math.Vec2","subvecs",0x544509ef,"iron.math.Vec2.subvecs","iron/math/Vec2.hx",42,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_48_normalize,"iron.math.Vec2","normalize",0xf99b845d,"iron.math.Vec2.normalize","iron/math/Vec2.hx",48,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_60_mult,"iron.math.Vec2","mult",0xb02e4d20,"iron.math.Vec2.mult","iron/math/Vec2.hx",60,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_66_dot,"iron.math.Vec2","dot",0x5c9a1359,"iron.math.Vec2.dot","iron/math/Vec2.hx",66,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_69_setFrom,"iron.math.Vec2","setFrom",0x2c155efc,"iron.math.Vec2.setFrom","iron/math/Vec2.hx",69,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_75_clone,"iron.math.Vec2","clone",0xb062b82d,"iron.math.Vec2.clone","iron/math/Vec2.hx",75,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_86_equals,"iron.math.Vec2","equals",0x57a37f6f,"iron.math.Vec2.equals","iron/math/Vec2.hx",86,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_90_length,"iron.math.Vec2","length",0x36b82616,"iron.math.Vec2.length","iron/math/Vec2.hx",90,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_93_normalizeTo,"iron.math.Vec2","normalizeTo",0x3acb5f38,"iron.math.Vec2.normalizeTo","iron/math/Vec2.hx",93,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_99_sub,"iron.math.Vec2","sub",0x5ca57a50,"iron.math.Vec2.sub","iron/math/Vec2.hx",99,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_115_distanceTo,"iron.math.Vec2","distanceTo",0x78f5bd40,"iron.math.Vec2.distanceTo","iron/math/Vec2.hx",115,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_118_clamp,"iron.math.Vec2","clamp",0xb05817cb,"iron.math.Vec2.clamp","iron/math/Vec2.hx",118,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_143_toString,"iron.math.Vec2","toString",0x8a4a0ddc,"iron.math.Vec2.toString","iron/math/Vec2.hx",143,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_78_lerp,"iron.math.Vec2","lerp",0xaf78f7a7,"iron.math.Vec2.lerp","iron/math/Vec2.hx",78,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_105_distance,"iron.math.Vec2","distance",0xbdd4d065,"iron.math.Vec2.distance","iron/math/Vec2.hx",105,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_108_distancef,"iron.math.Vec2","distancef",0x5c618861,"iron.math.Vec2.distancef","iron/math/Vec2.hx",108,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_131_xAxis,"iron.math.Vec2","xAxis",0xab678a09,"iron.math.Vec2.xAxis","iron/math/Vec2.hx",131,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_132_yAxis,"iron.math.Vec2","yAxis",0x3ece1e8a,"iron.math.Vec2.yAxis","iron/math/Vec2.hx",132,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_133_one,"iron.math.Vec2","one",0x5ca26b36,"iron.math.Vec2.one","iron/math/Vec2.hx",133,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_134_zero,"iron.math.Vec2","zero",0xb8b9f458,"iron.math.Vec2.zero","iron/math/Vec2.hx",134,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_135_back,"iron.math.Vec2","back",0xa8d9bf57,"iron.math.Vec2.back","iron/math/Vec2.hx",135,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_136_forward,"iron.math.Vec2","forward",0x08995a95,"iron.math.Vec2.forward","iron/math/Vec2.hx",136,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_137_left,"iron.math.Vec2","left",0xaf78ed37,"iron.math.Vec2.left","iron/math/Vec2.hx",137,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_138_right,"iron.math.Vec2","right",0x5163b0ac,"iron.math.Vec2.right","iron/math/Vec2.hx",138,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_139_negativeInfinity,"iron.math.Vec2","negativeInfinity",0x8d6be3ad,"iron.math.Vec2.negativeInfinity","iron/math/Vec2.hx",139,0x1a5783e0)
HX_LOCAL_STACK_FRAME(_hx_pos_7c62c015329862ff_140_positiveInfinity,"iron.math.Vec2","positiveInfinity",0x3bc447f1,"iron.math.Vec2.positiveInfinity","iron/math/Vec2.hx",140,0x1a5783e0)
namespace iron{
namespace math{

void Vec2_obj::__construct(hx::Null< float >  __o_x,hx::Null< float >  __o_y){
float x = __o_x.Default(((Float)0.0));
float y = __o_y.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_9_new)
HXLINE(  10)		this->x = x;
HXLINE(  11)		this->y = y;
            	}

Dynamic Vec2_obj::__CreateEmpty() { return new Vec2_obj; }

void *Vec2_obj::_hx_vtable = 0;

Dynamic Vec2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vec2_obj > _hx_result = new Vec2_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Vec2_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1783ee72;
}

float Vec2_obj::cross( ::iron::math::Vec2 v){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_15_cross)
HXDLIN(  15)		float _hx_tmp = (this->x * v->y);
HXDLIN(  15)		return (_hx_tmp - (this->y * v->x));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,cross,return )

 ::iron::math::Vec2 Vec2_obj::set(float x,float y){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_18_set)
HXLINE(  19)		this->x = x;
HXLINE(  20)		this->y = y;
HXLINE(  21)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,set,return )

 ::iron::math::Vec2 Vec2_obj::add( ::iron::math::Vec2 v){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_24_add)
HXLINE(  25)		 ::iron::math::Vec2 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  25)		_hx_tmp->x = (_hx_tmp->x + v->x);
HXLINE(  26)		 ::iron::math::Vec2 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  26)		_hx_tmp1->y = (_hx_tmp1->y + v->y);
HXLINE(  27)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,add,return )

 ::iron::math::Vec2 Vec2_obj::addf(float x,float y){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_30_addf)
HXLINE(  31)		 ::iron::math::Vec2 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  31)		_hx_tmp->x = (_hx_tmp->x + x);
HXLINE(  32)		 ::iron::math::Vec2 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  32)		_hx_tmp1->y = (_hx_tmp1->y + y);
HXLINE(  33)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,addf,return )

 ::iron::math::Vec2 Vec2_obj::addvecs( ::iron::math::Vec2 a, ::iron::math::Vec2 b){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_36_addvecs)
HXLINE(  37)		this->x = (a->x + b->x);
HXLINE(  38)		this->y = (a->y + b->y);
HXLINE(  39)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,addvecs,return )

 ::iron::math::Vec2 Vec2_obj::subvecs( ::iron::math::Vec2 a, ::iron::math::Vec2 b){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_42_subvecs)
HXLINE(  43)		this->x = (a->x - b->x);
HXLINE(  44)		this->y = (a->y - b->y);
HXLINE(  45)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,subvecs,return )

 ::iron::math::Vec2 Vec2_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_48_normalize)
HXLINE(  49)		float a = this->x;
HXLINE(  50)		float b = this->y;
HXLINE(  51)		float l = ((a * a) + (b * b));
HXLINE(  52)		if ((l > ((Float)0.0))) {
HXLINE(  53)			l = ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(l));
HXLINE(  54)			this->x = (a * l);
HXLINE(  55)			this->y = (b * l);
            		}
HXLINE(  57)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,normalize,return )

 ::iron::math::Vec2 Vec2_obj::mult(float f){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_60_mult)
HXLINE(  61)		 ::iron::math::Vec2 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  61)		_hx_tmp->x = (_hx_tmp->x * f);
HXDLIN(  61)		 ::iron::math::Vec2 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  61)		_hx_tmp1->y = (_hx_tmp1->y * f);
HXLINE(  62)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,mult,return )

float Vec2_obj::dot( ::iron::math::Vec2 v){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_66_dot)
HXDLIN(  66)		float _hx_tmp = (this->x * v->x);
HXDLIN(  66)		return (_hx_tmp + (this->y * v->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,dot,return )

 ::iron::math::Vec2 Vec2_obj::setFrom( ::iron::math::Vec2 v){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_69_setFrom)
HXLINE(  70)		this->x = v->x;
HXDLIN(  70)		this->y = v->y;
HXLINE(  71)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,setFrom,return )

 ::iron::math::Vec2 Vec2_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_75_clone)
HXDLIN(  75)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,clone,return )

bool Vec2_obj::equals( ::iron::math::Vec2 v){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_86_equals)
HXDLIN(  86)		if ((this->x == v->x)) {
HXDLIN(  86)			return (this->y == v->y);
            		}
            		else {
HXDLIN(  86)			return false;
            		}
HXDLIN(  86)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,equals,return )

float Vec2_obj::length(){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_90_length)
HXDLIN(  90)		float v = (this->x * this->x);
HXDLIN(  90)		return ::Math_obj::sqrt((v + (this->y * this->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,length,return )

 ::iron::math::Vec2 Vec2_obj::normalizeTo(float newLength){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_93_normalizeTo)
HXLINE(  94)		 ::iron::math::Vec2 v = this->normalize();
HXLINE(  95)		v = this->mult(newLength);
HXLINE(  96)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,normalizeTo,return )

 ::iron::math::Vec2 Vec2_obj::sub( ::iron::math::Vec2 v){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_99_sub)
HXLINE( 100)		 ::iron::math::Vec2 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 100)		_hx_tmp->x = (_hx_tmp->x - v->x);
HXDLIN( 100)		 ::iron::math::Vec2 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 100)		_hx_tmp1->y = (_hx_tmp1->y - v->y);
HXLINE( 101)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,sub,return )

float Vec2_obj::distanceTo( ::iron::math::Vec2 p){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_115_distanceTo)
HXDLIN( 115)		float v = (p->x - this->x);
HXDLIN( 115)		float v1 = (v * (p->x - this->x));
HXDLIN( 115)		float v2 = (p->y - this->y);
HXDLIN( 115)		return ::Math_obj::sqrt((v1 + (v2 * (p->y - this->y))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec2_obj,distanceTo,return )

 ::iron::math::Vec2 Vec2_obj::clamp(float fmin,float fmax){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_118_clamp)
HXLINE( 119)		float v = (this->x * this->x);
HXDLIN( 119)		float n = ::Math_obj::sqrt((v + (this->y * this->y)));
HXLINE( 120)		 ::iron::math::Vec2 v1 = hx::ObjectPtr<OBJ_>(this);
HXLINE( 122)		if ((n < fmin)) {
HXLINE( 123)			 ::iron::math::Vec2 v2 = this->normalize();
HXDLIN( 123)			v2 = this->mult(fmin);
HXDLIN( 123)			v1 = v2;
            		}
            		else {
HXLINE( 125)			if ((n > fmax)) {
HXLINE( 126)				 ::iron::math::Vec2 v3 = this->normalize();
HXDLIN( 126)				v3 = this->mult(fmax);
HXDLIN( 126)				v1 = v3;
            			}
            		}
HXLINE( 128)		return v1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,clamp,return )

::String Vec2_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_143_toString)
HXDLIN( 143)		::String _hx_tmp = ((HX_("(",28,00,00,00) + ::Std_obj::string(this->x)) + HX_(", ",74,26,00,00));
HXDLIN( 143)		return ((_hx_tmp + ::Std_obj::string(this->y)) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,toString,return )

 ::iron::math::Vec2 Vec2_obj::lerp( ::iron::math::Vec2 v1, ::iron::math::Vec2 v2,float t){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_78_lerp)
HXLINE(  79)		 ::iron::math::Vec2 target =  ::iron::math::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  80)		float v21 = v2->x;
HXDLIN(  80)		target->x = (v21 + ((v1->x - v2->x) * t));
HXLINE(  81)		float v22 = v2->y;
HXDLIN(  81)		target->y = (v22 + ((v1->y - v2->y) * t));
HXLINE(  82)		return target;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec2_obj,lerp,return )

float Vec2_obj::distance( ::iron::math::Vec2 v1, ::iron::math::Vec2 v2){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_105_distance)
HXDLIN( 105)		float vx = (v1->x - v2->x);
HXDLIN( 105)		float vy = (v1->y - v2->y);
HXDLIN( 105)		return ::Math_obj::sqrt(((vx * vx) + (vy * vy)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec2_obj,distance,return )

float Vec2_obj::distancef(float v1x,float v1y,float v2x,float v2y){
            	HX_STACKFRAME(&_hx_pos_7c62c015329862ff_108_distancef)
HXLINE( 109)		float vx = (v1x - v2x);
HXLINE( 110)		float vy = (v1y - v2y);
HXLINE( 111)		return ::Math_obj::sqrt(((vx * vx) + (vy * vy)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Vec2_obj,distancef,return )

 ::iron::math::Vec2 Vec2_obj::xAxis(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_131_xAxis)
HXDLIN( 131)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,((Float)1.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,xAxis,return )

 ::iron::math::Vec2 Vec2_obj::yAxis(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_132_yAxis)
HXDLIN( 132)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,((Float)0.0),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,yAxis,return )

 ::iron::math::Vec2 Vec2_obj::one(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_133_one)
HXDLIN( 133)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,((Float)1.0),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,one,return )

 ::iron::math::Vec2 Vec2_obj::zero(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_134_zero)
HXDLIN( 134)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,zero,return )

 ::iron::math::Vec2 Vec2_obj::back(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_135_back)
HXDLIN( 135)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,((Float)0.0),((Float)-1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,back,return )

 ::iron::math::Vec2 Vec2_obj::forward(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_136_forward)
HXDLIN( 136)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,((Float)0.0),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,forward,return )

 ::iron::math::Vec2 Vec2_obj::left(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_137_left)
HXDLIN( 137)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,((Float)-1.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,left,return )

 ::iron::math::Vec2 Vec2_obj::right(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_138_right)
HXDLIN( 138)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,((Float)1.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,right,return )

 ::iron::math::Vec2 Vec2_obj::negativeInfinity(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_139_negativeInfinity)
HXDLIN( 139)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,::Math_obj::NEGATIVE_INFINITY,::Math_obj::NEGATIVE_INFINITY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,negativeInfinity,return )

 ::iron::math::Vec2 Vec2_obj::positiveInfinity(){
            	HX_GC_STACKFRAME(&_hx_pos_7c62c015329862ff_140_positiveInfinity)
HXDLIN( 140)		return  ::iron::math::Vec2_obj::__alloc( HX_CTX ,::Math_obj::POSITIVE_INFINITY,::Math_obj::POSITIVE_INFINITY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec2_obj,positiveInfinity,return )


hx::ObjectPtr< Vec2_obj > Vec2_obj::__new(hx::Null< float >  __o_x,hx::Null< float >  __o_y) {
	hx::ObjectPtr< Vec2_obj > __this = new Vec2_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

hx::ObjectPtr< Vec2_obj > Vec2_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< float >  __o_x,hx::Null< float >  __o_y) {
	Vec2_obj *__this = (Vec2_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vec2_obj), false, "iron.math.Vec2"));
	*(void **)__this = Vec2_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

Vec2_obj::Vec2_obj()
{
}

hx::Val Vec2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"dot") ) { return hx::Val( dot_dyn() ); }
		if (HX_FIELD_EQ(inName,"sub") ) { return hx::Val( sub_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"addf") ) { return hx::Val( addf_dyn() ); }
		if (HX_FIELD_EQ(inName,"mult") ) { return hx::Val( mult_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cross") ) { return hx::Val( cross_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"clamp") ) { return hx::Val( clamp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addvecs") ) { return hx::Val( addvecs_dyn() ); }
		if (HX_FIELD_EQ(inName,"subvecs") ) { return hx::Val( subvecs_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrom") ) { return hx::Val( setFrom_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"distanceTo") ) { return hx::Val( distanceTo_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"normalizeTo") ) { return hx::Val( normalizeTo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vec2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"one") ) { outValue = one_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zero") ) { outValue = zero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"back") ) { outValue = back_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"left") ) { outValue = left_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"xAxis") ) { outValue = xAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"yAxis") ) { outValue = yAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"right") ) { outValue = right_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"forward") ) { outValue = forward_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"distancef") ) { outValue = distancef_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"negativeInfinity") ) { outValue = negativeInfinity_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"positiveInfinity") ) { outValue = positiveInfinity_dyn(); return true; }
	}
	return false;
}

hx::Val Vec2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vec2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Vec2_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Vec2_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Vec2_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vec2_obj_sStaticStorageInfo = 0;
#endif

static ::String Vec2_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("cross","\x80","\x5f","\x5a","\x4c"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addf","\x25","\xeb","\x69","\x40"),
	HX_HCSTRING("addvecs","\x40","\x3e","\xb0","\x9f"),
	HX_HCSTRING("subvecs","\x1f","\x91","\x76","\x31"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("mult","\xf0","\x67","\x65","\x48"),
	HX_HCSTRING("dot","\x89","\x42","\x4c","\x00"),
	HX_HCSTRING("setFrom","\x2c","\xe6","\x46","\x09"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("normalizeTo","\x68","\x3e","\x08","\xc0"),
	HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"),
	HX_HCSTRING("distanceTo","\x10","\xd4","\xec","\x8b"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Vec2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vec2_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vec2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vec2_obj::__mClass,"__mClass");
};

#endif

hx::Class Vec2_obj::__mClass;

static ::String Vec2_obj_sStaticFields[] = {
	HX_HCSTRING("lerp","\x77","\x12","\xb0","\x47"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("distancef","\x91","\x3b","\x67","\x0e"),
	HX_HCSTRING("xAxis","\x39","\xe5","\x67","\x43"),
	HX_HCSTRING("yAxis","\xba","\x79","\xce","\xd6"),
	HX_HCSTRING("one","\x66","\x9a","\x54","\x00"),
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("forward","\xc5","\xe1","\xca","\xe5"),
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("negativeInfinity","\x7d","\xf6","\x47","\x55"),
	HX_HCSTRING("positiveInfinity","\xc1","\x5a","\xa0","\x03"),
	::String(null())
};

void Vec2_obj::__register()
{
	hx::Object *dummy = new Vec2_obj;
	Vec2_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.math.Vec2","\x3e","\x89","\x15","\xf7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vec2_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vec2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vec2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vec2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vec2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vec2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vec2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vec2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace math
