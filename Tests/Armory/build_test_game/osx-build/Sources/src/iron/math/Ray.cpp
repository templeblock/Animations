// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_math_Plane
#include <iron/math/Plane.h>
#endif
#ifndef INCLUDED_iron_math_Ray
#include <iron/math/Ray.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_63807eae6bc84706_8_new,"iron.math.Ray","new",0x03fdbdfc,"iron.math.Ray.new","iron/math/Ray.hx",8,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_63807eae6bc84706_13_at,"iron.math.Ray","at",0x35f90ed7,"iron.math.Ray.at","iron/math/Ray.hx",13,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_63807eae6bc84706_18_distanceToPoint,"iron.math.Ray","distanceToPoint",0x372b7dbc,"iron.math.Ray.distanceToPoint","iron/math/Ray.hx",18,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_63807eae6bc84706_33_intersectsSphere,"iron.math.Ray","intersectsSphere",0xd750a5c5,"iron.math.Ray.intersectsSphere","iron/math/Ray.hx",33,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_63807eae6bc84706_36_intersectsPlane,"iron.math.Ray","intersectsPlane",0xa6d346a4,"iron.math.Ray.intersectsPlane","iron/math/Ray.hx",36,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_63807eae6bc84706_48_distanceToPlane,"iron.math.Ray","distanceToPlane",0x3529c7c8,"iron.math.Ray.distanceToPlane","iron/math/Ray.hx",48,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_63807eae6bc84706_66_intersectPlane,"iron.math.Ray","intersectPlane",0xbad5e4e1,"iron.math.Ray.intersectPlane","iron/math/Ray.hx",66,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_63807eae6bc84706_73_intersectsBox,"iron.math.Ray","intersectsBox",0xd543e453,"iron.math.Ray.intersectsBox","iron/math/Ray.hx",73,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_63807eae6bc84706_76_intersectBox,"iron.math.Ray","intersectBox",0x65d58950,"iron.math.Ray.intersectBox","iron/math/Ray.hx",76,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_63807eae6bc84706_140_intersectTriangle,"iron.math.Ray","intersectTriangle",0xdcdaf963,"iron.math.Ray.intersectTriangle","iron/math/Ray.hx",140,0xa14df954)
namespace iron{
namespace math{

void Ray_obj::__construct( ::iron::math::Vec4 origin, ::iron::math::Vec4 direction){
            	HX_GC_STACKFRAME(&_hx_pos_63807eae6bc84706_8_new)
HXLINE(   9)		 ::iron::math::Vec4 _hx_tmp;
HXDLIN(   9)		if (hx::IsNull( origin )) {
HXLINE(   9)			_hx_tmp =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
            		else {
HXLINE(   9)			_hx_tmp = origin;
            		}
HXDLIN(   9)		this->origin = _hx_tmp;
HXLINE(  10)		 ::iron::math::Vec4 _hx_tmp1;
HXDLIN(  10)		if (hx::IsNull( direction )) {
HXLINE(  10)			_hx_tmp1 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
            		else {
HXLINE(  10)			_hx_tmp1 = direction;
            		}
HXDLIN(  10)		this->direction = _hx_tmp1;
            	}

Dynamic Ray_obj::__CreateEmpty() { return new Ray_obj; }

void *Ray_obj::_hx_vtable = 0;

Dynamic Ray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ray_obj > _hx_result = new Ray_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Ray_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x52bf8d56;
}

 ::iron::math::Vec4 Ray_obj::at(Float t){
            	HX_GC_STACKFRAME(&_hx_pos_63807eae6bc84706_13_at)
HXLINE(  14)		 ::iron::math::Vec4 result =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  15)		return result->setFrom(this->direction)->mult(t)->add(this->origin);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ray_obj,at,return )

Float Ray_obj::distanceToPoint( ::iron::math::Vec4 point){
            	HX_GC_STACKFRAME(&_hx_pos_63807eae6bc84706_18_distanceToPoint)
HXLINE(  19)		 ::iron::math::Vec4 v1 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  20)		float directionDistance = v1->subvecs(point,this->origin)->dot(this->direction);
HXLINE(  23)		if ((directionDistance < (int)0)) {
HXLINE(  24)			return this->origin->distanceTo(point);
            		}
HXLINE(  27)		v1->setFrom(this->direction)->mult(directionDistance)->add(this->origin);
HXLINE(  29)		return v1->distanceTo(point);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ray_obj,distanceToPoint,return )

bool Ray_obj::intersectsSphere( ::iron::math::Vec4 sphereCenter,Float sphereRadius){
            	HX_STACKFRAME(&_hx_pos_63807eae6bc84706_33_intersectsSphere)
HXDLIN(  33)		return (this->distanceToPoint(sphereCenter) <= sphereRadius);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Ray_obj,intersectsSphere,return )

bool Ray_obj::intersectsPlane( ::iron::math::Plane plane){
            	HX_STACKFRAME(&_hx_pos_63807eae6bc84706_36_intersectsPlane)
HXLINE(  38)		Float distToPoint = plane->distanceToPoint(this->origin);
HXLINE(  39)		if ((distToPoint == (int)0)) {
HXLINE(  39)			return true;
            		}
HXLINE(  41)		float denominator = plane->normal->dot(this->direction);
HXLINE(  42)		if (((denominator * distToPoint) < (int)0)) {
HXLINE(  42)			return true;
            		}
HXLINE(  45)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ray_obj,intersectsPlane,return )

Float Ray_obj::distanceToPlane( ::iron::math::Plane plane){
            	HX_STACKFRAME(&_hx_pos_63807eae6bc84706_48_distanceToPlane)
HXLINE(  49)		float denominator = plane->normal->dot(this->direction);
HXLINE(  50)		if ((denominator == (int)0)) {
HXLINE(  52)			if ((plane->distanceToPoint(this->origin) == (int)0)) {
HXLINE(  53)				return (int)0;
            			}
HXLINE(  57)			return (int)-1;
            		}
HXLINE(  60)		float t = this->origin->dot(plane->normal);
HXDLIN(  60)		Float t1 = ((Float)-((t + plane->constant)) / (Float)denominator);
HXLINE(  63)		if ((t1 >= (int)0)) {
HXLINE(  63)			return t1;
            		}
            		else {
HXLINE(  63)			return (int)-1;
            		}
HXDLIN(  63)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ray_obj,distanceToPlane,return )

 ::iron::math::Vec4 Ray_obj::intersectPlane( ::iron::math::Plane plane){
            	HX_STACKFRAME(&_hx_pos_63807eae6bc84706_66_intersectPlane)
HXLINE(  67)		Float t = this->distanceToPlane(plane);
HXLINE(  68)		if ((t == (int)-1)) {
HXLINE(  68)			return null();
            		}
HXLINE(  69)		return this->at(t);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ray_obj,intersectPlane,return )

bool Ray_obj::intersectsBox( ::iron::math::Vec4 center, ::iron::math::Vec4 dim){
            	HX_STACKFRAME(&_hx_pos_63807eae6bc84706_73_intersectsBox)
HXDLIN(  73)		return hx::IsNotNull( this->intersectBox(center,dim) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(Ray_obj,intersectsBox,return )

 ::iron::math::Vec4 Ray_obj::intersectBox( ::iron::math::Vec4 center, ::iron::math::Vec4 dim){
            	HX_STACKFRAME(&_hx_pos_63807eae6bc84706_76_intersectBox)
HXLINE(  78)		Float tmin;
HXDLIN(  78)		Float tmax;
HXDLIN(  78)		Float tymin;
HXDLIN(  78)		Float tymax;
HXDLIN(  78)		Float tzmin;
HXDLIN(  78)		Float tzmax;
HXLINE(  80)		Float halfX = ((Float)dim->x / (Float)(int)2);
HXLINE(  81)		Float halfY = ((Float)dim->y / (Float)(int)2);
HXLINE(  82)		Float halfZ = ((Float)dim->z / (Float)(int)2);
HXLINE(  83)		Float boxMinX = (center->x - halfX);
HXLINE(  84)		Float boxMinY = (center->y - halfY);
HXLINE(  85)		Float boxMinZ = (center->z - halfZ);
HXLINE(  86)		Float boxMaxX = (center->x + halfX);
HXLINE(  87)		Float boxMaxY = (center->y + halfY);
HXLINE(  88)		Float boxMaxZ = (center->z + halfZ);
HXLINE(  90)		Float invdirx = ((Float)(int)1 / (Float)this->direction->x);
HXLINE(  91)		Float invdiry = ((Float)(int)1 / (Float)this->direction->y);
HXLINE(  92)		Float invdirz = ((Float)(int)1 / (Float)this->direction->z);
HXLINE(  94)		 ::iron::math::Vec4 origin = this->origin;
HXLINE(  96)		if ((invdirx >= (int)0)) {
HXLINE(  97)			tmin = ((boxMinX - origin->x) * invdirx);
HXLINE(  98)			tmax = ((boxMaxX - origin->x) * invdirx);
            		}
            		else {
HXLINE( 101)			tmin = ((boxMaxX - origin->x) * invdirx);
HXLINE( 102)			tmax = ((boxMinX - origin->x) * invdirx);
            		}
HXLINE( 105)		if ((invdiry >= (int)0)) {
HXLINE( 106)			tymin = ((boxMinY - origin->y) * invdiry);
HXLINE( 107)			tymax = ((boxMaxY - origin->y) * invdiry);
            		}
            		else {
HXLINE( 110)			tymin = ((boxMaxY - origin->y) * invdiry);
HXLINE( 111)			tymax = ((boxMinY - origin->y) * invdiry);
            		}
HXLINE( 114)		bool _hx_tmp;
HXDLIN( 114)		if (!((tmin > tymax))) {
HXLINE( 114)			_hx_tmp = (tymin > tmax);
            		}
            		else {
HXLINE( 114)			_hx_tmp = true;
            		}
HXDLIN( 114)		if (_hx_tmp) {
HXLINE( 114)			return null();
            		}
HXLINE( 118)		bool _hx_tmp1;
HXDLIN( 118)		if (!((tymin > tmin))) {
HXLINE( 118)			_hx_tmp1 = (tmin != tmin);
            		}
            		else {
HXLINE( 118)			_hx_tmp1 = true;
            		}
HXDLIN( 118)		if (_hx_tmp1) {
HXLINE( 118)			tmin = tymin;
            		}
HXLINE( 119)		bool _hx_tmp2;
HXDLIN( 119)		if (!((tymax < tmax))) {
HXLINE( 119)			_hx_tmp2 = (tmax != tmax);
            		}
            		else {
HXLINE( 119)			_hx_tmp2 = true;
            		}
HXDLIN( 119)		if (_hx_tmp2) {
HXLINE( 119)			tmax = tymax;
            		}
HXLINE( 121)		if ((invdirz >= (int)0)) {
HXLINE( 122)			tzmin = ((boxMinZ - origin->z) * invdirz);
HXLINE( 123)			tzmax = ((boxMaxZ - origin->z) * invdirz);
            		}
            		else {
HXLINE( 126)			tzmin = ((boxMaxZ - origin->z) * invdirz);
HXLINE( 127)			tzmax = ((boxMinZ - origin->z) * invdirz);
            		}
HXLINE( 130)		bool _hx_tmp3;
HXDLIN( 130)		if (!((tmin > tzmax))) {
HXLINE( 130)			_hx_tmp3 = (tzmin > tmax);
            		}
            		else {
HXLINE( 130)			_hx_tmp3 = true;
            		}
HXDLIN( 130)		if (_hx_tmp3) {
HXLINE( 130)			return null();
            		}
HXLINE( 131)		bool _hx_tmp4;
HXDLIN( 131)		if (!((tzmin > tmin))) {
HXLINE( 131)			_hx_tmp4 = (tmin != tmin);
            		}
            		else {
HXLINE( 131)			_hx_tmp4 = true;
            		}
HXDLIN( 131)		if (_hx_tmp4) {
HXLINE( 131)			tmin = tzmin;
            		}
HXLINE( 132)		bool _hx_tmp5;
HXDLIN( 132)		if (!((tzmax < tmax))) {
HXLINE( 132)			_hx_tmp5 = (tmax != tmax);
            		}
            		else {
HXLINE( 132)			_hx_tmp5 = true;
            		}
HXDLIN( 132)		if (_hx_tmp5) {
HXLINE( 132)			tmax = tzmax;
            		}
HXLINE( 135)		if ((tmax < (int)0)) {
HXLINE( 135)			return null();
            		}
HXLINE( 137)		Float _hx_tmp6;
HXDLIN( 137)		if ((tmin >= (int)0)) {
HXLINE( 137)			_hx_tmp6 = tmin;
            		}
            		else {
HXLINE( 137)			_hx_tmp6 = tmax;
            		}
HXDLIN( 137)		return this->at(_hx_tmp6);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Ray_obj,intersectBox,return )

 ::iron::math::Vec4 Ray_obj::intersectTriangle( ::iron::math::Vec4 a, ::iron::math::Vec4 b, ::iron::math::Vec4 c,bool backfaceCulling){
            	HX_GC_STACKFRAME(&_hx_pos_63807eae6bc84706_140_intersectTriangle)
HXLINE( 142)		 ::iron::math::Vec4 diff =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 143)		 ::iron::math::Vec4 edge1 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 144)		 ::iron::math::Vec4 edge2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 145)		 ::iron::math::Vec4 normal =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 148)		edge1->subvecs(b,a);
HXLINE( 149)		edge2->subvecs(c,a);
HXLINE( 150)		normal->crossvecs(edge1,edge2);
HXLINE( 157)		float DdN = this->direction->dot(normal);
HXLINE( 158)		int sign;
HXLINE( 160)		if ((DdN > (int)0)) {
HXLINE( 161)			if (backfaceCulling) {
HXLINE( 161)				return null();
            			}
HXLINE( 162)			sign = (int)1;
            		}
            		else {
HXLINE( 163)			if ((DdN < (int)0)) {
HXLINE( 164)				sign = (int)-1;
HXLINE( 165)				DdN = -(DdN);
            			}
            			else {
HXLINE( 167)				return null();
            			}
            		}
HXLINE( 170)		diff->subvecs(this->origin,a);
HXLINE( 171)		 ::iron::math::Vec4 DdQxE2 = this->direction;
HXDLIN( 171)		float DdQxE21 = (sign * DdQxE2->dot(edge2->crossvecs(diff,edge2)));
HXLINE( 174)		if ((DdQxE21 < (int)0)) {
HXLINE( 175)			return null();
            		}
HXLINE( 178)		 ::iron::math::Vec4 DdE1xQ = this->direction;
HXDLIN( 178)		float DdE1xQ1 = (sign * DdE1xQ->dot(edge1->cross(diff)));
HXLINE( 181)		if ((DdE1xQ1 < (int)0)) {
HXLINE( 182)			return null();
            		}
HXLINE( 186)		if (((DdQxE21 + DdE1xQ1) > DdN)) {
HXLINE( 187)			return null();
            		}
HXLINE( 191)		float QdN = (-(sign) * diff->dot(normal));
HXLINE( 194)		if ((QdN < (int)0)) {
HXLINE( 195)			return null();
            		}
HXLINE( 199)		return this->at(((Float)QdN / (Float)DdN));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Ray_obj,intersectTriangle,return )


hx::ObjectPtr< Ray_obj > Ray_obj::__new( ::iron::math::Vec4 origin, ::iron::math::Vec4 direction) {
	hx::ObjectPtr< Ray_obj > __this = new Ray_obj();
	__this->__construct(origin,direction);
	return __this;
}

hx::ObjectPtr< Ray_obj > Ray_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::math::Vec4 origin, ::iron::math::Vec4 direction) {
	Ray_obj *__this = (Ray_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Ray_obj), true, "iron.math.Ray"));
	*(void **)__this = Ray_obj::_hx_vtable;
	__this->__construct(origin,direction);
	return __this;
}

Ray_obj::Ray_obj()
{
}

void Ray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Ray);
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(direction,"direction");
	HX_MARK_END_CLASS();
}

void Ray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(direction,"direction");
}

hx::Val Ray_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { return hx::Val( origin ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { return hx::Val( direction ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"intersectBox") ) { return hx::Val( intersectBox_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intersectsBox") ) { return hx::Val( intersectsBox_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"intersectPlane") ) { return hx::Val( intersectPlane_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"distanceToPoint") ) { return hx::Val( distanceToPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"intersectsPlane") ) { return hx::Val( intersectsPlane_dyn() ); }
		if (HX_FIELD_EQ(inName,"distanceToPlane") ) { return hx::Val( distanceToPlane_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"intersectsSphere") ) { return hx::Val( intersectsSphere_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"intersectTriangle") ) { return hx::Val( intersectTriangle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Ray_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { direction=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Ray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"));
	outFields->push(HX_HCSTRING("direction","\x3f","\x62","\x40","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Ray_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Ray_obj,origin),HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Ray_obj,direction),HX_HCSTRING("direction","\x3f","\x62","\x40","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Ray_obj_sStaticStorageInfo = 0;
#endif

static ::String Ray_obj_sMemberFields[] = {
	HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"),
	HX_HCSTRING("direction","\x3f","\x62","\x40","\x10"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	HX_HCSTRING("distanceToPoint","\x20","\x96","\x85","\x24"),
	HX_HCSTRING("intersectsSphere","\xe1","\xe4","\xcb","\x98"),
	HX_HCSTRING("intersectsPlane","\x08","\x5f","\x2d","\x94"),
	HX_HCSTRING("distanceToPlane","\x2c","\xe0","\x83","\x22"),
	HX_HCSTRING("intersectPlane","\xfd","\xe4","\xbb","\x36"),
	HX_HCSTRING("intersectsBox","\xb7","\x5b","\x86","\xd3"),
	HX_HCSTRING("intersectBox","\x6c","\x0a","\x44","\x88"),
	HX_HCSTRING("intersectTriangle","\xc7","\xf2","\x36","\x67"),
	::String(null()) };

static void Ray_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ray_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ray_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ray_obj::__mClass,"__mClass");
};

#endif

hx::Class Ray_obj::__mClass;

void Ray_obj::__register()
{
	hx::Object *dummy = new Ray_obj;
	Ray_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.math.Ray","\x0a","\x50","\xd8","\xc8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Ray_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Ray_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Ray_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ray_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace math
