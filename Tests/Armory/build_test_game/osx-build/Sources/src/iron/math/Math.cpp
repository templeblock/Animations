// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_iron_math_Math
#include <iron/math/Math.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_76_get_POSITIVE_INFINITY,"iron.math.Math","get_POSITIVE_INFINITY",0xae6349ff,"iron.math.Math.get_POSITIVE_INFINITY","iron/math/Math.hx",76,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_85_get_NEGATIVE_INFINITY,"iron.math.Math","get_NEGATIVE_INFINITY",0xcf63f2c3,"iron.math.Math.get_NEGATIVE_INFINITY","iron/math/Math.hx",85,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_94_get_NaN,"iron.math.Math","get_NaN",0x3a285a6c,"iron.math.Math.get_NaN","iron/math/Math.hx",94,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_101_abs,"iron.math.Math","abs",0x973058ac,"iron.math.Math.abs","iron/math/Math.hx",101,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_108_acos,"iron.math.Math","acos",0xb31dfd0c,"iron.math.Math.acos","iron/math/Math.hx",108,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_115_asin,"iron.math.Math","asin",0xb32a1bdd,"iron.math.Math.asin","iron/math/Math.hx",115,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_122_atan,"iron.math.Math","atan",0xb32ad726,"iron.math.Math.atan","iron/math/Math.hx",122,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_129_atan2,"iron.math.Math","atan2",0x12516a4c,"iron.math.Math.atan2","iron/math/Math.hx",129,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_136_ceil,"iron.math.Math","ceil",0xb471e98b,"iron.math.Math.ceil","iron/math/Math.hx",136,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_143_cos,"iron.math.Math","cos",0x9731e881,"iron.math.Math.cos","iron/math/Math.hx",143,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_150_exp,"iron.math.Math","exp",0x973374d7,"iron.math.Math.exp","iron/math/Math.hx",150,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_157_floor,"iron.math.Math","floor",0xee133c86,"iron.math.Math.floor","iron/math/Math.hx",157,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_164_log,"iron.math.Math","log",0x9738bcbe,"iron.math.Math.log","iron/math/Math.hx",164,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_171_max,"iron.math.Math","max",0x973972de,"iron.math.Math.max","iron/math/Math.hx",171,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_178_min,"iron.math.Math","min",0x973979cc,"iron.math.Math.min","iron/math/Math.hx",178,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_185_pow,"iron.math.Math","pow",0x973bc5d2,"iron.math.Math.pow","iron/math/Math.hx",185,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_192_random,"iron.math.Math","random",0xd8f01a09,"iron.math.Math.random","iron/math/Math.hx",192,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_199_round,"iron.math.Math","round",0xd8e26308,"iron.math.Math.round","iron/math/Math.hx",199,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_206_sin,"iron.math.Math","sin",0x973e0752,"iron.math.Math.sin","iron/math/Math.hx",206,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_213_sqrt,"iron.math.Math","sqrt",0xbf0e7666,"iron.math.Math.sqrt","iron/math/Math.hx",213,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_220_tan,"iron.math.Math","tan",0x973ec29b,"iron.math.Math.tan","iron/math/Math.hx",220,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_227_ffloor,"iron.math.Math","ffloor",0xec5e97ac,"iron.math.Math.ffloor","iron/math/Math.hx",227,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_234_fceil,"iron.math.Math","fceil",0xe818b525,"iron.math.Math.fceil","iron/math/Math.hx",234,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_241_fround,"iron.math.Math","fround",0xd72dbe2e,"iron.math.Math.fround","iron/math/Math.hx",241,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_248_isFinite,"iron.math.Math","isFinite",0xd47c623f,"iron.math.Math.isFinite","iron/math/Math.hx",248,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_255_isNaN,"iron.math.Math","isNaN",0xacce61ab,"iron.math.Math.isNaN","iron/math/Math.hx",255,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_262_roundfp,"iron.math.Math","roundfp",0xa0878e52,"iron.math.Math.roundfp","iron/math/Math.hx",262,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_271_clamp,"iron.math.Math","clamp",0x33d4ddb5,"iron.math.Math.clamp","iron/math/Math.hx",271,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_8_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",8,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_13_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",13,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_18_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",18,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_23_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",23,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_28_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",28,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_33_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",33,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_38_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",38,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_43_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",43,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_48_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",48,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_53_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",53,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_58_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",58,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_63_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",63,0xf82a47b6)
HX_LOCAL_STACK_FRAME(_hx_pos_c3cd68ab256a3708_68_boot,"iron.math.Math","boot",0xb3d04eb8,"iron.math.Math.boot","iron/math/Math.hx",68,0xf82a47b6)
namespace iron{
namespace math{

void Math_obj::__construct() { }

Dynamic Math_obj::__CreateEmpty() { return new Math_obj; }

void *Math_obj::_hx_vtable = 0;

Dynamic Math_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Math_obj > _hx_result = new Math_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Math_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x118e08dc;
}

Float Math_obj::E;

Float Math_obj::LOG2E;

Float Math_obj::LOG10E;

Float Math_obj::LN2;

Float Math_obj::LN10;

Float Math_obj::PI;

Float Math_obj::PI_2;

Float Math_obj::PI_4;

Float Math_obj::ONE_PI;

Float Math_obj::TWO_PI;

Float Math_obj::TWO_SQRTPI;

Float Math_obj::SQRT2;

Float Math_obj::SQRT1_2;

Float Math_obj::get_POSITIVE_INFINITY(){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_76_get_POSITIVE_INFINITY)
HXDLIN(  76)		return ::Math_obj::POSITIVE_INFINITY;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Math_obj,get_POSITIVE_INFINITY,return )

Float Math_obj::get_NEGATIVE_INFINITY(){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_85_get_NEGATIVE_INFINITY)
HXDLIN(  85)		return ::Math_obj::NEGATIVE_INFINITY;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Math_obj,get_NEGATIVE_INFINITY,return )

Float Math_obj::get_NaN(){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_94_get_NaN)
HXDLIN(  94)		return ::Math_obj::NaN;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Math_obj,get_NaN,return )

Float Math_obj::abs(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_101_abs)
HXDLIN( 101)		return ::Math_obj::abs(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,abs,return )

Float Math_obj::acos(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_108_acos)
HXDLIN( 108)		return ::Math_obj::acos(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,acos,return )

Float Math_obj::asin(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_115_asin)
HXDLIN( 115)		return ::Math_obj::asin(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,asin,return )

Float Math_obj::atan(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_122_atan)
HXDLIN( 122)		return ::Math_obj::atan(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,atan,return )

Float Math_obj::atan2(Float y,Float x){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_129_atan2)
HXDLIN( 129)		return ::Math_obj::atan2(y,x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Math_obj,atan2,return )

int Math_obj::ceil(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_136_ceil)
HXDLIN( 136)		return ::Math_obj::ceil(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,ceil,return )

Float Math_obj::cos(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_143_cos)
HXDLIN( 143)		return ::Math_obj::cos(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,cos,return )

Float Math_obj::exp(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_150_exp)
HXDLIN( 150)		return ::Math_obj::exp(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,exp,return )

int Math_obj::floor(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_157_floor)
HXDLIN( 157)		return ::Math_obj::floor(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,floor,return )

Float Math_obj::log(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_164_log)
HXDLIN( 164)		return ::Math_obj::log(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,log,return )

Float Math_obj::max(Float a,Float b){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_171_max)
HXDLIN( 171)		return ::Math_obj::max(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Math_obj,max,return )

Float Math_obj::min(Float a,Float b){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_178_min)
HXDLIN( 178)		return ::Math_obj::min(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Math_obj,min,return )

Float Math_obj::pow(Float v,Float exp){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_185_pow)
HXDLIN( 185)		return ::Math_obj::pow(v,exp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Math_obj,pow,return )

Float Math_obj::random(){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_192_random)
HXDLIN( 192)		return ::Math_obj::random();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Math_obj,random,return )

int Math_obj::round(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_199_round)
HXDLIN( 199)		return ::Math_obj::round(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,round,return )

Float Math_obj::sin(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_206_sin)
HXDLIN( 206)		return ::Math_obj::sin(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,sin,return )

Float Math_obj::sqrt(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_213_sqrt)
HXDLIN( 213)		return ::Math_obj::sqrt(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,sqrt,return )

Float Math_obj::tan(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_220_tan)
HXDLIN( 220)		return ::Math_obj::tan(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,tan,return )

Float Math_obj::ffloor(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_227_ffloor)
HXDLIN( 227)		return ::Math_obj::floor(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,ffloor,return )

Float Math_obj::fceil(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_234_fceil)
HXDLIN( 234)		return ::Math_obj::ceil(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,fceil,return )

Float Math_obj::fround(Float v){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_241_fround)
HXDLIN( 241)		return ::Math_obj::round(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,fround,return )

bool Math_obj::isFinite(Float f){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_248_isFinite)
HXDLIN( 248)		return ::Math_obj::isFinite(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,isFinite,return )

bool Math_obj::isNaN(Float f){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_255_isNaN)
HXDLIN( 255)		return ::Math_obj::isNaN(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,isNaN,return )

Float Math_obj::roundfp(Float f,hx::Null< int >  __o_precision){
int precision = __o_precision.Default(2);
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_262_roundfp)
HXLINE( 263)		f = (f * ::Math_obj::pow((int)10,precision));
HXLINE( 264)		int _hx_tmp = ::Math_obj::round(f);
HXDLIN( 264)		return ((Float)_hx_tmp / (Float)::Math_obj::pow((int)10,precision));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Math_obj,roundfp,return )

Float Math_obj::clamp(Float f,Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_271_clamp)
HXDLIN( 271)		if ((f < min)) {
HXDLIN( 271)			return min;
            		}
            		else {
HXDLIN( 271)			if ((f > max)) {
HXDLIN( 271)				return max;
            			}
            			else {
HXDLIN( 271)				return f;
            			}
            		}
HXDLIN( 271)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Math_obj,clamp,return )


Math_obj::Math_obj()
{
}

bool Math_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"NaN") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_NaN() ); return true; } }
		if (HX_FIELD_EQ(inName,"abs") ) { outValue = abs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cos") ) { outValue = cos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"exp") ) { outValue = exp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"log") ) { outValue = log_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pow") ) { outValue = pow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sin") ) { outValue = sin_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tan") ) { outValue = tan_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"acos") ) { outValue = acos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"asin") ) { outValue = asin_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"atan") ) { outValue = atan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ceil") ) { outValue = ceil_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sqrt") ) { outValue = sqrt_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"atan2") ) { outValue = atan2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floor") ) { outValue = floor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fceil") ) { outValue = fceil_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNaN") ) { outValue = isNaN_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"random") ) { outValue = random_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ffloor") ) { outValue = ffloor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fround") ) { outValue = fround_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_NaN") ) { outValue = get_NaN_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundfp") ) { outValue = roundfp_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isFinite") ) { outValue = isFinite_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"POSITIVE_INFINITY") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_POSITIVE_INFINITY() ); return true; } }
		if (HX_FIELD_EQ(inName,"NEGATIVE_INFINITY") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_NEGATIVE_INFINITY() ); return true; } }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_POSITIVE_INFINITY") ) { outValue = get_POSITIVE_INFINITY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_NEGATIVE_INFINITY") ) { outValue = get_NEGATIVE_INFINITY_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Math_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Math_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Math_obj::E,HX_HCSTRING("E","\x45","\x00","\x00","\x00")},
	{hx::fsFloat,(void *) &Math_obj::LOG2E,HX_HCSTRING("LOG2E","\x37","\xfd","\xe1","\xf6")},
	{hx::fsFloat,(void *) &Math_obj::LOG10E,HX_HCSTRING("LOG10E","\xa2","\xbe","\xda","\x0e")},
	{hx::fsFloat,(void *) &Math_obj::LN2,HX_HCSTRING("LN2","\x70","\xef","\x39","\x00")},
	{hx::fsFloat,(void *) &Math_obj::LN10,HX_HCSTRING("LN10","\xe1","\x91","\x77","\x32")},
	{hx::fsFloat,(void *) &Math_obj::PI,HX_HCSTRING("PI","\xf9","\x45","\x00","\x00")},
	{hx::fsFloat,(void *) &Math_obj::PI_2,HX_HCSTRING("PI_2","\x2c","\xc9","\x18","\x35")},
	{hx::fsFloat,(void *) &Math_obj::PI_4,HX_HCSTRING("PI_4","\x2e","\xc9","\x18","\x35")},
	{hx::fsFloat,(void *) &Math_obj::ONE_PI,HX_HCSTRING("ONE_PI","\x92","\xd5","\x56","\xad")},
	{hx::fsFloat,(void *) &Math_obj::TWO_PI,HX_HCSTRING("TWO_PI","\x2c","\xfe","\x56","\xe2")},
	{hx::fsFloat,(void *) &Math_obj::TWO_SQRTPI,HX_HCSTRING("TWO_SQRTPI","\x8c","\xbf","\x09","\xe7")},
	{hx::fsFloat,(void *) &Math_obj::SQRT2,HX_HCSTRING("SQRT2","\x52","\xf0","\x0a","\x00")},
	{hx::fsFloat,(void *) &Math_obj::SQRT1_2,HX_HCSTRING("SQRT1_2","\x84","\xb9","\xe4","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Math_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Math_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Math_obj::E,"E");
	HX_MARK_MEMBER_NAME(Math_obj::LOG2E,"LOG2E");
	HX_MARK_MEMBER_NAME(Math_obj::LOG10E,"LOG10E");
	HX_MARK_MEMBER_NAME(Math_obj::LN2,"LN2");
	HX_MARK_MEMBER_NAME(Math_obj::LN10,"LN10");
	HX_MARK_MEMBER_NAME(Math_obj::PI,"PI");
	HX_MARK_MEMBER_NAME(Math_obj::PI_2,"PI_2");
	HX_MARK_MEMBER_NAME(Math_obj::PI_4,"PI_4");
	HX_MARK_MEMBER_NAME(Math_obj::ONE_PI,"ONE_PI");
	HX_MARK_MEMBER_NAME(Math_obj::TWO_PI,"TWO_PI");
	HX_MARK_MEMBER_NAME(Math_obj::TWO_SQRTPI,"TWO_SQRTPI");
	HX_MARK_MEMBER_NAME(Math_obj::SQRT2,"SQRT2");
	HX_MARK_MEMBER_NAME(Math_obj::SQRT1_2,"SQRT1_2");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Math_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Math_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Math_obj::E,"E");
	HX_VISIT_MEMBER_NAME(Math_obj::LOG2E,"LOG2E");
	HX_VISIT_MEMBER_NAME(Math_obj::LOG10E,"LOG10E");
	HX_VISIT_MEMBER_NAME(Math_obj::LN2,"LN2");
	HX_VISIT_MEMBER_NAME(Math_obj::LN10,"LN10");
	HX_VISIT_MEMBER_NAME(Math_obj::PI,"PI");
	HX_VISIT_MEMBER_NAME(Math_obj::PI_2,"PI_2");
	HX_VISIT_MEMBER_NAME(Math_obj::PI_4,"PI_4");
	HX_VISIT_MEMBER_NAME(Math_obj::ONE_PI,"ONE_PI");
	HX_VISIT_MEMBER_NAME(Math_obj::TWO_PI,"TWO_PI");
	HX_VISIT_MEMBER_NAME(Math_obj::TWO_SQRTPI,"TWO_SQRTPI");
	HX_VISIT_MEMBER_NAME(Math_obj::SQRT2,"SQRT2");
	HX_VISIT_MEMBER_NAME(Math_obj::SQRT1_2,"SQRT1_2");
};

#endif

hx::Class Math_obj::__mClass;

static ::String Math_obj_sStaticFields[] = {
	HX_HCSTRING("E","\x45","\x00","\x00","\x00"),
	HX_HCSTRING("LOG2E","\x37","\xfd","\xe1","\xf6"),
	HX_HCSTRING("LOG10E","\xa2","\xbe","\xda","\x0e"),
	HX_HCSTRING("LN2","\x70","\xef","\x39","\x00"),
	HX_HCSTRING("LN10","\xe1","\x91","\x77","\x32"),
	HX_HCSTRING("PI","\xf9","\x45","\x00","\x00"),
	HX_HCSTRING("PI_2","\x2c","\xc9","\x18","\x35"),
	HX_HCSTRING("PI_4","\x2e","\xc9","\x18","\x35"),
	HX_HCSTRING("ONE_PI","\x92","\xd5","\x56","\xad"),
	HX_HCSTRING("TWO_PI","\x2c","\xfe","\x56","\xe2"),
	HX_HCSTRING("TWO_SQRTPI","\x8c","\xbf","\x09","\xe7"),
	HX_HCSTRING("SQRT2","\x52","\xf0","\x0a","\x00"),
	HX_HCSTRING("SQRT1_2","\x84","\xb9","\xe4","\x4c"),
	HX_HCSTRING("get_POSITIVE_INFINITY","\x45","\x4b","\xcc","\xf0"),
	HX_HCSTRING("get_NEGATIVE_INFINITY","\x09","\xf4","\xcc","\x11"),
	HX_HCSTRING("get_NaN","\x32","\x4d","\xb0","\x26"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("acos","\x86","\x32","\x69","\x40"),
	HX_HCSTRING("asin","\x57","\x51","\x75","\x40"),
	HX_HCSTRING("atan","\xa0","\x0c","\x76","\x40"),
	HX_HCSTRING("atan2","\x92","\xff","\xd4","\x26"),
	HX_HCSTRING("ceil","\x05","\x1f","\xbd","\x41"),
	HX_HCSTRING("cos","\x47","\x80","\x4b","\x00"),
	HX_HCSTRING("exp","\x9d","\x0c","\x4d","\x00"),
	HX_HCSTRING("floor","\xcc","\xd1","\x96","\x02"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("pow","\x98","\x5d","\x55","\x00"),
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	HX_HCSTRING("round","\x4e","\xf8","\x65","\xed"),
	HX_HCSTRING("sin","\x18","\x9f","\x57","\x00"),
	HX_HCSTRING("sqrt","\xe0","\xab","\x59","\x4c"),
	HX_HCSTRING("tan","\x61","\x5a","\x58","\x00"),
	HX_HCSTRING("ffloor","\xa6","\x9f","\xfd","\xca"),
	HX_HCSTRING("fceil","\x6b","\x4a","\x9c","\xfc"),
	HX_HCSTRING("fround","\x28","\xc6","\xcc","\xb5"),
	HX_HCSTRING("isFinite","\xb9","\xdc","\xe8","\xde"),
	HX_HCSTRING("isNaN","\xf1","\xf6","\x51","\xc1"),
	HX_HCSTRING("roundfp","\x18","\x81","\x0f","\x8d"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	::String(null())
};

void Math_obj::__register()
{
	hx::Object *dummy = new Math_obj;
	Math_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.math.Math","\xa8","\xa3","\x1f","\xf1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Math_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Math_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Math_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Math_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Math_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Math_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Math_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Math_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_8_boot)
HXDLIN(   8)		E = ((Float)2.7182818284590452354);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_13_boot)
HXDLIN(  13)		LOG2E = ((Float)1.4426950408889634074);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_18_boot)
HXDLIN(  18)		LOG10E = ((Float)0.43429448190325182765);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_23_boot)
HXDLIN(  23)		LN2 = ((Float)0.69314718055994530942);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_28_boot)
HXDLIN(  28)		LN10 = ((Float)2.30258509299404568402);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_33_boot)
HXDLIN(  33)		PI = ((Float)3.14159265358979323846);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_38_boot)
HXDLIN(  38)		PI_2 = ((Float)1.57079632679489661923);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_43_boot)
HXDLIN(  43)		PI_4 = ((Float)0.78539816339744830962);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_48_boot)
HXDLIN(  48)		ONE_PI = ((Float)0.31830988618379067154);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_53_boot)
HXDLIN(  53)		TWO_PI = ((Float)0.63661977236758134308);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_58_boot)
HXDLIN(  58)		TWO_SQRTPI = ((Float)1.12837916709551257390);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_63_boot)
HXDLIN(  63)		SQRT2 = ((Float)1.41421356237309504880);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c3cd68ab256a3708_68_boot)
HXDLIN(  68)		SQRT1_2 = ((Float)0.70710678118654752440);
            	}
}

} // end namespace iron
} // end namespace math
