// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_math_Plane
#include <iron/math/Plane.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5b49cf11b78df7b1_203_new,"iron.math.Plane","new",0x7a85cf6e,"iron.math.Plane.new","iron/math/Ray.hx",203,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_5b49cf11b78df7b1_210_distanceToPoint,"iron.math.Plane","distanceToPoint",0x31c0f22e,"iron.math.Plane.distanceToPoint","iron/math/Ray.hx",210,0xa14df954)
HX_LOCAL_STACK_FRAME(_hx_pos_5b49cf11b78df7b1_213_set,"iron.math.Plane","set",0x7a899ab0,"iron.math.Plane.set","iron/math/Ray.hx",213,0xa14df954)
namespace iron{
namespace math{

void Plane_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_5b49cf11b78df7b1_203_new)
HXLINE( 205)		this->constant = ((Float)0.0);
HXLINE( 204)		this->normal =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)1.0),((Float)0.0),((Float)0.0),null());
            	}

Dynamic Plane_obj::__CreateEmpty() { return new Plane_obj; }

void *Plane_obj::_hx_vtable = 0;

Dynamic Plane_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Plane_obj > _hx_result = new Plane_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Plane_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c2468c8;
}

Float Plane_obj::distanceToPoint( ::iron::math::Vec4 point){
            	HX_STACKFRAME(&_hx_pos_5b49cf11b78df7b1_210_distanceToPoint)
HXDLIN( 210)		float _hx_tmp = this->normal->dot(point);
HXDLIN( 210)		return (_hx_tmp + this->constant);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Plane_obj,distanceToPoint,return )

 ::iron::math::Plane Plane_obj::set( ::iron::math::Vec4 normal, ::iron::math::Vec4 point){
            	HX_STACKFRAME(&_hx_pos_5b49cf11b78df7b1_213_set)
HXLINE( 214)		this->normal->setFrom(normal);
HXLINE( 215)		this->constant = -(point->dot(this->normal));
HXLINE( 216)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Plane_obj,set,return )


hx::ObjectPtr< Plane_obj > Plane_obj::__new() {
	hx::ObjectPtr< Plane_obj > __this = new Plane_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Plane_obj > Plane_obj::__alloc(hx::Ctx *_hx_ctx) {
	Plane_obj *__this = (Plane_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Plane_obj), true, "iron.math.Plane"));
	*(void **)__this = Plane_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Plane_obj::Plane_obj()
{
}

void Plane_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Plane);
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_MEMBER_NAME(constant,"constant");
	HX_MARK_END_CLASS();
}

void Plane_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(normal,"normal");
	HX_VISIT_MEMBER_NAME(constant,"constant");
}

hx::Val Plane_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { return hx::Val( normal ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"constant") ) { return hx::Val( constant ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"distanceToPoint") ) { return hx::Val( distanceToPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Plane_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"constant") ) { constant=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Plane_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("normal","\x27","\x72","\x69","\x30"));
	outFields->push(HX_HCSTRING("constant","\x64","\xc1","\x9d","\xa5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Plane_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Plane_obj,normal),HX_HCSTRING("normal","\x27","\x72","\x69","\x30")},
	{hx::fsFloat,(int)offsetof(Plane_obj,constant),HX_HCSTRING("constant","\x64","\xc1","\x9d","\xa5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Plane_obj_sStaticStorageInfo = 0;
#endif

static ::String Plane_obj_sMemberFields[] = {
	HX_HCSTRING("normal","\x27","\x72","\x69","\x30"),
	HX_HCSTRING("constant","\x64","\xc1","\x9d","\xa5"),
	HX_HCSTRING("distanceToPoint","\x20","\x96","\x85","\x24"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void Plane_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Plane_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Plane_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Plane_obj::__mClass,"__mClass");
};

#endif

hx::Class Plane_obj::__mClass;

void Plane_obj::__register()
{
	hx::Object *dummy = new Plane_obj;
	Plane_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.math.Plane","\x7c","\x40","\xfa","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Plane_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Plane_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Plane_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Plane_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Plane_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Plane_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace math
