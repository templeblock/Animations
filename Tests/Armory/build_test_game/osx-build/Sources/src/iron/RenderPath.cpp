// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_CachedShaderContext
#include <iron/CachedShaderContext.h>
#endif
#ifndef INCLUDED_iron_RenderPath
#include <iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_RenderTarget
#include <iron/RenderTarget.h>
#endif
#ifndef INCLUDED_iron_RenderTargetRaw
#include <iron/RenderTargetRaw.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_ConstData
#include <iron/data/ConstData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_LampData
#include <iron/data/LampData.h>
#endif
#ifndef INCLUDED_iron_data_MaterialContext
#include <iron/data/MaterialContext.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_data_ShaderContext
#include <iron/data/ShaderContext.h>
#endif
#ifndef INCLUDED_iron_data_ShaderData
#include <iron/data/ShaderData.h>
#endif
#ifndef INCLUDED_iron_data_WorldData
#include <iron/data/WorldData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_DecalObject
#include <iron/object/DecalObject.h>
#endif
#ifndef INCLUDED_iron_object_LampObject
#include <iron/object/LampObject.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_object_Uniforms
#include <iron/object/Uniforms.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_System
#include <kha/System.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_compute_Shader
#include <kha/compute/Shader.h>
#endif
#ifndef INCLUDED_kha_graphics4_CubeMap
#include <kha/graphics4/CubeMap.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <kha/graphics4/TextureFormat.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_14_new,"iron.RenderPath","new",0xae2cdb13,"iron.RenderPath.new","iron/RenderPath.hx",14,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_43_get_ready,"iron.RenderPath","get_ready",0x2b228fad,"iron.RenderPath.get_ready","iron/RenderPath.hx",43,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_53_lampCastShadow,"iron.RenderPath","lampCastShadow",0xdcd6a764,"iron.RenderPath.lampCastShadow","iron/RenderPath.hx",53,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_57_lampIsSun,"iron.RenderPath","lampIsSun",0x7bd35a7d,"iron.RenderPath.lampIsSun","iron/RenderPath.hx",57,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_79_getLamp,"iron.RenderPath","getLamp",0x3b0f9501,"iron.RenderPath.getLamp","iron/RenderPath.hx",79,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_81_renderFrame,"iron.RenderPath","renderFrame",0x6df41aaa,"iron.RenderPath.renderFrame","iron/RenderPath.hx",81,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_117_setTarget,"iron.RenderPath","setTarget",0xe752fb86,"iron.RenderPath.setTarget","iron/RenderPath.hx",117,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_168_begin,"iron.RenderPath","begin",0x4e8d479c,"iron.RenderPath.begin","iron/RenderPath.hx",168,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_171_end,"iron.RenderPath","end",0xae260e8e,"iron.RenderPath.end","iron/RenderPath.hx",171,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_178_setCurrentViewport,"iron.RenderPath","setCurrentViewport",0xf6faceea,"iron.RenderPath.setCurrentViewport","iron/RenderPath.hx",178,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_181_setCurrentScissor,"iron.RenderPath","setCurrentScissor",0x80246218,"iron.RenderPath.setCurrentScissor","iron/RenderPath.hx",181,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_187_setFrameScissor,"iron.RenderPath","setFrameScissor",0x9dff8564,"iron.RenderPath.setFrameScissor","iron/RenderPath.hx",187,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_190_setViewport,"iron.RenderPath","setViewport",0x68c58bdb,"iron.RenderPath.setViewport","iron/RenderPath.hx",190,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_195_clearTarget,"iron.RenderPath","clearTarget",0xb6997671,"iron.RenderPath.clearTarget","iron/RenderPath.hx",195,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_200_clearImage,"iron.RenderPath","clearImage",0x3875603b,"iron.RenderPath.clearImage","iron/RenderPath.hx",200,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_205_generateMipmaps,"iron.RenderPath","generateMipmaps",0x2ae5be69,"iron.RenderPath.generateMipmaps","iron/RenderPath.hx",205,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_229_drawMeshes,"iron.RenderPath","drawMeshes",0xf077346c,"iron.RenderPath.drawMeshes","iron/RenderPath.hx",229,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_274_submitDraw,"iron.RenderPath","submitDraw",0xfcfb9de9,"iron.RenderPath.submitDraw","iron/RenderPath.hx",274,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_302_getRectContexts,"iron.RenderPath","getRectContexts",0x16ce89d1,"iron.RenderPath.getRectContexts","iron/RenderPath.hx",302,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_311_clampRect,"iron.RenderPath","clampRect",0xbf4c18b2,"iron.RenderPath.clampRect","iron/RenderPath.hx",311,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_315_drawRects,"iron.RenderPath","drawRects",0xaf85fb1e,"iron.RenderPath.drawRects","iron/RenderPath.hx",315,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_420_drawDecals,"iron.RenderPath","drawDecals",0x4ca84177,"iron.RenderPath.drawDecals","iron/RenderPath.hx",420,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_473_drawSkydome,"iron.RenderPath","drawSkydome",0x4945cf13,"iron.RenderPath.drawSkydome","iron/RenderPath.hx",473,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_491_drawLampVolume,"iron.RenderPath","drawLampVolume",0xe19c3e63,"iron.RenderPath.drawLampVolume","iron/RenderPath.hx",491,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_521_bindTarget,"iron.RenderPath","bindTarget",0x5518ca9b,"iron.RenderPath.bindTarget","iron/RenderPath.hx",521,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_526_drawShader,"iron.RenderPath","drawShader",0x04e63bf6,"iron.RenderPath.drawShader","iron/RenderPath.hx",526,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_542_getComputeShader,"iron.RenderPath","getComputeShader",0xb4b198f3,"iron.RenderPath.getComputeShader","iron/RenderPath.hx",542,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_598_loadShader,"iron.RenderPath","loadShader",0x784def98,"iron.RenderPath.loadShader","iron/RenderPath.hx",598,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_583_loadShader,"iron.RenderPath","loadShader",0x784def98,"iron.RenderPath.loadShader","iron/RenderPath.hx",583,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_604_unload,"iron.RenderPath","unload",0x37c7082c,"iron.RenderPath.unload","iron/RenderPath.hx",604,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_607_resize,"iron.RenderPath","resize",0xdab5c121,"iron.RenderPath.resize","iron/RenderPath.hx",607,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_618_createRenderTarget,"iron.RenderPath","createRenderTarget",0xe6f02b10,"iron.RenderPath.createRenderTarget","iron/RenderPath.hx",618,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_626_createDepthBuffer,"iron.RenderPath","createDepthBuffer",0x7d065eba,"iron.RenderPath.createDepthBuffer","iron/RenderPath.hx",626,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_629_createTarget,"iron.RenderPath","createTarget",0x5509ba5a,"iron.RenderPath.createTarget","iron/RenderPath.hx",629,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_673_createImage,"iron.RenderPath","createImage",0x82a3cc72,"iron.RenderPath.createImage","iron/RenderPath.hx",673,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_713_createCubeMap,"iron.RenderPath","createCubeMap",0x17e1ad7e,"iron.RenderPath.createCubeMap","iron/RenderPath.hx",713,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_719_getTextureFormat,"iron.RenderPath","getTextureFormat",0xbdc10d69,"iron.RenderPath.getTextureFormat","iron/RenderPath.hx",719,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_734_getDepthStencilFormat,"iron.RenderPath","getDepthStencilFormat",0xbf0254f9,"iron.RenderPath.getDepthStencilFormat","iron/RenderPath.hx",734,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_74_setActive,"iron.RenderPath","setActive",0x76ac49fb,"iron.RenderPath.setActive","iron/RenderPath.hx",74,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_219_sortMeshes,"iron.RenderPath","sortMeshes",0x0b992f46,"iron.RenderPath.sortMeshes","iron/RenderPath.hx",219,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_210_sortMeshes,"iron.RenderPath","sortMeshes",0x0b992f46,"iron.RenderPath.sortMeshes","iron/RenderPath.hx",210,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_314_boot,"iron.RenderPath","boot",0xb12bd61f,"iron.RenderPath.boot","iron/RenderPath.hx",314,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_746_boot,"iron.RenderPath","boot",0xb12bd61f,"iron.RenderPath.boot","iron/RenderPath.hx",746,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_747_boot,"iron.RenderPath","boot",0xb12bd61f,"iron.RenderPath.boot","iron/RenderPath.hx",747,0x489fbb1c)
namespace iron{

void RenderPath_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_14_new)
HXLINE( 624)		this->depthBuffers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 313)		this->currentMaterial = null();
HXLINE(  49)		this->depthToRenderTarget =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  48)		this->renderTargets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  47)		this->commands = null();
HXLINE(  45)		this->cachedShaderContexts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  44)		this->loading = (int)0;
HXLINE(  41)		this->paused = false;
HXLINE(  39)		this->lastFrameTime = ((Float)0.0);
HXLINE(  36)		this->viewportScaled = false;
HXLINE(  35)		this->scissorSet = false;
HXLINE(  32)		this->lastH = (int)0;
HXLINE(  31)		this->lastW = (int)0;
HXLINE(  27)		this->currentLampIndex = (int)0;
HXLINE(  24)		this->currentTarget = null();
HXLINE(  23)		this->frameTime = ((Float)0.0);
HXLINE(  22)		this->frameScissorH = (int)0;
HXLINE(  21)		this->frameScissorW = (int)0;
HXLINE(  20)		this->frameScissorY = (int)0;
HXLINE(  19)		this->frameScissorX = (int)0;
HXLINE(  18)		this->frameScissor = false;
            	}

Dynamic RenderPath_obj::__CreateEmpty() { return new RenderPath_obj; }

void *RenderPath_obj::_hx_vtable = 0;

Dynamic RenderPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderPath_obj > _hx_result = new RenderPath_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RenderPath_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x627b1c43;
}

bool RenderPath_obj::get_ready(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_43_get_ready)
HXDLIN(  43)		return (this->loading == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,get_ready,return )

 ::Dynamic RenderPath_obj::lampCastShadow(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_53_lampCastShadow)
HXDLIN(  53)		 ::iron::object::LampObject _hx_tmp;
HXDLIN(  53)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXDLIN(  53)			_hx_tmp = ::iron::Scene_obj::active->lamps->__get(this->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXDLIN(  53)			_hx_tmp = null();
            		}
HXDLIN(  53)		return _hx_tmp->data->raw->__Field(HX_("cast_shadow",a0,a0,20,eb),hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,lampCastShadow,return )

bool RenderPath_obj::lampIsSun(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_57_lampIsSun)
HXDLIN(  57)		 ::iron::object::LampObject _hx_tmp;
HXDLIN(  57)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXDLIN(  57)			_hx_tmp = ::iron::Scene_obj::active->lamps->__get(this->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXDLIN(  57)			_hx_tmp = null();
            		}
HXDLIN(  57)		return (( (::String)(_hx_tmp->data->raw->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("sun",8c,a9,57,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,lampIsSun,return )

 ::iron::object::LampObject RenderPath_obj::getLamp(int index){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_79_getLamp)
HXDLIN(  79)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXDLIN(  79)			return ::iron::Scene_obj::active->lamps->__get(index).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXDLIN(  79)			return null();
            		}
HXDLIN(  79)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,getLamp,return )

void RenderPath_obj::renderFrame(::Dynamic g){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_81_renderFrame)
HXLINE(  82)		bool _hx_tmp;
HXDLIN(  82)		bool _hx_tmp1;
HXDLIN(  82)		bool _hx_tmp2;
HXDLIN(  82)		if (!(!(this->get_ready()))) {
HXLINE(  82)			_hx_tmp2 = this->paused;
            		}
            		else {
HXLINE(  82)			_hx_tmp2 = true;
            		}
HXDLIN(  82)		if (!(_hx_tmp2)) {
HXLINE(  82)			_hx_tmp1 = (::kha::System_obj::windowWidth(null()) == (int)0);
            		}
            		else {
HXLINE(  82)			_hx_tmp1 = true;
            		}
HXDLIN(  82)		if (!(_hx_tmp1)) {
HXLINE(  82)			_hx_tmp = (::kha::System_obj::windowHeight(null()) == (int)0);
            		}
            		else {
HXLINE(  82)			_hx_tmp = true;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  82)			return;
            		}
HXLINE(  85)		bool _hx_tmp3;
HXDLIN(  85)		if ((this->lastW > (int)0)) {
HXLINE(  85)			int _hx_tmp4 = this->lastW;
HXDLIN(  85)			if ((_hx_tmp4 == ::kha::System_obj::windowWidth(null()))) {
HXLINE(  85)				int _hx_tmp5 = this->lastH;
HXDLIN(  85)				_hx_tmp3 = (_hx_tmp5 != ::kha::System_obj::windowHeight(null()));
            			}
            			else {
HXLINE(  85)				_hx_tmp3 = true;
            			}
            		}
            		else {
HXLINE(  85)			_hx_tmp3 = false;
            		}
HXDLIN(  85)		if (_hx_tmp3) {
HXLINE(  85)			this->resize();
            		}
HXLINE(  86)		this->lastW = ::kha::System_obj::windowWidth(null());
HXLINE(  87)		this->lastH = ::kha::System_obj::windowHeight(null());
HXLINE(  90)		Float _hx_tmp6 = ::kha::Scheduler_obj::time();
HXDLIN(  90)		this->frameTime = (_hx_tmp6 - this->lastFrameTime);
HXLINE(  91)		this->lastFrameTime = ::kha::Scheduler_obj::time();
HXLINE( 102)		::Dynamic _hx_tmp7;
HXDLIN( 102)		bool _hx_tmp8;
HXDLIN( 102)		if (hx::IsNotNull( ::iron::Scene_obj::active->camera )) {
HXLINE( 102)			_hx_tmp8 = hx::IsNull( ::iron::Scene_obj::active->camera->data->renderTarget );
            		}
            		else {
HXLINE( 102)			_hx_tmp8 = true;
            		}
HXDLIN( 102)		if (_hx_tmp8) {
HXLINE( 102)			_hx_tmp7 = g;
            		}
            		else {
HXLINE( 102)			_hx_tmp7 = ::iron::Scene_obj::active->camera->data->renderTarget->get_g4();
            		}
HXDLIN( 102)		this->frameG = _hx_tmp7;
HXLINE( 103)		this->currentG = this->frameG;
HXLINE( 104)		this->currentW = ::kha::System_obj::windowWidth(null());
HXLINE( 105)		this->currentH = ::kha::System_obj::windowHeight(null());
HXLINE( 106)		this->currentD = (int)1;
HXLINE( 107)		this->currentCube = false;
HXLINE( 108)		this->currentFace = (int)-1;
HXLINE( 109)		this->meshesSorted = false;
HXLINE( 111)		this->currentLampIndex = (int)0;
HXLINE( 112)		{
HXLINE( 112)			int _g = (int)0;
HXDLIN( 112)			::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->lamps;
HXDLIN( 112)			while((_g < _g1->length)){
HXLINE( 112)				 ::iron::object::LampObject l = _g1->__get(_g).StaticCast<  ::iron::object::LampObject >();
HXDLIN( 112)				_g = (_g + (int)1);
HXDLIN( 112)				if (l->visible) {
HXLINE( 112)					l->buildMatrices(::iron::Scene_obj::active->camera);
            				}
            			}
            		}
HXLINE( 114)		this->commands();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,renderFrame,(void))

void RenderPath_obj::setTarget(::String target,::Array< ::String > additional,hx::Null< Float >  __o_viewportScale){
Float viewportScale = __o_viewportScale.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_117_setTarget)
HXLINE( 118)		if ((target == HX_("",00,00,00,00))) {
HXLINE( 119)			this->currentG = this->frameG;
HXLINE( 120)			this->currentW = ::kha::System_obj::windowWidth(null());
HXLINE( 121)			this->currentH = ::kha::System_obj::windowHeight(null());
HXLINE( 122)			this->currentD = (int)1;
HXLINE( 123)			this->currentTarget = null();
HXLINE( 124)			this->currentCube = false;
HXLINE( 125)			this->currentFace = (int)-1;
HXLINE( 126)			if (this->frameScissor) {
HXLINE( 126)				this->setFrameScissor();
            			}
HXLINE( 127)			{
HXLINE( 127)				::Dynamic g = this->currentG;
HXDLIN( 127)				int face = (int)-1;
HXDLIN( 127)				if ((face >= (int)0)) {
HXLINE( 127)					::kha::graphics4::Graphics_obj::beginFace(g,((int)5 - face));
            				}
            				else {
HXLINE( 127)					::kha::graphics4::Graphics_obj::begin(g,null());
            				}
            			}
            		}
            		else {
HXLINE( 134)			 ::iron::RenderTarget rt = this->renderTargets->get(target).StaticCast<  ::iron::RenderTarget >();
HXLINE( 135)			this->currentTarget = rt;
HXLINE( 136)			::Array< ::Dynamic> additionalImages = null();
HXLINE( 137)			if (hx::IsNotNull( additional )) {
HXLINE( 138)				additionalImages = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 139)				{
HXLINE( 139)					int _g = (int)0;
HXDLIN( 139)					while((_g < additional->length)){
HXLINE( 139)						::String s = additional->__get(_g);
HXDLIN( 139)						_g = (_g + (int)1);
HXLINE( 140)						 ::iron::RenderTarget t = this->renderTargets->get(s).StaticCast<  ::iron::RenderTarget >();
HXLINE( 141)						additionalImages->push(t->image);
            					}
            				}
            			}
HXLINE( 144)			::Dynamic _hx_tmp;
HXDLIN( 144)			if (rt->isCubeMap) {
HXLINE( 144)				_hx_tmp = rt->cubeMap->get_g4();
            			}
            			else {
HXLINE( 144)				_hx_tmp = rt->image->get_g4();
            			}
HXDLIN( 144)			this->currentG = _hx_tmp;
HXLINE( 145)			int _hx_tmp1;
HXDLIN( 145)			if (rt->isCubeMap) {
HXLINE( 145)				_hx_tmp1 = rt->cubeMap->get_width();
            			}
            			else {
HXLINE( 145)				_hx_tmp1 = rt->image->get_width();
            			}
HXDLIN( 145)			this->currentW = _hx_tmp1;
HXLINE( 146)			int _hx_tmp2;
HXDLIN( 146)			if (rt->isCubeMap) {
HXLINE( 146)				_hx_tmp2 = rt->cubeMap->get_height();
            			}
            			else {
HXLINE( 146)				_hx_tmp2 = rt->image->get_height();
            			}
HXDLIN( 146)			this->currentH = _hx_tmp2;
HXLINE( 147)			if (rt->is3D) {
HXLINE( 147)				this->currentD = rt->image->get_depth();
            			}
HXLINE( 148)			this->currentCube = rt->isCubeMap;
HXLINE( 149)			{
HXLINE( 149)				::Dynamic g1 = this->currentG;
HXDLIN( 149)				int face1 = this->currentFace;
HXDLIN( 149)				if ((face1 >= (int)0)) {
HXLINE( 149)					::kha::graphics4::Graphics_obj::beginFace(g1,((int)5 - face1));
            				}
            				else {
HXLINE( 149)					::kha::graphics4::Graphics_obj::begin(g1,additionalImages);
            				}
            			}
            		}
HXLINE( 151)		if ((viewportScale != ((Float)1.0))) {
HXLINE( 152)			this->viewportScaled = true;
HXLINE( 153)			int viewW = ::Std_obj::_hx_int((this->currentW * viewportScale));
HXLINE( 154)			int viewH = ::Std_obj::_hx_int((this->currentH * viewportScale));
HXLINE( 155)			::kha::graphics4::Graphics_obj::viewport(this->currentG,(int)0,viewH,viewW,viewH);
HXLINE( 156)			::kha::graphics4::Graphics_obj::scissor(this->currentG,(int)0,viewH,viewW,viewH);
            		}
            		else {
HXLINE( 158)			if (this->viewportScaled) {
HXLINE( 159)				this->viewportScaled = false;
HXLINE( 160)				this->setCurrentViewport(this->currentW,this->currentH);
HXLINE( 161)				this->setCurrentScissor(this->currentW,this->currentH);
            			}
            		}
HXLINE( 163)		this->bindParams = null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(RenderPath_obj,setTarget,(void))

void RenderPath_obj::begin(::Dynamic g,::Array< ::Dynamic> additionalRenderTargets,hx::Null< int >  __o_face){
int face = __o_face.Default(-1);
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_168_begin)
HXDLIN( 168)		if ((face >= (int)0)) {
HXDLIN( 168)			::kha::graphics4::Graphics_obj::beginFace(g,((int)5 - face));
            		}
            		else {
HXDLIN( 168)			::kha::graphics4::Graphics_obj::begin(g,additionalRenderTargets);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(RenderPath_obj,begin,(void))

void RenderPath_obj::end(::Dynamic g){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_171_end)
HXLINE( 172)		::kha::graphics4::Graphics_obj::end(g);
HXLINE( 173)		if (this->scissorSet) {
HXLINE( 173)			::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 173)			this->scissorSet = false;
            		}
HXLINE( 174)		this->bindParams = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,end,(void))

void RenderPath_obj::setCurrentViewport(int viewW,int viewH){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_178_setCurrentViewport)
HXDLIN( 178)		::Dynamic _hx_tmp = this->currentG;
HXDLIN( 178)		::kha::graphics4::Graphics_obj::viewport(_hx_tmp,(int)0,(this->currentH - viewH),viewW,viewH);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,setCurrentViewport,(void))

void RenderPath_obj::setCurrentScissor(int viewW,int viewH){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_181_setCurrentScissor)
HXLINE( 182)		::Dynamic _hx_tmp = this->currentG;
HXDLIN( 182)		::kha::graphics4::Graphics_obj::scissor(_hx_tmp,(int)0,(this->currentH - viewH),viewW,viewH);
HXLINE( 183)		this->scissorSet = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,setCurrentScissor,(void))

void RenderPath_obj::setFrameScissor(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_187_setFrameScissor)
HXDLIN( 187)		::Dynamic _hx_tmp = this->frameG;
HXDLIN( 187)		int _hx_tmp1 = this->frameScissorX;
HXDLIN( 187)		int _hx_tmp2 = this->currentH;
HXDLIN( 187)		::kha::graphics4::Graphics_obj::scissor(_hx_tmp,_hx_tmp1,(_hx_tmp2 - (this->frameScissorH - this->frameScissorY)),this->frameScissorW,this->frameScissorH);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,setFrameScissor,(void))

void RenderPath_obj::setViewport(int viewW,int viewH){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_190_setViewport)
HXLINE( 191)		this->setCurrentViewport(viewW,viewH);
HXLINE( 192)		this->setCurrentScissor(viewW,viewH);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,setViewport,(void))

void RenderPath_obj::clearTarget( ::Dynamic colorFlag, ::Dynamic depthFlag){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_195_clearTarget)
HXLINE( 196)		bool _hx_tmp;
HXDLIN( 196)		if (hx::IsEq( colorFlag,(int)-1 )) {
HXLINE( 196)			_hx_tmp = hx::IsNotNull( ::iron::Scene_obj::active->world );
            		}
            		else {
HXLINE( 196)			_hx_tmp = false;
            		}
HXDLIN( 196)		if (_hx_tmp) {
HXLINE( 196)			colorFlag = ::iron::Scene_obj::active->world->raw->__Field(HX_("background_color",12,f3,45,dc),hx::paccDynamic);
            		}
HXLINE( 197)		::kha::graphics4::Graphics_obj::clear(this->currentG,colorFlag,depthFlag,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,clearTarget,(void))

void RenderPath_obj::clearImage(::String target,int color){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_200_clearImage)
HXLINE( 201)		 ::iron::RenderTarget rt = this->renderTargets->get(target).StaticCast<  ::iron::RenderTarget >();
HXLINE( 202)		 ::kha::Image rt1 = rt->image;
HXDLIN( 202)		int _hx_tmp = rt->image->get_width();
HXDLIN( 202)		int _hx_tmp1 = rt->image->get_height();
HXDLIN( 202)		rt1->clear((int)0,(int)0,(int)0,_hx_tmp,_hx_tmp1,rt->image->get_depth(),color);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,clearImage,(void))

void RenderPath_obj::generateMipmaps(::String target){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_205_generateMipmaps)
HXLINE( 206)		 ::iron::RenderTarget rt = this->renderTargets->get(target).StaticCast<  ::iron::RenderTarget >();
HXLINE( 207)		rt->image->generateMipmaps((int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,generateMipmaps,(void))

void RenderPath_obj::drawMeshes(::String context){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_229_drawMeshes)
HXLINE( 230)		 ::iron::object::LampObject lamp;
HXDLIN( 230)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXLINE( 230)			lamp = ::iron::Scene_obj::active->lamps->__get(this->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXLINE( 230)			lamp = null();
            		}
HXLINE( 231)		bool _hx_tmp;
HXDLIN( 231)		if (hx::IsNotNull( lamp )) {
HXLINE( 231)			_hx_tmp = !(lamp->visible);
            		}
            		else {
HXLINE( 231)			_hx_tmp = false;
            		}
HXDLIN( 231)		if (_hx_tmp) {
HXLINE( 233)			if ((this->currentLampIndex > (int)0)) {
HXLINE( 233)				return;
            			}
            		}
HXLINE( 236)		bool isShadows = (context == HX_("shadowmap",bc,6e,b8,f4));
HXLINE( 237)		if (isShadows) {
HXLINE( 239)			bool _hx_tmp1;
HXDLIN( 239)			if (hx::IsNotNull( lamp )) {
HXLINE( 239)				_hx_tmp1 = !(( (bool)(lamp->data->raw->__Field(HX_("cast_shadow",a0,a0,20,eb),hx::paccDynamic)) ));
            			}
            			else {
HXLINE( 239)				_hx_tmp1 = true;
            			}
HXDLIN( 239)			if (_hx_tmp1) {
HXLINE( 239)				return;
            			}
            		}
HXLINE( 243)		bool _hx_tmp2;
HXDLIN( 243)		if ((this->currentFace >= (int)0)) {
HXLINE( 243)			_hx_tmp2 = hx::IsNotNull( lamp );
            		}
            		else {
HXLINE( 243)			_hx_tmp2 = false;
            		}
HXDLIN( 243)		if (_hx_tmp2) {
HXLINE( 243)			lamp->setCubeFace(((int)5 - this->currentFace),::iron::Scene_obj::active->camera);
            		}
HXLINE( 245)		::Dynamic g = this->currentG;
HXLINE( 246)		bool drawn = false;
HXLINE( 249)		bool _hx_tmp3;
HXDLIN( 249)		if (isShadows) {
HXLINE( 249)			_hx_tmp3 = (( (::String)(lamp->data->raw->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("sun",8c,a9,57,00));
            		}
            		else {
HXLINE( 249)			_hx_tmp3 = false;
            		}
HXDLIN( 249)		if (_hx_tmp3) {
HXLINE( 250)			int step = this->currentH;
HXLINE( 251)			{
HXLINE( 251)				int _g1 = (int)0;
HXDLIN( 251)				int _g = ::iron::object::LampObject_obj::cascadeCount;
HXDLIN( 251)				while((_g1 < _g)){
HXLINE( 251)					_g1 = (_g1 + (int)1);
HXDLIN( 251)					int i = (_g1 - (int)1);
HXLINE( 252)					lamp->setCascade(::iron::Scene_obj::active->camera,i);
HXLINE( 254)					::kha::graphics4::Graphics_obj::viewport(g,(i * step),(int)0,step,step);
HXLINE( 255)					this->submitDraw(context);
            				}
            			}
HXLINE( 257)			drawn = true;
            		}
HXLINE( 261)		if (!(drawn)) {
HXLINE( 261)			this->submitDraw(context);
            		}
HXLINE( 271)		{
HXLINE( 271)			::kha::graphics4::Graphics_obj::end(g);
HXDLIN( 271)			if (this->scissorSet) {
HXLINE( 271)				::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 271)				this->scissorSet = false;
            			}
HXDLIN( 271)			this->bindParams = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,drawMeshes,(void))

void RenderPath_obj::submitDraw(::String context){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_274_submitDraw)
HXLINE( 275)		 ::iron::object::LampObject lamp;
HXDLIN( 275)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXLINE( 275)			lamp = ::iron::Scene_obj::active->lamps->__get(this->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXLINE( 275)			lamp = null();
            		}
HXLINE( 276)		::Dynamic g = this->currentG;
HXLINE( 281)		bool _hx_tmp;
HXDLIN( 281)		if (!(this->meshesSorted)) {
HXLINE( 281)			_hx_tmp = hx::IsNotNull( ::iron::Scene_obj::active->camera );
            		}
            		else {
HXLINE( 281)			_hx_tmp = false;
            		}
HXDLIN( 281)		if (_hx_tmp) {
HXLINE( 282)			::iron::RenderPath_obj::sortMeshes(::iron::Scene_obj::active->meshes,::iron::Scene_obj::active->camera);
HXLINE( 283)			this->meshesSorted = true;
            		}
HXLINE( 285)		{
HXLINE( 285)			int _g = (int)0;
HXDLIN( 285)			::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->meshes;
HXDLIN( 285)			while((_g < _g1->length)){
HXLINE( 285)				 ::iron::object::MeshObject m = _g1->__get(_g).StaticCast<  ::iron::object::MeshObject >();
HXDLIN( 285)				_g = (_g + (int)1);
HXLINE( 286)				m->render(g,context,::iron::Scene_obj::active->camera,lamp,this->bindParams);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,submitDraw,(void))

void RenderPath_obj::getRectContexts( ::iron::data::MaterialData mat,::String context,::Array< ::Dynamic> materialContexts,::Array< ::Dynamic> shaderContexts){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_302_getRectContexts)
HXDLIN( 302)		int _g1 = (int)0;
HXDLIN( 302)		int _g = ( (::Array< ::Dynamic>)(mat->raw->__Field(HX_("contexts",a4,9b,2b,2f),hx::paccDynamic)) )->length;
HXDLIN( 302)		while((_g1 < _g)){
HXDLIN( 302)			_g1 = (_g1 + (int)1);
HXDLIN( 302)			int i = (_g1 - (int)1);
HXLINE( 303)			if ((( (::String)( ::Dynamic(mat->raw->__Field(HX_("contexts",a4,9b,2b,2f),hx::paccDynamic))->__GetItem(i)->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ).substr((int)0,context.length) == context)) {
HXLINE( 304)				materialContexts->push(mat->contexts->__get(i).StaticCast<  ::iron::data::MaterialContext >());
HXLINE( 305)				shaderContexts->push(mat->shader->getContext(context));
HXLINE( 306)				goto _hx_goto_22;
            			}
            		}
            		_hx_goto_22:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(RenderPath_obj,getRectContexts,(void))

Float RenderPath_obj::clampRect(Float f){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_311_clampRect)
HXDLIN( 311)		if ((f < ((Float)-1.0))) {
HXDLIN( 311)			return ((Float)-1.0);
            		}
            		else {
HXDLIN( 311)			if ((f > ((Float)1.0))) {
HXDLIN( 311)				return ((Float)1.0);
            			}
            			else {
HXDLIN( 311)				return f;
            			}
            		}
HXDLIN( 311)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,clampRect,return )

void RenderPath_obj::drawRects(::String context){
            	HX_GC_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_315_drawRects)
HXLINE( 316)		if (hx::IsNull( ::iron::data::ConstData_obj::rectVB )) {
HXLINE( 316)			::iron::data::ConstData_obj::createRectData();
            		}
HXLINE( 317)		::Dynamic g = this->currentG;
HXLINE( 318)		 ::iron::object::LampObject lamp;
HXDLIN( 318)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXLINE( 318)			lamp = ::iron::Scene_obj::active->lamps->__get(this->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXLINE( 318)			lamp = null();
            		}
HXLINE( 321)		::Array< ::Dynamic> mats = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 322)		::Array< ::Dynamic> volumesMin = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 323)		::Array< ::Dynamic> volumesMax = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 324)		{
HXLINE( 324)			int _g = (int)0;
HXDLIN( 324)			::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->meshes;
HXDLIN( 324)			while((_g < _g1->length)){
HXLINE( 324)				 ::iron::object::MeshObject m = _g1->__get(_g).StaticCast<  ::iron::object::MeshObject >();
HXDLIN( 324)				_g = (_g + (int)1);
HXLINE( 325)				bool found = false;
HXLINE( 326)				{
HXLINE( 326)					int _g3 = (int)0;
HXDLIN( 326)					int _g2 = mats->length;
HXDLIN( 326)					while((_g3 < _g2)){
HXLINE( 326)						_g3 = (_g3 + (int)1);
HXDLIN( 326)						int i = (_g3 - (int)1);
HXLINE( 327)						 ::iron::data::MaterialData mat = mats->__get(i).StaticCast<  ::iron::data::MaterialData >();
HXLINE( 328)						if (hx::IsEq( mat,( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(m->materials,(int)0)) ) )) {
HXLINE( 329)							 ::iron::math::Vec4 loc =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,m->transform->world->self->_30,m->transform->world->self->_31,m->transform->world->self->_32,null());
HXLINE( 330)							 ::iron::math::Vec4 dim = m->transform->dim;
HXLINE( 331)							 ::iron::math::Vec4 min = volumesMin->__get(i).StaticCast<  ::iron::math::Vec4 >();
HXLINE( 332)							 ::iron::math::Vec4 max = volumesMax->__get(i).StaticCast<  ::iron::math::Vec4 >();
HXLINE( 333)							float min1 = min->x;
HXDLIN( 333)							float loc1 = loc->x;
HXDLIN( 333)							if ((min1 > (loc1 - ((Float)dim->x / (Float)((Float)2.0))))) {
HXLINE( 333)								float loc2 = loc->x;
HXDLIN( 333)								min->x = (loc2 - ((Float)dim->x / (Float)((Float)2.0)));
            							}
HXLINE( 334)							float min2 = min->y;
HXDLIN( 334)							float loc3 = loc->y;
HXDLIN( 334)							if ((min2 > (loc3 - ((Float)dim->y / (Float)((Float)2.0))))) {
HXLINE( 334)								float loc4 = loc->y;
HXDLIN( 334)								min->y = (loc4 - ((Float)dim->y / (Float)((Float)2.0)));
            							}
HXLINE( 335)							float min3 = min->z;
HXDLIN( 335)							float loc5 = loc->z;
HXDLIN( 335)							if ((min3 > (loc5 - ((Float)dim->z / (Float)((Float)2.0))))) {
HXLINE( 335)								float loc6 = loc->z;
HXDLIN( 335)								min->z = (loc6 - ((Float)dim->z / (Float)((Float)2.0)));
            							}
HXLINE( 336)							float max1 = max->x;
HXDLIN( 336)							float loc7 = loc->x;
HXDLIN( 336)							if ((max1 < (loc7 + ((Float)dim->x / (Float)((Float)2.0))))) {
HXLINE( 336)								float loc8 = loc->x;
HXDLIN( 336)								max->x = (loc8 + ((Float)dim->x / (Float)((Float)2.0)));
            							}
HXLINE( 337)							float max2 = max->y;
HXDLIN( 337)							float loc9 = loc->y;
HXDLIN( 337)							if ((max2 < (loc9 + ((Float)dim->y / (Float)((Float)2.0))))) {
HXLINE( 337)								float loc10 = loc->y;
HXDLIN( 337)								max->y = (loc10 + ((Float)dim->y / (Float)((Float)2.0)));
            							}
HXLINE( 338)							float max3 = max->z;
HXDLIN( 338)							float loc11 = loc->z;
HXDLIN( 338)							if ((max3 < (loc11 + ((Float)dim->z / (Float)((Float)2.0))))) {
HXLINE( 338)								float loc12 = loc->z;
HXDLIN( 338)								max->z = (loc12 + ((Float)dim->z / (Float)((Float)2.0)));
            							}
HXLINE( 339)							found = true;
HXLINE( 340)							goto _hx_goto_26;
            						}
            					}
            					_hx_goto_26:;
            				}
HXLINE( 343)				if (found) {
HXLINE( 343)					continue;
            				}
HXLINE( 344)				 ::iron::math::Vec4 loc13 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,m->transform->world->self->_30,m->transform->world->self->_31,m->transform->world->self->_32,null());
HXLINE( 345)				 ::iron::math::Vec4 dim1 = m->transform->dim;
HXLINE( 346)				float loc14 = loc13->x;
HXDLIN( 346)				Float _hx_tmp = (loc14 - ((Float)dim1->x / (Float)((Float)2.0)));
HXDLIN( 346)				float loc15 = loc13->y;
HXDLIN( 346)				Float _hx_tmp1 = (loc15 - ((Float)dim1->y / (Float)((Float)2.0)));
HXDLIN( 346)				float loc16 = loc13->z;
HXDLIN( 346)				volumesMin->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(loc16 - ((Float)dim1->z / (Float)((Float)2.0))),null()));
HXLINE( 347)				float loc17 = loc13->x;
HXDLIN( 347)				Float _hx_tmp2 = (loc17 + ((Float)dim1->x / (Float)((Float)2.0)));
HXDLIN( 347)				float loc18 = loc13->y;
HXDLIN( 347)				Float _hx_tmp3 = (loc18 + ((Float)dim1->y / (Float)((Float)2.0)));
HXDLIN( 347)				float loc19 = loc13->z;
HXDLIN( 347)				volumesMax->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,_hx_tmp2,_hx_tmp3,(loc19 + ((Float)dim1->z / (Float)((Float)2.0))),null()));
HXLINE( 348)				mats->push(_hx_array_unsafe_get(m->materials,(int)0));
            			}
            		}
HXLINE( 350)		::Array< ::Dynamic> rectBounds = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 351)		{
HXLINE( 351)			int _g11 = (int)0;
HXDLIN( 351)			int _g4 = volumesMin->length;
HXDLIN( 351)			while((_g11 < _g4)){
HXLINE( 351)				_g11 = (_g11 + (int)1);
HXDLIN( 351)				int i1 = (_g11 - (int)1);
HXLINE( 352)				 ::iron::math::Vec4 min4 = volumesMin->__get(i1).StaticCast<  ::iron::math::Vec4 >();
HXLINE( 353)				 ::iron::math::Vec4 max4 = volumesMax->__get(i1).StaticCast<  ::iron::math::Vec4 >();
HXLINE( 354)				float dx = (max4->x - min4->x);
HXLINE( 355)				float dy = (max4->y - min4->y);
HXLINE( 356)				float dz = (max4->z - min4->z);
HXLINE( 357)				::Array< ::Dynamic> ps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 358)				ps->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,min4->x,min4->y,min4->z,null()));
HXLINE( 359)				ps->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,(min4->x + dx),min4->y,min4->z,null()));
HXLINE( 360)				float min5 = min4->x;
HXDLIN( 360)				ps->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,min5,(min4->y + dy),min4->z,null()));
HXLINE( 361)				float min6 = min4->x;
HXDLIN( 361)				float min7 = min4->y;
HXDLIN( 361)				ps->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,min6,min7,(min4->z + dz),null()));
HXLINE( 362)				float _hx_tmp4 = (min4->x + dx);
HXDLIN( 362)				ps->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,_hx_tmp4,(min4->y + dy),min4->z,null()));
HXLINE( 363)				float min8 = min4->x;
HXDLIN( 363)				float _hx_tmp5 = (min4->y + dy);
HXDLIN( 363)				ps->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,min8,_hx_tmp5,(min4->z + dz),null()));
HXLINE( 364)				float _hx_tmp6 = (min4->x + dx);
HXDLIN( 364)				float min9 = min4->y;
HXDLIN( 364)				ps->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,_hx_tmp6,min9,(min4->z + dz),null()));
HXLINE( 365)				float _hx_tmp7 = (min4->x + dx);
HXDLIN( 365)				float _hx_tmp8 = (min4->y + dy);
HXDLIN( 365)				ps->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_tmp8,(min4->z + dz),null()));
HXLINE( 366)				::iron::RenderPath_obj::helpMat->setFrom(::iron::Scene_obj::active->camera->V);
HXLINE( 367)				::iron::RenderPath_obj::helpMat->multmat2(::iron::Scene_obj::active->camera->P);
HXLINE( 368)				 ::iron::math::Vec4 b = null();
HXLINE( 369)				{
HXLINE( 369)					int _g21 = (int)0;
HXDLIN( 369)					while((_g21 < ps->length)){
HXLINE( 369)						 ::iron::math::Vec4 v = ps->__get(_g21).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 369)						_g21 = (_g21 + (int)1);
HXLINE( 370)						v->applymat4(::iron::RenderPath_obj::helpMat);
HXLINE( 371)						 ::iron::math::Vec4 v1 = v;
HXDLIN( 371)						v1->x = ((Float)v1->x / (Float)v->w);
HXDLIN( 371)						 ::iron::math::Vec4 v2 = v;
HXDLIN( 371)						v2->y = ((Float)v2->y / (Float)v->w);
HXDLIN( 371)						 ::iron::math::Vec4 v3 = v;
HXDLIN( 371)						v3->z = ((Float)v3->z / (Float)v->w);
HXLINE( 372)						if (hx::IsNull( b )) {
HXLINE( 373)							b =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,v->x,v->y,v->x,v->y);
            						}
            						else {
HXLINE( 376)							if ((v->x < b->x)) {
HXLINE( 376)								b->x = v->x;
            							}
HXLINE( 377)							if ((v->y < b->y)) {
HXLINE( 377)								b->y = v->y;
            							}
HXLINE( 378)							if ((v->x > b->z)) {
HXLINE( 378)								b->z = v->x;
            							}
HXLINE( 379)							if ((v->y > b->w)) {
HXLINE( 379)								b->w = v->y;
            							}
            						}
            					}
            				}
HXLINE( 382)				rectBounds->push(b);
            			}
            		}
HXLINE( 385)		::kha::graphics4::Graphics_obj::setIndexBuffer(g,::iron::data::ConstData_obj::rectIB);
HXLINE( 388)		{
HXLINE( 388)			int _g12 = (int)0;
HXDLIN( 388)			int _g5 = mats->length;
HXDLIN( 388)			while((_g12 < _g5)){
HXLINE( 388)				_g12 = (_g12 + (int)1);
HXDLIN( 388)				int i2 = (_g12 - (int)1);
HXLINE( 389)				 ::iron::data::MaterialData mat1 = mats->__get(i2).StaticCast<  ::iron::data::MaterialData >();
HXLINE( 390)				 ::iron::math::Vec4 b1 = rectBounds->__get(i2).StaticCast<  ::iron::math::Vec4 >();
HXLINE( 391)				float dx1 = (b1->z - b1->x);
HXLINE( 392)				float dy1 = (b1->w - b1->y);
HXLINE( 393)				 ::kha::arrays::Float32ArrayPrivate v4 = ::iron::data::ConstData_obj::rectVB->lock(null(),null());
HXLINE( 394)				{
HXLINE( 394)					Float f = b1->x;
HXDLIN( 394)					float value;
HXDLIN( 394)					if ((f < ((Float)-1.0))) {
HXLINE( 394)						value = ((Float)-1.0);
            					}
            					else {
HXLINE( 394)						if ((f > ((Float)1.0))) {
HXLINE( 394)							value = ((Float)1.0);
            						}
            						else {
HXLINE( 394)							value = f;
            						}
            					}
HXDLIN( 394)					v4->self.set((int)0,value);
            				}
HXLINE( 395)				{
HXLINE( 395)					Float f1 = b1->y;
HXDLIN( 395)					float value1;
HXDLIN( 395)					if ((f1 < ((Float)-1.0))) {
HXLINE( 395)						value1 = ((Float)-1.0);
            					}
            					else {
HXLINE( 395)						if ((f1 > ((Float)1.0))) {
HXLINE( 395)							value1 = ((Float)1.0);
            						}
            						else {
HXLINE( 395)							value1 = f1;
            						}
            					}
HXDLIN( 395)					v4->self.set((int)1,value1);
            				}
HXLINE( 396)				{
HXLINE( 396)					Float f2 = (b1->x + dx1);
HXDLIN( 396)					float value2;
HXDLIN( 396)					if ((f2 < ((Float)-1.0))) {
HXLINE( 396)						value2 = ((Float)-1.0);
            					}
            					else {
HXLINE( 396)						if ((f2 > ((Float)1.0))) {
HXLINE( 396)							value2 = ((Float)1.0);
            						}
            						else {
HXLINE( 396)							value2 = f2;
            						}
            					}
HXDLIN( 396)					v4->self.set((int)2,value2);
            				}
HXLINE( 397)				{
HXLINE( 397)					Float f3 = b1->y;
HXDLIN( 397)					float value3;
HXDLIN( 397)					if ((f3 < ((Float)-1.0))) {
HXLINE( 397)						value3 = ((Float)-1.0);
            					}
            					else {
HXLINE( 397)						if ((f3 > ((Float)1.0))) {
HXLINE( 397)							value3 = ((Float)1.0);
            						}
            						else {
HXLINE( 397)							value3 = f3;
            						}
            					}
HXDLIN( 397)					v4->self.set((int)3,value3);
            				}
HXLINE( 398)				{
HXLINE( 398)					Float f4 = (b1->x + dx1);
HXDLIN( 398)					float value4;
HXDLIN( 398)					if ((f4 < ((Float)-1.0))) {
HXLINE( 398)						value4 = ((Float)-1.0);
            					}
            					else {
HXLINE( 398)						if ((f4 > ((Float)1.0))) {
HXLINE( 398)							value4 = ((Float)1.0);
            						}
            						else {
HXLINE( 398)							value4 = f4;
            						}
            					}
HXDLIN( 398)					v4->self.set((int)4,value4);
            				}
HXLINE( 399)				{
HXLINE( 399)					Float f5 = (b1->y + dy1);
HXDLIN( 399)					float value5;
HXDLIN( 399)					if ((f5 < ((Float)-1.0))) {
HXLINE( 399)						value5 = ((Float)-1.0);
            					}
            					else {
HXLINE( 399)						if ((f5 > ((Float)1.0))) {
HXLINE( 399)							value5 = ((Float)1.0);
            						}
            						else {
HXLINE( 399)							value5 = f5;
            						}
            					}
HXDLIN( 399)					v4->self.set((int)5,value5);
            				}
HXLINE( 400)				{
HXLINE( 400)					Float f6 = b1->x;
HXDLIN( 400)					float value6;
HXDLIN( 400)					if ((f6 < ((Float)-1.0))) {
HXLINE( 400)						value6 = ((Float)-1.0);
            					}
            					else {
HXLINE( 400)						if ((f6 > ((Float)1.0))) {
HXLINE( 400)							value6 = ((Float)1.0);
            						}
            						else {
HXLINE( 400)							value6 = f6;
            						}
            					}
HXDLIN( 400)					v4->self.set((int)6,value6);
            				}
HXLINE( 401)				{
HXLINE( 401)					Float f7 = (b1->y + dy1);
HXDLIN( 401)					float value7;
HXDLIN( 401)					if ((f7 < ((Float)-1.0))) {
HXLINE( 401)						value7 = ((Float)-1.0);
            					}
            					else {
HXLINE( 401)						if ((f7 > ((Float)1.0))) {
HXLINE( 401)							value7 = ((Float)1.0);
            						}
            						else {
HXLINE( 401)							value7 = f7;
            						}
            					}
HXDLIN( 401)					v4->self.set((int)7,value7);
            				}
HXLINE( 402)				::iron::data::ConstData_obj::rectVB->unlock();
HXLINE( 403)				::kha::graphics4::Graphics_obj::setVertexBuffer(g,::iron::data::ConstData_obj::rectVB);
HXLINE( 405)				this->currentMaterial = mat1;
HXLINE( 406)				::Array< ::Dynamic> materialContexts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 407)				::Array< ::Dynamic> shaderContexts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 408)				this->getRectContexts(mat1,context,materialContexts,shaderContexts);
HXLINE( 410)				::kha::graphics4::Graphics_obj::setPipeline(g,mat1->shader->getContext(context)->pipeState);
HXLINE( 411)				::iron::object::Uniforms_obj::setConstants(g,shaderContexts->__get((int)0).StaticCast<  ::iron::data::ShaderContext >(),null(),::iron::Scene_obj::active->camera,lamp,this->bindParams);
HXLINE( 412)				::iron::object::Uniforms_obj::setMaterialConstants(g,shaderContexts->__get((int)0).StaticCast<  ::iron::data::ShaderContext >(),materialContexts->__get((int)0).StaticCast<  ::iron::data::MaterialContext >());
HXLINE( 413)				::kha::graphics4::Graphics_obj::drawIndexedVertices(g,null(),null());
            			}
            		}
HXLINE( 415)		this->currentMaterial = null();
HXLINE( 417)		{
HXLINE( 417)			::kha::graphics4::Graphics_obj::end(g);
HXDLIN( 417)			if (this->scissorSet) {
HXLINE( 417)				::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 417)				this->scissorSet = false;
            			}
HXDLIN( 417)			this->bindParams = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,drawRects,(void))

void RenderPath_obj::drawDecals(::String context){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_420_drawDecals)
HXLINE( 421)		if (hx::IsNull( ::iron::data::ConstData_obj::boxVB )) {
HXLINE( 421)			::iron::data::ConstData_obj::createBoxData();
            		}
HXLINE( 422)		::Dynamic g = this->currentG;
HXLINE( 423)		 ::iron::object::LampObject lamp;
HXDLIN( 423)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXLINE( 423)			lamp = ::iron::Scene_obj::active->lamps->__get(this->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXLINE( 423)			lamp = null();
            		}
HXLINE( 424)		{
HXLINE( 424)			int _g = (int)0;
HXDLIN( 424)			::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->decals;
HXDLIN( 424)			while((_g < _g1->length)){
HXLINE( 424)				 ::iron::object::DecalObject decal = _g1->__get(_g).StaticCast<  ::iron::object::DecalObject >();
HXDLIN( 424)				_g = (_g + (int)1);
HXLINE( 425)				decal->render(g,context,::iron::Scene_obj::active->camera,lamp,this->bindParams);
            			}
            		}
HXLINE( 427)		{
HXLINE( 427)			::kha::graphics4::Graphics_obj::end(g);
HXDLIN( 427)			if (this->scissorSet) {
HXLINE( 427)				::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 427)				this->scissorSet = false;
            			}
HXDLIN( 427)			this->bindParams = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,drawDecals,(void))

void RenderPath_obj::drawSkydome(::String handle){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_473_drawSkydome)
HXLINE( 474)		if (hx::IsNull( ::iron::data::ConstData_obj::skydomeVB )) {
HXLINE( 474)			::iron::data::ConstData_obj::createSkydomeData();
            		}
HXLINE( 475)		 ::iron::CachedShaderContext cc = this->cachedShaderContexts->get(handle).StaticCast<  ::iron::CachedShaderContext >();
HXLINE( 476)		if (hx::IsNull( cc->context )) {
HXLINE( 476)			return;
            		}
HXLINE( 477)		::Dynamic g = this->currentG;
HXLINE( 478)		::kha::graphics4::Graphics_obj::setPipeline(g,cc->context->pipeState);
HXLINE( 479)		 ::iron::object::LampObject lamp;
HXDLIN( 479)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXLINE( 479)			lamp = ::iron::Scene_obj::active->lamps->__get(this->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXLINE( 479)			lamp = null();
            		}
HXLINE( 480)		::iron::object::Uniforms_obj::setConstants(g,cc->context,null(),::iron::Scene_obj::active->camera,lamp,this->bindParams);
HXLINE( 484)		::kha::graphics4::Graphics_obj::setVertexBuffer(g,::iron::data::ConstData_obj::skydomeVB);
HXLINE( 486)		::kha::graphics4::Graphics_obj::setIndexBuffer(g,::iron::data::ConstData_obj::skydomeIB);
HXLINE( 487)		::kha::graphics4::Graphics_obj::drawIndexedVertices(g,null(),null());
HXLINE( 488)		{
HXLINE( 488)			::kha::graphics4::Graphics_obj::end(g);
HXDLIN( 488)			if (this->scissorSet) {
HXLINE( 488)				::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 488)				this->scissorSet = false;
            			}
HXDLIN( 488)			this->bindParams = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,drawSkydome,(void))

void RenderPath_obj::drawLampVolume(::String handle){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_491_drawLampVolume)
HXLINE( 492)		 ::kha::graphics4::VertexBuffer vb = null();
HXLINE( 493)		 ::kha::graphics4::IndexBuffer ib = null();
HXLINE( 494)		 ::iron::object::LampObject lamp;
HXDLIN( 494)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXLINE( 494)			lamp = ::iron::Scene_obj::active->lamps->__get(this->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXLINE( 494)			lamp = null();
            		}
HXLINE( 495)		::String type = ( (::String)(lamp->data->raw->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) );
HXLINE( 496)		bool _hx_tmp;
HXDLIN( 496)		if ((type != HX_("point",50,b4,8f,c6))) {
HXLINE( 496)			_hx_tmp = (type == HX_("area",8d,8b,74,40));
            		}
            		else {
HXLINE( 496)			_hx_tmp = true;
            		}
HXDLIN( 496)		if (_hx_tmp) {
HXLINE( 497)			if (hx::IsNull( ::iron::data::ConstData_obj::sphereVB )) {
HXLINE( 497)				::iron::data::ConstData_obj::createSphereData();
            			}
HXLINE( 498)			vb = ::iron::data::ConstData_obj::sphereVB;
HXLINE( 499)			ib = ::iron::data::ConstData_obj::sphereIB;
            		}
            		else {
HXLINE( 501)			if ((type == HX_("spot",02,e7,58,4c))) {
HXLINE( 505)				if (hx::IsNull( ::iron::data::ConstData_obj::sphereVB )) {
HXLINE( 505)					::iron::data::ConstData_obj::createSphereData();
            				}
HXLINE( 506)				vb = ::iron::data::ConstData_obj::sphereVB;
HXLINE( 507)				ib = ::iron::data::ConstData_obj::sphereIB;
            			}
            		}
HXLINE( 510)		 ::iron::CachedShaderContext cc = this->cachedShaderContexts->get(handle).StaticCast<  ::iron::CachedShaderContext >();
HXLINE( 511)		::Dynamic g = this->currentG;
HXLINE( 512)		::kha::graphics4::Graphics_obj::setPipeline(g,cc->context->pipeState);
HXLINE( 513)		::iron::object::Uniforms_obj::setConstants(g,cc->context,null(),::iron::Scene_obj::active->camera,lamp,this->bindParams);
HXLINE( 514)		::kha::graphics4::Graphics_obj::setVertexBuffer(g,vb);
HXLINE( 515)		::kha::graphics4::Graphics_obj::setIndexBuffer(g,ib);
HXLINE( 516)		::kha::graphics4::Graphics_obj::drawIndexedVertices(g,null(),null());
HXLINE( 517)		{
HXLINE( 517)			::kha::graphics4::Graphics_obj::end(g);
HXDLIN( 517)			if (this->scissorSet) {
HXLINE( 517)				::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 517)				this->scissorSet = false;
            			}
HXDLIN( 517)			this->bindParams = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,drawLampVolume,(void))

void RenderPath_obj::bindTarget(::String target,::String uniform){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_521_bindTarget)
HXDLIN( 521)		if (hx::IsNotNull( this->bindParams )) {
HXDLIN( 521)			this->bindParams->push(target);
HXDLIN( 521)			this->bindParams->push(uniform);
            		}
            		else {
HXLINE( 522)			this->bindParams = ::Array_obj< ::String >::__new(2)->init(0,target)->init(1,uniform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,bindTarget,(void))

void RenderPath_obj::drawShader(::String handle){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_526_drawShader)
HXLINE( 528)		 ::iron::CachedShaderContext cc = this->cachedShaderContexts->get(handle).StaticCast<  ::iron::CachedShaderContext >();
HXLINE( 529)		if (hx::IsNull( ::iron::data::ConstData_obj::screenAlignedVB )) {
HXLINE( 529)			::iron::data::ConstData_obj::createScreenAlignedData();
            		}
HXLINE( 530)		::Dynamic g = this->currentG;
HXLINE( 531)		::kha::graphics4::Graphics_obj::setPipeline(g,cc->context->pipeState);
HXLINE( 532)		 ::iron::object::LampObject lamp;
HXDLIN( 532)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXLINE( 532)			lamp = ::iron::Scene_obj::active->lamps->__get(this->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXLINE( 532)			lamp = null();
            		}
HXLINE( 533)		::iron::object::Uniforms_obj::setConstants(g,cc->context,null(),::iron::Scene_obj::active->camera,lamp,this->bindParams);
HXLINE( 534)		::kha::graphics4::Graphics_obj::setVertexBuffer(g,::iron::data::ConstData_obj::screenAlignedVB);
HXLINE( 535)		::kha::graphics4::Graphics_obj::setIndexBuffer(g,::iron::data::ConstData_obj::screenAlignedIB);
HXLINE( 536)		::kha::graphics4::Graphics_obj::drawIndexedVertices(g,null(),null());
HXLINE( 538)		{
HXLINE( 538)			::kha::graphics4::Graphics_obj::end(g);
HXDLIN( 538)			if (this->scissorSet) {
HXLINE( 538)				::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 538)				this->scissorSet = false;
            			}
HXDLIN( 538)			this->bindParams = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,drawShader,(void))

 ::kha::compute::Shader RenderPath_obj::getComputeShader(::String handle){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_542_getComputeShader)
HXDLIN( 542)		return ( ( ::kha::compute::Shader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(handle + HX_("_comp",ee,d4,d5,f4)))) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,getComputeShader,return )

void RenderPath_obj::loadShader(::String handle){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::iron::RenderPath,_gthis,::Array< ::String >,shaderPath, ::iron::CachedShaderContext,cc) HXARGC(1)
            		void _hx_run( ::iron::data::ShaderData res){
            			HX_GC_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_598_loadShader)
HXLINE( 599)			cc->context = res->getContext(shaderPath->__get((int)2));
HXLINE( 600)			_gthis->loading--;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_583_loadShader)
HXDLIN( 583)		 ::iron::RenderPath _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 584)		this->loading++;
HXLINE( 585)		 ::iron::CachedShaderContext cc = this->cachedShaderContexts->get(handle).StaticCast<  ::iron::CachedShaderContext >();
HXLINE( 586)		if (hx::IsNotNull( cc )) {
HXLINE( 586)			this->loading--;
HXDLIN( 586)			return;
            		}
HXLINE( 588)		cc =  ::iron::CachedShaderContext_obj::__alloc( HX_CTX );
HXLINE( 589)		this->cachedShaderContexts->set(handle,cc);
HXLINE( 592)		::Array< ::String > shaderPath = handle.split(HX_("/",2f,00,00,00));
HXLINE( 598)		::iron::data::Data_obj::getShader(shaderPath->__get((int)0),shaderPath->__get((int)1),null(), ::Dynamic(new _hx_Closure_0(_gthis,shaderPath,cc)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,loadShader,(void))

void RenderPath_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_604_unload)
HXDLIN( 604)		 ::Dynamic rt = this->renderTargets->iterator();
HXDLIN( 604)		while(( (bool)(rt->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 604)			 ::iron::RenderTarget rt1 = ( ( ::iron::RenderTarget)(rt->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 604)			rt1->unload();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,unload,(void))

void RenderPath_obj::resize(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_607_resize)
HXDLIN( 607)		 ::Dynamic rt = this->renderTargets->iterator();
HXDLIN( 607)		while(( (bool)(rt->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 607)			 ::iron::RenderTarget rt1 = ( ( ::iron::RenderTarget)(rt->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 608)			if ((rt1->raw->width == (int)0)) {
HXLINE( 609)				rt1->image->unload();
HXLINE( 610)				rt1->image = this->createImage(rt1->raw,rt1->depthStencil);
HXLINE( 611)				if ((rt1->depthStencilFrom != HX_("",00,00,00,00))) {
HXLINE( 612)					 ::kha::Image rt2 = rt1->image;
HXDLIN( 612)					rt2->setDepthStencilFrom(this->depthToRenderTarget->get(rt1->depthStencilFrom).StaticCast<  ::iron::RenderTarget >()->image);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,resize,(void))

 ::iron::RenderTarget RenderPath_obj::createRenderTarget( ::iron::RenderTargetRaw t){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_618_createRenderTarget)
HXLINE( 619)		 ::iron::RenderTarget rt = this->createTarget(t);
HXLINE( 620)		this->renderTargets->set(t->name,rt);
HXLINE( 621)		return rt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,createRenderTarget,return )

void RenderPath_obj::createDepthBuffer(::String name,::String format){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_626_createDepthBuffer)
HXDLIN( 626)		this->depthBuffers->push( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("format",37,8f,8e,fd),format)
            			->setFixed(1,HX_("name",4b,72,ff,48),name)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,createDepthBuffer,(void))

 ::iron::RenderTarget RenderPath_obj::createTarget( ::iron::RenderTargetRaw t){
            	HX_GC_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_629_createTarget)
HXLINE( 630)		 ::iron::RenderTarget rt =  ::iron::RenderTarget_obj::__alloc( HX_CTX ,t);
HXLINE( 632)		if (hx::IsNotNull( t->depth_buffer )) {
HXLINE( 633)			rt->hasDepth = true;
HXLINE( 634)			 ::iron::RenderTarget depthTarget = this->depthToRenderTarget->get(t->depth_buffer).StaticCast<  ::iron::RenderTarget >();
HXLINE( 637)			if (hx::IsNull( depthTarget )) {
HXLINE( 638)				int _g = (int)0;
HXDLIN( 638)				::Array< ::Dynamic> _g1 = this->depthBuffers;
HXDLIN( 638)				while((_g < _g1->length)){
HXLINE( 638)					 ::Dynamic db = _g1->__get(_g);
HXDLIN( 638)					_g = (_g + (int)1);
HXLINE( 639)					if ((( (::String)(db->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == t->depth_buffer)) {
HXLINE( 640)						this->depthToRenderTarget->set(( (::String)(db->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ),rt);
HXLINE( 641)						::String s = ( (::String)(db->__Field(HX_("format",37,8f,8e,fd),hx::paccDynamic)) );
HXDLIN( 641)						int _hx_tmp;
HXDLIN( 641)						bool _hx_tmp1;
HXDLIN( 641)						if (hx::IsNotNull( s )) {
HXLINE( 641)							_hx_tmp1 = (s == HX_("",00,00,00,00));
            						}
            						else {
HXLINE( 641)							_hx_tmp1 = true;
            						}
HXDLIN( 641)						if (_hx_tmp1) {
HXLINE( 641)							_hx_tmp = (int)1;
            						}
            						else {
HXLINE( 641)							::String _hx_switch_0 = s;
            							if (  (_hx_switch_0==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 641)								_hx_tmp = (int)5;
HXDLIN( 641)								goto _hx_goto_47;
            							}
            							if (  (_hx_switch_0==HX_("DEPTH24",65,93,1e,ea)) ){
HXLINE( 641)								_hx_tmp = (int)1;
HXDLIN( 641)								goto _hx_goto_47;
            							}
            							/* default */{
HXLINE( 641)								_hx_tmp = (int)1;
            							}
            							_hx_goto_47:;
            						}
HXDLIN( 641)						rt->depthStencil = _hx_tmp;
HXLINE( 642)						rt->image = this->createImage(t,rt->depthStencil);
HXLINE( 643)						goto _hx_goto_46;
            					}
            				}
            				_hx_goto_46:;
            			}
            			else {
HXLINE( 649)				rt->depthStencil = (int)0;
HXLINE( 650)				rt->depthStencilFrom = t->depth_buffer;
HXLINE( 651)				rt->image = this->createImage(t,rt->depthStencil);
HXLINE( 652)				rt->image->setDepthStencilFrom(depthTarget->image);
            			}
            		}
            		else {
HXLINE( 657)			rt->hasDepth = false;
HXLINE( 658)			bool _hx_tmp2;
HXDLIN( 658)			if (hx::IsNotNull( t->depth )) {
HXLINE( 658)				_hx_tmp2 = hx::IsGreater( t->depth,(int)1 );
            			}
            			else {
HXLINE( 658)				_hx_tmp2 = false;
            			}
HXDLIN( 658)			if (_hx_tmp2) {
HXLINE( 658)				rt->is3D = true;
            			}
HXLINE( 659)			if (t->is_cubemap) {
HXLINE( 660)				rt->isCubeMap = true;
HXLINE( 661)				rt->depthStencil = (int)0;
HXLINE( 662)				rt->cubeMap = this->createCubeMap(t,rt->depthStencil);
            			}
            			else {
HXLINE( 665)				rt->depthStencil = (int)0;
HXLINE( 666)				rt->image = this->createImage(t,rt->depthStencil);
            			}
            		}
HXLINE( 670)		return rt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,createTarget,return )

 ::kha::Image RenderPath_obj::createImage( ::iron::RenderTargetRaw t,int depthStencil){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_673_createImage)
HXLINE( 674)		int width;
HXDLIN( 674)		if ((t->width == (int)0)) {
HXLINE( 674)			width = ::kha::System_obj::windowWidth(null());
            		}
            		else {
HXLINE( 674)			width = t->width;
            		}
HXLINE( 675)		int height;
HXDLIN( 675)		if ((t->height == (int)0)) {
HXLINE( 675)			height = ::kha::System_obj::windowHeight(null());
            		}
            		else {
HXLINE( 675)			height = t->height;
            		}
HXLINE( 676)		 ::Dynamic depth;
HXDLIN( 676)		if (hx::IsNotNull( t->depth )) {
HXLINE( 676)			depth = t->depth;
            		}
            		else {
HXLINE( 676)			depth = (int)0;
            		}
HXLINE( 677)		if (hx::IsNotNull( t->displayp )) {
HXLINE( 678)			if ((width > height)) {
HXLINE( 679)				width = ::Std_obj::_hx_int((width * ((Float)t->displayp / (Float)height)));
HXLINE( 680)				height = t->displayp;
            			}
            			else {
HXLINE( 683)				height = ::Std_obj::_hx_int((height * ((Float)t->displayp / (Float)width)));
HXLINE( 684)				width = t->displayp;
            			}
            		}
HXLINE( 687)		if (hx::IsNotNull( t->scale )) {
HXLINE( 688)			width = ::Std_obj::_hx_int((width * t->scale));
HXLINE( 689)			height = ::Std_obj::_hx_int((height * t->scale));
HXLINE( 690)			depth = ::Std_obj::_hx_int((depth * t->scale));
            		}
HXLINE( 692)		bool _hx_tmp;
HXDLIN( 692)		if (hx::IsNotNull( t->depth )) {
HXLINE( 692)			_hx_tmp = hx::IsGreater( t->depth,(int)1 );
            		}
            		else {
HXLINE( 692)			_hx_tmp = false;
            		}
HXDLIN( 692)		if (_hx_tmp) {
HXLINE( 695)			 ::kha::graphics4::TextureFormat img;
HXDLIN( 695)			if (hx::IsNotNull( t->format )) {
HXLINE( 695)				::String _hx_switch_0 = t->format;
            				if (  (_hx_switch_0==HX_("A16",66,7d,31,00)) ){
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 695)					goto _hx_goto_49;
            				}
            				if (  (_hx_switch_0==HX_("A32",20,7f,31,00)) ){
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 695)					goto _hx_goto_49;
            				}
            				if (  (_hx_switch_0==HX_("A8",d7,38,00,00)) ){
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 695)					goto _hx_goto_49;
            				}
            				if (  (_hx_switch_0==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::DEPTH16_dyn();
HXDLIN( 695)					goto _hx_goto_49;
            				}
            				if (  (_hx_switch_0==HX_("R16",b7,63,3e,00)) ){
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 695)					goto _hx_goto_49;
            				}
            				if (  (_hx_switch_0==HX_("R32",71,65,3e,00)) ){
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 695)					goto _hx_goto_49;
            				}
            				if (  (_hx_switch_0==HX_("R8",a6,47,00,00)) ){
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 695)					goto _hx_goto_49;
            				}
            				if (  (_hx_switch_0==HX_("RGBA128",03,2a,c5,e0)) ){
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
HXDLIN( 695)					goto _hx_goto_49;
            				}
            				if (  (_hx_switch_0==HX_("RGBA32",53,5a,88,d6)) ){
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXDLIN( 695)					goto _hx_goto_49;
            				}
            				if (  (_hx_switch_0==HX_("RGBA64",f2,5c,88,d6)) ){
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::RGBA64_dyn();
HXDLIN( 695)					goto _hx_goto_49;
            				}
            				/* default */{
HXLINE( 695)					img = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            				}
            				_hx_goto_49:;
            			}
            			else {
HXLINE( 695)				img = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            			}
HXLINE( 694)			 ::kha::Image img1 = ::kha::Image_obj::create3D(width,height,depth,img,null());
HXLINE( 696)			if (t->mipmaps) {
HXLINE( 696)				img1->generateMipmaps((int)1000);
            			}
HXLINE( 697)			return img1;
            		}
            		else {
HXLINE( 700)			bool _hx_tmp1;
HXDLIN( 700)			if (hx::IsNotNull( t->is_image )) {
HXLINE( 700)				_hx_tmp1 = t->is_image;
            			}
            			else {
HXLINE( 700)				_hx_tmp1 = false;
            			}
HXDLIN( 700)			if (_hx_tmp1) {
HXLINE( 702)				 ::kha::graphics4::TextureFormat _hx_tmp2;
HXDLIN( 702)				if (hx::IsNotNull( t->format )) {
HXLINE( 702)					::String _hx_switch_1 = t->format;
            					if (  (_hx_switch_1==HX_("A16",66,7d,31,00)) ){
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 702)						goto _hx_goto_50;
            					}
            					if (  (_hx_switch_1==HX_("A32",20,7f,31,00)) ){
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 702)						goto _hx_goto_50;
            					}
            					if (  (_hx_switch_1==HX_("A8",d7,38,00,00)) ){
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 702)						goto _hx_goto_50;
            					}
            					if (  (_hx_switch_1==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::DEPTH16_dyn();
HXDLIN( 702)						goto _hx_goto_50;
            					}
            					if (  (_hx_switch_1==HX_("R16",b7,63,3e,00)) ){
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 702)						goto _hx_goto_50;
            					}
            					if (  (_hx_switch_1==HX_("R32",71,65,3e,00)) ){
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 702)						goto _hx_goto_50;
            					}
            					if (  (_hx_switch_1==HX_("R8",a6,47,00,00)) ){
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 702)						goto _hx_goto_50;
            					}
            					if (  (_hx_switch_1==HX_("RGBA128",03,2a,c5,e0)) ){
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
HXDLIN( 702)						goto _hx_goto_50;
            					}
            					if (  (_hx_switch_1==HX_("RGBA32",53,5a,88,d6)) ){
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXDLIN( 702)						goto _hx_goto_50;
            					}
            					if (  (_hx_switch_1==HX_("RGBA64",f2,5c,88,d6)) ){
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::RGBA64_dyn();
HXDLIN( 702)						goto _hx_goto_50;
            					}
            					/* default */{
HXLINE( 702)						_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            					}
            					_hx_goto_50:;
            				}
            				else {
HXLINE( 702)					_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            				}
HXLINE( 701)				return ::kha::Image_obj::create(width,height,_hx_tmp2,null());
            			}
            			else {
HXLINE( 706)				 ::kha::graphics4::TextureFormat _hx_tmp3;
HXDLIN( 706)				if (hx::IsNotNull( t->format )) {
HXLINE( 706)					::String _hx_switch_2 = t->format;
            					if (  (_hx_switch_2==HX_("A16",66,7d,31,00)) ){
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 706)						goto _hx_goto_51;
            					}
            					if (  (_hx_switch_2==HX_("A32",20,7f,31,00)) ){
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 706)						goto _hx_goto_51;
            					}
            					if (  (_hx_switch_2==HX_("A8",d7,38,00,00)) ){
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 706)						goto _hx_goto_51;
            					}
            					if (  (_hx_switch_2==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::DEPTH16_dyn();
HXDLIN( 706)						goto _hx_goto_51;
            					}
            					if (  (_hx_switch_2==HX_("R16",b7,63,3e,00)) ){
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 706)						goto _hx_goto_51;
            					}
            					if (  (_hx_switch_2==HX_("R32",71,65,3e,00)) ){
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 706)						goto _hx_goto_51;
            					}
            					if (  (_hx_switch_2==HX_("R8",a6,47,00,00)) ){
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 706)						goto _hx_goto_51;
            					}
            					if (  (_hx_switch_2==HX_("RGBA128",03,2a,c5,e0)) ){
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
HXDLIN( 706)						goto _hx_goto_51;
            					}
            					if (  (_hx_switch_2==HX_("RGBA32",53,5a,88,d6)) ){
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXDLIN( 706)						goto _hx_goto_51;
            					}
            					if (  (_hx_switch_2==HX_("RGBA64",f2,5c,88,d6)) ){
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::RGBA64_dyn();
HXDLIN( 706)						goto _hx_goto_51;
            					}
            					/* default */{
HXLINE( 706)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            					}
            					_hx_goto_51:;
            				}
            				else {
HXLINE( 706)					_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            				}
HXLINE( 705)				return ::kha::Image_obj::createRenderTarget(width,height,_hx_tmp3,depthStencil,null(),null());
            			}
            		}
HXLINE( 692)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,createImage,return )

 ::kha::graphics4::CubeMap RenderPath_obj::createCubeMap( ::iron::RenderTargetRaw t,int depthStencil){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_713_createCubeMap)
HXLINE( 714)		 ::kha::graphics4::TextureFormat _hx_tmp;
HXDLIN( 714)		if (hx::IsNotNull( t->format )) {
HXLINE( 714)			::String _hx_switch_0 = t->format;
            			if (  (_hx_switch_0==HX_("A16",66,7d,31,00)) ){
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 714)				goto _hx_goto_53;
            			}
            			if (  (_hx_switch_0==HX_("A32",20,7f,31,00)) ){
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 714)				goto _hx_goto_53;
            			}
            			if (  (_hx_switch_0==HX_("A8",d7,38,00,00)) ){
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 714)				goto _hx_goto_53;
            			}
            			if (  (_hx_switch_0==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::DEPTH16_dyn();
HXDLIN( 714)				goto _hx_goto_53;
            			}
            			if (  (_hx_switch_0==HX_("R16",b7,63,3e,00)) ){
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 714)				goto _hx_goto_53;
            			}
            			if (  (_hx_switch_0==HX_("R32",71,65,3e,00)) ){
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 714)				goto _hx_goto_53;
            			}
            			if (  (_hx_switch_0==HX_("R8",a6,47,00,00)) ){
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 714)				goto _hx_goto_53;
            			}
            			if (  (_hx_switch_0==HX_("RGBA128",03,2a,c5,e0)) ){
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
HXDLIN( 714)				goto _hx_goto_53;
            			}
            			if (  (_hx_switch_0==HX_("RGBA32",53,5a,88,d6)) ){
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXDLIN( 714)				goto _hx_goto_53;
            			}
            			if (  (_hx_switch_0==HX_("RGBA64",f2,5c,88,d6)) ){
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA64_dyn();
HXDLIN( 714)				goto _hx_goto_53;
            			}
            			/* default */{
HXLINE( 714)				_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            			}
            			_hx_goto_53:;
            		}
            		else {
HXLINE( 714)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
HXLINE( 713)		return ::kha::graphics4::CubeMap_obj::createRenderTarget(t->width,_hx_tmp,depthStencil,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,createCubeMap,return )

 ::kha::graphics4::TextureFormat RenderPath_obj::getTextureFormat(::String s){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_719_getTextureFormat)
HXDLIN( 719)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("A16",66,7d,31,00)) ){
HXLINE( 725)			return ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 725)			goto _hx_goto_55;
            		}
            		if (  (_hx_switch_0==HX_("A32",20,7f,31,00)) ){
HXLINE( 724)			return ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 724)			goto _hx_goto_55;
            		}
            		if (  (_hx_switch_0==HX_("A8",d7,38,00,00)) ){
HXLINE( 726)			return ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 726)			goto _hx_goto_55;
            		}
            		if (  (_hx_switch_0==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 723)			return ::kha::graphics4::TextureFormat_obj::DEPTH16_dyn();
HXDLIN( 723)			goto _hx_goto_55;
            		}
            		if (  (_hx_switch_0==HX_("R16",b7,63,3e,00)) ){
HXLINE( 728)			return ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 728)			goto _hx_goto_55;
            		}
            		if (  (_hx_switch_0==HX_("R32",71,65,3e,00)) ){
HXLINE( 727)			return ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 727)			goto _hx_goto_55;
            		}
            		if (  (_hx_switch_0==HX_("R8",a6,47,00,00)) ){
HXLINE( 729)			return ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 729)			goto _hx_goto_55;
            		}
            		if (  (_hx_switch_0==HX_("RGBA128",03,2a,c5,e0)) ){
HXLINE( 722)			return ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
HXDLIN( 722)			goto _hx_goto_55;
            		}
            		if (  (_hx_switch_0==HX_("RGBA32",53,5a,88,d6)) ){
HXLINE( 720)			return ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXDLIN( 720)			goto _hx_goto_55;
            		}
            		if (  (_hx_switch_0==HX_("RGBA64",f2,5c,88,d6)) ){
HXLINE( 721)			return ::kha::graphics4::TextureFormat_obj::RGBA64_dyn();
HXDLIN( 721)			goto _hx_goto_55;
            		}
            		/* default */{
HXLINE( 730)			return ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
            		_hx_goto_55:;
HXLINE( 719)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,getTextureFormat,return )

int RenderPath_obj::getDepthStencilFormat(::String s){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_734_getDepthStencilFormat)
HXLINE( 738)		bool _hx_tmp;
HXDLIN( 738)		if (hx::IsNotNull( s )) {
HXLINE( 738)			_hx_tmp = (s == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 738)			_hx_tmp = true;
            		}
HXDLIN( 738)		if (_hx_tmp) {
HXLINE( 738)			return (int)1;
            		}
HXLINE( 739)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 741)			return (int)5;
HXDLIN( 741)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==HX_("DEPTH24",65,93,1e,ea)) ){
HXLINE( 740)			return (int)1;
HXDLIN( 740)			goto _hx_goto_57;
            		}
            		/* default */{
HXLINE( 742)			return (int)1;
            		}
            		_hx_goto_57:;
HXLINE( 739)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,getDepthStencilFormat,return )

 ::iron::RenderPath RenderPath_obj::active;

void RenderPath_obj::setActive( ::iron::RenderPath renderPath){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_74_setActive)
HXDLIN(  74)		::iron::RenderPath_obj::active = renderPath;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,setActive,(void))

void RenderPath_obj::sortMeshes(::Array< ::Dynamic> meshes, ::iron::object::CameraObject camera){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::iron::object::MeshObject a, ::iron::object::MeshObject b){
            			HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_219_sortMeshes)
HXLINE( 219)			if ((a->cameraDistance >= b->cameraDistance)) {
HXLINE( 219)				return (int)1;
            			}
            			else {
HXLINE( 219)				return (int)-1;
            			}
HXDLIN( 219)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_210_sortMeshes)
HXLINE( 212)		float camX = camera->transform->world->self->_30;
HXLINE( 213)		float camY = camera->transform->world->self->_31;
HXLINE( 214)		float camZ = camera->transform->world->self->_32;
HXLINE( 215)		{
HXLINE( 215)			int _g = (int)0;
HXDLIN( 215)			while((_g < meshes->length)){
HXLINE( 215)				 ::iron::object::MeshObject mesh = meshes->__get(_g).StaticCast<  ::iron::object::MeshObject >();
HXDLIN( 215)				_g = (_g + (int)1);
HXLINE( 216)				float vx = (camX - mesh->transform->world->self->_30);
HXDLIN( 216)				float vy = (camY - mesh->transform->world->self->_31);
HXDLIN( 216)				float vz = (camZ - mesh->transform->world->self->_32);
HXDLIN( 216)				mesh->cameraDistance = ::Math_obj::sqrt((((vx * vx) + (vy * vy)) + (vz * vz)));
            			}
            		}
HXLINE( 218)		meshes->sort( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,sortMeshes,(void))

 ::iron::math::Mat4 RenderPath_obj::helpMat;

::String RenderPath_obj::meshContext;

::String RenderPath_obj::shadowsContext;


hx::ObjectPtr< RenderPath_obj > RenderPath_obj::__new() {
	hx::ObjectPtr< RenderPath_obj > __this = new RenderPath_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< RenderPath_obj > RenderPath_obj::__alloc(hx::Ctx *_hx_ctx) {
	RenderPath_obj *__this = (RenderPath_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RenderPath_obj), true, "iron.RenderPath"));
	*(void **)__this = RenderPath_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RenderPath_obj::RenderPath_obj()
{
}

void RenderPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderPath);
	HX_MARK_MEMBER_NAME(frameScissor,"frameScissor");
	HX_MARK_MEMBER_NAME(frameScissorX,"frameScissorX");
	HX_MARK_MEMBER_NAME(frameScissorY,"frameScissorY");
	HX_MARK_MEMBER_NAME(frameScissorW,"frameScissorW");
	HX_MARK_MEMBER_NAME(frameScissorH,"frameScissorH");
	HX_MARK_MEMBER_NAME(frameTime,"frameTime");
	HX_MARK_MEMBER_NAME(currentTarget,"currentTarget");
	HX_MARK_MEMBER_NAME(currentCube,"currentCube");
	HX_MARK_MEMBER_NAME(currentFace,"currentFace");
	HX_MARK_MEMBER_NAME(currentLampIndex,"currentLampIndex");
	HX_MARK_MEMBER_NAME(currentW,"currentW");
	HX_MARK_MEMBER_NAME(currentH,"currentH");
	HX_MARK_MEMBER_NAME(currentD,"currentD");
	HX_MARK_MEMBER_NAME(lastW,"lastW");
	HX_MARK_MEMBER_NAME(lastH,"lastH");
	HX_MARK_MEMBER_NAME(bindParams,"bindParams");
	HX_MARK_MEMBER_NAME(meshesSorted,"meshesSorted");
	HX_MARK_MEMBER_NAME(scissorSet,"scissorSet");
	HX_MARK_MEMBER_NAME(viewportScaled,"viewportScaled");
	HX_MARK_MEMBER_NAME(currentG,"currentG");
	HX_MARK_MEMBER_NAME(frameG,"frameG");
	HX_MARK_MEMBER_NAME(lastFrameTime,"lastFrameTime");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(ready,"ready");
	HX_MARK_MEMBER_NAME(loading,"loading");
	HX_MARK_MEMBER_NAME(cachedShaderContexts,"cachedShaderContexts");
	HX_MARK_MEMBER_NAME(commands,"commands");
	HX_MARK_MEMBER_NAME(renderTargets,"renderTargets");
	HX_MARK_MEMBER_NAME(depthToRenderTarget,"depthToRenderTarget");
	HX_MARK_MEMBER_NAME(currentMaterial,"currentMaterial");
	HX_MARK_MEMBER_NAME(depthBuffers,"depthBuffers");
	HX_MARK_END_CLASS();
}

void RenderPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(frameScissor,"frameScissor");
	HX_VISIT_MEMBER_NAME(frameScissorX,"frameScissorX");
	HX_VISIT_MEMBER_NAME(frameScissorY,"frameScissorY");
	HX_VISIT_MEMBER_NAME(frameScissorW,"frameScissorW");
	HX_VISIT_MEMBER_NAME(frameScissorH,"frameScissorH");
	HX_VISIT_MEMBER_NAME(frameTime,"frameTime");
	HX_VISIT_MEMBER_NAME(currentTarget,"currentTarget");
	HX_VISIT_MEMBER_NAME(currentCube,"currentCube");
	HX_VISIT_MEMBER_NAME(currentFace,"currentFace");
	HX_VISIT_MEMBER_NAME(currentLampIndex,"currentLampIndex");
	HX_VISIT_MEMBER_NAME(currentW,"currentW");
	HX_VISIT_MEMBER_NAME(currentH,"currentH");
	HX_VISIT_MEMBER_NAME(currentD,"currentD");
	HX_VISIT_MEMBER_NAME(lastW,"lastW");
	HX_VISIT_MEMBER_NAME(lastH,"lastH");
	HX_VISIT_MEMBER_NAME(bindParams,"bindParams");
	HX_VISIT_MEMBER_NAME(meshesSorted,"meshesSorted");
	HX_VISIT_MEMBER_NAME(scissorSet,"scissorSet");
	HX_VISIT_MEMBER_NAME(viewportScaled,"viewportScaled");
	HX_VISIT_MEMBER_NAME(currentG,"currentG");
	HX_VISIT_MEMBER_NAME(frameG,"frameG");
	HX_VISIT_MEMBER_NAME(lastFrameTime,"lastFrameTime");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(ready,"ready");
	HX_VISIT_MEMBER_NAME(loading,"loading");
	HX_VISIT_MEMBER_NAME(cachedShaderContexts,"cachedShaderContexts");
	HX_VISIT_MEMBER_NAME(commands,"commands");
	HX_VISIT_MEMBER_NAME(renderTargets,"renderTargets");
	HX_VISIT_MEMBER_NAME(depthToRenderTarget,"depthToRenderTarget");
	HX_VISIT_MEMBER_NAME(currentMaterial,"currentMaterial");
	HX_VISIT_MEMBER_NAME(depthBuffers,"depthBuffers");
}

hx::Val RenderPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastW") ) { return hx::Val( lastW ); }
		if (HX_FIELD_EQ(inName,"lastH") ) { return hx::Val( lastH ); }
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( inCallProp == hx::paccAlways ? get_ready() : ready ); }
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frameG") ) { return hx::Val( frameG ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loading") ) { return hx::Val( loading ); }
		if (HX_FIELD_EQ(inName,"getLamp") ) { return hx::Val( getLamp_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currentW") ) { return hx::Val( currentW ); }
		if (HX_FIELD_EQ(inName,"currentH") ) { return hx::Val( currentH ); }
		if (HX_FIELD_EQ(inName,"currentD") ) { return hx::Val( currentD ); }
		if (HX_FIELD_EQ(inName,"currentG") ) { return hx::Val( currentG ); }
		if (HX_FIELD_EQ(inName,"commands") ) { return hx::Val( commands ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameTime") ) { return hx::Val( frameTime ); }
		if (HX_FIELD_EQ(inName,"get_ready") ) { return hx::Val( get_ready_dyn() ); }
		if (HX_FIELD_EQ(inName,"lampIsSun") ) { return hx::Val( lampIsSun_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTarget") ) { return hx::Val( setTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"clampRect") ) { return hx::Val( clampRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawRects") ) { return hx::Val( drawRects_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bindParams") ) { return hx::Val( bindParams ); }
		if (HX_FIELD_EQ(inName,"scissorSet") ) { return hx::Val( scissorSet ); }
		if (HX_FIELD_EQ(inName,"clearImage") ) { return hx::Val( clearImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawMeshes") ) { return hx::Val( drawMeshes_dyn() ); }
		if (HX_FIELD_EQ(inName,"submitDraw") ) { return hx::Val( submitDraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawDecals") ) { return hx::Val( drawDecals_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindTarget") ) { return hx::Val( bindTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawShader") ) { return hx::Val( drawShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadShader") ) { return hx::Val( loadShader_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentCube") ) { return hx::Val( currentCube ); }
		if (HX_FIELD_EQ(inName,"currentFace") ) { return hx::Val( currentFace ); }
		if (HX_FIELD_EQ(inName,"renderFrame") ) { return hx::Val( renderFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"setViewport") ) { return hx::Val( setViewport_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearTarget") ) { return hx::Val( clearTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawSkydome") ) { return hx::Val( drawSkydome_dyn() ); }
		if (HX_FIELD_EQ(inName,"createImage") ) { return hx::Val( createImage_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"frameScissor") ) { return hx::Val( frameScissor ); }
		if (HX_FIELD_EQ(inName,"meshesSorted") ) { return hx::Val( meshesSorted ); }
		if (HX_FIELD_EQ(inName,"depthBuffers") ) { return hx::Val( depthBuffers ); }
		if (HX_FIELD_EQ(inName,"createTarget") ) { return hx::Val( createTarget_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"frameScissorX") ) { return hx::Val( frameScissorX ); }
		if (HX_FIELD_EQ(inName,"frameScissorY") ) { return hx::Val( frameScissorY ); }
		if (HX_FIELD_EQ(inName,"frameScissorW") ) { return hx::Val( frameScissorW ); }
		if (HX_FIELD_EQ(inName,"frameScissorH") ) { return hx::Val( frameScissorH ); }
		if (HX_FIELD_EQ(inName,"currentTarget") ) { return hx::Val( currentTarget ); }
		if (HX_FIELD_EQ(inName,"lastFrameTime") ) { return hx::Val( lastFrameTime ); }
		if (HX_FIELD_EQ(inName,"renderTargets") ) { return hx::Val( renderTargets ); }
		if (HX_FIELD_EQ(inName,"createCubeMap") ) { return hx::Val( createCubeMap_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"viewportScaled") ) { return hx::Val( viewportScaled ); }
		if (HX_FIELD_EQ(inName,"lampCastShadow") ) { return hx::Val( lampCastShadow_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawLampVolume") ) { return hx::Val( drawLampVolume_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setFrameScissor") ) { return hx::Val( setFrameScissor_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateMipmaps") ) { return hx::Val( generateMipmaps_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRectContexts") ) { return hx::Val( getRectContexts_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentMaterial") ) { return hx::Val( currentMaterial ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentLampIndex") ) { return hx::Val( currentLampIndex ); }
		if (HX_FIELD_EQ(inName,"getComputeShader") ) { return hx::Val( getComputeShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextureFormat") ) { return hx::Val( getTextureFormat_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setCurrentScissor") ) { return hx::Val( setCurrentScissor_dyn() ); }
		if (HX_FIELD_EQ(inName,"createDepthBuffer") ) { return hx::Val( createDepthBuffer_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setCurrentViewport") ) { return hx::Val( setCurrentViewport_dyn() ); }
		if (HX_FIELD_EQ(inName,"createRenderTarget") ) { return hx::Val( createRenderTarget_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"depthToRenderTarget") ) { return hx::Val( depthToRenderTarget ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"cachedShaderContexts") ) { return hx::Val( cachedShaderContexts ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getDepthStencilFormat") ) { return hx::Val( getDepthStencilFormat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RenderPath_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { outValue = ( active ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"helpMat") ) { outValue = ( helpMat ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setActive") ) { outValue = setActive_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sortMeshes") ) { outValue = sortMeshes_dyn(); return true; }
	}
	return false;
}

hx::Val RenderPath_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lastW") ) { lastW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastH") ) { lastH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ready") ) { ready=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frameG") ) { frameG=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loading") ) { loading=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currentW") ) { currentW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentH") ) { currentH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentD") ) { currentD=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentG") ) { currentG=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"commands") ) { commands=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameTime") ) { frameTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bindParams") ) { bindParams=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scissorSet") ) { scissorSet=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentCube") ) { currentCube=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFace") ) { currentFace=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"frameScissor") ) { frameScissor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"meshesSorted") ) { meshesSorted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"depthBuffers") ) { depthBuffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"frameScissorX") ) { frameScissorX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameScissorY") ) { frameScissorY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameScissorW") ) { frameScissorW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameScissorH") ) { frameScissorH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentTarget") ) { currentTarget=inValue.Cast<  ::iron::RenderTarget >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastFrameTime") ) { lastFrameTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderTargets") ) { renderTargets=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"viewportScaled") ) { viewportScaled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentMaterial") ) { currentMaterial=inValue.Cast<  ::iron::data::MaterialData >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentLampIndex") ) { currentLampIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"depthToRenderTarget") ) { depthToRenderTarget=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"cachedShaderContexts") ) { cachedShaderContexts=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool RenderPath_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=ioValue.Cast<  ::iron::RenderPath >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"helpMat") ) { helpMat=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
	}
	return false;
}

void RenderPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("frameScissor","\x6f","\xe7","\x71","\xa5"));
	outFields->push(HX_HCSTRING("frameScissorX","\x09","\x9a","\x38","\x1e"));
	outFields->push(HX_HCSTRING("frameScissorY","\x0a","\x9a","\x38","\x1e"));
	outFields->push(HX_HCSTRING("frameScissorW","\x08","\x9a","\x38","\x1e"));
	outFields->push(HX_HCSTRING("frameScissorH","\xf9","\x99","\x38","\x1e"));
	outFields->push(HX_HCSTRING("frameTime","\xda","\x8a","\x7d","\x3a"));
	outFields->push(HX_HCSTRING("currentTarget","\x6a","\x74","\x49","\x6a"));
	outFields->push(HX_HCSTRING("currentCube","\xce","\x15","\x5b","\x7a"));
	outFields->push(HX_HCSTRING("currentFace","\x76","\x8d","\x47","\x7c"));
	outFields->push(HX_HCSTRING("currentLampIndex","\x61","\x03","\x04","\x6b"));
	outFields->push(HX_HCSTRING("currentW","\xfe","\x15","\x45","\x9b"));
	outFields->push(HX_HCSTRING("currentH","\xef","\x15","\x45","\x9b"));
	outFields->push(HX_HCSTRING("currentD","\xeb","\x15","\x45","\x9b"));
	outFields->push(HX_HCSTRING("lastW","\x41","\x01","\xbc","\x6f"));
	outFields->push(HX_HCSTRING("lastH","\x32","\x01","\xbc","\x6f"));
	outFields->push(HX_HCSTRING("bindParams","\xe3","\xd0","\xa4","\x15"));
	outFields->push(HX_HCSTRING("meshesSorted","\x38","\xe5","\x9f","\x8d"));
	outFields->push(HX_HCSTRING("scissorSet","\xe6","\x24","\xc3","\x48"));
	outFields->push(HX_HCSTRING("viewportScaled","\xa0","\xfb","\xed","\x87"));
	outFields->push(HX_HCSTRING("currentG","\xee","\x15","\x45","\x9b"));
	outFields->push(HX_HCSTRING("frameG","\x7a","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("lastFrameTime","\xa4","\x65","\xb6","\x38"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"));
	outFields->push(HX_HCSTRING("loading","\x7c","\xce","\xf2","\x08"));
	outFields->push(HX_HCSTRING("cachedShaderContexts","\x6b","\x7f","\x6c","\x25"));
	outFields->push(HX_HCSTRING("renderTargets","\x4c","\x67","\x55","\x84"));
	outFields->push(HX_HCSTRING("depthToRenderTarget","\xc5","\x99","\xeb","\x2a"));
	outFields->push(HX_HCSTRING("currentMaterial","\x00","\x16","\xf7","\xc4"));
	outFields->push(HX_HCSTRING("depthBuffers","\xb0","\x50","\xdf","\xf7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RenderPath_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(RenderPath_obj,frameScissor),HX_HCSTRING("frameScissor","\x6f","\xe7","\x71","\xa5")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,frameScissorX),HX_HCSTRING("frameScissorX","\x09","\x9a","\x38","\x1e")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,frameScissorY),HX_HCSTRING("frameScissorY","\x0a","\x9a","\x38","\x1e")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,frameScissorW),HX_HCSTRING("frameScissorW","\x08","\x9a","\x38","\x1e")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,frameScissorH),HX_HCSTRING("frameScissorH","\xf9","\x99","\x38","\x1e")},
	{hx::fsFloat,(int)offsetof(RenderPath_obj,frameTime),HX_HCSTRING("frameTime","\xda","\x8a","\x7d","\x3a")},
	{hx::fsObject /*::iron::RenderTarget*/ ,(int)offsetof(RenderPath_obj,currentTarget),HX_HCSTRING("currentTarget","\x6a","\x74","\x49","\x6a")},
	{hx::fsBool,(int)offsetof(RenderPath_obj,currentCube),HX_HCSTRING("currentCube","\xce","\x15","\x5b","\x7a")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,currentFace),HX_HCSTRING("currentFace","\x76","\x8d","\x47","\x7c")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,currentLampIndex),HX_HCSTRING("currentLampIndex","\x61","\x03","\x04","\x6b")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,currentW),HX_HCSTRING("currentW","\xfe","\x15","\x45","\x9b")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,currentH),HX_HCSTRING("currentH","\xef","\x15","\x45","\x9b")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,currentD),HX_HCSTRING("currentD","\xeb","\x15","\x45","\x9b")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,lastW),HX_HCSTRING("lastW","\x41","\x01","\xbc","\x6f")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,lastH),HX_HCSTRING("lastH","\x32","\x01","\xbc","\x6f")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(RenderPath_obj,bindParams),HX_HCSTRING("bindParams","\xe3","\xd0","\xa4","\x15")},
	{hx::fsBool,(int)offsetof(RenderPath_obj,meshesSorted),HX_HCSTRING("meshesSorted","\x38","\xe5","\x9f","\x8d")},
	{hx::fsBool,(int)offsetof(RenderPath_obj,scissorSet),HX_HCSTRING("scissorSet","\xe6","\x24","\xc3","\x48")},
	{hx::fsBool,(int)offsetof(RenderPath_obj,viewportScaled),HX_HCSTRING("viewportScaled","\xa0","\xfb","\xed","\x87")},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(RenderPath_obj,currentG),HX_HCSTRING("currentG","\xee","\x15","\x45","\x9b")},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(RenderPath_obj,frameG),HX_HCSTRING("frameG","\x7a","\xaf","\x85","\xac")},
	{hx::fsFloat,(int)offsetof(RenderPath_obj,lastFrameTime),HX_HCSTRING("lastFrameTime","\xa4","\x65","\xb6","\x38")},
	{hx::fsBool,(int)offsetof(RenderPath_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsBool,(int)offsetof(RenderPath_obj,ready),HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6")},
	{hx::fsInt,(int)offsetof(RenderPath_obj,loading),HX_HCSTRING("loading","\x7c","\xce","\xf2","\x08")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(RenderPath_obj,cachedShaderContexts),HX_HCSTRING("cachedShaderContexts","\x6b","\x7f","\x6c","\x25")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(RenderPath_obj,commands),HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(RenderPath_obj,renderTargets),HX_HCSTRING("renderTargets","\x4c","\x67","\x55","\x84")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(RenderPath_obj,depthToRenderTarget),HX_HCSTRING("depthToRenderTarget","\xc5","\x99","\xeb","\x2a")},
	{hx::fsObject /*::iron::data::MaterialData*/ ,(int)offsetof(RenderPath_obj,currentMaterial),HX_HCSTRING("currentMaterial","\x00","\x16","\xf7","\xc4")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(RenderPath_obj,depthBuffers),HX_HCSTRING("depthBuffers","\xb0","\x50","\xdf","\xf7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo RenderPath_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::RenderPath*/ ,(void *) &RenderPath_obj::active,HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &RenderPath_obj::helpMat,HX_HCSTRING("helpMat","\x5f","\xfe","\x4c","\xc0")},
	{hx::fsString,(void *) &RenderPath_obj::meshContext,HX_HCSTRING("meshContext","\x82","\x3b","\xce","\xa1")},
	{hx::fsString,(void *) &RenderPath_obj::shadowsContext,HX_HCSTRING("shadowsContext","\x9c","\xa9","\x6d","\x11")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String RenderPath_obj_sMemberFields[] = {
	HX_HCSTRING("frameScissor","\x6f","\xe7","\x71","\xa5"),
	HX_HCSTRING("frameScissorX","\x09","\x9a","\x38","\x1e"),
	HX_HCSTRING("frameScissorY","\x0a","\x9a","\x38","\x1e"),
	HX_HCSTRING("frameScissorW","\x08","\x9a","\x38","\x1e"),
	HX_HCSTRING("frameScissorH","\xf9","\x99","\x38","\x1e"),
	HX_HCSTRING("frameTime","\xda","\x8a","\x7d","\x3a"),
	HX_HCSTRING("currentTarget","\x6a","\x74","\x49","\x6a"),
	HX_HCSTRING("currentCube","\xce","\x15","\x5b","\x7a"),
	HX_HCSTRING("currentFace","\x76","\x8d","\x47","\x7c"),
	HX_HCSTRING("currentLampIndex","\x61","\x03","\x04","\x6b"),
	HX_HCSTRING("currentW","\xfe","\x15","\x45","\x9b"),
	HX_HCSTRING("currentH","\xef","\x15","\x45","\x9b"),
	HX_HCSTRING("currentD","\xeb","\x15","\x45","\x9b"),
	HX_HCSTRING("lastW","\x41","\x01","\xbc","\x6f"),
	HX_HCSTRING("lastH","\x32","\x01","\xbc","\x6f"),
	HX_HCSTRING("bindParams","\xe3","\xd0","\xa4","\x15"),
	HX_HCSTRING("meshesSorted","\x38","\xe5","\x9f","\x8d"),
	HX_HCSTRING("scissorSet","\xe6","\x24","\xc3","\x48"),
	HX_HCSTRING("viewportScaled","\xa0","\xfb","\xed","\x87"),
	HX_HCSTRING("currentG","\xee","\x15","\x45","\x9b"),
	HX_HCSTRING("frameG","\x7a","\xaf","\x85","\xac"),
	HX_HCSTRING("lastFrameTime","\xa4","\x65","\xb6","\x38"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"),
	HX_HCSTRING("get_ready","\xba","\xfc","\x63","\x2a"),
	HX_HCSTRING("loading","\x7c","\xce","\xf2","\x08"),
	HX_HCSTRING("cachedShaderContexts","\x6b","\x7f","\x6c","\x25"),
	HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe"),
	HX_HCSTRING("renderTargets","\x4c","\x67","\x55","\x84"),
	HX_HCSTRING("depthToRenderTarget","\xc5","\x99","\xeb","\x2a"),
	HX_HCSTRING("lampCastShadow","\x37","\xcb","\xed","\x0a"),
	HX_HCSTRING("lampIsSun","\x8a","\xc7","\x14","\x7b"),
	HX_HCSTRING("getLamp","\xce","\xb4","\x2f","\x1a"),
	HX_HCSTRING("renderFrame","\xf7","\xa4","\x34","\xd2"),
	HX_HCSTRING("setTarget","\x93","\x68","\x94","\xe6"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("setCurrentViewport","\x3d","\xd8","\x6b","\x00"),
	HX_HCSTRING("setCurrentScissor","\x25","\x24","\x5d","\xa8"),
	HX_HCSTRING("setFrameScissor","\x31","\xba","\x27","\xc4"),
	HX_HCSTRING("setViewport","\x28","\x16","\x06","\xcd"),
	HX_HCSTRING("clearTarget","\xbe","\x00","\xda","\x1a"),
	HX_HCSTRING("clearImage","\x8e","\x5e","\x73","\x92"),
	HX_HCSTRING("generateMipmaps","\x36","\xf3","\x0d","\x51"),
	HX_HCSTRING("drawMeshes","\xbf","\x32","\x75","\x4a"),
	HX_HCSTRING("submitDraw","\x3c","\x9c","\xf9","\x56"),
	HX_HCSTRING("getRectContexts","\x9e","\xbe","\xf6","\x3c"),
	HX_HCSTRING("clampRect","\xbf","\x85","\x8d","\xbe"),
	HX_HCSTRING("currentMaterial","\x00","\x16","\xf7","\xc4"),
	HX_HCSTRING("drawRects","\x2b","\x68","\xc7","\xae"),
	HX_HCSTRING("drawDecals","\xca","\x3f","\xa6","\xa6"),
	HX_HCSTRING("drawSkydome","\x60","\x59","\x86","\xad"),
	HX_HCSTRING("drawLampVolume","\x36","\x62","\xb3","\x0f"),
	HX_HCSTRING("bindTarget","\xee","\xc8","\x16","\xaf"),
	HX_HCSTRING("drawShader","\x49","\x3a","\xe4","\x5e"),
	HX_HCSTRING("getComputeShader","\x86","\x97","\xb7","\xf1"),
	HX_HCSTRING("loadShader","\xeb","\xed","\x4b","\xd2"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("createRenderTarget","\x63","\x34","\x61","\xf0"),
	HX_HCSTRING("depthBuffers","\xb0","\x50","\xdf","\xf7"),
	HX_HCSTRING("createDepthBuffer","\xc7","\x20","\x3f","\xa5"),
	HX_HCSTRING("createTarget","\x6d","\x33","\x42","\xa9"),
	HX_HCSTRING("createImage","\xbf","\x56","\xe4","\xe6"),
	HX_HCSTRING("createCubeMap","\x0b","\x25","\x13","\x75"),
	HX_HCSTRING("getTextureFormat","\xfc","\x0b","\xc7","\xfa"),
	HX_HCSTRING("getDepthStencilFormat","\x86","\xa1","\xf9","\x9b"),
	::String(null()) };

static void RenderPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RenderPath_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(RenderPath_obj::active,"active");
	HX_MARK_MEMBER_NAME(RenderPath_obj::helpMat,"helpMat");
	HX_MARK_MEMBER_NAME(RenderPath_obj::meshContext,"meshContext");
	HX_MARK_MEMBER_NAME(RenderPath_obj::shadowsContext,"shadowsContext");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RenderPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RenderPath_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(RenderPath_obj::active,"active");
	HX_VISIT_MEMBER_NAME(RenderPath_obj::helpMat,"helpMat");
	HX_VISIT_MEMBER_NAME(RenderPath_obj::meshContext,"meshContext");
	HX_VISIT_MEMBER_NAME(RenderPath_obj::shadowsContext,"shadowsContext");
};

#endif

hx::Class RenderPath_obj::__mClass;

static ::String RenderPath_obj_sStaticFields[] = {
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("setActive","\x08","\xb7","\xed","\x75"),
	HX_HCSTRING("sortMeshes","\x99","\x2d","\x97","\x65"),
	HX_HCSTRING("helpMat","\x5f","\xfe","\x4c","\xc0"),
	HX_HCSTRING("meshContext","\x82","\x3b","\xce","\xa1"),
	HX_HCSTRING("shadowsContext","\x9c","\xa9","\x6d","\x11"),
	::String(null())
};

void RenderPath_obj::__register()
{
	hx::Object *dummy = new RenderPath_obj;
	RenderPath_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.RenderPath","\xa1","\x55","\x1f","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RenderPath_obj::__GetStatic;
	__mClass->mSetStaticField = &RenderPath_obj::__SetStatic;
	__mClass->mMarkFunc = RenderPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(RenderPath_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RenderPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RenderPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RenderPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RenderPath_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_314_boot)
HXDLIN( 314)		helpMat = ::iron::math::Mat4_obj::identity();
            	}
{
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_746_boot)
HXDLIN( 746)		meshContext = HX_("mesh",ed,49,59,48);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_747_boot)
HXDLIN( 747)		shadowsContext = HX_("shadowmap",bc,6e,b8,f4);
            	}
}

} // end namespace iron
