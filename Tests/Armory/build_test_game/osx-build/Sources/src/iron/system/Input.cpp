// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_system_Gamepad
#include <iron/system/Gamepad.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_Keyboard
#include <iron/system/Keyboard.h>
#endif
#ifndef INCLUDED_iron_system_Mouse
#include <iron/system/Mouse.h>
#endif
#ifndef INCLUDED_iron_system_Pen
#include <iron/system/Pen.h>
#endif
#ifndef INCLUDED_iron_system_Sensor
#include <iron/system/Sensor.h>
#endif
#ifndef INCLUDED_iron_system_VirtualButton
#include <iron/system/VirtualButton.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_13_reset,"iron.system.Input","reset",0xd7269db2,"iron.system.Input.reset","iron/system/Input.hx",13,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_21_endFrame,"iron.system.Input","endFrame",0x95a4064f,"iron.system.Input.endFrame","iron/system/Input.hx",21,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_32_getMouse,"iron.system.Input","getMouse",0xfd5f21ac,"iron.system.Input.getMouse","iron/system/Input.hx",32,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_37_getPen,"iron.system.Input","getPen",0x054fa0a0,"iron.system.Input.getPen","iron/system/Input.hx",37,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_44_getSurface,"iron.system.Input","getSurface",0x0982a174,"iron.system.Input.getSurface","iron/system/Input.hx",44,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_47_getKeyboard,"iron.system.Input","getKeyboard",0x6e045f80,"iron.system.Input.getKeyboard","iron/system/Input.hx",47,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_52_getGamepad,"iron.system.Input","getGamepad",0x35bf1be8,"iron.system.Input.getGamepad","iron/system/Input.hx",52,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_58_getSensor,"iron.system.Input","getSensor",0x55603cd3,"iron.system.Input.getSensor","iron/system/Input.hx",58,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_63_getVirtualButton,"iron.system.Input","getVirtualButton",0x68c878e4,"iron.system.Input.getVirtualButton","iron/system/Input.hx",63,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_5_boot,"iron.system.Input","boot",0x69377daf,"iron.system.Input.boot","iron/system/Input.hx",5,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_6_boot,"iron.system.Input","boot",0x69377daf,"iron.system.Input.boot","iron/system/Input.hx",6,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_7_boot,"iron.system.Input","boot",0x69377daf,"iron.system.Input.boot","iron/system/Input.hx",7,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_8_boot,"iron.system.Input","boot",0x69377daf,"iron.system.Input.boot","iron/system/Input.hx",8,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_9_boot,"iron.system.Input","boot",0x69377daf,"iron.system.Input.boot","iron/system/Input.hx",9,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_10_boot,"iron.system.Input","boot",0x69377daf,"iron.system.Input.boot","iron/system/Input.hx",10,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_f866bbab0c129fe3_11_boot,"iron.system.Input","boot",0x69377daf,"iron.system.Input.boot","iron/system/Input.hx",11,0x32439d6d)
namespace iron{
namespace _hx_system{

void Input_obj::__construct() { }

Dynamic Input_obj::__CreateEmpty() { return new Input_obj; }

void *Input_obj::_hx_vtable = 0;

Dynamic Input_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Input_obj > _hx_result = new Input_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Input_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6dbe3b13;
}

bool Input_obj::occupied;

 ::iron::_hx_system::Mouse Input_obj::mouse;

 ::iron::_hx_system::Pen Input_obj::pen;

 ::iron::_hx_system::Keyboard Input_obj::keyboard;

::Array< ::Dynamic> Input_obj::gamepads;

 ::iron::_hx_system::Sensor Input_obj::sensor;

 ::haxe::ds::StringMap Input_obj::virtualButtons;

void Input_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_13_reset)
HXLINE(  14)		::iron::_hx_system::Input_obj::occupied = false;
HXLINE(  15)		if (hx::IsNotNull( ::iron::_hx_system::Input_obj::mouse )) {
HXLINE(  15)			::iron::_hx_system::Input_obj::mouse->reset();
            		}
HXLINE(  16)		if (hx::IsNotNull( ::iron::_hx_system::Input_obj::pen )) {
HXLINE(  16)			::iron::_hx_system::Input_obj::pen->reset();
            		}
HXLINE(  17)		if (hx::IsNotNull( ::iron::_hx_system::Input_obj::keyboard )) {
HXLINE(  17)			::iron::_hx_system::Input_obj::keyboard->reset();
            		}
HXLINE(  18)		{
HXLINE(  18)			int _g = (int)0;
HXDLIN(  18)			::Array< ::Dynamic> _g1 = ::iron::_hx_system::Input_obj::gamepads;
HXDLIN(  18)			while((_g < _g1->length)){
HXLINE(  18)				 ::iron::_hx_system::Gamepad gamepad = _g1->__get(_g).StaticCast<  ::iron::_hx_system::Gamepad >();
HXDLIN(  18)				_g = (_g + (int)1);
HXDLIN(  18)				gamepad->reset();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,reset,(void))

void Input_obj::endFrame(){
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_21_endFrame)
HXLINE(  22)		if (hx::IsNotNull( ::iron::_hx_system::Input_obj::mouse )) {
HXLINE(  22)			::iron::_hx_system::Input_obj::mouse->endFrame();
            		}
HXLINE(  23)		if (hx::IsNotNull( ::iron::_hx_system::Input_obj::pen )) {
HXLINE(  23)			::iron::_hx_system::Input_obj::pen->endFrame();
            		}
HXLINE(  24)		if (hx::IsNotNull( ::iron::_hx_system::Input_obj::keyboard )) {
HXLINE(  24)			::iron::_hx_system::Input_obj::keyboard->endFrame();
            		}
HXLINE(  25)		{
HXLINE(  25)			int _g = (int)0;
HXDLIN(  25)			::Array< ::Dynamic> _g1 = ::iron::_hx_system::Input_obj::gamepads;
HXDLIN(  25)			while((_g < _g1->length)){
HXLINE(  25)				 ::iron::_hx_system::Gamepad gamepad = _g1->__get(_g).StaticCast<  ::iron::_hx_system::Gamepad >();
HXDLIN(  25)				_g = (_g + (int)1);
HXDLIN(  25)				gamepad->endFrame();
            			}
            		}
HXLINE(  27)		if (hx::IsNotNull( ::iron::_hx_system::Input_obj::virtualButtons )) {
HXLINE(  28)			 ::Dynamic vb = ::iron::_hx_system::Input_obj::virtualButtons->iterator();
HXDLIN(  28)			while(( (bool)(vb->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  28)				 ::iron::_hx_system::VirtualButton vb1 = ( ( ::iron::_hx_system::VirtualButton)(vb->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  28)				vb1->started = (vb1->released = false);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,endFrame,(void))

 ::iron::_hx_system::Mouse Input_obj::getMouse(){
            	HX_GC_STACKFRAME(&_hx_pos_f866bbab0c129fe3_32_getMouse)
HXLINE(  33)		if (hx::IsNull( ::iron::_hx_system::Input_obj::mouse )) {
HXLINE(  33)			::iron::_hx_system::Input_obj::mouse =  ::iron::_hx_system::Mouse_obj::__alloc( HX_CTX );
            		}
HXLINE(  34)		return ::iron::_hx_system::Input_obj::mouse;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,getMouse,return )

 ::iron::_hx_system::Pen Input_obj::getPen(){
            	HX_GC_STACKFRAME(&_hx_pos_f866bbab0c129fe3_37_getPen)
HXLINE(  38)		if (hx::IsNull( ::iron::_hx_system::Input_obj::pen )) {
HXLINE(  38)			::iron::_hx_system::Input_obj::pen =  ::iron::_hx_system::Pen_obj::__alloc( HX_CTX );
            		}
HXLINE(  39)		return ::iron::_hx_system::Input_obj::pen;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,getPen,return )

 ::iron::_hx_system::Mouse Input_obj::getSurface(){
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_44_getSurface)
HXDLIN(  44)		return ::iron::_hx_system::Input_obj::getMouse();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,getSurface,return )

 ::iron::_hx_system::Keyboard Input_obj::getKeyboard(){
            	HX_GC_STACKFRAME(&_hx_pos_f866bbab0c129fe3_47_getKeyboard)
HXLINE(  48)		if (hx::IsNull( ::iron::_hx_system::Input_obj::keyboard )) {
HXLINE(  48)			::iron::_hx_system::Input_obj::keyboard =  ::iron::_hx_system::Keyboard_obj::__alloc( HX_CTX );
            		}
HXLINE(  49)		return ::iron::_hx_system::Input_obj::keyboard;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,getKeyboard,return )

 ::iron::_hx_system::Gamepad Input_obj::getGamepad(hx::Null< int >  __o_i){
int i = __o_i.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_f866bbab0c129fe3_52_getGamepad)
HXLINE(  53)		if ((i >= (int)4)) {
HXLINE(  53)			return null();
            		}
HXLINE(  54)		while((::iron::_hx_system::Input_obj::gamepads->length <= i)){
HXLINE(  54)			::Array< ::Dynamic> _hx_tmp = ::iron::_hx_system::Input_obj::gamepads;
HXDLIN(  54)			_hx_tmp->push( ::iron::_hx_system::Gamepad_obj::__alloc( HX_CTX ,::iron::_hx_system::Input_obj::gamepads->length,null()));
            		}
HXLINE(  55)		if (::iron::_hx_system::Input_obj::gamepads->__get(i).StaticCast<  ::iron::_hx_system::Gamepad >()->connected) {
HXLINE(  55)			return ::iron::_hx_system::Input_obj::gamepads->__get(i).StaticCast<  ::iron::_hx_system::Gamepad >();
            		}
            		else {
HXLINE(  55)			return null();
            		}
HXDLIN(  55)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,getGamepad,return )

 ::iron::_hx_system::Sensor Input_obj::getSensor(){
            	HX_GC_STACKFRAME(&_hx_pos_f866bbab0c129fe3_58_getSensor)
HXLINE(  59)		if (hx::IsNull( ::iron::_hx_system::Input_obj::sensor )) {
HXLINE(  59)			::iron::_hx_system::Input_obj::sensor =  ::iron::_hx_system::Sensor_obj::__alloc( HX_CTX );
            		}
HXLINE(  60)		return ::iron::_hx_system::Input_obj::sensor;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,getSensor,return )

 ::iron::_hx_system::VirtualButton Input_obj::getVirtualButton(::String _hx_virtual){
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_63_getVirtualButton)
HXLINE(  64)		if (hx::IsNull( ::iron::_hx_system::Input_obj::virtualButtons )) {
HXLINE(  64)			return null();
            		}
HXLINE(  65)		return ::iron::_hx_system::Input_obj::virtualButtons->get(_hx_virtual).StaticCast<  ::iron::_hx_system::VirtualButton >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,getVirtualButton,return )


Input_obj::Input_obj()
{
}

bool Input_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { outValue = ( pen ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { outValue = ( mouse ); return true; }
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sensor") ) { outValue = ( sensor ); return true; }
		if (HX_FIELD_EQ(inName,"getPen") ) { outValue = getPen_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"occupied") ) { outValue = ( occupied ); return true; }
		if (HX_FIELD_EQ(inName,"keyboard") ) { outValue = ( keyboard ); return true; }
		if (HX_FIELD_EQ(inName,"gamepads") ) { outValue = ( gamepads ); return true; }
		if (HX_FIELD_EQ(inName,"endFrame") ) { outValue = endFrame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMouse") ) { outValue = getMouse_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getSensor") ) { outValue = getSensor_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getSurface") ) { outValue = getSurface_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getGamepad") ) { outValue = getGamepad_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getKeyboard") ) { outValue = getKeyboard_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"virtualButtons") ) { outValue = ( virtualButtons ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getVirtualButton") ) { outValue = getVirtualButton_dyn(); return true; }
	}
	return false;
}

bool Input_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { pen=ioValue.Cast<  ::iron::_hx_system::Pen >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { mouse=ioValue.Cast<  ::iron::_hx_system::Mouse >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sensor") ) { sensor=ioValue.Cast<  ::iron::_hx_system::Sensor >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"occupied") ) { occupied=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"keyboard") ) { keyboard=ioValue.Cast<  ::iron::_hx_system::Keyboard >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepads") ) { gamepads=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"virtualButtons") ) { virtualButtons=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Input_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Input_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Input_obj::occupied,HX_HCSTRING("occupied","\x5e","\xea","\x3a","\x1f")},
	{hx::fsObject /*::iron::_hx_system::Mouse*/ ,(void *) &Input_obj::mouse,HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c")},
	{hx::fsObject /*::iron::_hx_system::Pen*/ ,(void *) &Input_obj::pen,HX_HCSTRING("pen","\xd9","\x54","\x55","\x00")},
	{hx::fsObject /*::iron::_hx_system::Keyboard*/ ,(void *) &Input_obj::keyboard,HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Input_obj::gamepads,HX_HCSTRING("gamepads","\xb2","\xac","\x9e","\xcb")},
	{hx::fsObject /*::iron::_hx_system::Sensor*/ ,(void *) &Input_obj::sensor,HX_HCSTRING("sensor","\x3a","\x32","\x90","\x6b")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Input_obj::virtualButtons,HX_HCSTRING("virtualButtons","\x76","\x83","\x6f","\x8c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Input_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Input_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Input_obj::occupied,"occupied");
	HX_MARK_MEMBER_NAME(Input_obj::mouse,"mouse");
	HX_MARK_MEMBER_NAME(Input_obj::pen,"pen");
	HX_MARK_MEMBER_NAME(Input_obj::keyboard,"keyboard");
	HX_MARK_MEMBER_NAME(Input_obj::gamepads,"gamepads");
	HX_MARK_MEMBER_NAME(Input_obj::sensor,"sensor");
	HX_MARK_MEMBER_NAME(Input_obj::virtualButtons,"virtualButtons");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Input_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Input_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Input_obj::occupied,"occupied");
	HX_VISIT_MEMBER_NAME(Input_obj::mouse,"mouse");
	HX_VISIT_MEMBER_NAME(Input_obj::pen,"pen");
	HX_VISIT_MEMBER_NAME(Input_obj::keyboard,"keyboard");
	HX_VISIT_MEMBER_NAME(Input_obj::gamepads,"gamepads");
	HX_VISIT_MEMBER_NAME(Input_obj::sensor,"sensor");
	HX_VISIT_MEMBER_NAME(Input_obj::virtualButtons,"virtualButtons");
};

#endif

hx::Class Input_obj::__mClass;

static ::String Input_obj_sStaticFields[] = {
	HX_HCSTRING("occupied","\x5e","\xea","\x3a","\x1f"),
	HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"),
	HX_HCSTRING("pen","\xd9","\x54","\x55","\x00"),
	HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68"),
	HX_HCSTRING("gamepads","\xb2","\xac","\x9e","\xcb"),
	HX_HCSTRING("sensor","\x3a","\x32","\x90","\x6b"),
	HX_HCSTRING("virtualButtons","\x76","\x83","\x6f","\x8c"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("endFrame","\x52","\x0a","\x81","\x04"),
	HX_HCSTRING("getMouse","\xaf","\x25","\x3c","\x6c"),
	HX_HCSTRING("getPen","\xe3","\x8d","\x24","\xa3"),
	HX_HCSTRING("getSurface","\x37","\xec","\xaa","\xac"),
	HX_HCSTRING("getKeyboard","\x5d","\x7f","\x1d","\x8e"),
	HX_HCSTRING("getGamepad","\xab","\x66","\xe7","\xd8"),
	HX_HCSTRING("getSensor","\x70","\xbb","\xe6","\xe7"),
	HX_HCSTRING("getVirtualButton","\xe7","\xb7","\x1d","\xbb"),
	::String(null())
};

void Input_obj::__register()
{
	hx::Object *dummy = new Input_obj;
	Input_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.system.Input","\x11","\xd8","\xd4","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Input_obj::__GetStatic;
	__mClass->mSetStaticField = &Input_obj::__SetStatic;
	__mClass->mMarkFunc = Input_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Input_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Input_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Input_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Input_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Input_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Input_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_5_boot)
HXDLIN(   5)		occupied = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_6_boot)
HXDLIN(   6)		mouse = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_7_boot)
HXDLIN(   7)		pen = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_8_boot)
HXDLIN(   8)		keyboard = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_9_boot)
HXDLIN(   9)		gamepads = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_10_boot)
HXDLIN(  10)		sensor = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_f866bbab0c129fe3_11_boot)
HXDLIN(  11)		virtualButtons = null();
            	}
}

} // end namespace iron
} // end namespace system
