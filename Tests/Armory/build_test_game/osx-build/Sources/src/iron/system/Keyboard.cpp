// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_system_Keyboard
#include <iron/system/Keyboard.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_network_Controller
#include <kha/network/Controller.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_278e4469bbd8f27a_300_new,"iron.system.Keyboard","new",0xead2c7f2,"iron.system.Keyboard.new","iron/system/Input.hx",300,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_278e4469bbd8f27a_315_endFrame,"iron.system.Keyboard","endFrame",0xd77d6180,"iron.system.Keyboard.endFrame","iron/system/Input.hx",315,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_278e4469bbd8f27a_324_reset,"iron.system.Keyboard","reset",0xa8a1c9e1,"iron.system.Keyboard.reset","iron/system/Input.hx",324,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_278e4469bbd8f27a_335_down,"iron.system.Keyboard","down",0x8707a090,"iron.system.Keyboard.down","iron/system/Input.hx",335,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_278e4469bbd8f27a_339_started,"iron.system.Keyboard","started",0x406251d3,"iron.system.Keyboard.started","iron/system/Input.hx",339,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_278e4469bbd8f27a_343_released,"iron.system.Keyboard","released",0x49e3dfeb,"iron.system.Keyboard.released","iron/system/Input.hx",343,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_278e4469bbd8f27a_374_downListener,"iron.system.Keyboard","downListener",0x01566d24,"iron.system.Keyboard.downListener","iron/system/Input.hx",374,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_278e4469bbd8f27a_383_upListener,"iron.system.Keyboard","upListener",0x09ad749d,"iron.system.Keyboard.upListener","iron/system/Input.hx",383,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_278e4469bbd8f27a_392_pressListener,"iron.system.Keyboard","pressListener",0x2552ad29,"iron.system.Keyboard.pressListener","iron/system/Input.hx",392,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_278e4469bbd8f27a_347_keyCode,"iron.system.Keyboard","keyCode",0xa6e54afe,"iron.system.Keyboard.keyCode","iron/system/Input.hx",347,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_278e4469bbd8f27a_302_boot,"iron.system.Keyboard","boot",0x85b52c60,"iron.system.Keyboard.boot","iron/system/Input.hx",302,0x32439d6d)
static const ::String _hx_array_data_39b7a700_13[] = {
	HX_("a",61,00,00,00),HX_("b",62,00,00,00),HX_("c",63,00,00,00),HX_("d",64,00,00,00),HX_("e",65,00,00,00),HX_("f",66,00,00,00),HX_("g",67,00,00,00),HX_("h",68,00,00,00),HX_("i",69,00,00,00),HX_("j",6a,00,00,00),HX_("k",6b,00,00,00),HX_("l",6c,00,00,00),HX_("m",6d,00,00,00),HX_("n",6e,00,00,00),HX_("o",6f,00,00,00),HX_("p",70,00,00,00),HX_("q",71,00,00,00),HX_("r",72,00,00,00),HX_("s",73,00,00,00),HX_("t",74,00,00,00),HX_("u",75,00,00,00),HX_("v",76,00,00,00),HX_("w",77,00,00,00),HX_("x",78,00,00,00),HX_("y",79,00,00,00),HX_("z",7a,00,00,00),HX_("0",30,00,00,00),HX_("1",31,00,00,00),HX_("2",32,00,00,00),HX_("3",33,00,00,00),HX_("4",34,00,00,00),HX_("5",35,00,00,00),HX_("6",36,00,00,00),HX_("7",37,00,00,00),HX_("8",38,00,00,00),HX_("9",39,00,00,00),HX_(".",2e,00,00,00),HX_(",",2c,00,00,00),HX_("space",c6,8c,66,81),HX_("backspace",3f,85,ea,ca),HX_("tab",55,5a,58,00),HX_("enter",18,6d,86,70),HX_("shift",82,ec,22,7c),HX_("ctrl",ab,88,c8,41),HX_("alt",29,f9,49,00),HX_("esc",35,08,4d,00),HX_("del",cb,39,4c,00),HX_("back",27,da,10,41),HX_("up",5b,66,00,00),HX_("right",dc,0b,64,e9),HX_("left",07,08,b0,47),HX_("down",62,f8,6d,42),
};
namespace iron{
namespace _hx_system{

void Keyboard_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_278e4469bbd8f27a_300_new)
HXLINE( 307)		this->keysFrame = ::Array_obj< ::String >::__new(0);
HXLINE( 305)		this->keysReleased =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 304)		this->keysStarted =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 303)		this->keysDown =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 309)		super::__construct();
HXLINE( 310)		this->reset();
HXLINE( 311)		::kha::input::Keyboard_obj::get(null())->notify(this->downListener_dyn(),this->upListener_dyn(),this->pressListener_dyn());
            	}

Dynamic Keyboard_obj::__CreateEmpty() { return new Keyboard_obj; }

void *Keyboard_obj::_hx_vtable = 0;

Dynamic Keyboard_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Keyboard_obj > _hx_result = new Keyboard_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Keyboard_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x128d6806) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x128d6806;
	} else {
		return inClassId==(int)0x15b014de;
	}
}

void Keyboard_obj::endFrame(){
            	HX_STACKFRAME(&_hx_pos_278e4469bbd8f27a_315_endFrame)
HXDLIN( 315)		if ((this->keysFrame->length > (int)0)) {
HXLINE( 316)			{
HXLINE( 316)				int _g = (int)0;
HXDLIN( 316)				::Array< ::String > _g1 = this->keysFrame;
HXDLIN( 316)				while((_g < _g1->length)){
HXLINE( 316)					::String s = _g1->__get(_g);
HXDLIN( 316)					_g = (_g + (int)1);
HXLINE( 317)					this->keysStarted->set(s,false);
HXLINE( 318)					this->keysReleased->set(s,false);
            				}
            			}
HXLINE( 320)			this->keysFrame->removeRange((int)0,this->keysFrame->length);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Keyboard_obj,endFrame,(void))

void Keyboard_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_278e4469bbd8f27a_324_reset)
HXLINE( 326)		{
HXLINE( 326)			int _g = (int)0;
HXDLIN( 326)			::Array< ::String > _g1 = ::iron::_hx_system::Keyboard_obj::keys;
HXDLIN( 326)			while((_g < _g1->length)){
HXLINE( 326)				::String s = _g1->__get(_g);
HXDLIN( 326)				_g = (_g + (int)1);
HXLINE( 327)				this->keysDown->set(s,false);
HXLINE( 328)				this->keysStarted->set(s,false);
HXLINE( 329)				this->keysReleased->set(s,false);
            			}
            		}
HXLINE( 331)		this->endFrame();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Keyboard_obj,reset,(void))

bool Keyboard_obj::down(::String key){
            	HX_STACKFRAME(&_hx_pos_278e4469bbd8f27a_335_down)
HXDLIN( 335)		return ( (bool)(this->keysDown->get(key)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,down,return )

bool Keyboard_obj::started(::String key){
            	HX_STACKFRAME(&_hx_pos_278e4469bbd8f27a_339_started)
HXDLIN( 339)		return ( (bool)(this->keysStarted->get(key)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,started,return )

bool Keyboard_obj::released(::String key){
            	HX_STACKFRAME(&_hx_pos_278e4469bbd8f27a_343_released)
HXDLIN( 343)		return ( (bool)(this->keysReleased->get(key)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,released,return )

void Keyboard_obj::downListener(int code){
            	HX_STACKFRAME(&_hx_pos_278e4469bbd8f27a_374_downListener)
HXLINE( 375)		::String s = ::iron::_hx_system::Keyboard_obj::keyCode(code);
HXLINE( 376)		this->keysFrame->push(s);
HXLINE( 377)		this->keysStarted->set(s,true);
HXLINE( 378)		this->keysDown->set(s,true);
HXLINE( 380)		this->downVirtual(s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,downListener,(void))

void Keyboard_obj::upListener(int code){
            	HX_STACKFRAME(&_hx_pos_278e4469bbd8f27a_383_upListener)
HXLINE( 384)		::String s = ::iron::_hx_system::Keyboard_obj::keyCode(code);
HXLINE( 385)		this->keysFrame->push(s);
HXLINE( 386)		this->keysReleased->set(s,true);
HXLINE( 387)		this->keysDown->set(s,false);
HXLINE( 389)		this->upVirtual(s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,upListener,(void))

void Keyboard_obj::pressListener(::String _hx_char){
            	HX_STACKFRAME(&_hx_pos_278e4469bbd8f27a_392_pressListener)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,pressListener,(void))

::Array< ::String > Keyboard_obj::keys;

::String Keyboard_obj::keyCode(int key){
            	HX_STACKFRAME(&_hx_pos_278e4469bbd8f27a_347_keyCode)
HXDLIN( 347)		if ((key == (int)32)) {
HXDLIN( 347)			return HX_("space",c6,8c,66,81);
            		}
            		else {
HXLINE( 348)			if ((key == (int)8)) {
HXLINE( 348)				return HX_("backspace",3f,85,ea,ca);
            			}
            			else {
HXLINE( 349)				if ((key == (int)9)) {
HXLINE( 349)					return HX_("tab",55,5a,58,00);
            				}
            				else {
HXLINE( 350)					if ((key == (int)13)) {
HXLINE( 350)						return HX_("enter",18,6d,86,70);
            					}
            					else {
HXLINE( 351)						if ((key == (int)16)) {
HXLINE( 351)							return HX_("shift",82,ec,22,7c);
            						}
            						else {
HXLINE( 352)							if ((key == (int)17)) {
HXLINE( 352)								return HX_("ctrl",ab,88,c8,41);
            							}
            							else {
HXLINE( 353)								if ((key == (int)18)) {
HXLINE( 353)									return HX_("alt",29,f9,49,00);
            								}
            								else {
HXLINE( 354)									if ((key == (int)27)) {
HXLINE( 354)										return HX_("esc",35,08,4d,00);
            									}
            									else {
HXLINE( 355)										if ((key == (int)46)) {
HXLINE( 355)											return HX_("del",cb,39,4c,00);
            										}
            										else {
HXLINE( 356)											if ((key == (int)38)) {
HXLINE( 356)												return HX_("up",5b,66,00,00);
            											}
            											else {
HXLINE( 357)												if ((key == (int)40)) {
HXLINE( 357)													return HX_("down",62,f8,6d,42);
            												}
            												else {
HXLINE( 358)													if ((key == (int)37)) {
HXLINE( 358)														return HX_("left",07,08,b0,47);
            													}
            													else {
HXLINE( 359)														if ((key == (int)39)) {
HXLINE( 359)															return HX_("right",dc,0b,64,e9);
            														}
            														else {
HXLINE( 360)															if ((key == (int)1)) {
HXLINE( 360)																return HX_("back",27,da,10,41);
            															}
            															else {
HXLINE( 361)																if ((key == (int)48)) {
HXLINE( 361)																	return HX_("0",30,00,00,00);
            																}
            																else {
HXLINE( 362)																	if ((key == (int)49)) {
HXLINE( 362)																		return HX_("1",31,00,00,00);
            																	}
            																	else {
HXLINE( 363)																		if ((key == (int)50)) {
HXLINE( 363)																			return HX_("2",32,00,00,00);
            																		}
            																		else {
HXLINE( 364)																			if ((key == (int)51)) {
HXLINE( 364)																				return HX_("3",33,00,00,00);
            																			}
            																			else {
HXLINE( 365)																				if ((key == (int)52)) {
HXLINE( 365)																					return HX_("4",34,00,00,00);
            																				}
            																				else {
HXLINE( 366)																					if ((key == (int)53)) {
HXLINE( 366)																						return HX_("5",35,00,00,00);
            																					}
            																					else {
HXLINE( 367)																						if ((key == (int)54)) {
HXLINE( 367)																							return HX_("6",36,00,00,00);
            																						}
            																						else {
HXLINE( 368)																							if ((key == (int)55)) {
HXLINE( 368)																								return HX_("7",37,00,00,00);
            																							}
            																							else {
HXLINE( 369)																								if ((key == (int)56)) {
HXLINE( 369)																									return HX_("8",38,00,00,00);
            																								}
            																								else {
HXLINE( 370)																									if ((key == (int)57)) {
HXLINE( 370)																										return HX_("9",39,00,00,00);
            																									}
            																									else {
HXLINE( 371)																										return ::String::fromCharCode(key).toLowerCase();
            																									}
            																								}
            																							}
            																						}
            																					}
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 347)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,keyCode,return )


hx::ObjectPtr< Keyboard_obj > Keyboard_obj::__new() {
	hx::ObjectPtr< Keyboard_obj > __this = new Keyboard_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Keyboard_obj > Keyboard_obj::__alloc(hx::Ctx *_hx_ctx) {
	Keyboard_obj *__this = (Keyboard_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Keyboard_obj), true, "iron.system.Keyboard"));
	*(void **)__this = Keyboard_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Keyboard_obj::Keyboard_obj()
{
}

void Keyboard_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Keyboard);
	HX_MARK_MEMBER_NAME(keysDown,"keysDown");
	HX_MARK_MEMBER_NAME(keysStarted,"keysStarted");
	HX_MARK_MEMBER_NAME(keysReleased,"keysReleased");
	HX_MARK_MEMBER_NAME(keysFrame,"keysFrame");
	 ::iron::_hx_system::VirtualInput_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Keyboard_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keysDown,"keysDown");
	HX_VISIT_MEMBER_NAME(keysStarted,"keysStarted");
	HX_VISIT_MEMBER_NAME(keysReleased,"keysReleased");
	HX_VISIT_MEMBER_NAME(keysFrame,"keysFrame");
	 ::iron::_hx_system::VirtualInput_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Keyboard_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return hx::Val( down_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { return hx::Val( started_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keysDown") ) { return hx::Val( keysDown ); }
		if (HX_FIELD_EQ(inName,"endFrame") ) { return hx::Val( endFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"released") ) { return hx::Val( released_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"keysFrame") ) { return hx::Val( keysFrame ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"upListener") ) { return hx::Val( upListener_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keysStarted") ) { return hx::Val( keysStarted ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"keysReleased") ) { return hx::Val( keysReleased ); }
		if (HX_FIELD_EQ(inName,"downListener") ) { return hx::Val( downListener_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pressListener") ) { return hx::Val( pressListener_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Keyboard_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { outValue = ( keys ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { outValue = keyCode_dyn(); return true; }
	}
	return false;
}

hx::Val Keyboard_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"keysDown") ) { keysDown=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"keysFrame") ) { keysFrame=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keysStarted") ) { keysStarted=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"keysReleased") ) { keysReleased=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Keyboard_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void Keyboard_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("keysDown","\x76","\x10","\x98","\x15"));
	outFields->push(HX_HCSTRING("keysStarted","\xad","\x55","\x88","\x22"));
	outFields->push(HX_HCSTRING("keysReleased","\xd1","\x3a","\x01","\x49"));
	outFields->push(HX_HCSTRING("keysFrame","\x99","\x71","\x2e","\xf8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Keyboard_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Keyboard_obj,keysDown),HX_HCSTRING("keysDown","\x76","\x10","\x98","\x15")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Keyboard_obj,keysStarted),HX_HCSTRING("keysStarted","\xad","\x55","\x88","\x22")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Keyboard_obj,keysReleased),HX_HCSTRING("keysReleased","\xd1","\x3a","\x01","\x49")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Keyboard_obj,keysFrame),HX_HCSTRING("keysFrame","\x99","\x71","\x2e","\xf8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Keyboard_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Keyboard_obj::keys,HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Keyboard_obj_sMemberFields[] = {
	HX_HCSTRING("keysDown","\x76","\x10","\x98","\x15"),
	HX_HCSTRING("keysStarted","\xad","\x55","\x88","\x22"),
	HX_HCSTRING("keysReleased","\xd1","\x3a","\x01","\x49"),
	HX_HCSTRING("keysFrame","\x99","\x71","\x2e","\xf8"),
	HX_HCSTRING("endFrame","\x52","\x0a","\x81","\x04"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("down","\x62","\xf8","\x6d","\x42"),
	HX_HCSTRING("started","\x41","\x29","\x1b","\x35"),
	HX_HCSTRING("released","\xbd","\x88","\xe7","\x76"),
	HX_HCSTRING("downListener","\xf6","\xe6","\x73","\xa7"),
	HX_HCSTRING("upListener","\xef","\x75","\x8a","\x3d"),
	HX_HCSTRING("pressListener","\x17","\xcb","\xff","\xd8"),
	::String(null()) };

static void Keyboard_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Keyboard_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Keyboard_obj::keys,"keys");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Keyboard_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Keyboard_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::keys,"keys");
};

#endif

hx::Class Keyboard_obj::__mClass;

static ::String Keyboard_obj_sStaticFields[] = {
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("keyCode","\x6c","\x22","\x9e","\x9b"),
	::String(null())
};

void Keyboard_obj::__register()
{
	hx::Object *dummy = new Keyboard_obj;
	Keyboard_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.system.Keyboard","\x00","\xa7","\xb7","\x39");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Keyboard_obj::__GetStatic;
	__mClass->mSetStaticField = &Keyboard_obj::__SetStatic;
	__mClass->mMarkFunc = Keyboard_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Keyboard_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Keyboard_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Keyboard_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Keyboard_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Keyboard_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Keyboard_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Keyboard_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_278e4469bbd8f27a_302_boot)
HXDLIN( 302)		keys = ::Array_obj< ::String >::fromData( _hx_array_data_39b7a700_13,52);
            	}
}

} // end namespace iron
} // end namespace system
