// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_system_Mouse
#include <iron/system/Mouse.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_network_Controller
#include <kha/network/Controller.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e775d37de702a089_109_new,"iron.system.Mouse","new",0x6ad6511e,"iron.system.Mouse.new","iron/system/Input.hx",109,0x32439d6d)
static const bool _hx_array_data_e41c2a2c_1[] = {
	0,0,0,
};
static const bool _hx_array_data_e41c2a2c_2[] = {
	0,0,0,
};
static const bool _hx_array_data_e41c2a2c_3[] = {
	0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_131_endFrame,"iron.system.Mouse","endFrame",0xe8bd18d4,"iron.system.Mouse.endFrame","iron/system/Input.hx",131,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_140_reset,"iron.system.Mouse","reset",0xd77af60d,"iron.system.Mouse.reset","iron/system/Input.hx",140,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_146_buttonIndex,"iron.system.Mouse","buttonIndex",0x0bedca7e,"iron.system.Mouse.buttonIndex","iron/system/Input.hx",146,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_150_down,"iron.system.Mouse","down",0x0a1c1de4,"iron.system.Mouse.down","iron/system/Input.hx",150,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_154_started,"iron.system.Mouse","started",0xb8ffe0ff,"iron.system.Mouse.started","iron/system/Input.hx",154,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_158_released,"iron.system.Mouse","released",0x5b23973f,"iron.system.Mouse.released","iron/system/Input.hx",158,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_162_lock,"iron.system.Mouse","lock",0x0f65c16d,"iron.system.Mouse.lock","iron/system/Input.hx",162,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_169_unlock,"iron.system.Mouse","unlock",0x1130acc6,"iron.system.Mouse.unlock","iron/system/Input.hx",169,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_176_hide,"iron.system.Mouse","hide",0x0cbc5a44,"iron.system.Mouse.hide","iron/system/Input.hx",176,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_181_show,"iron.system.Mouse","show",0x1400fa7f,"iron.system.Mouse.show","iron/system/Input.hx",181,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_186_downListener,"iron.system.Mouse","downListener",0xcfe65e78,"iron.system.Mouse.downListener","iron/system/Input.hx",186,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_198_upListener,"iron.system.Mouse","upListener",0xb3c8a8f1,"iron.system.Mouse.upListener","iron/system/Input.hx",198,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_207_moveListener,"iron.system.Mouse","moveListener",0xf4da1027,"iron.system.Mouse.moveListener","iron/system/Input.hx",207,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_225_wheelListener,"iron.system.Mouse","wheelListener",0x22d29e6d,"iron.system.Mouse.wheelListener","iron/system/Input.hx",225,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_111_boot,"iron.system.Mouse","boot",0x08c9a9b4,"iron.system.Mouse.boot","iron/system/Input.hx",111,0x32439d6d)
static const ::String _hx_array_data_e41c2a2c_19[] = {
	HX_("left",07,08,b0,47),HX_("right",dc,0b,64,e9),HX_("middle",55,d3,5e,4c),
};
namespace iron{
namespace _hx_system{

void Mouse_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_109_new)
HXLINE( 125)		this->lastY = ((Float)-1.0);
HXLINE( 124)		this->lastX = ((Float)-1.0);
HXLINE( 123)		this->hidden = false;
HXLINE( 122)		this->locked = false;
HXLINE( 121)		this->wheelDelta = (int)0;
HXLINE( 120)		this->movementY = ((Float)0.0);
HXLINE( 119)		this->movementX = ((Float)0.0);
HXLINE( 118)		this->moved = false;
HXLINE( 117)		this->y = ((Float)0.0);
HXLINE( 116)		this->x = ((Float)0.0);
HXLINE( 114)		this->buttonsReleased = ::Array_obj< bool >::fromData( _hx_array_data_e41c2a2c_1,3);
HXLINE( 113)		this->buttonsStarted = ::Array_obj< bool >::fromData( _hx_array_data_e41c2a2c_2,3);
HXLINE( 112)		this->buttonsDown = ::Array_obj< bool >::fromData( _hx_array_data_e41c2a2c_3,3);
HXLINE( 127)		super::__construct();
HXLINE( 128)		::kha::input::Mouse_obj::get(null())->notify(this->downListener_dyn(),this->upListener_dyn(),this->moveListener_dyn(),this->wheelListener_dyn(),null());
            	}

Dynamic Mouse_obj::__CreateEmpty() { return new Mouse_obj; }

void *Mouse_obj::_hx_vtable = 0;

Dynamic Mouse_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mouse_obj > _hx_result = new Mouse_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Mouse_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x15b014de) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x15b014de;
	} else {
		return inClassId==(int)0x7fa066ce;
	}
}

void Mouse_obj::endFrame(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_131_endFrame)
HXLINE( 132)		::Array< bool > _hx_tmp = this->buttonsStarted;
HXDLIN( 132)		_hx_tmp[(int)0] = (this->buttonsStarted[(int)1] = (this->buttonsStarted[(int)2] = false));
HXLINE( 133)		::Array< bool > _hx_tmp1 = this->buttonsReleased;
HXDLIN( 133)		_hx_tmp1[(int)0] = (this->buttonsReleased[(int)1] = (this->buttonsReleased[(int)2] = false));
HXLINE( 134)		this->moved = false;
HXLINE( 135)		this->movementX = (int)0;
HXLINE( 136)		this->movementY = (int)0;
HXLINE( 137)		this->wheelDelta = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,endFrame,(void))

void Mouse_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_140_reset)
HXLINE( 141)		::Array< bool > _hx_tmp = this->buttonsDown;
HXDLIN( 141)		_hx_tmp[(int)0] = (this->buttonsDown[(int)1] = (this->buttonsDown[(int)2] = false));
HXLINE( 142)		this->endFrame();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,reset,(void))

int Mouse_obj::buttonIndex(::String button){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_146_buttonIndex)
HXDLIN( 146)		if ((button == HX_("left",07,08,b0,47))) {
HXDLIN( 146)			return (int)0;
            		}
            		else {
HXDLIN( 146)			if ((button == HX_("right",dc,0b,64,e9))) {
HXDLIN( 146)				return (int)1;
            			}
            			else {
HXDLIN( 146)				return (int)2;
            			}
            		}
HXDLIN( 146)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,buttonIndex,return )

bool Mouse_obj::down(::String __o_button){
::String button = __o_button.Default(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_150_down)
HXDLIN( 150)		::Array< bool > _hx_tmp = this->buttonsDown;
HXDLIN( 150)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,down,return )

bool Mouse_obj::started(::String __o_button){
::String button = __o_button.Default(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_154_started)
HXDLIN( 154)		::Array< bool > _hx_tmp = this->buttonsStarted;
HXDLIN( 154)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,started,return )

bool Mouse_obj::released(::String __o_button){
::String button = __o_button.Default(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_158_released)
HXDLIN( 158)		::Array< bool > _hx_tmp = this->buttonsReleased;
HXDLIN( 158)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,released,return )

void Mouse_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_162_lock)
HXDLIN( 162)		if (::kha::input::Mouse_obj::get(null())->canLock()) {
HXLINE( 163)			::kha::input::Mouse_obj::get(null())->lock();
HXLINE( 164)			this->locked = true;
HXLINE( 165)			this->hidden = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,lock,(void))

void Mouse_obj::unlock(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_169_unlock)
HXDLIN( 169)		if (::kha::input::Mouse_obj::get(null())->canLock()) {
HXLINE( 170)			::kha::input::Mouse_obj::get(null())->unlock();
HXLINE( 171)			this->locked = false;
HXLINE( 172)			this->hidden = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,unlock,(void))

void Mouse_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_176_hide)
HXLINE( 177)		::kha::input::Mouse_obj::get(null())->hideSystemCursor();
HXLINE( 178)		this->hidden = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,hide,(void))

void Mouse_obj::show(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_181_show)
HXLINE( 182)		::kha::input::Mouse_obj::get(null())->showSystemCursor();
HXLINE( 183)		this->hidden = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,show,(void))

void Mouse_obj::downListener(int index,int x,int y){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_186_downListener)
HXLINE( 187)		this->buttonsDown[index] = true;
HXLINE( 188)		this->buttonsStarted[index] = true;
HXLINE( 189)		this->x = x;
HXLINE( 190)		this->y = y;
HXLINE( 195)		this->downVirtual(::iron::_hx_system::Mouse_obj::buttons->__get(index));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Mouse_obj,downListener,(void))

void Mouse_obj::upListener(int index,int x,int y){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_198_upListener)
HXLINE( 199)		this->buttonsDown[index] = false;
HXLINE( 200)		this->buttonsReleased[index] = true;
HXLINE( 201)		this->x = x;
HXLINE( 202)		this->y = y;
HXLINE( 204)		this->upVirtual(::iron::_hx_system::Mouse_obj::buttons->__get(index));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Mouse_obj,upListener,(void))

void Mouse_obj::moveListener(int x,int y,int movementX,int movementY){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_207_moveListener)
HXLINE( 208)		bool _hx_tmp;
HXDLIN( 208)		if ((this->lastX == ((Float)-1.0))) {
HXLINE( 208)			_hx_tmp = (this->lastY == ((Float)-1.0));
            		}
            		else {
HXLINE( 208)			_hx_tmp = false;
            		}
HXDLIN( 208)		if (_hx_tmp) {
HXLINE( 208)			this->lastX = x;
HXDLIN( 208)			this->lastY = y;
            		}
HXLINE( 209)		if (this->locked) {
HXLINE( 210)			this->movementX = movementX;
HXLINE( 211)			this->movementY = movementY;
            		}
            		else {
HXLINE( 214)			this->movementX = (x - this->lastX);
HXLINE( 215)			this->movementY = (y - this->lastY);
            		}
HXLINE( 217)		this->lastX = x;
HXLINE( 218)		this->lastY = y;
HXLINE( 219)		this->x = x;
HXLINE( 220)		this->y = y;
HXLINE( 221)		this->moved = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Mouse_obj,moveListener,(void))

void Mouse_obj::wheelListener(int delta){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_225_wheelListener)
HXDLIN( 225)		this->wheelDelta = delta;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,wheelListener,(void))

::Array< ::String > Mouse_obj::buttons;


hx::ObjectPtr< Mouse_obj > Mouse_obj::__new() {
	hx::ObjectPtr< Mouse_obj > __this = new Mouse_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Mouse_obj > Mouse_obj::__alloc(hx::Ctx *_hx_ctx) {
	Mouse_obj *__this = (Mouse_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mouse_obj), true, "iron.system.Mouse"));
	*(void **)__this = Mouse_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Mouse_obj::Mouse_obj()
{
}

void Mouse_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mouse);
	HX_MARK_MEMBER_NAME(buttonsDown,"buttonsDown");
	HX_MARK_MEMBER_NAME(buttonsStarted,"buttonsStarted");
	HX_MARK_MEMBER_NAME(buttonsReleased,"buttonsReleased");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(moved,"moved");
	HX_MARK_MEMBER_NAME(movementX,"movementX");
	HX_MARK_MEMBER_NAME(movementY,"movementY");
	HX_MARK_MEMBER_NAME(wheelDelta,"wheelDelta");
	HX_MARK_MEMBER_NAME(locked,"locked");
	HX_MARK_MEMBER_NAME(hidden,"hidden");
	HX_MARK_MEMBER_NAME(lastX,"lastX");
	HX_MARK_MEMBER_NAME(lastY,"lastY");
	 ::iron::_hx_system::VirtualInput_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Mouse_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buttonsDown,"buttonsDown");
	HX_VISIT_MEMBER_NAME(buttonsStarted,"buttonsStarted");
	HX_VISIT_MEMBER_NAME(buttonsReleased,"buttonsReleased");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(moved,"moved");
	HX_VISIT_MEMBER_NAME(movementX,"movementX");
	HX_VISIT_MEMBER_NAME(movementY,"movementY");
	HX_VISIT_MEMBER_NAME(wheelDelta,"wheelDelta");
	HX_VISIT_MEMBER_NAME(locked,"locked");
	HX_VISIT_MEMBER_NAME(hidden,"hidden");
	HX_VISIT_MEMBER_NAME(lastX,"lastX");
	HX_VISIT_MEMBER_NAME(lastY,"lastY");
	 ::iron::_hx_system::VirtualInput_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Mouse_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return hx::Val( down_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return hx::Val( hide_dyn() ); }
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { return hx::Val( moved ); }
		if (HX_FIELD_EQ(inName,"lastX") ) { return hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return hx::Val( lastY ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locked") ) { return hx::Val( locked ); }
		if (HX_FIELD_EQ(inName,"hidden") ) { return hx::Val( hidden ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { return hx::Val( started_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"endFrame") ) { return hx::Val( endFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"released") ) { return hx::Val( released_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"movementX") ) { return hx::Val( movementX ); }
		if (HX_FIELD_EQ(inName,"movementY") ) { return hx::Val( movementY ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wheelDelta") ) { return hx::Val( wheelDelta ); }
		if (HX_FIELD_EQ(inName,"upListener") ) { return hx::Val( upListener_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonsDown") ) { return hx::Val( buttonsDown ); }
		if (HX_FIELD_EQ(inName,"buttonIndex") ) { return hx::Val( buttonIndex_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"downListener") ) { return hx::Val( downListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveListener") ) { return hx::Val( moveListener_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wheelListener") ) { return hx::Val( wheelListener_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buttonsStarted") ) { return hx::Val( buttonsStarted ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonsReleased") ) { return hx::Val( buttonsReleased ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Mouse_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"buttons") ) { outValue = ( buttons ); return true; }
	}
	return false;
}

hx::Val Mouse_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { moved=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locked") ) { locked=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hidden") ) { hidden=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"movementX") ) { movementX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movementY") ) { movementY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wheelDelta") ) { wheelDelta=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonsDown") ) { buttonsDown=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buttonsStarted") ) { buttonsStarted=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonsReleased") ) { buttonsReleased=inValue.Cast< ::Array< bool > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Mouse_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void Mouse_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buttonsDown","\x43","\x2b","\xd9","\x1e"));
	outFields->push(HX_HCSTRING("buttonsStarted","\x00","\x39","\xf4","\x4e"));
	outFields->push(HX_HCSTRING("buttonsReleased","\x1e","\x40","\xfc","\xfa"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c"));
	outFields->push(HX_HCSTRING("movementX","\x49","\x04","\x5d","\x30"));
	outFields->push(HX_HCSTRING("movementY","\x4a","\x04","\x5d","\x30"));
	outFields->push(HX_HCSTRING("wheelDelta","\x5d","\x91","\x6e","\xa6"));
	outFields->push(HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59"));
	outFields->push(HX_HCSTRING("hidden","\x6a","\xff","\x95","\x4c"));
	outFields->push(HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f"));
	outFields->push(HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Mouse_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Mouse_obj,buttonsDown),HX_HCSTRING("buttonsDown","\x43","\x2b","\xd9","\x1e")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Mouse_obj,buttonsStarted),HX_HCSTRING("buttonsStarted","\x00","\x39","\xf4","\x4e")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Mouse_obj,buttonsReleased),HX_HCSTRING("buttonsReleased","\x1e","\x40","\xfc","\xfa")},
	{hx::fsFloat,(int)offsetof(Mouse_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Mouse_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(Mouse_obj,moved),HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c")},
	{hx::fsFloat,(int)offsetof(Mouse_obj,movementX),HX_HCSTRING("movementX","\x49","\x04","\x5d","\x30")},
	{hx::fsFloat,(int)offsetof(Mouse_obj,movementY),HX_HCSTRING("movementY","\x4a","\x04","\x5d","\x30")},
	{hx::fsInt,(int)offsetof(Mouse_obj,wheelDelta),HX_HCSTRING("wheelDelta","\x5d","\x91","\x6e","\xa6")},
	{hx::fsBool,(int)offsetof(Mouse_obj,locked),HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59")},
	{hx::fsBool,(int)offsetof(Mouse_obj,hidden),HX_HCSTRING("hidden","\x6a","\xff","\x95","\x4c")},
	{hx::fsFloat,(int)offsetof(Mouse_obj,lastX),HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f")},
	{hx::fsFloat,(int)offsetof(Mouse_obj,lastY),HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Mouse_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Mouse_obj::buttons,HX_HCSTRING("buttons","\x41","\x52","\x75","\xca")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Mouse_obj_sMemberFields[] = {
	HX_HCSTRING("buttonsDown","\x43","\x2b","\xd9","\x1e"),
	HX_HCSTRING("buttonsStarted","\x00","\x39","\xf4","\x4e"),
	HX_HCSTRING("buttonsReleased","\x1e","\x40","\xfc","\xfa"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c"),
	HX_HCSTRING("movementX","\x49","\x04","\x5d","\x30"),
	HX_HCSTRING("movementY","\x4a","\x04","\x5d","\x30"),
	HX_HCSTRING("wheelDelta","\x5d","\x91","\x6e","\xa6"),
	HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59"),
	HX_HCSTRING("hidden","\x6a","\xff","\x95","\x4c"),
	HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f"),
	HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f"),
	HX_HCSTRING("endFrame","\x52","\x0a","\x81","\x04"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("buttonIndex","\xc0","\x5b","\xbf","\x0b"),
	HX_HCSTRING("down","\x62","\xf8","\x6d","\x42"),
	HX_HCSTRING("started","\x41","\x29","\x1b","\x35"),
	HX_HCSTRING("released","\xbd","\x88","\xe7","\x76"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("hide","\xc2","\x34","\x0e","\x45"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("downListener","\xf6","\xe6","\x73","\xa7"),
	HX_HCSTRING("upListener","\xef","\x75","\x8a","\x3d"),
	HX_HCSTRING("moveListener","\xa5","\x98","\x67","\xcc"),
	HX_HCSTRING("wheelListener","\x2f","\x84","\x1c","\xe7"),
	::String(null()) };

static void Mouse_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mouse_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Mouse_obj::buttons,"buttons");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mouse_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mouse_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Mouse_obj::buttons,"buttons");
};

#endif

hx::Class Mouse_obj::__mClass;

static ::String Mouse_obj_sStaticFields[] = {
	HX_HCSTRING("buttons","\x41","\x52","\x75","\xca"),
	::String(null())
};

void Mouse_obj::__register()
{
	hx::Object *dummy = new Mouse_obj;
	Mouse_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.system.Mouse","\x2c","\x2a","\x1c","\xe4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mouse_obj::__GetStatic;
	__mClass->mSetStaticField = &Mouse_obj::__SetStatic;
	__mClass->mMarkFunc = Mouse_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mouse_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mouse_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mouse_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mouse_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mouse_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mouse_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Mouse_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_111_boot)
HXDLIN( 111)		buttons = ::Array_obj< ::String >::fromData( _hx_array_data_e41c2a2c_19,3);
            	}
}

} // end namespace iron
} // end namespace system
