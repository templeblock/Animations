// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_system_GamepadStick
#include <iron/system/GamepadStick.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_165e9357efd40209_397_new,"iron.system.GamepadStick","new",0x0967d0ba,"iron.system.GamepadStick.new","iron/system/Input.hx",397,0x32439d6d)
namespace iron{
namespace _hx_system{

void GamepadStick_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_165e9357efd40209_397_new)
HXLINE( 404)		this->movementY = ((Float)0.0);
HXLINE( 403)		this->movementX = ((Float)0.0);
HXLINE( 402)		this->moved = false;
HXLINE( 401)		this->lastY = ((Float)0.0);
HXLINE( 400)		this->lastX = ((Float)0.0);
HXLINE( 399)		this->y = ((Float)0.0);
HXLINE( 398)		this->x = ((Float)0.0);
            	}

Dynamic GamepadStick_obj::__CreateEmpty() { return new GamepadStick_obj; }

void *GamepadStick_obj::_hx_vtable = 0;

Dynamic GamepadStick_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GamepadStick_obj > _hx_result = new GamepadStick_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GamepadStick_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x36148d06;
}


GamepadStick_obj::GamepadStick_obj()
{
}

hx::Val GamepadStick_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastX") ) { return hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return hx::Val( lastY ); }
		if (HX_FIELD_EQ(inName,"moved") ) { return hx::Val( moved ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"movementX") ) { return hx::Val( movementX ); }
		if (HX_FIELD_EQ(inName,"movementY") ) { return hx::Val( movementY ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GamepadStick_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moved") ) { moved=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"movementX") ) { movementX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movementY") ) { movementY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GamepadStick_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f"));
	outFields->push(HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f"));
	outFields->push(HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c"));
	outFields->push(HX_HCSTRING("movementX","\x49","\x04","\x5d","\x30"));
	outFields->push(HX_HCSTRING("movementY","\x4a","\x04","\x5d","\x30"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GamepadStick_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,lastX),HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f")},
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,lastY),HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f")},
	{hx::fsBool,(int)offsetof(GamepadStick_obj,moved),HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c")},
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,movementX),HX_HCSTRING("movementX","\x49","\x04","\x5d","\x30")},
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,movementY),HX_HCSTRING("movementY","\x4a","\x04","\x5d","\x30")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GamepadStick_obj_sStaticStorageInfo = 0;
#endif

static ::String GamepadStick_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f"),
	HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f"),
	HX_HCSTRING("moved","\x33","\xcc","\x65","\x0c"),
	HX_HCSTRING("movementX","\x49","\x04","\x5d","\x30"),
	HX_HCSTRING("movementY","\x4a","\x04","\x5d","\x30"),
	::String(null()) };

static void GamepadStick_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GamepadStick_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GamepadStick_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GamepadStick_obj::__mClass,"__mClass");
};

#endif

hx::Class GamepadStick_obj::__mClass;

void GamepadStick_obj::__register()
{
	hx::Object *dummy = new GamepadStick_obj;
	GamepadStick_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.system.GamepadStick","\xc8","\xab","\x56","\x5a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GamepadStick_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GamepadStick_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GamepadStick_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GamepadStick_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GamepadStick_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GamepadStick_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace system
