// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_iron_system_Gamepad
#include <iron/system/Gamepad.h>
#endif
#ifndef INCLUDED_iron_system_GamepadStick
#include <iron/system/GamepadStick.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif
#ifndef INCLUDED_kha_input_Gamepad
#include <kha/input/Gamepad.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_09ad216b88f97698_408_new,"iron.system.Gamepad","new",0x8f89395a,"iron.system.Gamepad.new","iron/system/Input.hx",408,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_438_connect,"iron.system.Gamepad","connect",0x81b6a9e4,"iron.system.Gamepad.connect","iron/system/Input.hx",438,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_449_endFrame,"iron.system.Gamepad","endFrame",0x47ead718,"iron.system.Gamepad.endFrame","iron/system/Input.hx",449,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_465_reset,"iron.system.Gamepad","reset",0xbce56549,"iron.system.Gamepad.reset","iron/system/Input.hx",465,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_478_buttonIndex,"iron.system.Gamepad","buttonIndex",0x6a5d4eba,"iron.system.Gamepad.buttonIndex","iron/system/Input.hx",478,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_484_down,"iron.system.Gamepad","down",0x01f46a28,"iron.system.Gamepad.down","iron/system/Input.hx",484,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_488_started,"iron.system.Gamepad","started",0xa151973b,"iron.system.Gamepad.started","iron/system/Input.hx",488,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_492_released,"iron.system.Gamepad","released",0xba515583,"iron.system.Gamepad.released","iron/system/Input.hx",492,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_495_axisListener,"iron.system.Gamepad","axisListener",0x704289fb,"iron.system.Gamepad.axisListener","iron/system/Input.hx",495,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_515_buttonListener,"iron.system.Gamepad","buttonListener",0x292705cc,"iron.system.Gamepad.buttonListener","iron/system/Input.hx",515,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_475_keyCode,"iron.system.Gamepad","keyCode",0x07d49066,"iron.system.Gamepad.keyCode","iron/system/Input.hx",475,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_410_boot,"iron.system.Gamepad","boot",0x00a1f5f8,"iron.system.Gamepad.boot","iron/system/Input.hx",410,0x32439d6d)
static const ::String _hx_array_data_0c2f4468_16[] = {
	HX_("cross",80,5f,5a,4c),HX_("circle",10,72,0d,56),HX_("square",9d,00,f2,58),HX_("triangle",c8,be,c5,8d),HX_("l1",45,5e,00,00),HX_("r1",7f,63,00,00),HX_("l2",46,5e,00,00),HX_("r2",80,63,00,00),HX_("share",df,e4,1c,7c),HX_("options",5e,33,fe,df),HX_("l3",47,5e,00,00),HX_("r3",81,63,00,00),HX_("up",5b,66,00,00),HX_("down",62,f8,6d,42),HX_("left",07,08,b0,47),HX_("right",dc,0b,64,e9),HX_("home",1f,ca,12,45),HX_("touchpad",f4,5a,2a,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_411_boot,"iron.system.Gamepad","boot",0x00a1f5f8,"iron.system.Gamepad.boot","iron/system/Input.hx",411,0x32439d6d)
static const ::String _hx_array_data_0c2f4468_18[] = {
	HX_("a",61,00,00,00),HX_("b",62,00,00,00),HX_("x",78,00,00,00),HX_("y",79,00,00,00),HX_("l1",45,5e,00,00),HX_("r1",7f,63,00,00),HX_("l2",46,5e,00,00),HX_("r2",80,63,00,00),HX_("share",df,e4,1c,7c),HX_("options",5e,33,fe,df),HX_("l3",47,5e,00,00),HX_("r3",81,63,00,00),HX_("up",5b,66,00,00),HX_("down",62,f8,6d,42),HX_("left",07,08,b0,47),HX_("right",dc,0b,64,e9),HX_("home",1f,ca,12,45),HX_("touchpad",f4,5a,2a,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_09ad216b88f97698_412_boot,"iron.system.Gamepad","boot",0x00a1f5f8,"iron.system.Gamepad.boot","iron/system/Input.hx",412,0x32439d6d)
namespace iron{
namespace _hx_system{

void Gamepad_obj::__construct(int i,hx::Null< bool >  __o__hx_virtual){
bool _hx_virtual = __o__hx_virtual.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_09ad216b88f97698_408_new)
HXLINE( 437)		this->connects = (int)0;
HXLINE( 424)		this->num = (int)0;
HXLINE( 423)		this->connected = false;
HXLINE( 421)		this->rightStick =  ::iron::_hx_system::GamepadStick_obj::__alloc( HX_CTX );
HXLINE( 420)		this->leftStick =  ::iron::_hx_system::GamepadStick_obj::__alloc( HX_CTX );
HXLINE( 418)		this->buttonsFrame = ::Array_obj< int >::__new(0);
HXLINE( 416)		this->buttonsReleased = ::Array_obj< bool >::__new(0);
HXLINE( 415)		this->buttonsStarted = ::Array_obj< bool >::__new(0);
HXLINE( 414)		this->buttonsDown = ::Array_obj< Float >::__new(0);
HXLINE( 426)		super::__construct();
HXLINE( 427)		{
HXLINE( 427)			int _g = (int)0;
HXDLIN( 427)			::Array< ::String > _g1 = ::iron::_hx_system::Gamepad_obj::buttons;
HXDLIN( 427)			while((_g < _g1->length)){
HXLINE( 427)				::String s = _g1->__get(_g);
HXDLIN( 427)				_g = (_g + (int)1);
HXLINE( 428)				this->buttonsDown->push(((Float)0.0));
HXLINE( 429)				this->buttonsStarted->push(false);
HXLINE( 430)				this->buttonsReleased->push(false);
            			}
            		}
HXLINE( 432)		this->num = i;
HXLINE( 433)		this->reset();
HXLINE( 434)		if (_hx_virtual) {
HXLINE( 434)			this->connected = true;
            		}
            		else {
HXLINE( 434)			this->connect();
            		}
            	}

Dynamic Gamepad_obj::__CreateEmpty() { return new Gamepad_obj; }

void *Gamepad_obj::_hx_vtable = 0;

Dynamic Gamepad_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Gamepad_obj > _hx_result = new Gamepad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Gamepad_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x15b014de) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x15b014de;
	} else {
		return inClassId==(int)0x6a0df906;
	}
}

void Gamepad_obj::connect(){
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_438_connect)
HXLINE( 439)		 ::kha::input::Gamepad gamepad = ::kha::input::Gamepad_obj::get(this->num);
HXLINE( 440)		if (hx::IsNull( gamepad )) {
HXLINE( 443)			return;
            		}
HXLINE( 445)		this->connected = true;
HXLINE( 446)		gamepad->notify(this->axisListener_dyn(),this->buttonListener_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Gamepad_obj,connect,(void))

void Gamepad_obj::endFrame(){
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_449_endFrame)
HXLINE( 450)		if ((this->buttonsFrame->length > (int)0)) {
HXLINE( 451)			{
HXLINE( 451)				int _g = (int)0;
HXDLIN( 451)				::Array< int > _g1 = this->buttonsFrame;
HXDLIN( 451)				while((_g < _g1->length)){
HXLINE( 451)					int i = _g1->__get(_g);
HXDLIN( 451)					_g = (_g + (int)1);
HXLINE( 452)					this->buttonsStarted[i] = false;
HXLINE( 453)					this->buttonsReleased[i] = false;
            				}
            			}
HXLINE( 455)			this->buttonsFrame->removeRange((int)0,this->buttonsFrame->length);
            		}
HXLINE( 457)		this->leftStick->moved = false;
HXLINE( 458)		this->leftStick->movementX = (int)0;
HXLINE( 459)		this->leftStick->movementY = (int)0;
HXLINE( 460)		this->rightStick->moved = false;
HXLINE( 461)		this->rightStick->movementX = (int)0;
HXLINE( 462)		this->rightStick->movementY = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Gamepad_obj,endFrame,(void))

void Gamepad_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_465_reset)
HXLINE( 466)		{
HXLINE( 466)			int _g1 = (int)0;
HXDLIN( 466)			int _g = this->buttonsDown->length;
HXDLIN( 466)			while((_g1 < _g)){
HXLINE( 466)				_g1 = (_g1 + (int)1);
HXDLIN( 466)				int i = (_g1 - (int)1);
HXLINE( 467)				this->buttonsDown[i] = ((Float)0.0);
HXLINE( 468)				this->buttonsStarted[i] = false;
HXLINE( 469)				this->buttonsReleased[i] = false;
            			}
            		}
HXLINE( 471)		this->endFrame();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Gamepad_obj,reset,(void))

int Gamepad_obj::buttonIndex(::String button){
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_478_buttonIndex)
HXLINE( 479)		{
HXLINE( 479)			int _g1 = (int)0;
HXDLIN( 479)			int _g = ::iron::_hx_system::Gamepad_obj::buttons->length;
HXDLIN( 479)			while((_g1 < _g)){
HXLINE( 479)				_g1 = (_g1 + (int)1);
HXDLIN( 479)				int i = (_g1 - (int)1);
HXDLIN( 479)				if ((::iron::_hx_system::Gamepad_obj::buttons->__get(i) == button)) {
HXLINE( 479)					return i;
            				}
            			}
            		}
HXLINE( 480)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Gamepad_obj,buttonIndex,return )

Float Gamepad_obj::down(::String button){
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_484_down)
HXDLIN( 484)		::Array< Float > _hx_tmp = this->buttonsDown;
HXDLIN( 484)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Gamepad_obj,down,return )

bool Gamepad_obj::started(::String button){
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_488_started)
HXDLIN( 488)		::Array< bool > _hx_tmp = this->buttonsStarted;
HXDLIN( 488)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Gamepad_obj,started,return )

bool Gamepad_obj::released(::String button){
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_492_released)
HXDLIN( 492)		::Array< bool > _hx_tmp = this->buttonsReleased;
HXDLIN( 492)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Gamepad_obj,released,return )

void Gamepad_obj::axisListener(int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_495_axisListener)
HXLINE( 496)		 ::iron::_hx_system::GamepadStick stick;
HXDLIN( 496)		if ((axis <= (int)1)) {
HXLINE( 496)			stick = this->leftStick;
            		}
            		else {
HXLINE( 496)			stick = this->rightStick;
            		}
HXLINE( 498)		bool _hx_tmp;
HXDLIN( 498)		if ((axis != (int)0)) {
HXLINE( 498)			_hx_tmp = (axis == (int)2);
            		}
            		else {
HXLINE( 498)			_hx_tmp = true;
            		}
HXDLIN( 498)		if (_hx_tmp) {
HXLINE( 499)			stick->x = value;
HXLINE( 500)			stick->movementX = (stick->x - stick->lastX);
HXLINE( 501)			stick->lastX = stick->x;
            		}
            		else {
HXLINE( 503)			bool _hx_tmp1;
HXDLIN( 503)			if ((axis != (int)1)) {
HXLINE( 503)				_hx_tmp1 = (axis == (int)3);
            			}
            			else {
HXLINE( 503)				_hx_tmp1 = true;
            			}
HXDLIN( 503)			if (_hx_tmp1) {
HXLINE( 507)				Float _hx_tmp2;
HXDLIN( 507)				if ((axis == (int)1)) {
HXLINE( 507)					_hx_tmp2 = -(value);
            				}
            				else {
HXLINE( 507)					_hx_tmp2 = value;
            				}
HXDLIN( 507)				stick->y = _hx_tmp2;
HXLINE( 509)				stick->movementY = (stick->y - stick->lastY);
HXLINE( 510)				stick->lastY = stick->y;
            			}
            		}
HXLINE( 512)		stick->moved = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Gamepad_obj,axisListener,(void))

void Gamepad_obj::buttonListener(int button,Float value){
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_515_buttonListener)
HXLINE( 516)		this->buttonsFrame->push(button);
HXLINE( 518)		this->buttonsDown[button] = value;
HXLINE( 519)		if ((value > (int)0)) {
HXLINE( 519)			this->buttonsStarted[button] = true;
            		}
            		else {
HXLINE( 520)			this->buttonsReleased[button] = true;
            		}
HXLINE( 522)		if ((value == ((Float)0.0))) {
HXLINE( 522)			this->upVirtual(::iron::_hx_system::Gamepad_obj::buttons->__get(button));
            		}
            		else {
HXLINE( 523)			if ((value == ((Float)1.0))) {
HXLINE( 523)				this->downVirtual(::iron::_hx_system::Gamepad_obj::buttons->__get(button));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Gamepad_obj,buttonListener,(void))

::Array< ::String > Gamepad_obj::buttonsPS;

::Array< ::String > Gamepad_obj::buttonsXBOX;

::Array< ::String > Gamepad_obj::buttons;

::String Gamepad_obj::keyCode(int button){
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_475_keyCode)
HXDLIN( 475)		return ::iron::_hx_system::Gamepad_obj::buttons->__get(button);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gamepad_obj,keyCode,return )


hx::ObjectPtr< Gamepad_obj > Gamepad_obj::__new(int i,hx::Null< bool >  __o__hx_virtual) {
	hx::ObjectPtr< Gamepad_obj > __this = new Gamepad_obj();
	__this->__construct(i,__o__hx_virtual);
	return __this;
}

hx::ObjectPtr< Gamepad_obj > Gamepad_obj::__alloc(hx::Ctx *_hx_ctx,int i,hx::Null< bool >  __o__hx_virtual) {
	Gamepad_obj *__this = (Gamepad_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Gamepad_obj), true, "iron.system.Gamepad"));
	*(void **)__this = Gamepad_obj::_hx_vtable;
	__this->__construct(i,__o__hx_virtual);
	return __this;
}

Gamepad_obj::Gamepad_obj()
{
}

void Gamepad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Gamepad);
	HX_MARK_MEMBER_NAME(buttonsDown,"buttonsDown");
	HX_MARK_MEMBER_NAME(buttonsStarted,"buttonsStarted");
	HX_MARK_MEMBER_NAME(buttonsReleased,"buttonsReleased");
	HX_MARK_MEMBER_NAME(buttonsFrame,"buttonsFrame");
	HX_MARK_MEMBER_NAME(leftStick,"leftStick");
	HX_MARK_MEMBER_NAME(rightStick,"rightStick");
	HX_MARK_MEMBER_NAME(connected,"connected");
	HX_MARK_MEMBER_NAME(num,"num");
	HX_MARK_MEMBER_NAME(connects,"connects");
	 ::iron::_hx_system::VirtualInput_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Gamepad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buttonsDown,"buttonsDown");
	HX_VISIT_MEMBER_NAME(buttonsStarted,"buttonsStarted");
	HX_VISIT_MEMBER_NAME(buttonsReleased,"buttonsReleased");
	HX_VISIT_MEMBER_NAME(buttonsFrame,"buttonsFrame");
	HX_VISIT_MEMBER_NAME(leftStick,"leftStick");
	HX_VISIT_MEMBER_NAME(rightStick,"rightStick");
	HX_VISIT_MEMBER_NAME(connected,"connected");
	HX_VISIT_MEMBER_NAME(num,"num");
	HX_VISIT_MEMBER_NAME(connects,"connects");
	 ::iron::_hx_system::VirtualInput_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Gamepad_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { return hx::Val( num ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return hx::Val( down_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"connect") ) { return hx::Val( connect_dyn() ); }
		if (HX_FIELD_EQ(inName,"started") ) { return hx::Val( started_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"connects") ) { return hx::Val( connects ); }
		if (HX_FIELD_EQ(inName,"endFrame") ) { return hx::Val( endFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"released") ) { return hx::Val( released_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"leftStick") ) { return hx::Val( leftStick ); }
		if (HX_FIELD_EQ(inName,"connected") ) { return hx::Val( connected ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightStick") ) { return hx::Val( rightStick ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonsDown") ) { return hx::Val( buttonsDown ); }
		if (HX_FIELD_EQ(inName,"buttonIndex") ) { return hx::Val( buttonIndex_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"buttonsFrame") ) { return hx::Val( buttonsFrame ); }
		if (HX_FIELD_EQ(inName,"axisListener") ) { return hx::Val( axisListener_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buttonsStarted") ) { return hx::Val( buttonsStarted ); }
		if (HX_FIELD_EQ(inName,"buttonListener") ) { return hx::Val( buttonListener_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonsReleased") ) { return hx::Val( buttonsReleased ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Gamepad_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"buttons") ) { outValue = ( buttons ); return true; }
		if (HX_FIELD_EQ(inName,"keyCode") ) { outValue = keyCode_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"buttonsPS") ) { outValue = ( buttonsPS ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonsXBOX") ) { outValue = ( buttonsXBOX ); return true; }
	}
	return false;
}

hx::Val Gamepad_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { num=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"connects") ) { connects=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"leftStick") ) { leftStick=inValue.Cast<  ::iron::_hx_system::GamepadStick >(); return inValue; }
		if (HX_FIELD_EQ(inName,"connected") ) { connected=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightStick") ) { rightStick=inValue.Cast<  ::iron::_hx_system::GamepadStick >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonsDown") ) { buttonsDown=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"buttonsFrame") ) { buttonsFrame=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buttonsStarted") ) { buttonsStarted=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonsReleased") ) { buttonsReleased=inValue.Cast< ::Array< bool > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Gamepad_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"buttonsPS") ) { buttonsPS=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonsXBOX") ) { buttonsXBOX=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void Gamepad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buttonsDown","\x43","\x2b","\xd9","\x1e"));
	outFields->push(HX_HCSTRING("buttonsStarted","\x00","\x39","\xf4","\x4e"));
	outFields->push(HX_HCSTRING("buttonsReleased","\x1e","\x40","\xfc","\xfa"));
	outFields->push(HX_HCSTRING("buttonsFrame","\x2c","\xca","\xe4","\x07"));
	outFields->push(HX_HCSTRING("leftStick","\xc9","\x67","\xf1","\x98"));
	outFields->push(HX_HCSTRING("rightStick","\xd4","\x5f","\xd6","\x86"));
	outFields->push(HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"));
	outFields->push(HX_HCSTRING("num","\x46","\xde","\x53","\x00"));
	outFields->push(HX_HCSTRING("connects","\x49","\x31","\xb4","\xba"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Gamepad_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(Gamepad_obj,buttonsDown),HX_HCSTRING("buttonsDown","\x43","\x2b","\xd9","\x1e")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Gamepad_obj,buttonsStarted),HX_HCSTRING("buttonsStarted","\x00","\x39","\xf4","\x4e")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Gamepad_obj,buttonsReleased),HX_HCSTRING("buttonsReleased","\x1e","\x40","\xfc","\xfa")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Gamepad_obj,buttonsFrame),HX_HCSTRING("buttonsFrame","\x2c","\xca","\xe4","\x07")},
	{hx::fsObject /*::iron::_hx_system::GamepadStick*/ ,(int)offsetof(Gamepad_obj,leftStick),HX_HCSTRING("leftStick","\xc9","\x67","\xf1","\x98")},
	{hx::fsObject /*::iron::_hx_system::GamepadStick*/ ,(int)offsetof(Gamepad_obj,rightStick),HX_HCSTRING("rightStick","\xd4","\x5f","\xd6","\x86")},
	{hx::fsBool,(int)offsetof(Gamepad_obj,connected),HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2")},
	{hx::fsInt,(int)offsetof(Gamepad_obj,num),HX_HCSTRING("num","\x46","\xde","\x53","\x00")},
	{hx::fsInt,(int)offsetof(Gamepad_obj,connects),HX_HCSTRING("connects","\x49","\x31","\xb4","\xba")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Gamepad_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Gamepad_obj::buttonsPS,HX_HCSTRING("buttonsPS","\x84","\x6a","\x1f","\x50")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Gamepad_obj::buttonsXBOX,HX_HCSTRING("buttonsXBOX","\x54","\x27","\xef","\x2b")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Gamepad_obj::buttons,HX_HCSTRING("buttons","\x41","\x52","\x75","\xca")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Gamepad_obj_sMemberFields[] = {
	HX_HCSTRING("buttonsDown","\x43","\x2b","\xd9","\x1e"),
	HX_HCSTRING("buttonsStarted","\x00","\x39","\xf4","\x4e"),
	HX_HCSTRING("buttonsReleased","\x1e","\x40","\xfc","\xfa"),
	HX_HCSTRING("buttonsFrame","\x2c","\xca","\xe4","\x07"),
	HX_HCSTRING("leftStick","\xc9","\x67","\xf1","\x98"),
	HX_HCSTRING("rightStick","\xd4","\x5f","\xd6","\x86"),
	HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"),
	HX_HCSTRING("num","\x46","\xde","\x53","\x00"),
	HX_HCSTRING("connects","\x49","\x31","\xb4","\xba"),
	HX_HCSTRING("connect","\xea","\x3b","\x80","\x15"),
	HX_HCSTRING("endFrame","\x52","\x0a","\x81","\x04"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("buttonIndex","\xc0","\x5b","\xbf","\x0b"),
	HX_HCSTRING("down","\x62","\xf8","\x6d","\x42"),
	HX_HCSTRING("started","\x41","\x29","\x1b","\x35"),
	HX_HCSTRING("released","\xbd","\x88","\xe7","\x76"),
	HX_HCSTRING("axisListener","\x35","\xe2","\xab","\x04"),
	HX_HCSTRING("buttonListener","\x86","\x60","\xc2","\xac"),
	::String(null()) };

static void Gamepad_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Gamepad_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Gamepad_obj::buttonsPS,"buttonsPS");
	HX_MARK_MEMBER_NAME(Gamepad_obj::buttonsXBOX,"buttonsXBOX");
	HX_MARK_MEMBER_NAME(Gamepad_obj::buttons,"buttons");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Gamepad_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Gamepad_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Gamepad_obj::buttonsPS,"buttonsPS");
	HX_VISIT_MEMBER_NAME(Gamepad_obj::buttonsXBOX,"buttonsXBOX");
	HX_VISIT_MEMBER_NAME(Gamepad_obj::buttons,"buttons");
};

#endif

hx::Class Gamepad_obj::__mClass;

static ::String Gamepad_obj_sStaticFields[] = {
	HX_HCSTRING("buttonsPS","\x84","\x6a","\x1f","\x50"),
	HX_HCSTRING("buttonsXBOX","\x54","\x27","\xef","\x2b"),
	HX_HCSTRING("buttons","\x41","\x52","\x75","\xca"),
	HX_HCSTRING("keyCode","\x6c","\x22","\x9e","\x9b"),
	::String(null())
};

void Gamepad_obj::__register()
{
	hx::Object *dummy = new Gamepad_obj;
	Gamepad_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.system.Gamepad","\x68","\x44","\x2f","\x0c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Gamepad_obj::__GetStatic;
	__mClass->mSetStaticField = &Gamepad_obj::__SetStatic;
	__mClass->mMarkFunc = Gamepad_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Gamepad_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Gamepad_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Gamepad_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Gamepad_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Gamepad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Gamepad_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Gamepad_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_410_boot)
HXDLIN( 410)		buttonsPS = ::Array_obj< ::String >::fromData( _hx_array_data_0c2f4468_16,18);
            	}
{
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_411_boot)
HXDLIN( 411)		buttonsXBOX = ::Array_obj< ::String >::fromData( _hx_array_data_0c2f4468_18,18);
            	}
{
            	HX_STACKFRAME(&_hx_pos_09ad216b88f97698_412_boot)
HXDLIN( 412)		buttons = ::iron::_hx_system::Gamepad_obj::buttonsPS;
            	}
}

} // end namespace iron
} // end namespace system
