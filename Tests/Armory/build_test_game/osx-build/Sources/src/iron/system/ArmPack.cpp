// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_iron_system_ArmPack
#include <iron/system/ArmPack.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <kha/arrays/Uint32ArrayPrivate.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8880df845f9d3ccd_30_decode,"iron.system.ArmPack","decode",0x59a8cc40,"iron.system.ArmPack.decode","iron/system/ArmPack.hx",30,0x88f0b342)
HX_LOCAL_STACK_FRAME(_hx_pos_8880df845f9d3ccd_36_read,"iron.system.ArmPack","read",0x875e71e8,"iron.system.ArmPack.read","iron/system/ArmPack.hx",36,0x88f0b342)
HX_LOCAL_STACK_FRAME(_hx_pos_8880df845f9d3ccd_98_readArray,"iron.system.ArmPack","readArray",0xd3308291,"iron.system.ArmPack.readArray","iron/system/ArmPack.hx",98,0x88f0b342)
HX_LOCAL_STACK_FRAME(_hx_pos_8880df845f9d3ccd_124_readMap,"iron.system.ArmPack","readMap",0x32127194,"iron.system.ArmPack.readMap","iron/system/ArmPack.hx",124,0x88f0b342)
namespace iron{
namespace _hx_system{

void ArmPack_obj::__construct() { }

Dynamic ArmPack_obj::__CreateEmpty() { return new ArmPack_obj; }

void *ArmPack_obj::_hx_vtable = 0;

Dynamic ArmPack_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArmPack_obj > _hx_result = new ArmPack_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ArmPack_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2eb177ba;
}

 ::Dynamic ArmPack_obj::decode( ::haxe::io::Bytes b){
            	HX_GC_STACKFRAME(&_hx_pos_8880df845f9d3ccd_30_decode)
HXLINE(  31)		 ::haxe::io::BytesInput i =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,b,null(),null());
HXLINE(  32)		i->set_bigEndian(true);
HXLINE(  33)		return ::iron::_hx_system::ArmPack_obj::read(i);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArmPack_obj,decode,return )

 ::Dynamic ArmPack_obj::read( ::haxe::io::BytesInput i){
            	HX_STACKFRAME(&_hx_pos_8880df845f9d3ccd_36_read)
HXLINE(  37)		try {
            			HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE(  38)			int b = i->readByte();
HXLINE(  39)			switch((int)(b)){
            				case (int)192: {
HXLINE(  41)					return null();
            				}
            				break;
            				case (int)194: {
HXLINE(  44)					return false;
            				}
            				break;
            				case (int)195: {
HXLINE(  45)					return true;
            				}
            				break;
            				case (int)196: {
HXLINE(  48)					return i->read(i->readByte());
            				}
            				break;
            				case (int)197: {
HXLINE(  49)					return i->read(i->readUInt16());
            				}
            				break;
            				case (int)198: {
HXLINE(  50)					return i->read(i->readInt32());
            				}
            				break;
            				case (int)202: {
HXLINE(  53)					return i->readFloat();
            				}
            				break;
            				case (int)204: {
HXLINE(  57)					return i->readByte();
            				}
            				break;
            				case (int)205: {
HXLINE(  58)					return i->readUInt16();
            				}
            				break;
            				case (int)206: {
HXLINE(  59)					return i->readInt32();
            				}
            				break;
            				case (int)208: {
HXLINE(  63)					return i->readInt8();
            				}
            				break;
            				case (int)209: {
HXLINE(  64)					return i->readInt16();
            				}
            				break;
            				case (int)210: {
HXLINE(  65)					return i->readInt32();
            				}
            				break;
            				case (int)217: {
HXLINE(  73)					return i->readString(i->readByte());
            				}
            				break;
            				case (int)218: {
HXLINE(  74)					return i->readString(i->readUInt16());
            				}
            				break;
            				case (int)219: {
HXLINE(  75)					return i->readString(i->readInt32());
            				}
            				break;
            				case (int)220: {
HXLINE(  78)					return ::iron::_hx_system::ArmPack_obj::readArray(i,i->readUInt16());
            				}
            				break;
            				case (int)221: {
HXLINE(  79)					return ::iron::_hx_system::ArmPack_obj::readArray(i,i->readInt32());
            				}
            				break;
            				case (int)222: {
HXLINE(  82)					return ::iron::_hx_system::ArmPack_obj::readMap(i,i->readUInt16());
            				}
            				break;
            				case (int)223: {
HXLINE(  83)					return ::iron::_hx_system::ArmPack_obj::readMap(i,i->readInt32());
            				}
            				break;
            				default:{
HXLINE(  86)					if ((b < (int)128)) {
HXLINE(  86)						return b;
            					}
            					else {
HXLINE(  87)						if ((b < (int)144)) {
HXLINE(  87)							return ::iron::_hx_system::ArmPack_obj::readMap(i,((int)(int)15 & (int)b));
            						}
            						else {
HXLINE(  88)							if ((b < (int)160)) {
HXLINE(  88)								return ::iron::_hx_system::ArmPack_obj::readArray(i,((int)(int)15 & (int)b));
            							}
            							else {
HXLINE(  89)								if ((b < (int)192)) {
HXLINE(  89)									return i->readString(((int)(int)31 & (int)b));
            								}
            								else {
HXLINE(  90)									if ((b > (int)223)) {
HXLINE(  90)										return ((int)(int)-256 | (int)b);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::io::Eof e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  95)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArmPack_obj,read,return )

 ::Dynamic ArmPack_obj::readArray( ::haxe::io::BytesInput i,int length){
            	HX_GC_STACKFRAME(&_hx_pos_8880df845f9d3ccd_98_readArray)
HXLINE(  99)		int b = i->readByte();
HXLINE( 100)		{
HXLINE( 100)			 ::haxe::io::BytesInput _g = i;
HXDLIN( 100)			int _g1 = _g->pos;
HXDLIN( 100)			_g->set_position((_g1 - (int)1));
            		}
HXLINE( 103)		if ((b == (int)202)) {
HXLINE( 104)			{
HXLINE( 104)				 ::haxe::io::BytesInput _g2 = i;
HXDLIN( 104)				int _g11 = _g2->pos;
HXDLIN( 104)				_g2->set_position((_g11 + (int)1));
            			}
HXLINE( 105)			 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,length);
HXDLIN( 105)			 ::kha::arrays::Float32ArrayPrivate a = this1;
HXLINE( 106)			{
HXLINE( 106)				int _g12 = (int)0;
HXDLIN( 106)				int _g3 = length;
HXDLIN( 106)				while((_g12 < _g3)){
HXLINE( 106)					_g12 = (_g12 + (int)1);
HXDLIN( 106)					int x = (_g12 - (int)1);
HXDLIN( 106)					{
HXLINE( 106)						float value = i->readFloat();
HXDLIN( 106)						a->self.set(x,value);
            					}
            				}
            			}
HXLINE( 107)			return a;
            		}
            		else {
HXLINE( 110)			if ((b == (int)210)) {
HXLINE( 111)				{
HXLINE( 111)					 ::haxe::io::BytesInput _g4 = i;
HXDLIN( 111)					int _g13 = _g4->pos;
HXDLIN( 111)					_g4->set_position((_g13 + (int)1));
            				}
HXLINE( 112)				 ::kha::arrays::Uint32ArrayPrivate this2 =  ::kha::arrays::Uint32ArrayPrivate_obj::__alloc( HX_CTX ,length);
HXDLIN( 112)				 ::kha::arrays::Uint32ArrayPrivate a1 = this2;
HXLINE( 113)				{
HXLINE( 113)					int _g14 = (int)0;
HXDLIN( 113)					int _g5 = length;
HXDLIN( 113)					while((_g14 < _g5)){
HXLINE( 113)						_g14 = (_g14 + (int)1);
HXDLIN( 113)						int x1 = (_g14 - (int)1);
HXDLIN( 113)						{
HXLINE( 113)							int value1 = i->readInt32();
HXDLIN( 113)							a1->self.set(x1,value1);
            						}
            					}
            				}
HXLINE( 114)				return a1;
            			}
            			else {
HXLINE( 118)				::cpp::VirtualArray a2 = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 119)				{
HXLINE( 119)					int _g15 = (int)0;
HXDLIN( 119)					int _g6 = length;
HXDLIN( 119)					while((_g15 < _g6)){
HXLINE( 119)						_g15 = (_g15 + (int)1);
HXDLIN( 119)						int x2 = (_g15 - (int)1);
HXDLIN( 119)						a2->push(::iron::_hx_system::ArmPack_obj::read(i));
            					}
            				}
HXLINE( 120)				return a2;
            			}
            		}
HXLINE( 103)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ArmPack_obj,readArray,return )

 ::Dynamic ArmPack_obj::readMap( ::haxe::io::BytesInput i,int length){
            	HX_STACKFRAME(&_hx_pos_8880df845f9d3ccd_124_readMap)
HXLINE( 125)		 ::Dynamic out =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 126)		{
HXLINE( 126)			int _g1 = (int)0;
HXDLIN( 126)			int _g = length;
HXDLIN( 126)			while((_g1 < _g)){
HXLINE( 126)				_g1 = (_g1 + (int)1);
HXDLIN( 126)				int n = (_g1 - (int)1);
HXLINE( 127)				 ::Dynamic k = ::iron::_hx_system::ArmPack_obj::read(i);
HXLINE( 128)				 ::Dynamic v = ::iron::_hx_system::ArmPack_obj::read(i);
HXLINE( 129)				::Reflect_obj::setField(out,::Std_obj::string(k),v);
            			}
            		}
HXLINE( 131)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ArmPack_obj,readMap,return )


ArmPack_obj::ArmPack_obj()
{
}

bool ArmPack_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"decode") ) { outValue = decode_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readMap") ) { outValue = readMap_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readArray") ) { outValue = readArray_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ArmPack_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ArmPack_obj_sStaticStorageInfo = 0;
#endif

static void ArmPack_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArmPack_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArmPack_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArmPack_obj::__mClass,"__mClass");
};

#endif

hx::Class ArmPack_obj::__mClass;

static ::String ArmPack_obj_sStaticFields[] = {
	HX_HCSTRING("decode","\x2e","\x5d","\xed","\x64"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("readArray","\x63","\xba","\x76","\xf6"),
	HX_HCSTRING("readMap","\xe6","\xb0","\xcc","\x02"),
	::String(null())
};

void ArmPack_obj::__register()
{
	hx::Object *dummy = new ArmPack_obj;
	ArmPack_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("iron.system.ArmPack","\x1c","\xc3","\xd2","\xd0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ArmPack_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArmPack_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ArmPack_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ArmPack_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArmPack_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArmPack_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArmPack_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace system
