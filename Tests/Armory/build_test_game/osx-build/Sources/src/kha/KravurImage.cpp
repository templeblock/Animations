// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_AlignedQuad
#include <kha/AlignedQuad.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_KravurImage
#include <kha/KravurImage.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha__SuperString_SuperString_Impl_
#include <kha/_SuperString/SuperString_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_bakedchar
#include <kha/graphics2/truetype/Stbtt_bakedchar.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <kha/graphics4/TextureFormat.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <kha/internal/BytesBlob.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_40_new,"kha.KravurImage","new",0x4fe7ca6a,"kha.KravurImage.new","kha/Kravur.hx",40,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_60_getTexture,"kha.KravurImage","getTexture",0x867a0a1b,"kha.KravurImage.getTexture","kha/Kravur.hx",60,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_63_getBakedQuad,"kha.KravurImage","getBakedQuad",0xeb5cfcd2,"kha.KravurImage.getBakedQuad","kha/Kravur.hx",63,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_87_getCharWidth,"kha.KravurImage","getCharWidth",0x75175090,"kha.KravurImage.getCharWidth","kha/Kravur.hx",87,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_103_getHeight,"kha.KravurImage","getHeight",0xd444aea7,"kha.KravurImage.getHeight","kha/Kravur.hx",103,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_106_stringWidth,"kha.KravurImage","stringWidth",0x6df17b7f,"kha.KravurImage.stringWidth","kha/Kravur.hx",106,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_115_charactersWidth,"kha.KravurImage","charactersWidth",0x31960606,"kha.KravurImage.charactersWidth","kha/Kravur.hx",115,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_124_getBaselinePosition,"kha.KravurImage","getBaselinePosition",0x9ad05d0e,"kha.KravurImage.getBaselinePosition","kha/Kravur.hx",124,0xdd7a3f9a)
namespace kha{

void KravurImage_obj::__construct(int size,int ascent,int descent,int lineGap,int width,int height,::Array< ::Dynamic> chars, ::kha::internal::BytesBlob pixels){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_40_new)
HXLINE(  41)		this->mySize = size;
HXLINE(  42)		this->width = width;
HXLINE(  43)		this->height = height;
HXLINE(  44)		this->chars = chars;
HXLINE(  45)		this->baseline = ascent;
HXLINE(  46)		{
HXLINE(  46)			int _g = (int)0;
HXDLIN(  46)			while((_g < chars->length)){
HXLINE(  46)				 ::kha::graphics2::truetype::Stbtt_bakedchar _hx_char = ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chars,_g)) );
HXDLIN(  46)				_g = (_g + (int)1);
HXLINE(  47)				 ::kha::graphics2::truetype::Stbtt_bakedchar char1 = _hx_char;
HXDLIN(  47)				char1->yoff = (char1->yoff + this->baseline);
            			}
            		}
HXLINE(  49)		this->texture = ::kha::Image_obj::create(width,height,::kha::graphics4::TextureFormat_obj::L8_dyn(),null());
HXLINE(  50)		 ::haxe::io::Bytes bytes = this->texture->lock(null());
HXLINE(  51)		int pos = (int)0;
HXLINE(  52)		{
HXLINE(  52)			int _g1 = (int)0;
HXDLIN(  52)			int _g2 = height;
HXDLIN(  52)			while((_g1 < _g2)){
HXLINE(  52)				_g1 = (_g1 + (int)1);
HXDLIN(  52)				int y = (_g1 - (int)1);
HXDLIN(  52)				{
HXLINE(  52)					int _g3 = (int)0;
HXDLIN(  52)					int _g21 = width;
HXDLIN(  52)					while((_g3 < _g21)){
HXLINE(  52)						_g3 = (_g3 + (int)1);
HXDLIN(  52)						int x = (_g3 - (int)1);
HXLINE(  53)						{
HXLINE(  53)							int v = pixels->readU8(pos);
HXDLIN(  53)							bytes->b[pos] = v;
            						}
HXLINE(  54)						pos = (pos + (int)1);
            					}
            				}
            			}
            		}
HXLINE(  56)		this->texture->unlock();
            	}

Dynamic KravurImage_obj::__CreateEmpty() { return new KravurImage_obj; }

void *KravurImage_obj::_hx_vtable = 0;

Dynamic KravurImage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< KravurImage_obj > _hx_result = new KravurImage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool KravurImage_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x201f2c26;
}

 ::kha::Image KravurImage_obj::getTexture(){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_60_getTexture)
HXDLIN(  60)		return this->texture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(KravurImage_obj,getTexture,return )

 ::kha::AlignedQuad KravurImage_obj::getBakedQuad( ::kha::AlignedQuad q,int char_index,Float xpos,Float ypos){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_63_getBakedQuad)
HXLINE(  64)		if ((char_index >= this->chars->length)) {
HXLINE(  64)			return null();
            		}
HXLINE(  65)		Float ipw = ((Float)((Float)1.0) / (Float)this->width);
HXLINE(  66)		Float iph = ((Float)((Float)1.0) / (Float)this->height);
HXLINE(  67)		 ::kha::graphics2::truetype::Stbtt_bakedchar b = ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(this->chars,char_index)) );
HXLINE(  68)		if (hx::IsNull( b )) {
HXLINE(  68)			return null();
            		}
HXLINE(  69)		int round_x = ::Math_obj::round((xpos + b->xoff));
HXLINE(  70)		int round_y = ::Math_obj::round((ypos + b->yoff));
HXLINE(  72)		q->x0 = round_x;
HXLINE(  73)		q->y0 = round_y;
HXLINE(  74)		q->x1 = ((round_x + b->x1) - b->x0);
HXLINE(  75)		q->y1 = ((round_y + b->y1) - b->y0);
HXLINE(  77)		q->s0 = (b->x0 * ipw);
HXLINE(  78)		q->t0 = (b->y0 * iph);
HXLINE(  79)		q->s1 = (b->x1 * ipw);
HXLINE(  80)		q->t1 = (b->y1 * iph);
HXLINE(  82)		q->xadvance = b->xadvance;
HXLINE(  84)		return q;
            	}


HX_DEFINE_DYNAMIC_FUNC4(KravurImage_obj,getBakedQuad,return )

Float KravurImage_obj::getCharWidth(int charIndex){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_87_getCharWidth)
HXLINE(  88)		if ((this->chars->length == (int)0)) {
HXLINE(  88)			return (int)0;
            		}
HXLINE(  89)		int offset = ::kha::KravurImage_obj::gaps->__get((int)0);
HXLINE(  90)		if ((charIndex < offset)) {
HXLINE(  90)			return ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(this->chars,(int)0)) )->xadvance;
            		}
HXLINE(  92)		{
HXLINE(  92)			int _g1 = (int)1;
HXDLIN(  92)			int _g = ::Std_obj::_hx_int(((Float)::kha::KravurImage_obj::gaps->length / (Float)(int)2));
HXDLIN(  92)			while((_g1 < _g)){
HXLINE(  92)				_g1 = (_g1 + (int)1);
HXDLIN(  92)				int i = (_g1 - (int)1);
HXLINE(  93)				::Array< int > prevEnd = ::kha::KravurImage_obj::gaps;
HXDLIN(  93)				int prevEnd1 = prevEnd->__get(((i * (int)2) - (int)1));
HXLINE(  94)				::Array< int > start = ::kha::KravurImage_obj::gaps;
HXDLIN(  94)				int start1 = start->__get((i * (int)2));
HXLINE(  95)				if ((charIndex > (start1 - (int)1))) {
HXLINE(  95)					offset = (offset + ((start1 - (int)1) - prevEnd1));
            				}
            			}
            		}
HXLINE(  98)		if (((charIndex - offset) >= this->chars->length)) {
HXLINE(  98)			return ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(this->chars,(int)0)) )->xadvance;
            		}
HXLINE(  99)		return ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(this->chars,(charIndex - offset))) )->xadvance;
            	}


HX_DEFINE_DYNAMIC_FUNC1(KravurImage_obj,getCharWidth,return )

Float KravurImage_obj::getHeight(){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_103_getHeight)
HXDLIN( 103)		return this->mySize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(KravurImage_obj,getHeight,return )

Float KravurImage_obj::stringWidth(::String string){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_106_stringWidth)
HXLINE( 107)		::String this1 = string;
HXDLIN( 107)		::String str = this1;
HXLINE( 108)		Float width = (int)0;
HXLINE( 109)		{
HXLINE( 109)			int _g1 = (int)0;
HXDLIN( 109)			int _g = ::kha::_SuperString::SuperString_Impl__obj::get_length(str);
HXDLIN( 109)			while((_g1 < _g)){
HXLINE( 109)				_g1 = (_g1 + (int)1);
HXDLIN( 109)				int c = (_g1 - (int)1);
HXLINE( 110)				width = (width + this->getCharWidth(::kha::_SuperString::SuperString_Impl__obj::charCodeAt(str,c)));
            			}
            		}
HXLINE( 112)		return width;
            	}


HX_DEFINE_DYNAMIC_FUNC1(KravurImage_obj,stringWidth,return )

Float KravurImage_obj::charactersWidth(::Array< int > characters,int start,int length){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_115_charactersWidth)
HXLINE( 116)		Float width = (int)0;
HXLINE( 117)		{
HXLINE( 117)			int _g1 = start;
HXDLIN( 117)			int _g = (start + length);
HXDLIN( 117)			while((_g1 < _g)){
HXLINE( 117)				_g1 = (_g1 + (int)1);
HXDLIN( 117)				int i = (_g1 - (int)1);
HXLINE( 118)				width = (width + this->getCharWidth(characters->__get(i)));
            			}
            		}
HXLINE( 120)		return width;
            	}


HX_DEFINE_DYNAMIC_FUNC3(KravurImage_obj,charactersWidth,return )

Float KravurImage_obj::getBaselinePosition(){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_124_getBaselinePosition)
HXDLIN( 124)		return this->baseline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(KravurImage_obj,getBaselinePosition,return )

::Array< int > KravurImage_obj::gaps;


hx::ObjectPtr< KravurImage_obj > KravurImage_obj::__new(int size,int ascent,int descent,int lineGap,int width,int height,::Array< ::Dynamic> chars, ::kha::internal::BytesBlob pixels) {
	hx::ObjectPtr< KravurImage_obj > __this = new KravurImage_obj();
	__this->__construct(size,ascent,descent,lineGap,width,height,chars,pixels);
	return __this;
}

hx::ObjectPtr< KravurImage_obj > KravurImage_obj::__alloc(hx::Ctx *_hx_ctx,int size,int ascent,int descent,int lineGap,int width,int height,::Array< ::Dynamic> chars, ::kha::internal::BytesBlob pixels) {
	KravurImage_obj *__this = (KravurImage_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(KravurImage_obj), true, "kha.KravurImage"));
	*(void **)__this = KravurImage_obj::_hx_vtable;
	__this->__construct(size,ascent,descent,lineGap,width,height,chars,pixels);
	return __this;
}

KravurImage_obj::KravurImage_obj()
{
}

void KravurImage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KravurImage);
	HX_MARK_MEMBER_NAME(mySize,"mySize");
	HX_MARK_MEMBER_NAME(chars,"chars");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(baseline,"baseline");
	HX_MARK_END_CLASS();
}

void KravurImage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mySize,"mySize");
	HX_VISIT_MEMBER_NAME(chars,"chars");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(baseline,"baseline");
}

hx::Val KravurImage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"chars") ) { return hx::Val( chars ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mySize") ) { return hx::Val( mySize ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"baseline") ) { return hx::Val( baseline ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getHeight") ) { return hx::Val( getHeight_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stringWidth") ) { return hx::Val( stringWidth_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getBakedQuad") ) { return hx::Val( getBakedQuad_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCharWidth") ) { return hx::Val( getCharWidth_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"charactersWidth") ) { return hx::Val( charactersWidth_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getBaselinePosition") ) { return hx::Val( getBaselinePosition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool KravurImage_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"gaps") ) { outValue = ( gaps ); return true; }
	}
	return false;
}

hx::Val KravurImage_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"chars") ) { chars=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mySize") ) { mySize=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::kha::Image >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"baseline") ) { baseline=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool KravurImage_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"gaps") ) { gaps=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

void KravurImage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mySize","\x4d","\x52","\x8f","\x77"));
	outFields->push(HX_HCSTRING("chars","\xdd","\x9c","\xb3","\x45"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("baseline","\x85","\xdc","\x27","\x11"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo KravurImage_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(KravurImage_obj,mySize),HX_HCSTRING("mySize","\x4d","\x52","\x8f","\x77")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(KravurImage_obj,chars),HX_HCSTRING("chars","\xdd","\x9c","\xb3","\x45")},
	{hx::fsObject /*::kha::Image*/ ,(int)offsetof(KravurImage_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsInt,(int)offsetof(KravurImage_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(KravurImage_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(int)offsetof(KravurImage_obj,baseline),HX_HCSTRING("baseline","\x85","\xdc","\x27","\x11")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo KravurImage_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< int >*/ ,(void *) &KravurImage_obj::gaps,HX_HCSTRING("gaps","\x9d","\xf6","\x5e","\x44")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String KravurImage_obj_sMemberFields[] = {
	HX_HCSTRING("mySize","\x4d","\x52","\x8f","\x77"),
	HX_HCSTRING("chars","\xdd","\x9c","\xb3","\x45"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("baseline","\x85","\xdc","\x27","\x11"),
	HX_HCSTRING("getTexture","\xe5","\x4e","\x42","\xee"),
	HX_HCSTRING("getBakedQuad","\x1c","\x88","\x57","\x09"),
	HX_HCSTRING("getCharWidth","\xda","\xdb","\x11","\x93"),
	HX_HCSTRING("getHeight","\x1d","\x91","\xa2","\x7e"),
	HX_HCSTRING("stringWidth","\x75","\x67","\x65","\xd5"),
	HX_HCSTRING("charactersWidth","\xfc","\x24","\x6e","\x9d"),
	HX_HCSTRING("getBaselinePosition","\x04","\x2f","\xa2","\x7c"),
	::String(null()) };

static void KravurImage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KravurImage_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(KravurImage_obj::gaps,"gaps");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KravurImage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KravurImage_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(KravurImage_obj::gaps,"gaps");
};

#endif

hx::Class KravurImage_obj::__mClass;

static ::String KravurImage_obj_sStaticFields[] = {
	HX_HCSTRING("gaps","\x9d","\xf6","\x5e","\x44"),
	::String(null())
};

void KravurImage_obj::__register()
{
	hx::Object *dummy = new KravurImage_obj;
	KravurImage_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.KravurImage","\x78","\x0d","\x8c","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KravurImage_obj::__GetStatic;
	__mClass->mSetStaticField = &KravurImage_obj::__SetStatic;
	__mClass->mMarkFunc = KravurImage_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(KravurImage_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(KravurImage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< KravurImage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KravurImage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KravurImage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KravurImage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
