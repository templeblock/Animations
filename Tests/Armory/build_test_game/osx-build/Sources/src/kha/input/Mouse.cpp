// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_SystemImpl
#include <kha/SystemImpl.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_network_Controller
#include <kha/network/Controller.h>
#endif
#ifndef INCLUDED_kha_network_Session
#include <kha/network/Session.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4289abc989b286ca_240_new,"kha.input.Mouse","new",0xc4b103c9,"kha.input.Mouse.new","kha/input/Mouse.hx",240,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_25_notify,"kha.input.Mouse","notify",0xc0c4ef00,"kha.input.Mouse.notify","kha/input/Mouse.hx",25,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_32_remove,"kha.input.Mouse","remove",0x9394b07b,"kha.input.Mouse.remove","kha/input/Mouse.hx",32,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_38_notifyWindowed,"kha.input.Mouse","notifyWindowed",0xdd4b736f,"kha.input.Mouse.notifyWindowed","kha/input/Mouse.hx",38,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_103_removeWindowed,"kha.input.Mouse","removeWindowed",0xf141a7ea,"kha.input.Mouse.removeWindowed","kha/input/Mouse.hx",103,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_178_lock,"kha.input.Mouse","lock",0x54e76462,"kha.input.Mouse.lock","kha/input/Mouse.hx",178,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_185_unlock,"kha.input.Mouse","unlock",0xf498b6fb,"kha.input.Mouse.unlock","kha/input/Mouse.hx",185,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_193_canLock,"kha.input.Mouse","canLock",0x01952004,"kha.input.Mouse.canLock","kha/input/Mouse.hx",193,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_200_isLocked,"kha.input.Mouse","isLocked",0x2b93708b,"kha.input.Mouse.isLocked","kha/input/Mouse.hx",200,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_208_notifyOnLockChange,"kha.input.Mouse","notifyOnLockChange",0x2e5e40da,"kha.input.Mouse.notifyOnLockChange","kha/input/Mouse.hx",208,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_215_removeFromLockChange,"kha.input.Mouse","removeFromLockChange",0x65e93ba0,"kha.input.Mouse.removeFromLockChange","kha/input/Mouse.hx",215,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_222_hideSystemCursor,"kha.input.Mouse","hideSystemCursor",0xe7b1b1fe,"kha.input.Mouse.hideSystemCursor","kha/input/Mouse.hx",222,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_229_showSystemCursor,"kha.input.Mouse","showSystemCursor",0x26c33eb9,"kha.input.Mouse.showSystemCursor","kha/input/Mouse.hx",229,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_50569d00810eaba8_97_sendLeaveEvent,"kha.input.Mouse","sendLeaveEvent",0xca684242,"kha.input.Mouse.sendLeaveEvent","kha/network/ControllerBuilder.hx",97,0x77f946ab)
HX_LOCAL_STACK_FRAME(_hx_pos_50569d00810eaba8_97_sendDownEvent,"kha.input.Mouse","sendDownEvent",0xd589f699,"kha.input.Mouse.sendDownEvent","kha/network/ControllerBuilder.hx",97,0x77f946ab)
HX_LOCAL_STACK_FRAME(_hx_pos_50569d00810eaba8_97_sendUpEvent,"kha.input.Mouse","sendUpEvent",0xe2927fc0,"kha.input.Mouse.sendUpEvent","kha/network/ControllerBuilder.hx",97,0x77f946ab)
HX_LOCAL_STACK_FRAME(_hx_pos_50569d00810eaba8_97_sendMoveEvent,"kha.input.Mouse","sendMoveEvent",0x7d3af18a,"kha.input.Mouse.sendMoveEvent","kha/network/ControllerBuilder.hx",97,0x77f946ab)
HX_LOCAL_STACK_FRAME(_hx_pos_50569d00810eaba8_97_sendWheelEvent,"kha.input.Mouse","sendWheelEvent",0x74cc101e,"kha.input.Mouse.sendWheelEvent","kha/network/ControllerBuilder.hx",97,0x77f946ab)
HX_LOCAL_STACK_FRAME(_hx_pos_50569d00810eaba8_198__receive,"kha.input.Mouse","_receive",0xdd738b5b,"kha.input.Mouse._receive","kha/network/ControllerBuilder.hx",198,0x77f946ab)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_13_get,"kha.input.Mouse","get",0xc4abb3ff,"kha.input.Mouse.get","kha/input/Mouse.hx",13,0x8b3f5089)
HX_LOCAL_STACK_FRAME(_hx_pos_4289abc989b286ca_7_boot,"kha.input.Mouse","boot",0x4e4b4ca9,"kha.input.Mouse.boot","kha/input/Mouse.hx",7,0x8b3f5089)
namespace kha{
namespace input{

void Mouse_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_240_new)
HXLINE( 241)		super::__construct();
HXLINE( 242)		::kha::input::Mouse_obj::instance = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic Mouse_obj::__CreateEmpty() { return new Mouse_obj; }

void *Mouse_obj::_hx_vtable = 0;

Dynamic Mouse_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mouse_obj > _hx_result = new Mouse_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Mouse_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0aafe25f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0aafe25f;
	} else {
		return inClassId==(int)0x473abfc6;
	}
}

void Mouse_obj::notify( ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener, ::Dynamic leaveListener){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_25_notify)
HXDLIN(  25)		this->notifyWindowed((int)0,downListener,upListener,moveListener,wheelListener,leaveListener);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Mouse_obj,notify,(void))

void Mouse_obj::remove( ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener, ::Dynamic leaveListener){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_32_remove)
HXDLIN(  32)		this->removeWindowed((int)0,downListener,upListener,moveListener,wheelListener,leaveListener);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Mouse_obj,remove,(void))

void Mouse_obj::notifyWindowed(int windowId, ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener, ::Dynamic leaveListener){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_38_notifyWindowed)
HXLINE(  39)		if (hx::IsNotNull( downListener )) {
HXLINE(  40)			if (hx::IsNull( this->windowDownListeners )) {
HXLINE(  41)				this->windowDownListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(  44)			while((this->windowDownListeners->length <= windowId)){
HXLINE(  45)				::Array< ::Dynamic> _hx_tmp = this->windowDownListeners;
HXDLIN(  45)				_hx_tmp->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  48)			this->windowDownListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(downListener);
            		}
HXLINE(  51)		if (hx::IsNotNull( upListener )) {
HXLINE(  52)			if (hx::IsNull( this->windowUpListeners )) {
HXLINE(  53)				this->windowUpListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(  56)			while((this->windowUpListeners->length <= windowId)){
HXLINE(  57)				::Array< ::Dynamic> _hx_tmp1 = this->windowUpListeners;
HXDLIN(  57)				_hx_tmp1->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  60)			this->windowUpListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(upListener);
            		}
HXLINE(  63)		if (hx::IsNotNull( moveListener )) {
HXLINE(  64)			if (hx::IsNull( this->windowMoveListeners )) {
HXLINE(  65)				this->windowMoveListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(  68)			while((this->windowMoveListeners->length <= windowId)){
HXLINE(  69)				::Array< ::Dynamic> _hx_tmp2 = this->windowMoveListeners;
HXDLIN(  69)				_hx_tmp2->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  72)			this->windowMoveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(moveListener);
            		}
HXLINE(  75)		if (hx::IsNotNull( wheelListener )) {
HXLINE(  76)			if (hx::IsNull( this->windowWheelListeners )) {
HXLINE(  77)				this->windowWheelListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(  80)			while((this->windowWheelListeners->length <= windowId)){
HXLINE(  81)				::Array< ::Dynamic> _hx_tmp3 = this->windowWheelListeners;
HXDLIN(  81)				_hx_tmp3->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  84)			this->windowWheelListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(wheelListener);
            		}
HXLINE(  87)		if (hx::IsNotNull( leaveListener )) {
HXLINE(  88)			if (hx::IsNull( this->windowLeaveListeners )) {
HXLINE(  89)				this->windowLeaveListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(  92)			while((this->windowLeaveListeners->length <= windowId)){
HXLINE(  93)				::Array< ::Dynamic> _hx_tmp4 = this->windowLeaveListeners;
HXDLIN(  93)				_hx_tmp4->push(::Array_obj< ::Dynamic>::__new());
            			}
HXLINE(  96)			this->windowLeaveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->push(leaveListener);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Mouse_obj,notifyWindowed,(void))

void Mouse_obj::removeWindowed(int windowId, ::Dynamic downListener, ::Dynamic upListener, ::Dynamic moveListener, ::Dynamic wheelListener, ::Dynamic leaveListener){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_103_removeWindowed)
HXLINE( 104)		if (hx::IsNotNull( downListener )) {
HXLINE( 105)			if (hx::IsNotNull( this->windowDownListeners )) {
HXLINE( 106)				if ((windowId < this->windowDownListeners->length)) {
HXLINE( 107)					this->windowDownListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(downListener);
            				}
            				else {
HXLINE( 110)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 110)					_hx_tmp(((HX_("no downListeners for window \"",ab,54,8f,21) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),110,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 114)				::haxe::Log_obj::trace(HX_("no downListeners were ever registered",27,5b,f0,02),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),114,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE( 118)		if (hx::IsNotNull( upListener )) {
HXLINE( 119)			if (hx::IsNotNull( this->windowUpListeners )) {
HXLINE( 120)				if ((windowId < this->windowUpListeners->length)) {
HXLINE( 121)					this->windowUpListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(upListener);
            				}
            				else {
HXLINE( 124)					 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 124)					_hx_tmp1(((HX_("no upListeners for window \"",a4,97,3e,e5) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),124,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 128)				::haxe::Log_obj::trace(HX_("no upListeners were ever registered",20,bf,80,f7),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),128,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE( 132)		if (hx::IsNotNull( moveListener )) {
HXLINE( 133)			if (hx::IsNotNull( this->windowMoveListeners )) {
HXLINE( 134)				if ((windowId < this->windowMoveListeners->length)) {
HXLINE( 135)					this->windowMoveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(moveListener);
            				}
            				else {
HXLINE( 138)					 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 138)					_hx_tmp2(((HX_("no moveListeners for window \"",9a,fa,38,bb) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),138,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 142)				::haxe::Log_obj::trace(HX_("no moveListeners were ever registered",16,08,a8,75),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),142,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE( 146)		if (hx::IsNotNull( wheelListener )) {
HXLINE( 147)			if (hx::IsNotNull( this->windowWheelListeners )) {
HXLINE( 148)				if ((windowId < this->windowWheelListeners->length)) {
HXLINE( 149)					this->windowWheelListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(wheelListener);
            				}
            				else {
HXLINE( 152)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 152)					_hx_tmp3(((HX_("no wheelListeners for window \"",c6,3b,5b,bf) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),152,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 156)				::haxe::Log_obj::trace(HX_("no wheelListeners were ever registered",42,55,f1,f8),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),156,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
HXLINE( 160)		if (hx::IsNotNull( leaveListener )) {
HXLINE( 161)			if (hx::IsNotNull( this->windowLeaveListeners )) {
HXLINE( 162)				if ((windowId < this->windowLeaveListeners->length)) {
HXLINE( 163)					this->windowLeaveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >()->remove(leaveListener);
            				}
            				else {
HXLINE( 166)					 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 166)					_hx_tmp4(((HX_("no leaveListeners for window \"",22,61,f4,74) + windowId) + HX_("\" are registered",0c,2e,32,e8)),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),166,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            				}
            			}
            			else {
HXLINE( 170)				::haxe::Log_obj::trace(HX_("no leaveListeners were ever registered",9e,36,79,22),hx::SourceInfo(HX_("Mouse.hx",d9,8d,b6,7d),170,HX_("kha.input.Mouse",57,6b,87,5e),HX_("removeWindowed",b3,04,24,48)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Mouse_obj,removeWindowed,(void))

void Mouse_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_178_lock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,lock,(void))

void Mouse_obj::unlock(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_185_unlock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,unlock,(void))

bool Mouse_obj::canLock(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_193_canLock)
HXDLIN( 193)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,canLock,return )

bool Mouse_obj::isLocked(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_200_isLocked)
HXDLIN( 200)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,isLocked,return )

void Mouse_obj::notifyOnLockChange( ::Dynamic change, ::Dynamic error){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_208_notifyOnLockChange)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,notifyOnLockChange,(void))

void Mouse_obj::removeFromLockChange( ::Dynamic change, ::Dynamic error){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_215_removeFromLockChange)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,removeFromLockChange,(void))

void Mouse_obj::hideSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_222_hideSystemCursor)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,hideSystemCursor,(void))

void Mouse_obj::showSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_229_showSystemCursor)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,showSystemCursor,(void))

void Mouse_obj::sendLeaveEvent(int windowId){
            	HX_STACKFRAME(&_hx_pos_50569d00810eaba8_97_sendLeaveEvent)
HXLINE(  98)		if (hx::IsNotNull( ::kha::network::Session_obj::the() )) {
HXLINE(  49)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((int)8);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[(int)0] = (int)0;
HXDLIN(  50)				bytes->b[(int)1] = (int)0;
HXDLIN(  50)				bytes->b[(int)2] = (int)0;
HXDLIN(  50)				bytes->b[(int)3] = (int)0;
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[(int)4] = windowId;
HXDLIN(  61)				::Array< unsigned char > bytes1 = bytes->b;
HXDLIN(  61)				bytes1[(int)5] = ((int)windowId >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes2 = bytes->b;
HXDLIN(  61)				bytes2[(int)6] = ((int)windowId >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes3 = bytes->b;
HXDLIN(  61)				bytes3[(int)7] = hx::UShr(windowId,(int)24);
            			}
HXLINE( 100)			 ::kha::network::Session _hx_tmp = ::kha::network::Session_obj::the();
HXDLIN( 100)			_hx_tmp->sendControllerUpdate(this->_id(),bytes);
            		}
HXLINE( 247)		if (hx::IsNotNull( this->windowLeaveListeners )) {
HXLINE( 248)			int _g = (int)0;
HXDLIN( 248)			::Array< ::Dynamic> _g1 = this->windowLeaveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 248)			while((_g < _g1->length)){
HXLINE( 248)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 248)				_g = (_g + (int)1);
HXLINE( 249)				listener();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,sendLeaveEvent,(void))

void Mouse_obj::sendDownEvent(int windowId,int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_50569d00810eaba8_97_sendDownEvent)
HXLINE(  98)		if (hx::IsNotNull( ::kha::network::Session_obj::the() )) {
HXLINE(  49)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((int)20);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[(int)0] = (int)1;
HXDLIN(  50)				bytes->b[(int)1] = (int)0;
HXDLIN(  50)				bytes->b[(int)2] = (int)0;
HXDLIN(  50)				bytes->b[(int)3] = (int)0;
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[(int)4] = windowId;
HXDLIN(  61)				::Array< unsigned char > bytes1 = bytes->b;
HXDLIN(  61)				bytes1[(int)5] = ((int)windowId >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes2 = bytes->b;
HXDLIN(  61)				bytes2[(int)6] = ((int)windowId >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes3 = bytes->b;
HXDLIN(  61)				bytes3[(int)7] = hx::UShr(windowId,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)8] = button;
HXDLIN(  61)				::Array< unsigned char > bytes4 = bytes->b;
HXDLIN(  61)				bytes4[(int)9] = ((int)button >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes5 = bytes->b;
HXDLIN(  61)				bytes5[(int)10] = ((int)button >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes6 = bytes->b;
HXDLIN(  61)				bytes6[(int)11] = hx::UShr(button,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)12] = x;
HXDLIN(  61)				::Array< unsigned char > bytes7 = bytes->b;
HXDLIN(  61)				bytes7[(int)13] = ((int)x >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes8 = bytes->b;
HXDLIN(  61)				bytes8[(int)14] = ((int)x >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes9 = bytes->b;
HXDLIN(  61)				bytes9[(int)15] = hx::UShr(x,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)16] = y;
HXDLIN(  61)				::Array< unsigned char > bytes10 = bytes->b;
HXDLIN(  61)				bytes10[(int)17] = ((int)y >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes11 = bytes->b;
HXDLIN(  61)				bytes11[(int)18] = ((int)y >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes12 = bytes->b;
HXDLIN(  61)				bytes12[(int)19] = hx::UShr(y,(int)24);
            			}
HXLINE( 100)			 ::kha::network::Session _hx_tmp = ::kha::network::Session_obj::the();
HXDLIN( 100)			_hx_tmp->sendControllerUpdate(this->_id(),bytes);
            		}
HXLINE( 256)		if (hx::IsNotNull( this->windowDownListeners )) {
HXLINE( 257)			int _g = (int)0;
HXDLIN( 257)			::Array< ::Dynamic> _g1 = this->windowDownListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 257)			while((_g < _g1->length)){
HXLINE( 257)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 257)				_g = (_g + (int)1);
HXLINE( 258)				listener(button,x,y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Mouse_obj,sendDownEvent,(void))

void Mouse_obj::sendUpEvent(int windowId,int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_50569d00810eaba8_97_sendUpEvent)
HXLINE(  98)		if (hx::IsNotNull( ::kha::network::Session_obj::the() )) {
HXLINE(  49)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((int)20);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[(int)0] = (int)2;
HXDLIN(  50)				bytes->b[(int)1] = (int)0;
HXDLIN(  50)				bytes->b[(int)2] = (int)0;
HXDLIN(  50)				bytes->b[(int)3] = (int)0;
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[(int)4] = windowId;
HXDLIN(  61)				::Array< unsigned char > bytes1 = bytes->b;
HXDLIN(  61)				bytes1[(int)5] = ((int)windowId >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes2 = bytes->b;
HXDLIN(  61)				bytes2[(int)6] = ((int)windowId >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes3 = bytes->b;
HXDLIN(  61)				bytes3[(int)7] = hx::UShr(windowId,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)8] = button;
HXDLIN(  61)				::Array< unsigned char > bytes4 = bytes->b;
HXDLIN(  61)				bytes4[(int)9] = ((int)button >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes5 = bytes->b;
HXDLIN(  61)				bytes5[(int)10] = ((int)button >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes6 = bytes->b;
HXDLIN(  61)				bytes6[(int)11] = hx::UShr(button,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)12] = x;
HXDLIN(  61)				::Array< unsigned char > bytes7 = bytes->b;
HXDLIN(  61)				bytes7[(int)13] = ((int)x >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes8 = bytes->b;
HXDLIN(  61)				bytes8[(int)14] = ((int)x >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes9 = bytes->b;
HXDLIN(  61)				bytes9[(int)15] = hx::UShr(x,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)16] = y;
HXDLIN(  61)				::Array< unsigned char > bytes10 = bytes->b;
HXDLIN(  61)				bytes10[(int)17] = ((int)y >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes11 = bytes->b;
HXDLIN(  61)				bytes11[(int)18] = ((int)y >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes12 = bytes->b;
HXDLIN(  61)				bytes12[(int)19] = hx::UShr(y,(int)24);
            			}
HXLINE( 100)			 ::kha::network::Session _hx_tmp = ::kha::network::Session_obj::the();
HXDLIN( 100)			_hx_tmp->sendControllerUpdate(this->_id(),bytes);
            		}
HXLINE( 265)		if (hx::IsNotNull( this->windowUpListeners )) {
HXLINE( 266)			int _g = (int)0;
HXDLIN( 266)			::Array< ::Dynamic> _g1 = this->windowUpListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 266)			while((_g < _g1->length)){
HXLINE( 266)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 266)				_g = (_g + (int)1);
HXLINE( 267)				listener(button,x,y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Mouse_obj,sendUpEvent,(void))

void Mouse_obj::sendMoveEvent(int windowId,int x,int y,int movementX,int movementY){
            	HX_STACKFRAME(&_hx_pos_50569d00810eaba8_97_sendMoveEvent)
HXLINE(  98)		if (hx::IsNotNull( ::kha::network::Session_obj::the() )) {
HXLINE(  49)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((int)24);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[(int)0] = (int)3;
HXDLIN(  50)				bytes->b[(int)1] = (int)0;
HXDLIN(  50)				bytes->b[(int)2] = (int)0;
HXDLIN(  50)				bytes->b[(int)3] = (int)0;
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[(int)4] = windowId;
HXDLIN(  61)				::Array< unsigned char > bytes1 = bytes->b;
HXDLIN(  61)				bytes1[(int)5] = ((int)windowId >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes2 = bytes->b;
HXDLIN(  61)				bytes2[(int)6] = ((int)windowId >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes3 = bytes->b;
HXDLIN(  61)				bytes3[(int)7] = hx::UShr(windowId,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)8] = x;
HXDLIN(  61)				::Array< unsigned char > bytes4 = bytes->b;
HXDLIN(  61)				bytes4[(int)9] = ((int)x >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes5 = bytes->b;
HXDLIN(  61)				bytes5[(int)10] = ((int)x >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes6 = bytes->b;
HXDLIN(  61)				bytes6[(int)11] = hx::UShr(x,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)12] = y;
HXDLIN(  61)				::Array< unsigned char > bytes7 = bytes->b;
HXDLIN(  61)				bytes7[(int)13] = ((int)y >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes8 = bytes->b;
HXDLIN(  61)				bytes8[(int)14] = ((int)y >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes9 = bytes->b;
HXDLIN(  61)				bytes9[(int)15] = hx::UShr(y,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)16] = movementX;
HXDLIN(  61)				::Array< unsigned char > bytes10 = bytes->b;
HXDLIN(  61)				bytes10[(int)17] = ((int)movementX >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes11 = bytes->b;
HXDLIN(  61)				bytes11[(int)18] = ((int)movementX >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes12 = bytes->b;
HXDLIN(  61)				bytes12[(int)19] = hx::UShr(movementX,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)20] = movementY;
HXDLIN(  61)				::Array< unsigned char > bytes13 = bytes->b;
HXDLIN(  61)				bytes13[(int)21] = ((int)movementY >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes14 = bytes->b;
HXDLIN(  61)				bytes14[(int)22] = ((int)movementY >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes15 = bytes->b;
HXDLIN(  61)				bytes15[(int)23] = hx::UShr(movementY,(int)24);
            			}
HXLINE( 100)			 ::kha::network::Session _hx_tmp = ::kha::network::Session_obj::the();
HXDLIN( 100)			_hx_tmp->sendControllerUpdate(this->_id(),bytes);
            		}
HXLINE( 274)		if (hx::IsNotNull( this->windowMoveListeners )) {
HXLINE( 275)			int _g = (int)0;
HXDLIN( 275)			::Array< ::Dynamic> _g1 = this->windowMoveListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 275)			while((_g < _g1->length)){
HXLINE( 275)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 275)				_g = (_g + (int)1);
HXLINE( 276)				listener(x,y,movementX,movementY);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Mouse_obj,sendMoveEvent,(void))

void Mouse_obj::sendWheelEvent(int windowId,int delta){
            	HX_STACKFRAME(&_hx_pos_50569d00810eaba8_97_sendWheelEvent)
HXLINE(  98)		if (hx::IsNotNull( ::kha::network::Session_obj::the() )) {
HXLINE(  49)			 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((int)12);
HXLINE(  50)			{
HXLINE(  50)				bytes->b[(int)0] = (int)4;
HXDLIN(  50)				bytes->b[(int)1] = (int)0;
HXDLIN(  50)				bytes->b[(int)2] = (int)0;
HXDLIN(  50)				bytes->b[(int)3] = (int)0;
            			}
HXLINE(  61)			{
HXLINE(  61)				bytes->b[(int)4] = windowId;
HXDLIN(  61)				::Array< unsigned char > bytes1 = bytes->b;
HXDLIN(  61)				bytes1[(int)5] = ((int)windowId >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes2 = bytes->b;
HXDLIN(  61)				bytes2[(int)6] = ((int)windowId >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes3 = bytes->b;
HXDLIN(  61)				bytes3[(int)7] = hx::UShr(windowId,(int)24);
            			}
HXDLIN(  61)			{
HXLINE(  61)				bytes->b[(int)8] = delta;
HXDLIN(  61)				::Array< unsigned char > bytes4 = bytes->b;
HXDLIN(  61)				bytes4[(int)9] = ((int)delta >> (int)(int)8);
HXDLIN(  61)				::Array< unsigned char > bytes5 = bytes->b;
HXDLIN(  61)				bytes5[(int)10] = ((int)delta >> (int)(int)16);
HXDLIN(  61)				::Array< unsigned char > bytes6 = bytes->b;
HXDLIN(  61)				bytes6[(int)11] = hx::UShr(delta,(int)24);
            			}
HXLINE( 100)			 ::kha::network::Session _hx_tmp = ::kha::network::Session_obj::the();
HXDLIN( 100)			_hx_tmp->sendControllerUpdate(this->_id(),bytes);
            		}
HXLINE( 283)		if (hx::IsNotNull( this->windowWheelListeners )) {
HXLINE( 284)			int _g = (int)0;
HXDLIN( 284)			::Array< ::Dynamic> _g1 = this->windowWheelListeners->__get(windowId).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 284)			while((_g < _g1->length)){
HXLINE( 284)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 284)				_g = (_g + (int)1);
HXLINE( 285)				listener(delta);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,sendWheelEvent,(void))

void Mouse_obj::_receive( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_50569d00810eaba8_198__receive)
HXLINE( 117)		int bytes1 = bytes->b->__get((int)0);
HXDLIN( 117)		int funcindex = ((int)bytes1 | (int)((int)bytes->b->__get((int)1) << (int)(int)8));
HXDLIN( 117)		int funcindex1 = ((int)funcindex | (int)((int)bytes->b->__get((int)2) << (int)(int)16));
HXDLIN( 117)		int funcindex2 = ((int)funcindex1 | (int)((int)bytes->b->__get((int)3) << (int)(int)24));
HXLINE( 190)		if ((funcindex2 == (int)0)) {
HXLINE( 145)			int bytes2 = bytes->b->__get((int)4);
HXDLIN( 145)			int input0 = ((int)bytes2 | (int)((int)bytes->b->__get((int)5) << (int)(int)8));
HXDLIN( 145)			int input01 = ((int)input0 | (int)((int)bytes->b->__get((int)6) << (int)(int)16));
HXDLIN( 145)			int input02 = ((int)input01 | (int)((int)bytes->b->__get((int)7) << (int)(int)24));
HXLINE( 192)			this->sendLeaveEvent(input02);
HXLINE( 193)			return;
            		}
HXLINE( 220)		if ((funcindex2 == (int)1)) {
HXLINE( 145)			int bytes3 = bytes->b->__get((int)4);
HXDLIN( 145)			int input03 = ((int)bytes3 | (int)((int)bytes->b->__get((int)5) << (int)(int)8));
HXDLIN( 145)			int input04 = ((int)input03 | (int)((int)bytes->b->__get((int)6) << (int)(int)16));
HXDLIN( 145)			int input05 = ((int)input04 | (int)((int)bytes->b->__get((int)7) << (int)(int)24));
HXDLIN( 145)			int bytes4 = bytes->b->__get((int)8);
HXDLIN( 145)			int input1 = ((int)bytes4 | (int)((int)bytes->b->__get((int)9) << (int)(int)8));
HXDLIN( 145)			int input11 = ((int)input1 | (int)((int)bytes->b->__get((int)10) << (int)(int)16));
HXDLIN( 145)			int input12 = ((int)input11 | (int)((int)bytes->b->__get((int)11) << (int)(int)24));
HXDLIN( 145)			int bytes5 = bytes->b->__get((int)12);
HXDLIN( 145)			int input2 = ((int)bytes5 | (int)((int)bytes->b->__get((int)13) << (int)(int)8));
HXDLIN( 145)			int input21 = ((int)input2 | (int)((int)bytes->b->__get((int)14) << (int)(int)16));
HXDLIN( 145)			int input22 = ((int)input21 | (int)((int)bytes->b->__get((int)15) << (int)(int)24));
HXDLIN( 145)			int bytes6 = bytes->b->__get((int)16);
HXDLIN( 145)			int input3 = ((int)bytes6 | (int)((int)bytes->b->__get((int)17) << (int)(int)8));
HXDLIN( 145)			int input31 = ((int)input3 | (int)((int)bytes->b->__get((int)18) << (int)(int)16));
HXDLIN( 145)			int input32 = ((int)input31 | (int)((int)bytes->b->__get((int)19) << (int)(int)24));
HXLINE( 222)			this->sendDownEvent(input05,input12,input22,input32);
HXLINE( 223)			return;
            		}
HXLINE( 220)		if ((funcindex2 == (int)2)) {
HXLINE( 145)			int bytes7 = bytes->b->__get((int)4);
HXDLIN( 145)			int input06 = ((int)bytes7 | (int)((int)bytes->b->__get((int)5) << (int)(int)8));
HXDLIN( 145)			int input07 = ((int)input06 | (int)((int)bytes->b->__get((int)6) << (int)(int)16));
HXDLIN( 145)			int input08 = ((int)input07 | (int)((int)bytes->b->__get((int)7) << (int)(int)24));
HXDLIN( 145)			int bytes8 = bytes->b->__get((int)8);
HXDLIN( 145)			int input13 = ((int)bytes8 | (int)((int)bytes->b->__get((int)9) << (int)(int)8));
HXDLIN( 145)			int input14 = ((int)input13 | (int)((int)bytes->b->__get((int)10) << (int)(int)16));
HXDLIN( 145)			int input15 = ((int)input14 | (int)((int)bytes->b->__get((int)11) << (int)(int)24));
HXDLIN( 145)			int bytes9 = bytes->b->__get((int)12);
HXDLIN( 145)			int input23 = ((int)bytes9 | (int)((int)bytes->b->__get((int)13) << (int)(int)8));
HXDLIN( 145)			int input24 = ((int)input23 | (int)((int)bytes->b->__get((int)14) << (int)(int)16));
HXDLIN( 145)			int input25 = ((int)input24 | (int)((int)bytes->b->__get((int)15) << (int)(int)24));
HXDLIN( 145)			int bytes10 = bytes->b->__get((int)16);
HXDLIN( 145)			int input33 = ((int)bytes10 | (int)((int)bytes->b->__get((int)17) << (int)(int)8));
HXDLIN( 145)			int input34 = ((int)input33 | (int)((int)bytes->b->__get((int)18) << (int)(int)16));
HXDLIN( 145)			int input35 = ((int)input34 | (int)((int)bytes->b->__get((int)19) << (int)(int)24));
HXLINE( 222)			this->sendUpEvent(input08,input15,input25,input35);
HXLINE( 223)			return;
            		}
HXLINE( 230)		if ((funcindex2 == (int)3)) {
HXLINE( 145)			int bytes11 = bytes->b->__get((int)4);
HXDLIN( 145)			int input09 = ((int)bytes11 | (int)((int)bytes->b->__get((int)5) << (int)(int)8));
HXDLIN( 145)			int input010 = ((int)input09 | (int)((int)bytes->b->__get((int)6) << (int)(int)16));
HXDLIN( 145)			int input011 = ((int)input010 | (int)((int)bytes->b->__get((int)7) << (int)(int)24));
HXDLIN( 145)			int bytes12 = bytes->b->__get((int)8);
HXDLIN( 145)			int input16 = ((int)bytes12 | (int)((int)bytes->b->__get((int)9) << (int)(int)8));
HXDLIN( 145)			int input17 = ((int)input16 | (int)((int)bytes->b->__get((int)10) << (int)(int)16));
HXDLIN( 145)			int input18 = ((int)input17 | (int)((int)bytes->b->__get((int)11) << (int)(int)24));
HXDLIN( 145)			int bytes13 = bytes->b->__get((int)12);
HXDLIN( 145)			int input26 = ((int)bytes13 | (int)((int)bytes->b->__get((int)13) << (int)(int)8));
HXDLIN( 145)			int input27 = ((int)input26 | (int)((int)bytes->b->__get((int)14) << (int)(int)16));
HXDLIN( 145)			int input28 = ((int)input27 | (int)((int)bytes->b->__get((int)15) << (int)(int)24));
HXDLIN( 145)			int bytes14 = bytes->b->__get((int)16);
HXDLIN( 145)			int input36 = ((int)bytes14 | (int)((int)bytes->b->__get((int)17) << (int)(int)8));
HXDLIN( 145)			int input37 = ((int)input36 | (int)((int)bytes->b->__get((int)18) << (int)(int)16));
HXDLIN( 145)			int input38 = ((int)input37 | (int)((int)bytes->b->__get((int)19) << (int)(int)24));
HXDLIN( 145)			int bytes15 = bytes->b->__get((int)20);
HXDLIN( 145)			int input4 = ((int)bytes15 | (int)((int)bytes->b->__get((int)21) << (int)(int)8));
HXDLIN( 145)			int input41 = ((int)input4 | (int)((int)bytes->b->__get((int)22) << (int)(int)16));
HXDLIN( 145)			int input42 = ((int)input41 | (int)((int)bytes->b->__get((int)23) << (int)(int)24));
HXLINE( 232)			this->sendMoveEvent(input011,input18,input28,input38,input42);
HXLINE( 233)			return;
            		}
HXLINE( 200)		if ((funcindex2 == (int)4)) {
HXLINE( 145)			int bytes16 = bytes->b->__get((int)4);
HXDLIN( 145)			int input012 = ((int)bytes16 | (int)((int)bytes->b->__get((int)5) << (int)(int)8));
HXDLIN( 145)			int input013 = ((int)input012 | (int)((int)bytes->b->__get((int)6) << (int)(int)16));
HXDLIN( 145)			int input014 = ((int)input013 | (int)((int)bytes->b->__get((int)7) << (int)(int)24));
HXDLIN( 145)			int bytes17 = bytes->b->__get((int)8);
HXDLIN( 145)			int input19 = ((int)bytes17 | (int)((int)bytes->b->__get((int)9) << (int)(int)8));
HXDLIN( 145)			int input110 = ((int)input19 | (int)((int)bytes->b->__get((int)10) << (int)(int)16));
HXDLIN( 145)			int input111 = ((int)input110 | (int)((int)bytes->b->__get((int)11) << (int)(int)24));
HXLINE( 202)			this->sendWheelEvent(input014,input111);
HXLINE( 203)			return;
            		}
            	}


 ::kha::input::Mouse Mouse_obj::get(hx::Null< int >  __o_num){
int num = __o_num.Default(0);
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_13_get)
HXDLIN(  13)		return ::kha::SystemImpl_obj::getMouse(num);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,get,return )

 ::kha::input::Mouse Mouse_obj::instance;


hx::ObjectPtr< Mouse_obj > Mouse_obj::__new() {
	hx::ObjectPtr< Mouse_obj > __this = new Mouse_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Mouse_obj > Mouse_obj::__alloc(hx::Ctx *_hx_ctx) {
	Mouse_obj *__this = (Mouse_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mouse_obj), true, "kha.input.Mouse"));
	*(void **)__this = Mouse_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Mouse_obj::Mouse_obj()
{
}

void Mouse_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mouse);
	HX_MARK_MEMBER_NAME(windowDownListeners,"windowDownListeners");
	HX_MARK_MEMBER_NAME(windowUpListeners,"windowUpListeners");
	HX_MARK_MEMBER_NAME(windowMoveListeners,"windowMoveListeners");
	HX_MARK_MEMBER_NAME(windowWheelListeners,"windowWheelListeners");
	HX_MARK_MEMBER_NAME(windowLeaveListeners,"windowLeaveListeners");
	 ::kha::network::Controller_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Mouse_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(windowDownListeners,"windowDownListeners");
	HX_VISIT_MEMBER_NAME(windowUpListeners,"windowUpListeners");
	HX_VISIT_MEMBER_NAME(windowMoveListeners,"windowMoveListeners");
	HX_VISIT_MEMBER_NAME(windowWheelListeners,"windowWheelListeners");
	HX_VISIT_MEMBER_NAME(windowLeaveListeners,"windowLeaveListeners");
	 ::kha::network::Controller_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Mouse_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"notify") ) { return hx::Val( notify_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canLock") ) { return hx::Val( canLock_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isLocked") ) { return hx::Val( isLocked_dyn() ); }
		if (HX_FIELD_EQ(inName,"_receive") ) { return hx::Val( _receive_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sendUpEvent") ) { return hx::Val( sendUpEvent_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sendDownEvent") ) { return hx::Val( sendDownEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendMoveEvent") ) { return hx::Val( sendMoveEvent_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"notifyWindowed") ) { return hx::Val( notifyWindowed_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeWindowed") ) { return hx::Val( removeWindowed_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendLeaveEvent") ) { return hx::Val( sendLeaveEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendWheelEvent") ) { return hx::Val( sendWheelEvent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hideSystemCursor") ) { return hx::Val( hideSystemCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"showSystemCursor") ) { return hx::Val( showSystemCursor_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"windowUpListeners") ) { return hx::Val( windowUpListeners ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"notifyOnLockChange") ) { return hx::Val( notifyOnLockChange_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"windowDownListeners") ) { return hx::Val( windowDownListeners ); }
		if (HX_FIELD_EQ(inName,"windowMoveListeners") ) { return hx::Val( windowMoveListeners ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"removeFromLockChange") ) { return hx::Val( removeFromLockChange_dyn() ); }
		if (HX_FIELD_EQ(inName,"windowWheelListeners") ) { return hx::Val( windowWheelListeners ); }
		if (HX_FIELD_EQ(inName,"windowLeaveListeners") ) { return hx::Val( windowLeaveListeners ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Mouse_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
	}
	return false;
}

hx::Val Mouse_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"windowUpListeners") ) { windowUpListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"windowDownListeners") ) { windowDownListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowMoveListeners") ) { windowMoveListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"windowWheelListeners") ) { windowWheelListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowLeaveListeners") ) { windowLeaveListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Mouse_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::kha::input::Mouse >(); return true; }
	}
	return false;
}

void Mouse_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("windowDownListeners","\xad","\x36","\x38","\x35"));
	outFields->push(HX_HCSTRING("windowUpListeners","\x94","\x65","\x2c","\xf0"));
	outFields->push(HX_HCSTRING("windowMoveListeners","\x1e","\xfe","\x7f","\x65"));
	outFields->push(HX_HCSTRING("windowWheelListeners","\x74","\x51","\x5a","\x54"));
	outFields->push(HX_HCSTRING("windowLeaveListeners","\x98","\x65","\x64","\x6b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Mouse_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mouse_obj,windowDownListeners),HX_HCSTRING("windowDownListeners","\xad","\x36","\x38","\x35")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mouse_obj,windowUpListeners),HX_HCSTRING("windowUpListeners","\x94","\x65","\x2c","\xf0")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mouse_obj,windowMoveListeners),HX_HCSTRING("windowMoveListeners","\x1e","\xfe","\x7f","\x65")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mouse_obj,windowWheelListeners),HX_HCSTRING("windowWheelListeners","\x74","\x51","\x5a","\x54")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mouse_obj,windowLeaveListeners),HX_HCSTRING("windowLeaveListeners","\x98","\x65","\x64","\x6b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Mouse_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::input::Mouse*/ ,(void *) &Mouse_obj::instance,HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Mouse_obj_sMemberFields[] = {
	HX_HCSTRING("notify","\xc9","\xda","\xb8","\x31"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("notifyWindowed","\x38","\xd0","\x2d","\x34"),
	HX_HCSTRING("removeWindowed","\xb3","\x04","\x24","\x48"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("canLock","\x1b","\x84","\x0f","\x66"),
	HX_HCSTRING("isLocked","\x94","\xa0","\x30","\xb2"),
	HX_HCSTRING("notifyOnLockChange","\x23","\x36","\x29","\x37"),
	HX_HCSTRING("removeFromLockChange","\x29","\xd5","\x52","\x6f"),
	HX_HCSTRING("hideSystemCursor","\x07","\x93","\x7b","\x81"),
	HX_HCSTRING("showSystemCursor","\xc2","\x1f","\x8d","\xc0"),
	HX_HCSTRING("windowDownListeners","\xad","\x36","\x38","\x35"),
	HX_HCSTRING("windowUpListeners","\x94","\x65","\x2c","\xf0"),
	HX_HCSTRING("windowMoveListeners","\x1e","\xfe","\x7f","\x65"),
	HX_HCSTRING("windowWheelListeners","\x74","\x51","\x5a","\x54"),
	HX_HCSTRING("windowLeaveListeners","\x98","\x65","\x64","\x6b"),
	HX_HCSTRING("sendLeaveEvent","\x0b","\x9f","\x4a","\x21"),
	HX_HCSTRING("sendDownEvent","\xf0","\x05","\x55","\xf0"),
	HX_HCSTRING("sendUpEvent","\x57","\x3b","\x46","\x5c"),
	HX_HCSTRING("sendMoveEvent","\xe1","\x00","\x06","\x98"),
	HX_HCSTRING("sendWheelEvent","\xe7","\x6c","\xae","\xcb"),
	HX_HCSTRING("_receive","\x64","\xbb","\x10","\x64"),
	::String(null()) };

static void Mouse_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mouse_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Mouse_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mouse_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mouse_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Mouse_obj::instance,"instance");
};

#endif

hx::Class Mouse_obj::__mClass;

static ::String Mouse_obj_sStaticFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59"),
	::String(null())
};

void Mouse_obj::__register()
{
	hx::Object *dummy = new Mouse_obj;
	Mouse_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.input.Mouse","\x57","\x6b","\x87","\x5e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mouse_obj::__GetStatic;
	__mClass->mSetStaticField = &Mouse_obj::__SetStatic;
	__mClass->mMarkFunc = Mouse_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mouse_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mouse_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mouse_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mouse_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mouse_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mouse_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Mouse_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4289abc989b286ca_7_boot)
HXDLIN(   7)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("sendMoveEvent",e1,00,06,98), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(1,HX_("sendWheelEvent",e7,6c,ae,cb), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(2,HX_("sendDownEvent",f0,05,55,f0), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(3,HX_("sendLeaveEvent",0b,9f,4a,21), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(4,HX_("sendUpEvent",57,3b,46,5c), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null()))))));
            	}
}

} // end namespace kha
} // end namespace input
