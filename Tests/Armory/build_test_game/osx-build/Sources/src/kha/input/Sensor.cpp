// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_kha_input_Sensor
#include <kha/input/Sensor.h>
#endif
#ifndef INCLUDED_kha_input_SensorType
#include <kha/input/SensorType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4658952827b01861_7_new,"kha.input.Sensor","new",0x06ac0dba,"kha.input.Sensor.new","kha/input/Sensor.hx",7,0xcd8927f4)
HX_LOCAL_STACK_FRAME(_hx_pos_4658952827b01861_19_notify,"kha.input.Sensor","notify",0x3fe1f1af,"kha.input.Sensor.notify","kha/input/Sensor.hx",19,0xcd8927f4)
HX_LOCAL_STACK_FRAME(_hx_pos_4658952827b01861_10_get,"kha.input.Sensor","get",0x06a6bdf0,"kha.input.Sensor.get","kha/input/Sensor.hx",10,0xcd8927f4)
HX_LOCAL_STACK_FRAME(_hx_pos_4658952827b01861_26__changed,"kha.input.Sensor","_changed",0xc24e26db,"kha.input.Sensor._changed","kha/input/Sensor.hx",26,0xcd8927f4)
HX_LOCAL_STACK_FRAME(_hx_pos_4658952827b01861_5_boot,"kha.input.Sensor","boot",0xc7f8f598,"kha.input.Sensor.boot","kha/input/Sensor.hx",5,0xcd8927f4)
HX_LOCAL_STACK_FRAME(_hx_pos_4658952827b01861_6_boot,"kha.input.Sensor","boot",0xc7f8f598,"kha.input.Sensor.boot","kha/input/Sensor.hx",6,0xcd8927f4)
namespace kha{
namespace input{

void Sensor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4658952827b01861_7_new)
HXDLIN(   7)		this->listeners = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic Sensor_obj::__CreateEmpty() { return new Sensor_obj; }

void *Sensor_obj::_hx_vtable = 0;

Dynamic Sensor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sensor_obj > _hx_result = new Sensor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Sensor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x79929864;
}

void Sensor_obj::notify( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_4658952827b01861_19_notify)
HXDLIN(  19)		this->listeners->push(listener);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sensor_obj,notify,(void))

 ::kha::input::Sensor Sensor_obj::accelerometer;

 ::kha::input::Sensor Sensor_obj::gyroscope;

 ::kha::input::Sensor Sensor_obj::get( ::kha::input::SensorType type){
            	HX_STACKFRAME(&_hx_pos_4658952827b01861_10_get)
HXDLIN(  10)		switch((int)(_hx_getEnumValueIndex(type))){
            			case (int)0: {
HXLINE(  12)				return ::kha::input::Sensor_obj::accelerometer;
            			}
            			break;
            			case (int)1: {
HXLINE(  14)				return ::kha::input::Sensor_obj::gyroscope;
            			}
            			break;
            		}
HXLINE(  10)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sensor_obj,get,return )

void Sensor_obj::_changed(int type,Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_4658952827b01861_26__changed)
HXLINE(  27)		 ::kha::input::SensorType sensor;
HXDLIN(  27)		if ((type == (int)0)) {
HXLINE(  27)			sensor = ::kha::input::SensorType_obj::Accelerometer_dyn();
            		}
            		else {
HXLINE(  27)			sensor = ::kha::input::SensorType_obj::Gyroscope_dyn();
            		}
HXDLIN(  27)		 ::kha::input::Sensor sensor1 = ::kha::input::Sensor_obj::get(sensor);
HXLINE(  28)		{
HXLINE(  28)			int _g = (int)0;
HXDLIN(  28)			::Array< ::Dynamic> _g1 = sensor1->listeners;
HXDLIN(  28)			while((_g < _g1->length)){
HXLINE(  28)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN(  28)				_g = (_g + (int)1);
HXLINE(  29)				listener(x,y,z);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Sensor_obj,_changed,(void))


Sensor_obj::Sensor_obj()
{
}

void Sensor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sensor);
	HX_MARK_MEMBER_NAME(listeners,"listeners");
	HX_MARK_END_CLASS();
}

void Sensor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(listeners,"listeners");
}

hx::Val Sensor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"notify") ) { return hx::Val( notify_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { return hx::Val( listeners ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Sensor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_changed") ) { outValue = _changed_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gyroscope") ) { outValue = ( gyroscope ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"accelerometer") ) { outValue = ( accelerometer ); return true; }
	}
	return false;
}

hx::Val Sensor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { listeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Sensor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"gyroscope") ) { gyroscope=ioValue.Cast<  ::kha::input::Sensor >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"accelerometer") ) { accelerometer=ioValue.Cast<  ::kha::input::Sensor >(); return true; }
	}
	return false;
}

void Sensor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Sensor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Sensor_obj,listeners),HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Sensor_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::input::Sensor*/ ,(void *) &Sensor_obj::accelerometer,HX_HCSTRING("accelerometer","\xcf","\x1e","\x0f","\x09")},
	{hx::fsObject /*::kha::input::Sensor*/ ,(void *) &Sensor_obj::gyroscope,HX_HCSTRING("gyroscope","\xc5","\x90","\xfe","\x46")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Sensor_obj_sMemberFields[] = {
	HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3"),
	HX_HCSTRING("notify","\xc9","\xda","\xb8","\x31"),
	::String(null()) };

static void Sensor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sensor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Sensor_obj::accelerometer,"accelerometer");
	HX_MARK_MEMBER_NAME(Sensor_obj::gyroscope,"gyroscope");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sensor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sensor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Sensor_obj::accelerometer,"accelerometer");
	HX_VISIT_MEMBER_NAME(Sensor_obj::gyroscope,"gyroscope");
};

#endif

hx::Class Sensor_obj::__mClass;

static ::String Sensor_obj_sStaticFields[] = {
	HX_HCSTRING("accelerometer","\xcf","\x1e","\x0f","\x09"),
	HX_HCSTRING("gyroscope","\xc5","\x90","\xfe","\x46"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("_changed","\x75","\x0a","\x85","\x06"),
	::String(null())
};

void Sensor_obj::__register()
{
	hx::Object *dummy = new Sensor_obj;
	Sensor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.input.Sensor","\xc8","\x68","\x78","\xf7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Sensor_obj::__GetStatic;
	__mClass->mSetStaticField = &Sensor_obj::__SetStatic;
	__mClass->mMarkFunc = Sensor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Sensor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Sensor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Sensor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Sensor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sensor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sensor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Sensor_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_4658952827b01861_5_boot)
HXDLIN(   5)		accelerometer =  ::kha::input::Sensor_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_4658952827b01861_6_boot)
HXDLIN(   6)		gyroscope =  ::kha::input::Sensor_obj::__alloc( HX_CTX );
            	}
}

} // end namespace kha
} // end namespace input
