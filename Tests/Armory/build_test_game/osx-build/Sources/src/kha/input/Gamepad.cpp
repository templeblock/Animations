// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_kha_SystemImpl
#include <kha/SystemImpl.h>
#endif
#ifndef INCLUDED_kha_input_Gamepad
#include <kha/input/Gamepad.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_39_new,"kha.input.Gamepad","new",0x1b762cc5,"kha.input.Gamepad.new","kha/input/Gamepad.hx",39,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_23_notify,"kha.input.Gamepad","notify",0x4a3a8b84,"kha.input.Gamepad.notify","kha/input/Gamepad.hx",23,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_28_remove,"kha.input.Gamepad","remove",0x1d0a4cff,"kha.input.Gamepad.remove","kha/input/Gamepad.hx",28,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_50_get_id,"kha.input.Gamepad","get_id",0xbbb1a3df,"kha.input.Gamepad.get_id","kha/input/Gamepad.hx",50,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_55_sendAxisEvent,"kha.input.Gamepad","sendAxisEvent",0x13d0c9f6,"kha.input.Gamepad.sendAxisEvent","kha/input/Gamepad.hx",55,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_62_sendButtonEvent,"kha.input.Gamepad","sendButtonEvent",0x02b76845,"kha.input.Gamepad.sendButtonEvent","kha/input/Gamepad.hx",62,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_8_get,"kha.input.Gamepad","get",0x1b70dcfb,"kha.input.Gamepad.get","kha/input/Gamepad.hx",8,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_13_notifyOnConnect,"kha.input.Gamepad","notifyOnConnect",0xc2ffb867,"kha.input.Gamepad.notifyOnConnect","kha/input/Gamepad.hx",13,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_18_removeConnect,"kha.input.Gamepad","removeConnect",0xce2844ab,"kha.input.Gamepad.removeConnect","kha/input/Gamepad.hx",18,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_68_sendConnectEvent,"kha.input.Gamepad","sendConnectEvent",0xc0da39b3,"kha.input.Gamepad.sendConnectEvent","kha/input/Gamepad.hx",68,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_76_sendDisconnectEvent,"kha.input.Gamepad","sendDisconnectEvent",0x4552681b,"kha.input.Gamepad.sendDisconnectEvent","kha/input/Gamepad.hx",76,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_5_boot,"kha.input.Gamepad","boot",0xe40a002d,"kha.input.Gamepad.boot","kha/input/Gamepad.hx",5,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_33_boot,"kha.input.Gamepad","boot",0xe40a002d,"kha.input.Gamepad.boot","kha/input/Gamepad.hx",33,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_36_boot,"kha.input.Gamepad","boot",0xe40a002d,"kha.input.Gamepad.boot","kha/input/Gamepad.hx",36,0xfbe88f8d)
HX_LOCAL_STACK_FRAME(_hx_pos_2ba37e3659cf55a5_37_boot,"kha.input.Gamepad","boot",0xe40a002d,"kha.input.Gamepad.boot","kha/input/Gamepad.hx",37,0xfbe88f8d)
namespace kha{
namespace input{

void Gamepad_obj::__construct(hx::Null< int >  __o_index,::String __o_id){
int index = __o_index.Default(0);
::String id = __o_id.Default(HX_HCSTRING("unknown","\x8a","\x23","\x7b","\xe1"));
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_39_new)
HXLINE(  40)		this->index = index;
HXLINE(  41)		this->axisListeners = ::Array_obj< ::Dynamic>::__new();
HXLINE(  42)		this->buttonListeners = ::Array_obj< ::Dynamic>::__new();
HXLINE(  43)		::kha::input::Gamepad_obj::instances[index] = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic Gamepad_obj::__CreateEmpty() { return new Gamepad_obj; }

void *Gamepad_obj::_hx_vtable = 0;

Dynamic Gamepad_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Gamepad_obj > _hx_result = new Gamepad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Gamepad_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fd8550f;
}

void Gamepad_obj::notify( ::Dynamic axisListener, ::Dynamic buttonListener){
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_23_notify)
HXLINE(  24)		if (hx::IsNotNull( axisListener )) {
HXLINE(  24)			this->axisListeners->push(axisListener);
            		}
HXLINE(  25)		if (hx::IsNotNull( buttonListener )) {
HXLINE(  25)			this->buttonListeners->push(buttonListener);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Gamepad_obj,notify,(void))

void Gamepad_obj::remove( ::Dynamic axisListener, ::Dynamic buttonListener){
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_28_remove)
HXLINE(  29)		if (hx::IsNotNull( axisListener )) {
HXLINE(  29)			this->axisListeners->remove(axisListener);
            		}
HXLINE(  30)		if (hx::IsNotNull( buttonListener )) {
HXLINE(  30)			this->buttonListeners->remove(buttonListener);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Gamepad_obj,remove,(void))

::String Gamepad_obj::get_id(){
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_50_get_id)
HXDLIN(  50)		return ::kha::SystemImpl_obj::getGamepadId(this->index);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Gamepad_obj,get_id,return )

void Gamepad_obj::sendAxisEvent(int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_55_sendAxisEvent)
HXDLIN(  55)		int _g = (int)0;
HXDLIN(  55)		::Array< ::Dynamic> _g1 = this->axisListeners;
HXDLIN(  55)		while((_g < _g1->length)){
HXDLIN(  55)			 ::Dynamic listener = _g1->__get(_g);
HXDLIN(  55)			_g = (_g + (int)1);
HXLINE(  56)			listener(axis,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Gamepad_obj,sendAxisEvent,(void))

void Gamepad_obj::sendButtonEvent(int button,Float value){
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_62_sendButtonEvent)
HXDLIN(  62)		int _g = (int)0;
HXDLIN(  62)		::Array< ::Dynamic> _g1 = this->buttonListeners;
HXDLIN(  62)		while((_g < _g1->length)){
HXDLIN(  62)			 ::Dynamic listener = _g1->__get(_g);
HXDLIN(  62)			_g = (_g + (int)1);
HXLINE(  63)			listener(button,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Gamepad_obj,sendButtonEvent,(void))

 ::kha::input::Gamepad Gamepad_obj::get(hx::Null< int >  __o_index){
int index = __o_index.Default(0);
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_8_get)
HXLINE(   9)		if ((index >= ::kha::input::Gamepad_obj::instances->length)) {
HXLINE(   9)			return null();
            		}
HXLINE(  10)		return ::kha::input::Gamepad_obj::instances->__get(index).StaticCast<  ::kha::input::Gamepad >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gamepad_obj,get,return )

void Gamepad_obj::notifyOnConnect( ::Dynamic connectListener, ::Dynamic disconnectListener){
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_13_notifyOnConnect)
HXLINE(  14)		if (hx::IsNotNull( connectListener )) {
HXLINE(  14)			::kha::input::Gamepad_obj::connectListeners->push(connectListener);
            		}
HXLINE(  15)		if (hx::IsNotNull( disconnectListener )) {
HXLINE(  15)			::kha::input::Gamepad_obj::disconnectListeners->push(disconnectListener);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gamepad_obj,notifyOnConnect,(void))

void Gamepad_obj::removeConnect( ::Dynamic connectListener, ::Dynamic disconnectListener){
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_18_removeConnect)
HXLINE(  19)		if (hx::IsNotNull( connectListener )) {
HXLINE(  19)			::kha::input::Gamepad_obj::connectListeners->remove(connectListener);
            		}
HXLINE(  20)		if (hx::IsNotNull( disconnectListener )) {
HXLINE(  20)			::kha::input::Gamepad_obj::disconnectListeners->remove(disconnectListener);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gamepad_obj,removeConnect,(void))

::Array< ::Dynamic> Gamepad_obj::instances;

::Array< ::Dynamic> Gamepad_obj::connectListeners;

::Array< ::Dynamic> Gamepad_obj::disconnectListeners;

void Gamepad_obj::sendConnectEvent(int index){
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_68_sendConnectEvent)
HXLINE(  69)		::kha::input::Gamepad_obj::instances->__get(index).StaticCast<  ::kha::input::Gamepad >()->connected = true;
HXLINE(  70)		{
HXLINE(  70)			int _g = (int)0;
HXDLIN(  70)			::Array< ::Dynamic> _g1 = ::kha::input::Gamepad_obj::connectListeners;
HXDLIN(  70)			while((_g < _g1->length)){
HXLINE(  70)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN(  70)				_g = (_g + (int)1);
HXLINE(  71)				listener(index);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gamepad_obj,sendConnectEvent,(void))

void Gamepad_obj::sendDisconnectEvent(int index){
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_76_sendDisconnectEvent)
HXLINE(  77)		::kha::input::Gamepad_obj::instances->__get(index).StaticCast<  ::kha::input::Gamepad >()->connected = false;
HXLINE(  78)		{
HXLINE(  78)			int _g = (int)0;
HXDLIN(  78)			::Array< ::Dynamic> _g1 = ::kha::input::Gamepad_obj::disconnectListeners;
HXDLIN(  78)			while((_g < _g1->length)){
HXLINE(  78)				 ::Dynamic listener = _g1->__get(_g);
HXDLIN(  78)				_g = (_g + (int)1);
HXLINE(  79)				listener(index);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gamepad_obj,sendDisconnectEvent,(void))


hx::ObjectPtr< Gamepad_obj > Gamepad_obj::__new(hx::Null< int >  __o_index,::String __o_id) {
	hx::ObjectPtr< Gamepad_obj > __this = new Gamepad_obj();
	__this->__construct(__o_index,__o_id);
	return __this;
}

hx::ObjectPtr< Gamepad_obj > Gamepad_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_index,::String __o_id) {
	Gamepad_obj *__this = (Gamepad_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Gamepad_obj), true, "kha.input.Gamepad"));
	*(void **)__this = Gamepad_obj::_hx_vtable;
	__this->__construct(__o_index,__o_id);
	return __this;
}

Gamepad_obj::Gamepad_obj()
{
}

void Gamepad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Gamepad);
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(axisListeners,"axisListeners");
	HX_MARK_MEMBER_NAME(buttonListeners,"buttonListeners");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(connected,"connected");
	HX_MARK_END_CLASS();
}

void Gamepad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(axisListeners,"axisListeners");
	HX_VISIT_MEMBER_NAME(buttonListeners,"buttonListeners");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(connected,"connected");
}

hx::Val Gamepad_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( inCallProp == hx::paccAlways ? get_id() : id ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"notify") ) { return hx::Val( notify_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_id") ) { return hx::Val( get_id_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { return hx::Val( connected ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"axisListeners") ) { return hx::Val( axisListeners ); }
		if (HX_FIELD_EQ(inName,"sendAxisEvent") ) { return hx::Val( sendAxisEvent_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonListeners") ) { return hx::Val( buttonListeners ); }
		if (HX_FIELD_EQ(inName,"sendButtonEvent") ) { return hx::Val( sendButtonEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Gamepad_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"instances") ) { outValue = ( instances ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeConnect") ) { outValue = removeConnect_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"notifyOnConnect") ) { outValue = notifyOnConnect_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"connectListeners") ) { outValue = ( connectListeners ); return true; }
		if (HX_FIELD_EQ(inName,"sendConnectEvent") ) { outValue = sendConnectEvent_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"disconnectListeners") ) { outValue = ( disconnectListeners ); return true; }
		if (HX_FIELD_EQ(inName,"sendDisconnectEvent") ) { outValue = sendDisconnectEvent_dyn(); return true; }
	}
	return false;
}

hx::Val Gamepad_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { connected=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"axisListeners") ) { axisListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonListeners") ) { buttonListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Gamepad_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"instances") ) { instances=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"connectListeners") ) { connectListeners=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"disconnectListeners") ) { disconnectListeners=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Gamepad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	outFields->push(HX_HCSTRING("axisListeners","\x9e","\x0c","\xba","\x11"));
	outFields->push(HX_HCSTRING("buttonListeners","\x2d","\x15","\x52","\x7d"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Gamepad_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Gamepad_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Gamepad_obj,axisListeners),HX_HCSTRING("axisListeners","\x9e","\x0c","\xba","\x11")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Gamepad_obj,buttonListeners),HX_HCSTRING("buttonListeners","\x2d","\x15","\x52","\x7d")},
	{hx::fsString,(int)offsetof(Gamepad_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsBool,(int)offsetof(Gamepad_obj,connected),HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Gamepad_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Gamepad_obj::instances,HX_HCSTRING("instances","\x3e","\x83","\x1a","\x4b")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Gamepad_obj::connectListeners,HX_HCSTRING("connectListeners","\x35","\x3c","\x93","\xbd")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Gamepad_obj::disconnectListeners,HX_HCSTRING("disconnectListeners","\x83","\x75","\x33","\x15")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Gamepad_obj_sMemberFields[] = {
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("notify","\xc9","\xda","\xb8","\x31"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("axisListeners","\x9e","\x0c","\xba","\x11"),
	HX_HCSTRING("buttonListeners","\x2d","\x15","\x52","\x7d"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"),
	HX_HCSTRING("get_id","\x24","\xf3","\x2f","\xa3"),
	HX_HCSTRING("sendAxisEvent","\x51","\x1d","\xe3","\x33"),
	HX_HCSTRING("sendButtonEvent","\x60","\x88","\x89","\x0a"),
	::String(null()) };

static void Gamepad_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Gamepad_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Gamepad_obj::instances,"instances");
	HX_MARK_MEMBER_NAME(Gamepad_obj::connectListeners,"connectListeners");
	HX_MARK_MEMBER_NAME(Gamepad_obj::disconnectListeners,"disconnectListeners");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Gamepad_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Gamepad_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Gamepad_obj::instances,"instances");
	HX_VISIT_MEMBER_NAME(Gamepad_obj::connectListeners,"connectListeners");
	HX_VISIT_MEMBER_NAME(Gamepad_obj::disconnectListeners,"disconnectListeners");
};

#endif

hx::Class Gamepad_obj::__mClass;

static ::String Gamepad_obj_sStaticFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("notifyOnConnect","\x82","\xd8","\xd1","\xca"),
	HX_HCSTRING("removeConnect","\x06","\x98","\x3a","\xee"),
	HX_HCSTRING("instances","\x3e","\x83","\x1a","\x4b"),
	HX_HCSTRING("connectListeners","\x35","\x3c","\x93","\xbd"),
	HX_HCSTRING("disconnectListeners","\x83","\x75","\x33","\x15"),
	HX_HCSTRING("sendConnectEvent","\x38","\x31","\xe4","\x90"),
	HX_HCSTRING("sendDisconnectEvent","\xb6","\x31","\x86","\xfc"),
	::String(null())
};

void Gamepad_obj::__register()
{
	hx::Object *dummy = new Gamepad_obj;
	Gamepad_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.input.Gamepad","\x53","\x66","\xcd","\x68");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Gamepad_obj::__GetStatic;
	__mClass->mSetStaticField = &Gamepad_obj::__SetStatic;
	__mClass->mMarkFunc = Gamepad_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Gamepad_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Gamepad_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Gamepad_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Gamepad_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Gamepad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Gamepad_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Gamepad_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_5_boot)
HXDLIN(   5)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("sendButtonEvent",60,88,89,0a), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(1,HX_("sendAxisEvent",51,1d,e3,33), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))))
            			->setFixed(1,HX_("statics",05,3c,65,36), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("sendConnectEvent",38,31,e4,90), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null())))
            				->setFixed(1,HX_("sendDisconnectEvent",b6,31,86,fc), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("input",0a,c4,1d,be),null()))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_33_boot)
HXDLIN(  33)		instances = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_36_boot)
HXDLIN(  36)		connectListeners = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_2ba37e3659cf55a5_37_boot)
HXDLIN(  37)		disconnectListeners = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace kha
} // end namespace input
