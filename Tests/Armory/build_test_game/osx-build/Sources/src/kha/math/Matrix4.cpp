// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_kha_math_Matrix4
#include <kha/math/Matrix4.h>
#endif
#ifndef INCLUDED_kha_math_Vector3
#include <kha/math/Vector3.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a4f4220e088ed7a0_15_new,"kha.math.Matrix4","new",0xbeb4a909,"kha.math.Matrix4.new","kha/math/Matrix4.hx",15,0x5b479ee7)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f4220e088ed7a0_114_orthogonalProjection,"kha.math.Matrix4","orthogonalProjection",0x6c87509f,"kha.math.Matrix4.orthogonalProjection","kha/math/Matrix4.hx",114,0x5b479ee7)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f4220e088ed7a0_126_perspectiveProjection,"kha.math.Matrix4","perspectiveProjection",0x0a33dc14,"kha.math.Matrix4.perspectiveProjection","kha/math/Matrix4.hx",126,0x5b479ee7)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f4220e088ed7a0_137_lookAt,"kha.math.Matrix4","lookAt",0x1520ac29,"kha.math.Matrix4.lookAt","kha/math/Matrix4.hx",137,0x5b479ee7)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f4220e088ed7a0_4_boot,"kha.math.Matrix4","boot",0x17783f69,"kha.math.Matrix4.boot","kha/math/Matrix4.hx",4,0x5b479ee7)
HX_LOCAL_STACK_FRAME(_hx_pos_a4f4220e088ed7a0_5_boot,"kha.math.Matrix4","boot",0x17783f69,"kha.math.Matrix4.boot","kha/math/Matrix4.hx",5,0x5b479ee7)
namespace kha{
namespace math{

void Matrix4_obj::__construct(Float _00,Float _10,Float _20,Float _30,Float _01,Float _11,Float _21,Float _31,Float _02,Float _12,Float _22,Float _32,Float _03,Float _13,Float _23,Float _33){
            	HX_STACKFRAME(&_hx_pos_a4f4220e088ed7a0_15_new)
HXLINE(  16)		this->_00 = _00;
HXDLIN(  16)		this->_10 = _10;
HXDLIN(  16)		this->_20 = _20;
HXDLIN(  16)		this->_30 = _30;
HXLINE(  17)		this->_01 = _01;
HXDLIN(  17)		this->_11 = _11;
HXDLIN(  17)		this->_21 = _21;
HXDLIN(  17)		this->_31 = _31;
HXLINE(  18)		this->_02 = _02;
HXDLIN(  18)		this->_12 = _12;
HXDLIN(  18)		this->_22 = _22;
HXDLIN(  18)		this->_32 = _32;
HXLINE(  19)		this->_03 = _03;
HXDLIN(  19)		this->_13 = _13;
HXDLIN(  19)		this->_23 = _23;
HXDLIN(  19)		this->_33 = _33;
            	}

Dynamic Matrix4_obj::__CreateEmpty() { return new Matrix4_obj; }

void *Matrix4_obj::_hx_vtable = 0;

Dynamic Matrix4_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix4_obj > _hx_result = new Matrix4_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15]);
	return _hx_result;
}

bool Matrix4_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x78b826c7;
}

int Matrix4_obj::width;

int Matrix4_obj::height;

 ::kha::math::Matrix4 Matrix4_obj::orthogonalProjection(Float left,Float right,Float bottom,Float top,Float zn,Float zf){
            	HX_GC_STACKFRAME(&_hx_pos_a4f4220e088ed7a0_114_orthogonalProjection)
HXLINE( 115)		Float tx = ((Float)-((right + left)) / (Float)(right - left));
HXLINE( 116)		Float ty = ((Float)-((top + bottom)) / (Float)(top - bottom));
HXLINE( 117)		Float tz = ((Float)-((zf + zn)) / (Float)(zf - zn));
HXLINE( 118)		return  ::kha::math::Matrix4_obj::__alloc( HX_CTX ,((Float)(int)2 / (Float)(right - left)),(int)0,(int)0,tx,(int)0,((Float)(int)2 / (Float)(top - bottom)),(int)0,ty,(int)0,(int)0,((Float)(int)-2 / (Float)(zf - zn)),tz,(int)0,(int)0,(int)0,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix4_obj,orthogonalProjection,return )

 ::kha::math::Matrix4 Matrix4_obj::perspectiveProjection(Float fovY,Float aspect,Float zn,Float zf){
            	HX_GC_STACKFRAME(&_hx_pos_a4f4220e088ed7a0_126_perspectiveProjection)
HXLINE( 127)		Float uh = ((Float)((Float)1.0) / (Float)::Math_obj::tan(((Float)fovY / (Float)(int)2)));
HXLINE( 128)		Float uw = ((Float)uh / (Float)aspect);
HXLINE( 129)		return  ::kha::math::Matrix4_obj::__alloc( HX_CTX ,uw,(int)0,(int)0,(int)0,(int)0,uh,(int)0,(int)0,(int)0,(int)0,((Float)(zf + zn) / (Float)(zn - zf)),((Float)(((int)2 * zf) * zn) / (Float)(zn - zf)),(int)0,(int)0,(int)-1,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_obj,perspectiveProjection,return )

 ::kha::math::Matrix4 Matrix4_obj::lookAt( ::kha::math::Vector3 eye, ::kha::math::Vector3 at, ::kha::math::Vector3 up){
            	HX_GC_STACKFRAME(&_hx_pos_a4f4220e088ed7a0_137_lookAt)
HXLINE( 138)		Float zaxis = (at->x - eye->x);
HXDLIN( 138)		Float zaxis1 = (at->y - eye->y);
HXDLIN( 138)		 ::kha::math::Vector3 zaxis2 =  ::kha::math::Vector3_obj::__alloc( HX_CTX ,zaxis,zaxis1,(at->z - eye->z));
HXLINE( 139)		zaxis2->set_length((int)1);
HXLINE( 140)		Float _x = (zaxis2->y * up->z);
HXDLIN( 140)		Float _x1 = (_x - (zaxis2->z * up->y));
HXDLIN( 140)		Float _y = (zaxis2->z * up->x);
HXDLIN( 140)		Float _y1 = (_y - (zaxis2->x * up->z));
HXDLIN( 140)		Float _z = (zaxis2->x * up->y);
HXDLIN( 140)		Float _z1 = (_z - (zaxis2->y * up->x));
HXDLIN( 140)		 ::kha::math::Vector3 xaxis =  ::kha::math::Vector3_obj::__alloc( HX_CTX ,_x1,_y1,_z1);
HXLINE( 141)		xaxis->set_length((int)1);
HXLINE( 142)		Float yaxis_z;
HXDLIN( 142)		Float yaxis_y;
HXDLIN( 142)		Float yaxis_x;
HXDLIN( 142)		Float _x2 = (xaxis->y * zaxis2->z);
HXDLIN( 142)		Float _x3 = (_x2 - (xaxis->z * zaxis2->y));
HXDLIN( 142)		Float _y2 = (xaxis->z * zaxis2->x);
HXDLIN( 142)		Float _y3 = (_y2 - (xaxis->x * zaxis2->z));
HXDLIN( 142)		Float _z2 = (xaxis->x * zaxis2->y);
HXDLIN( 142)		Float _z3 = (_z2 - (xaxis->y * zaxis2->x));
HXDLIN( 142)		yaxis_x = _x3;
HXDLIN( 142)		yaxis_y = _y3;
HXDLIN( 142)		yaxis_z = _z3;
HXLINE( 145)		Float xaxis1 = xaxis->x;
HXDLIN( 145)		Float xaxis2 = xaxis->y;
HXDLIN( 145)		Float xaxis3 = xaxis->z;
HXDLIN( 145)		Float _hx_tmp = (xaxis->x * eye->x);
HXDLIN( 145)		Float _hx_tmp1 = (_hx_tmp + (xaxis->y * eye->y));
HXDLIN( 145)		Float _hx_tmp2 = -((_hx_tmp1 + (xaxis->z * eye->z)));
HXLINE( 146)		Float _hx_tmp3 = (yaxis_x * eye->x);
HXDLIN( 146)		Float _hx_tmp4 = (_hx_tmp3 + (yaxis_y * eye->y));
HXDLIN( 146)		Float _hx_tmp5 = -((_hx_tmp4 + (yaxis_z * eye->z)));
HXLINE( 147)		Float _hx_tmp6 = -(zaxis2->x);
HXDLIN( 147)		Float _hx_tmp7 = -(zaxis2->y);
HXDLIN( 147)		Float _hx_tmp8 = -(zaxis2->z);
HXDLIN( 147)		Float _hx_tmp9 = (zaxis2->x * eye->x);
HXDLIN( 147)		Float _hx_tmp10 = (_hx_tmp9 + (zaxis2->y * eye->y));
HXLINE( 144)		return  ::kha::math::Matrix4_obj::__alloc( HX_CTX ,xaxis1,xaxis2,xaxis3,_hx_tmp2,yaxis_x,yaxis_y,yaxis_z,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,(_hx_tmp10 + (zaxis2->z * eye->z)),(int)0,(int)0,(int)0,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_obj,lookAt,return )


Matrix4_obj::Matrix4_obj()
{
}

hx::Val Matrix4_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_00") ) { return hx::Val( _00 ); }
		if (HX_FIELD_EQ(inName,"_10") ) { return hx::Val( _10 ); }
		if (HX_FIELD_EQ(inName,"_20") ) { return hx::Val( _20 ); }
		if (HX_FIELD_EQ(inName,"_30") ) { return hx::Val( _30 ); }
		if (HX_FIELD_EQ(inName,"_01") ) { return hx::Val( _01 ); }
		if (HX_FIELD_EQ(inName,"_11") ) { return hx::Val( _11 ); }
		if (HX_FIELD_EQ(inName,"_21") ) { return hx::Val( _21 ); }
		if (HX_FIELD_EQ(inName,"_31") ) { return hx::Val( _31 ); }
		if (HX_FIELD_EQ(inName,"_02") ) { return hx::Val( _02 ); }
		if (HX_FIELD_EQ(inName,"_12") ) { return hx::Val( _12 ); }
		if (HX_FIELD_EQ(inName,"_22") ) { return hx::Val( _22 ); }
		if (HX_FIELD_EQ(inName,"_32") ) { return hx::Val( _32 ); }
		if (HX_FIELD_EQ(inName,"_03") ) { return hx::Val( _03 ); }
		if (HX_FIELD_EQ(inName,"_13") ) { return hx::Val( _13 ); }
		if (HX_FIELD_EQ(inName,"_23") ) { return hx::Val( _23 ); }
		if (HX_FIELD_EQ(inName,"_33") ) { return hx::Val( _33 ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Matrix4_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"lookAt") ) { outValue = lookAt_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"orthogonalProjection") ) { outValue = orthogonalProjection_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"perspectiveProjection") ) { outValue = perspectiveProjection_dyn(); return true; }
	}
	return false;
}

hx::Val Matrix4_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_00") ) { _00=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_10") ) { _10=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_20") ) { _20=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_30") ) { _30=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_01") ) { _01=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_11") ) { _11=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_21") ) { _21=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_31") ) { _31=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_02") ) { _02=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_12") ) { _12=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_22") ) { _22=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_32") ) { _32=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_03") ) { _03=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_13") ) { _13=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_23") ) { _23=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_33") ) { _33=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Matrix4_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_00","\x1f","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_10","\xfe","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_20","\xdd","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_30","\xbc","\x42","\x48","\x00"));
	outFields->push(HX_HCSTRING("_01","\x20","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_11","\xff","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_21","\xde","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_31","\xbd","\x42","\x48","\x00"));
	outFields->push(HX_HCSTRING("_02","\x21","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_12","\x00","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_22","\xdf","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_32","\xbe","\x42","\x48","\x00"));
	outFields->push(HX_HCSTRING("_03","\x22","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_13","\x01","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_23","\xe0","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_33","\xbf","\x42","\x48","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix4_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_00),HX_HCSTRING("_00","\x1f","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_10),HX_HCSTRING("_10","\xfe","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_20),HX_HCSTRING("_20","\xdd","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_30),HX_HCSTRING("_30","\xbc","\x42","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_01),HX_HCSTRING("_01","\x20","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_11),HX_HCSTRING("_11","\xff","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_21),HX_HCSTRING("_21","\xde","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_31),HX_HCSTRING("_31","\xbd","\x42","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_02),HX_HCSTRING("_02","\x21","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_12),HX_HCSTRING("_12","\x00","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_22),HX_HCSTRING("_22","\xdf","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_32),HX_HCSTRING("_32","\xbe","\x42","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_03),HX_HCSTRING("_03","\x22","\x40","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_13),HX_HCSTRING("_13","\x01","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_23),HX_HCSTRING("_23","\xe0","\x41","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix4_obj,_33),HX_HCSTRING("_33","\xbf","\x42","\x48","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Matrix4_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Matrix4_obj::width,HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(void *) &Matrix4_obj::height,HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Matrix4_obj_sMemberFields[] = {
	HX_HCSTRING("_00","\x1f","\x40","\x48","\x00"),
	HX_HCSTRING("_10","\xfe","\x40","\x48","\x00"),
	HX_HCSTRING("_20","\xdd","\x41","\x48","\x00"),
	HX_HCSTRING("_30","\xbc","\x42","\x48","\x00"),
	HX_HCSTRING("_01","\x20","\x40","\x48","\x00"),
	HX_HCSTRING("_11","\xff","\x40","\x48","\x00"),
	HX_HCSTRING("_21","\xde","\x41","\x48","\x00"),
	HX_HCSTRING("_31","\xbd","\x42","\x48","\x00"),
	HX_HCSTRING("_02","\x21","\x40","\x48","\x00"),
	HX_HCSTRING("_12","\x00","\x41","\x48","\x00"),
	HX_HCSTRING("_22","\xdf","\x41","\x48","\x00"),
	HX_HCSTRING("_32","\xbe","\x42","\x48","\x00"),
	HX_HCSTRING("_03","\x22","\x40","\x48","\x00"),
	HX_HCSTRING("_13","\x01","\x41","\x48","\x00"),
	HX_HCSTRING("_23","\xe0","\x41","\x48","\x00"),
	HX_HCSTRING("_33","\xbf","\x42","\x48","\x00"),
	::String(null()) };

static void Matrix4_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix4_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix4_obj::width,"width");
	HX_MARK_MEMBER_NAME(Matrix4_obj::height,"height");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix4_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix4_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix4_obj::width,"width");
	HX_VISIT_MEMBER_NAME(Matrix4_obj::height,"height");
};

#endif

hx::Class Matrix4_obj::__mClass;

static ::String Matrix4_obj_sStaticFields[] = {
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("orthogonalProjection","\x68","\x77","\x62","\xe1"),
	HX_HCSTRING("perspectiveProjection","\x2b","\xa5","\x1a","\xd5"),
	HX_HCSTRING("lookAt","\x32","\x75","\xb5","\x61"),
	::String(null())
};

void Matrix4_obj::__register()
{
	hx::Object *dummy = new Matrix4_obj;
	Matrix4_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.math.Matrix4","\x97","\x70","\xff","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix4_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix4_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix4_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix4_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix4_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix4_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix4_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix4_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix4_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a4f4220e088ed7a0_4_boot)
HXDLIN(   4)		width = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a4f4220e088ed7a0_5_boot)
HXDLIN(   5)		height = (int)4;
            	}
}

} // end namespace kha
} // end namespace math
