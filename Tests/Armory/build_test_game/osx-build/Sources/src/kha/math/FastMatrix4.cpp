// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif
#ifndef INCLUDED_kha_math_FastVector3
#include <kha/math/FastVector3.h>
#endif
#ifndef INCLUDED_kha_math_Matrix4
#include <kha/math/Matrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_13a5dc49b32a5012_15_new,"kha.math.FastMatrix4","new",0x1cb0bdcd,"kha.math.FastMatrix4.new","kha/math/FastMatrix4.hx",15,0xae96fea3)
HX_LOCAL_STACK_FRAME(_hx_pos_13a5dc49b32a5012_23_fromMatrix4,"kha.math.FastMatrix4","fromMatrix4",0x530348f6,"kha.math.FastMatrix4.fromMatrix4","kha/math/FastMatrix4.hx",23,0xae96fea3)
HX_LOCAL_STACK_FRAME(_hx_pos_13a5dc49b32a5012_121_orthogonalProjection,"kha.math.FastMatrix4","orthogonalProjection",0x76379f5b,"kha.math.FastMatrix4.orthogonalProjection","kha/math/FastMatrix4.hx",121,0xae96fea3)
HX_LOCAL_STACK_FRAME(_hx_pos_13a5dc49b32a5012_133_perspectiveProjection,"kha.math.FastMatrix4","perspectiveProjection",0x7ac871d8,"kha.math.FastMatrix4.perspectiveProjection","kha/math/FastMatrix4.hx",133,0xae96fea3)
HX_LOCAL_STACK_FRAME(_hx_pos_13a5dc49b32a5012_144_lookAt,"kha.math.FastMatrix4","lookAt",0x5676e9e5,"kha.math.FastMatrix4.lookAt","kha/math/FastMatrix4.hx",144,0xae96fea3)
HX_LOCAL_STACK_FRAME(_hx_pos_13a5dc49b32a5012_4_boot,"kha.math.FastMatrix4","boot",0xf60e5625,"kha.math.FastMatrix4.boot","kha/math/FastMatrix4.hx",4,0xae96fea3)
HX_LOCAL_STACK_FRAME(_hx_pos_13a5dc49b32a5012_5_boot,"kha.math.FastMatrix4","boot",0xf60e5625,"kha.math.FastMatrix4.boot","kha/math/FastMatrix4.hx",5,0xae96fea3)
namespace kha{
namespace math{

void FastMatrix4_obj::__construct(float _00,float _10,float _20,float _30,float _01,float _11,float _21,float _31,float _02,float _12,float _22,float _32,float _03,float _13,float _23,float _33){
            	HX_STACKFRAME(&_hx_pos_13a5dc49b32a5012_15_new)
HXLINE(  16)		this->_00 = _00;
HXDLIN(  16)		this->_10 = _10;
HXDLIN(  16)		this->_20 = _20;
HXDLIN(  16)		this->_30 = _30;
HXLINE(  17)		this->_01 = _01;
HXDLIN(  17)		this->_11 = _11;
HXDLIN(  17)		this->_21 = _21;
HXDLIN(  17)		this->_31 = _31;
HXLINE(  18)		this->_02 = _02;
HXDLIN(  18)		this->_12 = _12;
HXDLIN(  18)		this->_22 = _22;
HXDLIN(  18)		this->_32 = _32;
HXLINE(  19)		this->_03 = _03;
HXDLIN(  19)		this->_13 = _13;
HXDLIN(  19)		this->_23 = _23;
HXDLIN(  19)		this->_33 = _33;
            	}

Dynamic FastMatrix4_obj::__CreateEmpty() { return new FastMatrix4_obj; }

void *FastMatrix4_obj::_hx_vtable = 0;

Dynamic FastMatrix4_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FastMatrix4_obj > _hx_result = new FastMatrix4_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15]);
	return _hx_result;
}

bool FastMatrix4_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e7d5147;
}

int FastMatrix4_obj::width;

int FastMatrix4_obj::height;

 ::kha::math::FastMatrix4 FastMatrix4_obj::fromMatrix4( ::kha::math::Matrix4 m){
            	HX_GC_STACKFRAME(&_hx_pos_13a5dc49b32a5012_23_fromMatrix4)
HXDLIN(  23)		return  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,m->_00,m->_10,m->_20,m->_30,m->_01,m->_11,m->_21,m->_31,m->_02,m->_12,m->_22,m->_32,m->_03,m->_13,m->_23,m->_33);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FastMatrix4_obj,fromMatrix4,return )

 ::kha::math::FastMatrix4 FastMatrix4_obj::orthogonalProjection(float left,float right,float bottom,float top,float zn,float zf){
            	HX_GC_STACKFRAME(&_hx_pos_13a5dc49b32a5012_121_orthogonalProjection)
HXLINE( 122)		float tx = ((Float)-((right + left)) / (Float)(right - left));
HXLINE( 123)		float ty = ((Float)-((top + bottom)) / (Float)(top - bottom));
HXLINE( 124)		float tz = ((Float)-((zf + zn)) / (Float)(zf - zn));
HXLINE( 125)		return  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,((Float)(int)2 / (Float)(right - left)),(int)0,(int)0,tx,(int)0,((Float)(int)2 / (Float)(top - bottom)),(int)0,ty,(int)0,(int)0,((Float)(int)-2 / (Float)(zf - zn)),tz,(int)0,(int)0,(int)0,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FastMatrix4_obj,orthogonalProjection,return )

 ::kha::math::FastMatrix4 FastMatrix4_obj::perspectiveProjection(float fovY,float aspect,float zn,float zf){
            	HX_GC_STACKFRAME(&_hx_pos_13a5dc49b32a5012_133_perspectiveProjection)
HXLINE( 134)		Float uh = ((Float)((Float)1.0) / (Float)::Math_obj::tan(((Float)fovY / (Float)(int)2)));
HXLINE( 135)		Float uw = ((Float)uh / (Float)aspect);
HXLINE( 136)		return  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,uw,(int)0,(int)0,(int)0,(int)0,uh,(int)0,(int)0,(int)0,(int)0,((Float)(zf + zn) / (Float)(zn - zf)),((Float)(((int)2 * zf) * zn) / (Float)(zn - zf)),(int)0,(int)0,(int)-1,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FastMatrix4_obj,perspectiveProjection,return )

 ::kha::math::FastMatrix4 FastMatrix4_obj::lookAt( ::kha::math::FastVector3 eye, ::kha::math::FastVector3 at, ::kha::math::FastVector3 up){
            	HX_GC_STACKFRAME(&_hx_pos_13a5dc49b32a5012_144_lookAt)
HXLINE( 145)		float zaxis = (at->x - eye->x);
HXDLIN( 145)		float zaxis1 = (at->y - eye->y);
HXDLIN( 145)		 ::kha::math::FastVector3 zaxis2 =  ::kha::math::FastVector3_obj::__alloc( HX_CTX ,zaxis,zaxis1,(at->z - eye->z));
HXLINE( 146)		zaxis2->set_length((int)1);
HXLINE( 147)		float _x = (zaxis2->y * up->z);
HXDLIN( 147)		float _x1 = (_x - (zaxis2->z * up->y));
HXDLIN( 147)		float _y = (zaxis2->z * up->x);
HXDLIN( 147)		float _y1 = (_y - (zaxis2->x * up->z));
HXDLIN( 147)		float _z = (zaxis2->x * up->y);
HXDLIN( 147)		float _z1 = (_z - (zaxis2->y * up->x));
HXDLIN( 147)		 ::kha::math::FastVector3 xaxis =  ::kha::math::FastVector3_obj::__alloc( HX_CTX ,_x1,_y1,_z1);
HXLINE( 148)		xaxis->set_length((int)1);
HXLINE( 149)		float yaxis_z;
HXDLIN( 149)		float yaxis_y;
HXDLIN( 149)		float yaxis_x;
HXDLIN( 149)		float _x2 = (xaxis->y * zaxis2->z);
HXDLIN( 149)		float _x3 = (_x2 - (xaxis->z * zaxis2->y));
HXDLIN( 149)		float _y2 = (xaxis->z * zaxis2->x);
HXDLIN( 149)		float _y3 = (_y2 - (xaxis->x * zaxis2->z));
HXDLIN( 149)		float _z2 = (xaxis->x * zaxis2->y);
HXDLIN( 149)		float _z3 = (_z2 - (xaxis->y * zaxis2->x));
HXDLIN( 149)		yaxis_x = _x3;
HXDLIN( 149)		yaxis_y = _y3;
HXDLIN( 149)		yaxis_z = _z3;
HXLINE( 152)		float xaxis1 = xaxis->x;
HXDLIN( 152)		float xaxis2 = xaxis->y;
HXDLIN( 152)		float xaxis3 = xaxis->z;
HXDLIN( 152)		float _hx_tmp = (xaxis->x * eye->x);
HXDLIN( 152)		float _hx_tmp1 = (_hx_tmp + (xaxis->y * eye->y));
HXDLIN( 152)		float _hx_tmp2 = -((_hx_tmp1 + (xaxis->z * eye->z)));
HXLINE( 153)		float _hx_tmp3 = (yaxis_x * eye->x);
HXDLIN( 153)		float _hx_tmp4 = (_hx_tmp3 + (yaxis_y * eye->y));
HXDLIN( 153)		float _hx_tmp5 = -((_hx_tmp4 + (yaxis_z * eye->z)));
HXLINE( 154)		float _hx_tmp6 = -(zaxis2->x);
HXDLIN( 154)		float _hx_tmp7 = -(zaxis2->y);
HXDLIN( 154)		float _hx_tmp8 = -(zaxis2->z);
HXDLIN( 154)		float _hx_tmp9 = (zaxis2->x * eye->x);
HXDLIN( 154)		float _hx_tmp10 = (_hx_tmp9 + (zaxis2->y * eye->y));
HXLINE( 151)		return  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,xaxis1,xaxis2,xaxis3,_hx_tmp2,yaxis_x,yaxis_y,yaxis_z,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,(_hx_tmp10 + (zaxis2->z * eye->z)),(int)0,(int)0,(int)0,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FastMatrix4_obj,lookAt,return )


FastMatrix4_obj::FastMatrix4_obj()
{
}

hx::Val FastMatrix4_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_00") ) { return hx::Val( _00 ); }
		if (HX_FIELD_EQ(inName,"_10") ) { return hx::Val( _10 ); }
		if (HX_FIELD_EQ(inName,"_20") ) { return hx::Val( _20 ); }
		if (HX_FIELD_EQ(inName,"_30") ) { return hx::Val( _30 ); }
		if (HX_FIELD_EQ(inName,"_01") ) { return hx::Val( _01 ); }
		if (HX_FIELD_EQ(inName,"_11") ) { return hx::Val( _11 ); }
		if (HX_FIELD_EQ(inName,"_21") ) { return hx::Val( _21 ); }
		if (HX_FIELD_EQ(inName,"_31") ) { return hx::Val( _31 ); }
		if (HX_FIELD_EQ(inName,"_02") ) { return hx::Val( _02 ); }
		if (HX_FIELD_EQ(inName,"_12") ) { return hx::Val( _12 ); }
		if (HX_FIELD_EQ(inName,"_22") ) { return hx::Val( _22 ); }
		if (HX_FIELD_EQ(inName,"_32") ) { return hx::Val( _32 ); }
		if (HX_FIELD_EQ(inName,"_03") ) { return hx::Val( _03 ); }
		if (HX_FIELD_EQ(inName,"_13") ) { return hx::Val( _13 ); }
		if (HX_FIELD_EQ(inName,"_23") ) { return hx::Val( _23 ); }
		if (HX_FIELD_EQ(inName,"_33") ) { return hx::Val( _33 ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FastMatrix4_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"lookAt") ) { outValue = lookAt_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromMatrix4") ) { outValue = fromMatrix4_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"orthogonalProjection") ) { outValue = orthogonalProjection_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"perspectiveProjection") ) { outValue = perspectiveProjection_dyn(); return true; }
	}
	return false;
}

hx::Val FastMatrix4_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_00") ) { _00=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_10") ) { _10=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_20") ) { _20=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_30") ) { _30=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_01") ) { _01=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_11") ) { _11=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_21") ) { _21=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_31") ) { _31=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_02") ) { _02=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_12") ) { _12=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_22") ) { _22=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_32") ) { _32=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_03") ) { _03=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_13") ) { _13=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_23") ) { _23=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_33") ) { _33=inValue.Cast< float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FastMatrix4_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_00","\x1f","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_10","\xfe","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_20","\xdd","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_30","\xbc","\x42","\x48","\x00"));
	outFields->push(HX_HCSTRING("_01","\x20","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_11","\xff","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_21","\xde","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_31","\xbd","\x42","\x48","\x00"));
	outFields->push(HX_HCSTRING("_02","\x21","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_12","\x00","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_22","\xdf","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_32","\xbe","\x42","\x48","\x00"));
	outFields->push(HX_HCSTRING("_03","\x22","\x40","\x48","\x00"));
	outFields->push(HX_HCSTRING("_13","\x01","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_23","\xe0","\x41","\x48","\x00"));
	outFields->push(HX_HCSTRING("_33","\xbf","\x42","\x48","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FastMatrix4_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_00),HX_HCSTRING("_00","\x1f","\x40","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_10),HX_HCSTRING("_10","\xfe","\x40","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_20),HX_HCSTRING("_20","\xdd","\x41","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_30),HX_HCSTRING("_30","\xbc","\x42","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_01),HX_HCSTRING("_01","\x20","\x40","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_11),HX_HCSTRING("_11","\xff","\x40","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_21),HX_HCSTRING("_21","\xde","\x41","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_31),HX_HCSTRING("_31","\xbd","\x42","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_02),HX_HCSTRING("_02","\x21","\x40","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_12),HX_HCSTRING("_12","\x00","\x41","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_22),HX_HCSTRING("_22","\xdf","\x41","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_32),HX_HCSTRING("_32","\xbe","\x42","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_03),HX_HCSTRING("_03","\x22","\x40","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_13),HX_HCSTRING("_13","\x01","\x41","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_23),HX_HCSTRING("_23","\xe0","\x41","\x48","\x00")},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(FastMatrix4_obj,_33),HX_HCSTRING("_33","\xbf","\x42","\x48","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FastMatrix4_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FastMatrix4_obj::width,HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(void *) &FastMatrix4_obj::height,HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FastMatrix4_obj_sMemberFields[] = {
	HX_HCSTRING("_00","\x1f","\x40","\x48","\x00"),
	HX_HCSTRING("_10","\xfe","\x40","\x48","\x00"),
	HX_HCSTRING("_20","\xdd","\x41","\x48","\x00"),
	HX_HCSTRING("_30","\xbc","\x42","\x48","\x00"),
	HX_HCSTRING("_01","\x20","\x40","\x48","\x00"),
	HX_HCSTRING("_11","\xff","\x40","\x48","\x00"),
	HX_HCSTRING("_21","\xde","\x41","\x48","\x00"),
	HX_HCSTRING("_31","\xbd","\x42","\x48","\x00"),
	HX_HCSTRING("_02","\x21","\x40","\x48","\x00"),
	HX_HCSTRING("_12","\x00","\x41","\x48","\x00"),
	HX_HCSTRING("_22","\xdf","\x41","\x48","\x00"),
	HX_HCSTRING("_32","\xbe","\x42","\x48","\x00"),
	HX_HCSTRING("_03","\x22","\x40","\x48","\x00"),
	HX_HCSTRING("_13","\x01","\x41","\x48","\x00"),
	HX_HCSTRING("_23","\xe0","\x41","\x48","\x00"),
	HX_HCSTRING("_33","\xbf","\x42","\x48","\x00"),
	::String(null()) };

static void FastMatrix4_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FastMatrix4_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FastMatrix4_obj::width,"width");
	HX_MARK_MEMBER_NAME(FastMatrix4_obj::height,"height");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FastMatrix4_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FastMatrix4_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FastMatrix4_obj::width,"width");
	HX_VISIT_MEMBER_NAME(FastMatrix4_obj::height,"height");
};

#endif

hx::Class FastMatrix4_obj::__mClass;

static ::String FastMatrix4_obj_sStaticFields[] = {
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("fromMatrix4","\x89","\xa6","\xa7","\x2b"),
	HX_HCSTRING("orthogonalProjection","\x68","\x77","\x62","\xe1"),
	HX_HCSTRING("perspectiveProjection","\x2b","\xa5","\x1a","\xd5"),
	HX_HCSTRING("lookAt","\x32","\x75","\xb5","\x61"),
	::String(null())
};

void FastMatrix4_obj::__register()
{
	hx::Object *dummy = new FastMatrix4_obj;
	FastMatrix4_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.math.FastMatrix4","\x5b","\xd3","\x18","\x20");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FastMatrix4_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FastMatrix4_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FastMatrix4_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FastMatrix4_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FastMatrix4_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FastMatrix4_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FastMatrix4_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FastMatrix4_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FastMatrix4_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_13a5dc49b32a5012_4_boot)
HXDLIN(   4)		width = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_13a5dc49b32a5012_5_boot)
HXDLIN(   5)		height = (int)4;
            	}
}

} // end namespace kha
} // end namespace math
