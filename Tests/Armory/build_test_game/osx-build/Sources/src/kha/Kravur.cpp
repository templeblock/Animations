// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_KravurImage
#include <kha/KravurImage.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_StbTruetype
#include <kha/graphics2/truetype/StbTruetype.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_bakedchar
#include <kha/graphics2/truetype/Stbtt_bakedchar.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_fontinfo
#include <kha/graphics2/truetype/Stbtt_fontinfo.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_temp_font_v_metrics
#include <kha/graphics2/truetype/Stbtt_temp_font_v_metrics.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <kha/internal/BytesBlob.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_865862c4e1864848_128_new,"kha.Kravur","new",0x6ca37955,"kha.Kravur.new","kha/Kravur.hx",128,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_865862c4e1864848_144__get,"kha.Kravur","_get",0x987df302,"kha.Kravur._get","kha/Kravur.hx",144,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_865862c4e1864848_200_height,"kha.Kravur","height",0x9f26a612,"kha.Kravur.height","kha/Kravur.hx",200,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_865862c4e1864848_204_width,"kha.Kravur","width",0xa8a6463b,"kha.Kravur.width","kha/Kravur.hx",204,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_865862c4e1864848_208_widthOfCharacters,"kha.Kravur","widthOfCharacters",0xae851f7c,"kha.Kravur.widthOfCharacters","kha/Kravur.hx",208,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_865862c4e1864848_212_baseline,"kha.Kravur","baseline",0x90869b70,"kha.Kravur.baseline","kha/Kravur.hx",212,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_865862c4e1864848_215_unload,"kha.Kravur","unload",0x02673f2a,"kha.Kravur.unload","kha/Kravur.hx",215,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_865862c4e1864848_141_fromBytes,"kha.Kravur","fromBytes",0x65a94156,"kha.Kravur.fromBytes","kha/Kravur.hx",141,0xdd7a3f9a)
namespace kha{

void Kravur_obj::__construct( ::kha::internal::BytesBlob blob){
            	HX_GC_STACKFRAME(&_hx_pos_865862c4e1864848_128_new)
HXLINE( 134)		this->images =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 137)		this->blob = blob;
            	}

Dynamic Kravur_obj::__CreateEmpty() { return new Kravur_obj; }

void *Kravur_obj::_hx_vtable = 0;

Dynamic Kravur_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Kravur_obj > _hx_result = new Kravur_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Kravur_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2ae4e6bd;
}

static ::kha::Resource_obj _hx_kha_Kravur__hx_kha_Resource= {
	( void (hx::Object::*)())&::kha::Kravur_obj::unload,
};

void *Kravur_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf962acd2: return &_hx_kha_Kravur__hx_kha_Resource;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::kha::KravurImage Kravur_obj::_get(int fontSize,::Array< int > glyphs){
            	HX_GC_STACKFRAME(&_hx_pos_865862c4e1864848_144__get)
HXLINE( 145)		if (hx::IsNull( glyphs )) {
HXLINE( 145)			glyphs = ::kha::graphics2::Graphics_obj::_glyphs;
            		}
HXLINE( 147)		if (hx::IsNotEq( glyphs,this->oldGlyphs )) {
HXLINE( 148)			this->oldGlyphs = glyphs;
HXLINE( 150)			::kha::KravurImage_obj::gaps = ::Array_obj< int >::__new(1)->init(0,glyphs->__get((int)0));
HXLINE( 151)			int next = (::kha::KravurImage_obj::gaps->__get((int)0) + (int)1);
HXLINE( 152)			{
HXLINE( 152)				int _g1 = (int)1;
HXDLIN( 152)				int _g = glyphs->length;
HXDLIN( 152)				while((_g1 < _g)){
HXLINE( 152)					_g1 = (_g1 + (int)1);
HXDLIN( 152)					int i = (_g1 - (int)1);
HXLINE( 153)					if ((glyphs->__get(i) != next)) {
HXLINE( 154)						::Array< int > _hx_tmp = ::kha::KravurImage_obj::gaps;
HXDLIN( 154)						_hx_tmp->push(glyphs->__get((i - (int)1)));
HXLINE( 155)						::Array< int > _hx_tmp1 = ::kha::KravurImage_obj::gaps;
HXDLIN( 155)						_hx_tmp1->push(glyphs->__get(i));
HXLINE( 156)						next = (glyphs->__get(i) + (int)1);
            					}
            					else {
HXLINE( 157)						next = (next + (int)1);
            					}
            				}
            			}
HXLINE( 159)			::Array< int > _hx_tmp2 = ::kha::KravurImage_obj::gaps;
HXDLIN( 159)			_hx_tmp2->push(glyphs->__get((glyphs->length - (int)1)));
            		}
HXLINE( 162)		int imageIndex;
HXDLIN( 162)		if (hx::IsNull( glyphs )) {
HXLINE( 162)			imageIndex = fontSize;
            		}
            		else {
HXLINE( 162)			imageIndex = ((fontSize * (int)10000) + glyphs->length);
            		}
HXLINE( 163)		if (!(this->images->exists(imageIndex))) {
HXLINE( 164)			int width = (int)64;
HXLINE( 165)			int height = (int)32;
HXLINE( 166)			::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(glyphs->length);
HXDLIN( 166)			::Array< ::Dynamic> baked = this1;
HXLINE( 167)			{
HXLINE( 167)				int _g11 = (int)0;
HXDLIN( 167)				int _g2 = baked->length;
HXDLIN( 167)				while((_g11 < _g2)){
HXLINE( 167)					_g11 = (_g11 + (int)1);
HXDLIN( 167)					int i1 = (_g11 - (int)1);
HXLINE( 168)					{
HXLINE( 168)						 ::kha::graphics2::truetype::Stbtt_bakedchar val =  ::kha::graphics2::truetype::Stbtt_bakedchar_obj::__alloc( HX_CTX );
HXDLIN( 168)						baked->__unsafe_set(i1,val);
            					}
            				}
            			}
HXLINE( 171)			 ::kha::internal::BytesBlob pixels = null();
HXLINE( 173)			int status = (int)-1;
HXLINE( 174)			while((status < (int)0)){
HXLINE( 175)				if ((height < width)) {
HXLINE( 175)					height = (height * (int)2);
            				}
            				else {
HXLINE( 176)					width = (width * (int)2);
            				}
HXLINE( 177)				pixels = ::kha::internal::BytesBlob_obj::alloc((width * height));
HXLINE( 178)				status = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_BakeFontBitmap(this->blob,(int)0,fontSize,pixels,width,height,glyphs,baked);
            			}
HXLINE( 183)			 ::kha::graphics2::truetype::Stbtt_fontinfo info =  ::kha::graphics2::truetype::Stbtt_fontinfo_obj::__alloc( HX_CTX );
HXLINE( 184)			::kha::graphics2::truetype::StbTruetype_obj::stbtt_InitFont(info,this->blob,(int)0);
HXLINE( 186)			 ::kha::graphics2::truetype::Stbtt_temp_font_v_metrics metrics = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_GetFontVMetrics(info);
HXLINE( 187)			Float scale = ::kha::graphics2::truetype::StbTruetype_obj::stbtt_ScaleForPixelHeight(info,fontSize);
HXLINE( 188)			int ascent = ::Math_obj::round((metrics->ascent * scale));
HXLINE( 189)			int descent = ::Math_obj::round((metrics->descent * scale));
HXLINE( 190)			int lineGap = ::Math_obj::round((metrics->lineGap * scale));
HXLINE( 192)			 ::kha::KravurImage image =  ::kha::KravurImage_obj::__alloc( HX_CTX ,::Std_obj::_hx_int(fontSize),ascent,descent,lineGap,width,height,baked,pixels);
HXLINE( 193)			this->images->set(imageIndex,image);
HXLINE( 194)			return image;
            		}
HXLINE( 196)		return this->images->get(imageIndex).StaticCast<  ::kha::KravurImage >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Kravur_obj,_get,return )

Float Kravur_obj::height(int fontSize){
            	HX_STACKFRAME(&_hx_pos_865862c4e1864848_200_height)
HXDLIN( 200)		return this->_get(fontSize,null())->getHeight();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Kravur_obj,height,return )

Float Kravur_obj::width(int fontSize,::String str){
            	HX_STACKFRAME(&_hx_pos_865862c4e1864848_204_width)
HXDLIN( 204)		return this->_get(fontSize,null())->stringWidth(str);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Kravur_obj,width,return )

Float Kravur_obj::widthOfCharacters(int fontSize,::Array< int > characters,int start,int length){
            	HX_STACKFRAME(&_hx_pos_865862c4e1864848_208_widthOfCharacters)
HXDLIN( 208)		return this->_get(fontSize,null())->charactersWidth(characters,start,length);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Kravur_obj,widthOfCharacters,return )

Float Kravur_obj::baseline(int fontSize){
            	HX_STACKFRAME(&_hx_pos_865862c4e1864848_212_baseline)
HXDLIN( 212)		return this->_get(fontSize,null())->getBaselinePosition();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Kravur_obj,baseline,return )

void Kravur_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_865862c4e1864848_215_unload)
HXLINE( 216)		this->blob = null();
HXLINE( 217)		this->images = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Kravur_obj,unload,(void))

 ::kha::Kravur Kravur_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_865862c4e1864848_141_fromBytes)
HXDLIN( 141)		return  ::kha::Kravur_obj::__alloc( HX_CTX ,::kha::internal::BytesBlob_obj::fromBytes(bytes));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Kravur_obj,fromBytes,return )


hx::ObjectPtr< Kravur_obj > Kravur_obj::__new( ::kha::internal::BytesBlob blob) {
	hx::ObjectPtr< Kravur_obj > __this = new Kravur_obj();
	__this->__construct(blob);
	return __this;
}

hx::ObjectPtr< Kravur_obj > Kravur_obj::__alloc(hx::Ctx *_hx_ctx, ::kha::internal::BytesBlob blob) {
	Kravur_obj *__this = (Kravur_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Kravur_obj), true, "kha.Kravur"));
	*(void **)__this = Kravur_obj::_hx_vtable;
	__this->__construct(blob);
	return __this;
}

Kravur_obj::Kravur_obj()
{
}

void Kravur_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Kravur);
	HX_MARK_MEMBER_NAME(oldGlyphs,"oldGlyphs");
	HX_MARK_MEMBER_NAME(blob,"blob");
	HX_MARK_MEMBER_NAME(images,"images");
	HX_MARK_END_CLASS();
}

void Kravur_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(oldGlyphs,"oldGlyphs");
	HX_VISIT_MEMBER_NAME(blob,"blob");
	HX_VISIT_MEMBER_NAME(images,"images");
}

hx::Val Kravur_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"blob") ) { return hx::Val( blob ); }
		if (HX_FIELD_EQ(inName,"_get") ) { return hx::Val( _get_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"images") ) { return hx::Val( images ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height_dyn() ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"baseline") ) { return hx::Val( baseline_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"oldGlyphs") ) { return hx::Val( oldGlyphs ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"widthOfCharacters") ) { return hx::Val( widthOfCharacters_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Kravur_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
	}
	return false;
}

hx::Val Kravur_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"blob") ) { blob=inValue.Cast<  ::kha::internal::BytesBlob >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"images") ) { images=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"oldGlyphs") ) { oldGlyphs=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Kravur_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("oldGlyphs","\x4e","\x7d","\x44","\xb9"));
	outFields->push(HX_HCSTRING("blob","\x5d","\x3d","\x19","\x41"));
	outFields->push(HX_HCSTRING("images","\xb8","\x50","\x92","\xfe"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Kravur_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Kravur_obj,oldGlyphs),HX_HCSTRING("oldGlyphs","\x4e","\x7d","\x44","\xb9")},
	{hx::fsObject /*::kha::internal::BytesBlob*/ ,(int)offsetof(Kravur_obj,blob),HX_HCSTRING("blob","\x5d","\x3d","\x19","\x41")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Kravur_obj,images),HX_HCSTRING("images","\xb8","\x50","\x92","\xfe")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Kravur_obj_sStaticStorageInfo = 0;
#endif

static ::String Kravur_obj_sMemberFields[] = {
	HX_HCSTRING("oldGlyphs","\x4e","\x7d","\x44","\xb9"),
	HX_HCSTRING("blob","\x5d","\x3d","\x19","\x41"),
	HX_HCSTRING("images","\xb8","\x50","\x92","\xfe"),
	HX_HCSTRING("_get","\x97","\xc5","\x19","\x3f"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("widthOfCharacters","\xc7","\x93","\x4f","\x40"),
	HX_HCSTRING("baseline","\x85","\xdc","\x27","\x11"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	::String(null()) };

static void Kravur_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Kravur_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Kravur_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Kravur_obj::__mClass,"__mClass");
};

#endif

hx::Class Kravur_obj::__mClass;

static ::String Kravur_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	::String(null())
};

void Kravur_obj::__register()
{
	hx::Object *dummy = new Kravur_obj;
	Kravur_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.Kravur","\xe3","\x2a","\x15","\x17");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Kravur_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Kravur_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Kravur_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Kravur_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Kravur_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Kravur_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Kravur_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Kravur_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
