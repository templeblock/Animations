// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <kha/audio2/ogg/vorbis/data/Header.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Residue
#include <kha/audio2/ogg/vorbis/data/Residue.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7f2028beab98c670_21_new,"kha.audio2.ogg.vorbis.data.Residue","new",0x389109ed,"kha.audio2.ogg.vorbis.data.Residue.new","kha/audio2/ogg/vorbis/data/Residue.hx",21,0xcd2d4964)
HX_LOCAL_STACK_FRAME(_hx_pos_7f2028beab98c670_84_decode,"kha.audio2.ogg.vorbis.data.Residue","decode",0x3b2cd9c1,"kha.audio2.ogg.vorbis.data.Residue.decode","kha/audio2/ogg/vorbis/data/Residue.hx",84,0xcd2d4964)
HX_LOCAL_STACK_FRAME(_hx_pos_7f2028beab98c670_25_read,"kha.audio2.ogg.vorbis.data.Residue","read",0x48fc6d29,"kha.audio2.ogg.vorbis.data.Residue.read","kha/audio2/ogg/vorbis/data/Residue.hx",25,0xcd2d4964)
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Residue_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7f2028beab98c670_21_new)
            	}

Dynamic Residue_obj::__CreateEmpty() { return new Residue_obj; }

void *Residue_obj::_hx_vtable = 0;

Dynamic Residue_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Residue_obj > _hx_result = new Residue_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Residue_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b018c97;
}

void Residue_obj::decode( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState, ::kha::audio2::ogg::vorbis::data::Header header,::Array< ::Dynamic> residueBuffers,int ch,int n,::Array< bool > doNotDecode,::Array< ::Dynamic> channelBuffers){
            	HX_STACKFRAME(&_hx_pos_7f2028beab98c670_84_decode)
HXLINE(  86)		::Array< ::Dynamic> codebooks = header->codebooks;
HXLINE(  87)		int classwords = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,this->classbook)) )->dimensions;
HXLINE(  88)		int nRead = (this->end - this->begin);
HXLINE(  89)		int partSize = this->partSize;
HXLINE(  90)		int _hx_int = nRead;
HXDLIN(  90)		Float partRead;
HXDLIN(  90)		if ((_hx_int < (int)0)) {
HXLINE(  90)			partRead = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(  90)			partRead = (_hx_int + ((Float)0.0));
            		}
HXDLIN(  90)		int int1 = partSize;
HXDLIN(  90)		Float partRead1;
HXDLIN(  90)		if ((int1 < (int)0)) {
HXLINE(  90)			partRead1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE(  90)			partRead1 = (int1 + ((Float)0.0));
            		}
HXDLIN(  90)		int partRead2 = ::Std_obj::_hx_int(((Float)partRead / (Float)partRead1));
HXLINE(  91)		::Array< int > this1 = ::Array_obj< int >::__new(((header->channel * partRead2) + (int)1));
HXDLIN(  91)		::Array< int > classifications = this1;
HXLINE(  94)		{
HXLINE(  94)			int _g1 = (int)0;
HXDLIN(  94)			int _g = ch;
HXDLIN(  94)			while((_g1 < _g)){
HXLINE(  94)				_g1 = (_g1 + (int)1);
HXDLIN(  94)				int i = (_g1 - (int)1);
HXLINE(  95)				if (!(( (bool)(_hx_array_unsafe_get(doNotDecode,i)) ))) {
HXLINE(  96)					::Array< Float > buffer = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,i)) );
HXLINE(  97)					{
HXLINE(  97)						int _g3 = (int)0;
HXDLIN(  97)						int _g2 = buffer->length;
HXDLIN(  97)						while((_g3 < _g2)){
HXLINE(  97)							_g3 = (_g3 + (int)1);
HXDLIN(  97)							int j = (_g3 - (int)1);
HXLINE(  98)							buffer->__unsafe_set(j,(int)0);
            						}
            					}
            				}
            			}
            		}
HXLINE( 103)		bool _hx_tmp;
HXDLIN( 103)		if ((this->type == (int)2)) {
HXLINE( 103)			_hx_tmp = (ch != (int)1);
            		}
            		else {
HXLINE( 103)			_hx_tmp = false;
            		}
HXDLIN( 103)		if (_hx_tmp) {
HXLINE( 104)			{
HXLINE( 104)				int _g11 = (int)0;
HXDLIN( 104)				int _g4 = ch;
HXDLIN( 104)				while((_g11 < _g4)){
HXLINE( 104)					_g11 = (_g11 + (int)1);
HXDLIN( 104)					int j1 = (_g11 - (int)1);
HXLINE( 105)					if (!(( (bool)(_hx_array_unsafe_get(doNotDecode,j1)) ))) {
HXLINE( 106)						goto _hx_goto_3;
            					}
            					else {
HXLINE( 107)						if ((j1 == (ch - (int)1))) {
HXLINE( 108)							return;
            						}
            					}
            				}
            				_hx_goto_3:;
            			}
HXLINE( 113)			{
HXLINE( 113)				int _g5 = (int)0;
HXDLIN( 113)				while((_g5 < (int)8)){
HXLINE( 113)					_g5 = (_g5 + (int)1);
HXDLIN( 113)					int pass = (_g5 - (int)1);
HXLINE( 114)					int pcount = (int)0;
HXDLIN( 114)					int classSet = (int)0;
HXLINE( 115)					if ((ch == (int)2)) {
HXLINE( 117)						while((pcount < partRead2)){
HXLINE( 118)							int z = (this->begin + (pcount * partSize));
HXLINE( 119)							int cInter = ((int)z & (int)(int)1);
HXLINE( 120)							int pInter = hx::UShr(z,(int)1);
HXLINE( 121)							if ((pass == (int)0)) {
HXLINE( 122)								 ::kha::audio2::ogg::vorbis::data::Codebook c = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,this->classbook)) );
HXLINE( 123)								if ((decodeState->validBits < (int)10)) {
HXLINE( 123)									decodeState->prepHuffman();
            								}
HXDLIN( 123)								int i1 = ( (int)(_hx_array_unsafe_get(c->fastHuffman,((int)decodeState->acc & (int)(int)1023))) );
HXDLIN( 123)								int val;
HXDLIN( 123)								if ((i1 >= (int)0)) {
HXLINE( 123)									int l = ( (int)(_hx_array_unsafe_get(c->codewordLengths,i1)) );
HXDLIN( 123)									decodeState->acc = hx::UShr(decodeState->acc,l);
HXDLIN( 123)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState1 = decodeState;
HXDLIN( 123)									decodeState1->validBits = (decodeState1->validBits - l);
HXDLIN( 123)									if ((decodeState->validBits < (int)0)) {
HXLINE( 123)										decodeState->validBits = (int)0;
HXDLIN( 123)										val = (int)-1;
            									}
            									else {
HXLINE( 123)										val = i1;
            									}
            								}
            								else {
HXLINE( 123)									val = decodeState->decodeScalarRaw(c);
            								}
HXDLIN( 123)								if (c->sparse) {
HXLINE( 123)									val = ( (int)(_hx_array_unsafe_get(c->sortedValues,val)) );
            								}
HXDLIN( 123)								int q = val;
HXLINE( 124)								if ((q == (int)-1)) {
HXLINE( 125)									return;
            								}
HXLINE( 127)								int i2 = classwords;
HXLINE( 128)								while(true){
HXLINE( 128)									i2 = (i2 - (int)1);
HXDLIN( 128)									if (!((i2 >= (int)0))) {
HXLINE( 128)										goto _hx_goto_6;
            									}
HXLINE( 129)									{
HXLINE( 129)										 ::Dynamic classifications1 = classifications->__Field(HX_("__unsafe_set",e9,ea,a4,60),hx::paccDynamic);
HXDLIN( 129)										classifications1((i2 + pcount),hx::Mod(q,this->classifications));
            									}
HXLINE( 130)									q = ::Std_obj::_hx_int(((Float)q / (Float)this->classifications));
            								}
            								_hx_goto_6:;
            							}
HXLINE( 134)							{
HXLINE( 134)								int _g21 = (int)0;
HXDLIN( 134)								int _g12 = classwords;
HXDLIN( 134)								while((_g21 < _g12)){
HXLINE( 134)									_g21 = (_g21 + (int)1);
HXDLIN( 134)									int i3 = (_g21 - (int)1);
HXLINE( 135)									if ((pcount >= partRead2)) {
HXLINE( 136)										goto _hx_goto_7;
            									}
HXLINE( 138)									int z1 = (this->begin + (pcount * partSize));
HXLINE( 139)									int c1 = ( (int)(_hx_array_unsafe_get(classifications,pcount)) );
HXLINE( 140)									int b = ( (int)(_hx_array_unsafe_get(( (::Array< int >)(_hx_array_unsafe_get(this->residueBooks,c1)) ),pass)) );
HXLINE( 141)									if ((b >= (int)0)) {
HXLINE( 142)										 ::kha::audio2::ogg::vorbis::data::Codebook book = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,b)) );
HXLINE( 144)										 ::Dynamic result = book->decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
HXLINE( 145)										if (hx::IsNull( result )) {
HXLINE( 146)											return;
            										}
            										else {
HXLINE( 148)											cInter = ( (int)(result->__Field(HX_("cInter",b9,e7,a2,e6),hx::paccDynamic)) );
HXLINE( 149)											pInter = ( (int)(result->__Field(HX_("pInter",8c,98,46,19),hx::paccDynamic)) );
            										}
            									}
            									else {
HXLINE( 153)										z1 = (z1 + partSize);
HXLINE( 154)										cInter = ((int)z1 & (int)(int)1);
HXLINE( 155)										pInter = hx::UShr(z1,(int)1);
            									}
HXLINE( 157)									pcount = (pcount + (int)1);
            								}
            								_hx_goto_7:;
            							}
            						}
            					}
            					else {
HXLINE( 161)						if ((ch == (int)1)) {
HXLINE( 162)							while((pcount < partRead2)){
HXLINE( 163)								int z2 = (this->begin + (pcount * partSize));
HXLINE( 164)								int cInter1 = (int)0;
HXLINE( 165)								int pInter1 = z2;
HXLINE( 166)								if ((pass == (int)0)) {
HXLINE( 167)									 ::kha::audio2::ogg::vorbis::data::Codebook c2 = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,this->classbook)) );
HXLINE( 168)									if ((decodeState->validBits < (int)10)) {
HXLINE( 168)										decodeState->prepHuffman();
            									}
HXDLIN( 168)									int i4 = ( (int)(_hx_array_unsafe_get(c2->fastHuffman,((int)decodeState->acc & (int)(int)1023))) );
HXDLIN( 168)									int val1;
HXDLIN( 168)									if ((i4 >= (int)0)) {
HXLINE( 168)										int l1 = ( (int)(_hx_array_unsafe_get(c2->codewordLengths,i4)) );
HXDLIN( 168)										decodeState->acc = hx::UShr(decodeState->acc,l1);
HXDLIN( 168)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState2 = decodeState;
HXDLIN( 168)										decodeState2->validBits = (decodeState2->validBits - l1);
HXDLIN( 168)										if ((decodeState->validBits < (int)0)) {
HXLINE( 168)											decodeState->validBits = (int)0;
HXDLIN( 168)											val1 = (int)-1;
            										}
            										else {
HXLINE( 168)											val1 = i4;
            										}
            									}
            									else {
HXLINE( 168)										val1 = decodeState->decodeScalarRaw(c2);
            									}
HXDLIN( 168)									if (c2->sparse) {
HXLINE( 168)										val1 = ( (int)(_hx_array_unsafe_get(c2->sortedValues,val1)) );
            									}
HXDLIN( 168)									int q1 = val1;
HXLINE( 169)									if ((q1 == (int)-1)) {
HXLINE( 169)										return;
            									}
HXLINE( 171)									int i5 = classwords;
HXLINE( 172)									while(true){
HXLINE( 172)										i5 = (i5 - (int)1);
HXDLIN( 172)										if (!((i5 >= (int)0))) {
HXLINE( 172)											goto _hx_goto_9;
            										}
HXLINE( 173)										{
HXLINE( 173)											 ::Dynamic classifications2 = classifications->__Field(HX_("__unsafe_set",e9,ea,a4,60),hx::paccDynamic);
HXDLIN( 173)											classifications2((i5 + pcount),hx::Mod(q1,this->classifications));
            										}
HXLINE( 174)										q1 = ::Std_obj::_hx_int(((Float)q1 / (Float)this->classifications));
            									}
            									_hx_goto_9:;
            								}
HXLINE( 178)								{
HXLINE( 178)									int _g22 = (int)0;
HXDLIN( 178)									int _g13 = classwords;
HXDLIN( 178)									while((_g22 < _g13)){
HXLINE( 178)										_g22 = (_g22 + (int)1);
HXDLIN( 178)										int i6 = (_g22 - (int)1);
HXLINE( 179)										if ((pcount >= partRead2)) {
HXLINE( 180)											goto _hx_goto_10;
            										}
HXLINE( 182)										int z3 = (this->begin + (pcount * partSize));
HXLINE( 183)										::Array< ::Dynamic> this2 = this->residueBooks;
HXDLIN( 183)										int b1 = ( (int)(_hx_array_unsafe_get(( (::Array< int >)(_hx_array_unsafe_get(this2,( (int)(_hx_array_unsafe_get(classifications,pcount)) ))) ),pass)) );
HXLINE( 184)										if ((b1 >= (int)0)) {
HXLINE( 185)											 ::kha::audio2::ogg::vorbis::data::Codebook book1 = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,b1)) );
HXLINE( 187)											 ::Dynamic result1 = book1->decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
HXLINE( 188)											if (hx::IsNull( result1 )) {
HXLINE( 189)												return;
            											}
            											else {
HXLINE( 191)												cInter1 = ( (int)(result1->__Field(HX_("cInter",b9,e7,a2,e6),hx::paccDynamic)) );
HXLINE( 192)												pInter1 = ( (int)(result1->__Field(HX_("pInter",8c,98,46,19),hx::paccDynamic)) );
            											}
            										}
            										else {
HXLINE( 196)											z3 = (z3 + partSize);
HXLINE( 197)											cInter1 = (int)0;
HXLINE( 198)											pInter1 = z3;
            										}
HXLINE( 200)										pcount = (pcount + (int)1);
            									}
            									_hx_goto_10:;
            								}
            							}
            						}
            						else {
HXLINE( 204)							while((pcount < partRead2)){
HXLINE( 205)								int z4 = (this->begin + (pcount * partSize));
HXLINE( 206)								int int2 = z4;
HXDLIN( 206)								Float cInter2;
HXDLIN( 206)								if ((int2 < (int)0)) {
HXLINE( 206)									cInter2 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE( 206)									cInter2 = (int2 + ((Float)0.0));
            								}
HXDLIN( 206)								int int3 = ch;
HXDLIN( 206)								Float cInter3;
HXDLIN( 206)								if ((int3 < (int)0)) {
HXLINE( 206)									cInter3 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE( 206)									cInter3 = (int3 + ((Float)0.0));
            								}
HXDLIN( 206)								int cInter4 = ::Std_obj::_hx_int(hx::Mod(cInter2,cInter3));
HXLINE( 207)								int int4 = z4;
HXDLIN( 207)								Float pInter2;
HXDLIN( 207)								if ((int4 < (int)0)) {
HXLINE( 207)									pInter2 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE( 207)									pInter2 = (int4 + ((Float)0.0));
            								}
HXDLIN( 207)								int int5 = ch;
HXDLIN( 207)								Float pInter3;
HXDLIN( 207)								if ((int5 < (int)0)) {
HXLINE( 207)									pInter3 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE( 207)									pInter3 = (int5 + ((Float)0.0));
            								}
HXDLIN( 207)								int pInter4 = ::Std_obj::_hx_int(((Float)pInter2 / (Float)pInter3));
HXLINE( 209)								if ((pass == (int)0)) {
HXLINE( 210)									 ::kha::audio2::ogg::vorbis::data::Codebook c3 = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,this->classbook)) );
HXLINE( 211)									if ((decodeState->validBits < (int)10)) {
HXLINE( 211)										decodeState->prepHuffman();
            									}
HXDLIN( 211)									int i7 = ( (int)(_hx_array_unsafe_get(c3->fastHuffman,((int)decodeState->acc & (int)(int)1023))) );
HXDLIN( 211)									int val2;
HXDLIN( 211)									if ((i7 >= (int)0)) {
HXLINE( 211)										int l2 = ( (int)(_hx_array_unsafe_get(c3->codewordLengths,i7)) );
HXDLIN( 211)										decodeState->acc = hx::UShr(decodeState->acc,l2);
HXDLIN( 211)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState3 = decodeState;
HXDLIN( 211)										decodeState3->validBits = (decodeState3->validBits - l2);
HXDLIN( 211)										if ((decodeState->validBits < (int)0)) {
HXLINE( 211)											decodeState->validBits = (int)0;
HXDLIN( 211)											val2 = (int)-1;
            										}
            										else {
HXLINE( 211)											val2 = i7;
            										}
            									}
            									else {
HXLINE( 211)										val2 = decodeState->decodeScalarRaw(c3);
            									}
HXDLIN( 211)									if (c3->sparse) {
HXLINE( 211)										val2 = ( (int)(_hx_array_unsafe_get(c3->sortedValues,val2)) );
            									}
HXDLIN( 211)									int q2 = val2;
HXLINE( 212)									if ((q2 == (int)-1)) {
HXLINE( 213)										return;
            									}
HXLINE( 216)									int i8 = classwords;
HXLINE( 217)									while(true){
HXLINE( 217)										i8 = (i8 - (int)1);
HXDLIN( 217)										if (!((i8 >= (int)0))) {
HXLINE( 217)											goto _hx_goto_12;
            										}
HXLINE( 218)										{
HXLINE( 218)											 ::Dynamic classifications3 = classifications->__Field(HX_("__unsafe_set",e9,ea,a4,60),hx::paccDynamic);
HXDLIN( 218)											classifications3((i8 + pcount),hx::Mod(q2,this->classifications));
            										}
HXLINE( 219)										q2 = ::Std_obj::_hx_int(((Float)q2 / (Float)this->classifications));
            									}
            									_hx_goto_12:;
            								}
HXLINE( 223)								{
HXLINE( 223)									int _g23 = (int)0;
HXDLIN( 223)									int _g14 = classwords;
HXDLIN( 223)									while((_g23 < _g14)){
HXLINE( 223)										_g23 = (_g23 + (int)1);
HXDLIN( 223)										int i9 = (_g23 - (int)1);
HXLINE( 224)										if ((pcount >= partRead2)) {
HXLINE( 225)											goto _hx_goto_13;
            										}
HXLINE( 227)										int z5 = (this->begin + (pcount * partSize));
HXLINE( 228)										::Array< ::Dynamic> this3 = this->residueBooks;
HXDLIN( 228)										int b2 = ( (int)(_hx_array_unsafe_get(( (::Array< int >)(_hx_array_unsafe_get(this3,( (int)(_hx_array_unsafe_get(classifications,pcount)) ))) ),pass)) );
HXLINE( 229)										if ((b2 >= (int)0)) {
HXLINE( 230)											 ::kha::audio2::ogg::vorbis::data::Codebook book2 = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,b2)) );
HXLINE( 232)											 ::Dynamic result2 = book2->decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter4,pInter4,n,partSize);
HXLINE( 233)											if (hx::IsNull( result2 )) {
HXLINE( 234)												return;
            											}
            											else {
HXLINE( 236)												cInter4 = ( (int)(result2->__Field(HX_("cInter",b9,e7,a2,e6),hx::paccDynamic)) );
HXLINE( 237)												pInter4 = ( (int)(result2->__Field(HX_("pInter",8c,98,46,19),hx::paccDynamic)) );
            											}
            										}
            										else {
HXLINE( 241)											z5 = (z5 + partSize);
HXLINE( 242)											int int6 = z5;
HXDLIN( 242)											Float cInter5;
HXDLIN( 242)											if ((int6 < (int)0)) {
HXLINE( 242)												cInter5 = (((Float)4294967296.0) + int6);
            											}
            											else {
HXLINE( 242)												cInter5 = (int6 + ((Float)0.0));
            											}
HXDLIN( 242)											int int7 = ch;
HXDLIN( 242)											Float cInter6;
HXDLIN( 242)											if ((int7 < (int)0)) {
HXLINE( 242)												cInter6 = (((Float)4294967296.0) + int7);
            											}
            											else {
HXLINE( 242)												cInter6 = (int7 + ((Float)0.0));
            											}
HXDLIN( 242)											cInter4 = ::Std_obj::_hx_int(hx::Mod(cInter5,cInter6));
HXLINE( 243)											int int8 = z5;
HXDLIN( 243)											Float pInter5;
HXDLIN( 243)											if ((int8 < (int)0)) {
HXLINE( 243)												pInter5 = (((Float)4294967296.0) + int8);
            											}
            											else {
HXLINE( 243)												pInter5 = (int8 + ((Float)0.0));
            											}
HXDLIN( 243)											int int9 = ch;
HXDLIN( 243)											Float pInter6;
HXDLIN( 243)											if ((int9 < (int)0)) {
HXLINE( 243)												pInter6 = (((Float)4294967296.0) + int9);
            											}
            											else {
HXLINE( 243)												pInter6 = (int9 + ((Float)0.0));
            											}
HXDLIN( 243)											pInter4 = ::Std_obj::_hx_int(((Float)pInter5 / (Float)pInter6));
            										}
HXLINE( 245)										pcount = (pcount + (int)1);
            									}
            									_hx_goto_13:;
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 250)			return;
            		}
HXLINE( 254)		{
HXLINE( 254)			int _g6 = (int)0;
HXDLIN( 254)			while((_g6 < (int)8)){
HXLINE( 254)				_g6 = (_g6 + (int)1);
HXDLIN( 254)				int pass1 = (_g6 - (int)1);
HXLINE( 255)				int pcount1 = (int)0;
HXLINE( 256)				int classSet1 = (int)0;
HXLINE( 257)				while((pcount1 < partRead2)){
HXLINE( 258)					if ((pass1 == (int)0)) {
HXLINE( 259)						int _g24 = (int)0;
HXDLIN( 259)						int _g15 = ch;
HXDLIN( 259)						while((_g24 < _g15)){
HXLINE( 259)							_g24 = (_g24 + (int)1);
HXDLIN( 259)							int j2 = (_g24 - (int)1);
HXLINE( 260)							if (!(( (bool)(_hx_array_unsafe_get(doNotDecode,j2)) ))) {
HXLINE( 261)								 ::kha::audio2::ogg::vorbis::data::Codebook c4 = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,this->classbook)) );
HXLINE( 262)								if ((decodeState->validBits < (int)10)) {
HXLINE( 262)									decodeState->prepHuffman();
            								}
HXDLIN( 262)								int i10 = ( (int)(_hx_array_unsafe_get(c4->fastHuffman,((int)decodeState->acc & (int)(int)1023))) );
HXDLIN( 262)								int val3;
HXDLIN( 262)								if ((i10 >= (int)0)) {
HXLINE( 262)									int l3 = ( (int)(_hx_array_unsafe_get(c4->codewordLengths,i10)) );
HXDLIN( 262)									decodeState->acc = hx::UShr(decodeState->acc,l3);
HXDLIN( 262)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState4 = decodeState;
HXDLIN( 262)									decodeState4->validBits = (decodeState4->validBits - l3);
HXDLIN( 262)									if ((decodeState->validBits < (int)0)) {
HXLINE( 262)										decodeState->validBits = (int)0;
HXDLIN( 262)										val3 = (int)-1;
            									}
            									else {
HXLINE( 262)										val3 = i10;
            									}
            								}
            								else {
HXLINE( 262)									val3 = decodeState->decodeScalarRaw(c4);
            								}
HXDLIN( 262)								if (c4->sparse) {
HXLINE( 262)									val3 = ( (int)(_hx_array_unsafe_get(c4->sortedValues,val3)) );
            								}
HXDLIN( 262)								int temp = val3;
HXLINE( 263)								if ((temp == (int)-1)) {
HXLINE( 264)									return;
            								}
HXLINE( 266)								int i11 = classwords;
HXLINE( 267)								while(true){
HXLINE( 267)									i11 = (i11 - (int)1);
HXDLIN( 267)									if (!((i11 >= (int)0))) {
HXLINE( 267)										goto _hx_goto_17;
            									}
HXLINE( 268)									{
HXLINE( 268)										 ::Dynamic classifications4 = classifications->__Field(HX_("__unsafe_set",e9,ea,a4,60),hx::paccDynamic);
HXDLIN( 268)										classifications4((((j2 * partRead2) + i11) + pcount1),hx::Mod(temp,this->classifications));
            									}
HXLINE( 269)									temp = ::Std_obj::_hx_int(((Float)temp / (Float)this->classifications));
            								}
            								_hx_goto_17:;
            							}
            						}
            					}
HXLINE( 274)					{
HXLINE( 274)						int _g25 = (int)0;
HXDLIN( 274)						int _g16 = classwords;
HXDLIN( 274)						while((_g25 < _g16)){
HXLINE( 274)							_g25 = (_g25 + (int)1);
HXDLIN( 274)							int i12 = (_g25 - (int)1);
HXLINE( 275)							if ((pcount1 >= partRead2)) {
HXLINE( 276)								goto _hx_goto_18;
            							}
HXLINE( 278)							{
HXLINE( 278)								int _g41 = (int)0;
HXDLIN( 278)								int _g31 = ch;
HXDLIN( 278)								while((_g41 < _g31)){
HXLINE( 278)									_g41 = (_g41 + (int)1);
HXDLIN( 278)									int j3 = (_g41 - (int)1);
HXLINE( 279)									if (!(( (bool)(_hx_array_unsafe_get(doNotDecode,j3)) ))) {
HXLINE( 280)										int c5 = ( (int)(_hx_array_unsafe_get(classifications,((j3 * partRead2) + pcount1))) );
HXLINE( 281)										int b3 = ( (int)(_hx_array_unsafe_get(( (::Array< int >)(_hx_array_unsafe_get(this->residueBooks,c5)) ),pass1)) );
HXLINE( 282)										if ((b3 >= (int)0)) {
HXLINE( 283)											::Array< Float > target = ( (::Array< Float >)(_hx_array_unsafe_get(residueBuffers,j3)) );
HXLINE( 284)											int offset = (this->begin + (pcount1 * partSize));
HXLINE( 285)											int n1 = partSize;
HXLINE( 286)											 ::kha::audio2::ogg::vorbis::data::Codebook book3 = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,b3)) );
HXLINE( 287)											if (!(book3->residueDecode(decodeState,target,offset,n1,this->type))) {
HXLINE( 288)												return;
            											}
            										}
            									}
            								}
            							}
HXLINE( 293)							pcount1 = (pcount1 + (int)1);
            						}
            						_hx_goto_18:;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(Residue_obj,decode,(void))

 ::kha::audio2::ogg::vorbis::data::Residue Residue_obj::read( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,::Array< ::Dynamic> codebooks){
            	HX_GC_STACKFRAME(&_hx_pos_7f2028beab98c670_25_read)
HXLINE(  26)		 ::kha::audio2::ogg::vorbis::data::Residue r =  ::kha::audio2::ogg::vorbis::data::Residue_obj::__alloc( HX_CTX );
HXLINE(  27)		int _hx_tmp;
HXDLIN(  27)		if ((decodeState->validBits < (int)0)) {
HXLINE(  27)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  27)			if ((decodeState->validBits < (int)16)) {
HXLINE(  27)				if ((decodeState->validBits == (int)0)) {
HXLINE(  27)					decodeState->acc = (int)0;
            				}
HXDLIN(  27)				while(true){
HXLINE(  27)					bool _hx_tmp1;
HXDLIN(  27)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  27)						if (!(decodeState->lastSeg)) {
HXLINE(  27)							_hx_tmp1 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  27)							_hx_tmp1 = true;
            						}
            					}
            					else {
HXLINE(  27)						_hx_tmp1 = false;
            					}
HXDLIN(  27)					if (_hx_tmp1) {
HXLINE(  27)						decodeState->validBits = (int)-1;
HXDLIN(  27)						goto _hx_goto_21;
            					}
            					else {
HXLINE(  27)						decodeState->bytesInSeg--;
HXDLIN(  27)						int a = decodeState->acc;
HXDLIN(  27)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState1 = decodeState;
HXDLIN(  27)						decodeState1->inputPosition = (decodeState1->inputPosition + (int)1);
HXDLIN(  27)						int b = decodeState->input->readByte();
HXDLIN(  27)						decodeState->acc = (a + ((int)b << (int)decodeState->validBits));
HXDLIN(  27)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState2 = decodeState;
HXDLIN(  27)						decodeState2->validBits = (decodeState2->validBits + (int)8);
            					}
HXDLIN(  27)					if (!((decodeState->validBits < (int)16))) {
HXLINE(  27)						goto _hx_goto_21;
            					}
            				}
            				_hx_goto_21:;
HXDLIN(  27)				if ((decodeState->validBits < (int)0)) {
HXLINE(  27)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE(  27)					int z = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  27)					decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  27)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState3 = decodeState;
HXDLIN(  27)					decodeState3->validBits = (decodeState3->validBits - (int)16);
HXDLIN(  27)					_hx_tmp = z;
            				}
            			}
            			else {
HXLINE(  27)				int z1 = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  27)				decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  27)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState4 = decodeState;
HXDLIN(  27)				decodeState4->validBits = (decodeState4->validBits - (int)16);
HXDLIN(  27)				_hx_tmp = z1;
            			}
            		}
HXDLIN(  27)		r->type = _hx_tmp;
HXLINE(  28)		if ((r->type > (int)2)) {
HXLINE(  29)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Residue.hx",73,8f,87,2d),29,HX_("kha.audio2.ogg.vorbis.data.Residue",7b,8f,98,ce),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  32)		::Array< int > this1 = ::Array_obj< int >::__new((int)64);
HXDLIN(  32)		::Array< int > residueCascade = this1;
HXLINE(  33)		int _hx_tmp2;
HXDLIN(  33)		if ((decodeState->validBits < (int)0)) {
HXLINE(  33)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE(  33)			if ((decodeState->validBits < (int)24)) {
HXLINE(  33)				if ((decodeState->validBits == (int)0)) {
HXLINE(  33)					decodeState->acc = (int)0;
            				}
HXDLIN(  33)				while(true){
HXLINE(  33)					bool _hx_tmp3;
HXDLIN(  33)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  33)						if (!(decodeState->lastSeg)) {
HXLINE(  33)							_hx_tmp3 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  33)							_hx_tmp3 = true;
            						}
            					}
            					else {
HXLINE(  33)						_hx_tmp3 = false;
            					}
HXDLIN(  33)					if (_hx_tmp3) {
HXLINE(  33)						decodeState->validBits = (int)-1;
HXDLIN(  33)						goto _hx_goto_22;
            					}
            					else {
HXLINE(  33)						decodeState->bytesInSeg--;
HXDLIN(  33)						int a1 = decodeState->acc;
HXDLIN(  33)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState5 = decodeState;
HXDLIN(  33)						decodeState5->inputPosition = (decodeState5->inputPosition + (int)1);
HXDLIN(  33)						int b1 = decodeState->input->readByte();
HXDLIN(  33)						decodeState->acc = (a1 + ((int)b1 << (int)decodeState->validBits));
HXDLIN(  33)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState6 = decodeState;
HXDLIN(  33)						decodeState6->validBits = (decodeState6->validBits + (int)8);
            					}
HXDLIN(  33)					if (!((decodeState->validBits < (int)24))) {
HXLINE(  33)						goto _hx_goto_22;
            					}
            				}
            				_hx_goto_22:;
HXDLIN(  33)				if ((decodeState->validBits < (int)0)) {
HXLINE(  33)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE(  33)					int z2 = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  33)					decodeState->acc = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  33)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState7 = decodeState;
HXDLIN(  33)					decodeState7->validBits = (decodeState7->validBits - (int)24);
HXDLIN(  33)					_hx_tmp2 = z2;
            				}
            			}
            			else {
HXLINE(  33)				int z3 = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  33)				decodeState->acc = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  33)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState8 = decodeState;
HXDLIN(  33)				decodeState8->validBits = (decodeState8->validBits - (int)24);
HXDLIN(  33)				_hx_tmp2 = z3;
            			}
            		}
HXDLIN(  33)		r->begin = _hx_tmp2;
HXLINE(  34)		int _hx_tmp4;
HXDLIN(  34)		if ((decodeState->validBits < (int)0)) {
HXLINE(  34)			_hx_tmp4 = (int)0;
            		}
            		else {
HXLINE(  34)			if ((decodeState->validBits < (int)24)) {
HXLINE(  34)				if ((decodeState->validBits == (int)0)) {
HXLINE(  34)					decodeState->acc = (int)0;
            				}
HXDLIN(  34)				while(true){
HXLINE(  34)					bool _hx_tmp5;
HXDLIN(  34)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  34)						if (!(decodeState->lastSeg)) {
HXLINE(  34)							_hx_tmp5 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  34)							_hx_tmp5 = true;
            						}
            					}
            					else {
HXLINE(  34)						_hx_tmp5 = false;
            					}
HXDLIN(  34)					if (_hx_tmp5) {
HXLINE(  34)						decodeState->validBits = (int)-1;
HXDLIN(  34)						goto _hx_goto_23;
            					}
            					else {
HXLINE(  34)						decodeState->bytesInSeg--;
HXDLIN(  34)						int a2 = decodeState->acc;
HXDLIN(  34)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState9 = decodeState;
HXDLIN(  34)						decodeState9->inputPosition = (decodeState9->inputPosition + (int)1);
HXDLIN(  34)						int b2 = decodeState->input->readByte();
HXDLIN(  34)						decodeState->acc = (a2 + ((int)b2 << (int)decodeState->validBits));
HXDLIN(  34)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState10 = decodeState;
HXDLIN(  34)						decodeState10->validBits = (decodeState10->validBits + (int)8);
            					}
HXDLIN(  34)					if (!((decodeState->validBits < (int)24))) {
HXLINE(  34)						goto _hx_goto_23;
            					}
            				}
            				_hx_goto_23:;
HXDLIN(  34)				if ((decodeState->validBits < (int)0)) {
HXLINE(  34)					_hx_tmp4 = (int)0;
            				}
            				else {
HXLINE(  34)					int z4 = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  34)					decodeState->acc = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  34)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState11 = decodeState;
HXDLIN(  34)					decodeState11->validBits = (decodeState11->validBits - (int)24);
HXDLIN(  34)					_hx_tmp4 = z4;
            				}
            			}
            			else {
HXLINE(  34)				int z5 = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  34)				decodeState->acc = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  34)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState12 = decodeState;
HXDLIN(  34)				decodeState12->validBits = (decodeState12->validBits - (int)24);
HXDLIN(  34)				_hx_tmp4 = z5;
            			}
            		}
HXDLIN(  34)		r->end = _hx_tmp4;
HXLINE(  35)		int _hx_tmp6;
HXDLIN(  35)		if ((decodeState->validBits < (int)0)) {
HXLINE(  35)			_hx_tmp6 = (int)0;
            		}
            		else {
HXLINE(  35)			if ((decodeState->validBits < (int)24)) {
HXLINE(  35)				if ((decodeState->validBits == (int)0)) {
HXLINE(  35)					decodeState->acc = (int)0;
            				}
HXDLIN(  35)				while(true){
HXLINE(  35)					bool _hx_tmp7;
HXDLIN(  35)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  35)						if (!(decodeState->lastSeg)) {
HXLINE(  35)							_hx_tmp7 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  35)							_hx_tmp7 = true;
            						}
            					}
            					else {
HXLINE(  35)						_hx_tmp7 = false;
            					}
HXDLIN(  35)					if (_hx_tmp7) {
HXLINE(  35)						decodeState->validBits = (int)-1;
HXDLIN(  35)						goto _hx_goto_24;
            					}
            					else {
HXLINE(  35)						decodeState->bytesInSeg--;
HXDLIN(  35)						int a3 = decodeState->acc;
HXDLIN(  35)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState13 = decodeState;
HXDLIN(  35)						decodeState13->inputPosition = (decodeState13->inputPosition + (int)1);
HXDLIN(  35)						int b3 = decodeState->input->readByte();
HXDLIN(  35)						decodeState->acc = (a3 + ((int)b3 << (int)decodeState->validBits));
HXDLIN(  35)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState14 = decodeState;
HXDLIN(  35)						decodeState14->validBits = (decodeState14->validBits + (int)8);
            					}
HXDLIN(  35)					if (!((decodeState->validBits < (int)24))) {
HXLINE(  35)						goto _hx_goto_24;
            					}
            				}
            				_hx_goto_24:;
HXDLIN(  35)				if ((decodeState->validBits < (int)0)) {
HXLINE(  35)					_hx_tmp6 = (int)0;
            				}
            				else {
HXLINE(  35)					int z6 = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  35)					decodeState->acc = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  35)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState15 = decodeState;
HXDLIN(  35)					decodeState15->validBits = (decodeState15->validBits - (int)24);
HXDLIN(  35)					_hx_tmp6 = z6;
            				}
            			}
            			else {
HXLINE(  35)				int z7 = ((int)decodeState->acc & (int)(int)16777215);
HXDLIN(  35)				decodeState->acc = hx::UShr(decodeState->acc,(int)24);
HXDLIN(  35)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState16 = decodeState;
HXDLIN(  35)				decodeState16->validBits = (decodeState16->validBits - (int)24);
HXDLIN(  35)				_hx_tmp6 = z7;
            			}
            		}
HXDLIN(  35)		r->partSize = (_hx_tmp6 + (int)1);
HXLINE(  36)		int classifications;
HXDLIN(  36)		if ((decodeState->validBits < (int)0)) {
HXLINE(  36)			classifications = (int)0;
            		}
            		else {
HXLINE(  36)			if ((decodeState->validBits < (int)6)) {
HXLINE(  36)				if ((decodeState->validBits == (int)0)) {
HXLINE(  36)					decodeState->acc = (int)0;
            				}
HXDLIN(  36)				while(true){
HXLINE(  36)					bool classifications1;
HXDLIN(  36)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  36)						if (!(decodeState->lastSeg)) {
HXLINE(  36)							classifications1 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  36)							classifications1 = true;
            						}
            					}
            					else {
HXLINE(  36)						classifications1 = false;
            					}
HXDLIN(  36)					if (classifications1) {
HXLINE(  36)						decodeState->validBits = (int)-1;
HXDLIN(  36)						goto _hx_goto_25;
            					}
            					else {
HXLINE(  36)						decodeState->bytesInSeg--;
HXDLIN(  36)						int a4 = decodeState->acc;
HXDLIN(  36)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState17 = decodeState;
HXDLIN(  36)						decodeState17->inputPosition = (decodeState17->inputPosition + (int)1);
HXDLIN(  36)						int b4 = decodeState->input->readByte();
HXDLIN(  36)						decodeState->acc = (a4 + ((int)b4 << (int)decodeState->validBits));
HXDLIN(  36)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState18 = decodeState;
HXDLIN(  36)						decodeState18->validBits = (decodeState18->validBits + (int)8);
            					}
HXDLIN(  36)					if (!((decodeState->validBits < (int)6))) {
HXLINE(  36)						goto _hx_goto_25;
            					}
            				}
            				_hx_goto_25:;
HXDLIN(  36)				if ((decodeState->validBits < (int)0)) {
HXLINE(  36)					classifications = (int)0;
            				}
            				else {
HXLINE(  36)					int z8 = ((int)decodeState->acc & (int)(int)63);
HXDLIN(  36)					decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN(  36)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState19 = decodeState;
HXDLIN(  36)					decodeState19->validBits = (decodeState19->validBits - (int)6);
HXDLIN(  36)					classifications = z8;
            				}
            			}
            			else {
HXLINE(  36)				int z9 = ((int)decodeState->acc & (int)(int)63);
HXDLIN(  36)				decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN(  36)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState20 = decodeState;
HXDLIN(  36)				decodeState20->validBits = (decodeState20->validBits - (int)6);
HXDLIN(  36)				classifications = z9;
            			}
            		}
HXDLIN(  36)		int classifications2 = (r->classifications = (classifications + (int)1));
HXLINE(  37)		int _hx_tmp8;
HXDLIN(  37)		if ((decodeState->validBits < (int)0)) {
HXLINE(  37)			_hx_tmp8 = (int)0;
            		}
            		else {
HXLINE(  37)			if ((decodeState->validBits < (int)8)) {
HXLINE(  37)				if ((decodeState->validBits == (int)0)) {
HXLINE(  37)					decodeState->acc = (int)0;
            				}
HXDLIN(  37)				while(true){
HXLINE(  37)					bool _hx_tmp9;
HXDLIN(  37)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  37)						if (!(decodeState->lastSeg)) {
HXLINE(  37)							_hx_tmp9 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  37)							_hx_tmp9 = true;
            						}
            					}
            					else {
HXLINE(  37)						_hx_tmp9 = false;
            					}
HXDLIN(  37)					if (_hx_tmp9) {
HXLINE(  37)						decodeState->validBits = (int)-1;
HXDLIN(  37)						goto _hx_goto_26;
            					}
            					else {
HXLINE(  37)						decodeState->bytesInSeg--;
HXDLIN(  37)						int a5 = decodeState->acc;
HXDLIN(  37)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState21 = decodeState;
HXDLIN(  37)						decodeState21->inputPosition = (decodeState21->inputPosition + (int)1);
HXDLIN(  37)						int b5 = decodeState->input->readByte();
HXDLIN(  37)						decodeState->acc = (a5 + ((int)b5 << (int)decodeState->validBits));
HXDLIN(  37)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState22 = decodeState;
HXDLIN(  37)						decodeState22->validBits = (decodeState22->validBits + (int)8);
            					}
HXDLIN(  37)					if (!((decodeState->validBits < (int)8))) {
HXLINE(  37)						goto _hx_goto_26;
            					}
            				}
            				_hx_goto_26:;
HXDLIN(  37)				if ((decodeState->validBits < (int)0)) {
HXLINE(  37)					_hx_tmp8 = (int)0;
            				}
            				else {
HXLINE(  37)					int z10 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  37)					decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  37)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState23 = decodeState;
HXDLIN(  37)					decodeState23->validBits = (decodeState23->validBits - (int)8);
HXDLIN(  37)					_hx_tmp8 = z10;
            				}
            			}
            			else {
HXLINE(  37)				int z11 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  37)				decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  37)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState24 = decodeState;
HXDLIN(  37)				decodeState24->validBits = (decodeState24->validBits - (int)8);
HXDLIN(  37)				_hx_tmp8 = z11;
            			}
            		}
HXDLIN(  37)		r->classbook = _hx_tmp8;
HXLINE(  39)		{
HXLINE(  39)			int _g1 = (int)0;
HXDLIN(  39)			int _g = r->classifications;
HXDLIN(  39)			while((_g1 < _g)){
HXLINE(  39)				_g1 = (_g1 + (int)1);
HXDLIN(  39)				int j = (_g1 - (int)1);
HXLINE(  40)				int highBits = (int)0;
HXLINE(  41)				int lowBits;
HXDLIN(  41)				if ((decodeState->validBits < (int)0)) {
HXLINE(  41)					lowBits = (int)0;
            				}
            				else {
HXLINE(  41)					if ((decodeState->validBits < (int)3)) {
HXLINE(  41)						if ((decodeState->validBits == (int)0)) {
HXLINE(  41)							decodeState->acc = (int)0;
            						}
HXDLIN(  41)						while(true){
HXLINE(  41)							bool lowBits1;
HXDLIN(  41)							if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  41)								if (!(decodeState->lastSeg)) {
HXLINE(  41)									lowBits1 = (decodeState->next() == (int)0);
            								}
            								else {
HXLINE(  41)									lowBits1 = true;
            								}
            							}
            							else {
HXLINE(  41)								lowBits1 = false;
            							}
HXDLIN(  41)							if (lowBits1) {
HXLINE(  41)								decodeState->validBits = (int)-1;
HXDLIN(  41)								goto _hx_goto_28;
            							}
            							else {
HXLINE(  41)								decodeState->bytesInSeg--;
HXDLIN(  41)								int a6 = decodeState->acc;
HXDLIN(  41)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState25 = decodeState;
HXDLIN(  41)								decodeState25->inputPosition = (decodeState25->inputPosition + (int)1);
HXDLIN(  41)								int b6 = decodeState->input->readByte();
HXDLIN(  41)								decodeState->acc = (a6 + ((int)b6 << (int)decodeState->validBits));
HXDLIN(  41)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState26 = decodeState;
HXDLIN(  41)								decodeState26->validBits = (decodeState26->validBits + (int)8);
            							}
HXDLIN(  41)							if (!((decodeState->validBits < (int)3))) {
HXLINE(  41)								goto _hx_goto_28;
            							}
            						}
            						_hx_goto_28:;
HXDLIN(  41)						if ((decodeState->validBits < (int)0)) {
HXLINE(  41)							lowBits = (int)0;
            						}
            						else {
HXLINE(  41)							int z12 = ((int)decodeState->acc & (int)(int)7);
HXDLIN(  41)							decodeState->acc = hx::UShr(decodeState->acc,(int)3);
HXDLIN(  41)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState27 = decodeState;
HXDLIN(  41)							decodeState27->validBits = (decodeState27->validBits - (int)3);
HXDLIN(  41)							lowBits = z12;
            						}
            					}
            					else {
HXLINE(  41)						int z13 = ((int)decodeState->acc & (int)(int)7);
HXDLIN(  41)						decodeState->acc = hx::UShr(decodeState->acc,(int)3);
HXDLIN(  41)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState28 = decodeState;
HXDLIN(  41)						decodeState28->validBits = (decodeState28->validBits - (int)3);
HXDLIN(  41)						lowBits = z13;
            					}
            				}
HXLINE(  42)				int _hx_tmp10;
HXDLIN(  42)				if ((decodeState->validBits < (int)0)) {
HXLINE(  42)					_hx_tmp10 = (int)0;
            				}
            				else {
HXLINE(  42)					if ((decodeState->validBits < (int)1)) {
HXLINE(  42)						if ((decodeState->validBits == (int)0)) {
HXLINE(  42)							decodeState->acc = (int)0;
            						}
HXDLIN(  42)						while(true){
HXLINE(  42)							bool _hx_tmp11;
HXDLIN(  42)							if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  42)								if (!(decodeState->lastSeg)) {
HXLINE(  42)									_hx_tmp11 = (decodeState->next() == (int)0);
            								}
            								else {
HXLINE(  42)									_hx_tmp11 = true;
            								}
            							}
            							else {
HXLINE(  42)								_hx_tmp11 = false;
            							}
HXDLIN(  42)							if (_hx_tmp11) {
HXLINE(  42)								decodeState->validBits = (int)-1;
HXDLIN(  42)								goto _hx_goto_29;
            							}
            							else {
HXLINE(  42)								decodeState->bytesInSeg--;
HXDLIN(  42)								int a7 = decodeState->acc;
HXDLIN(  42)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState29 = decodeState;
HXDLIN(  42)								decodeState29->inputPosition = (decodeState29->inputPosition + (int)1);
HXDLIN(  42)								int b7 = decodeState->input->readByte();
HXDLIN(  42)								decodeState->acc = (a7 + ((int)b7 << (int)decodeState->validBits));
HXDLIN(  42)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState30 = decodeState;
HXDLIN(  42)								decodeState30->validBits = (decodeState30->validBits + (int)8);
            							}
HXDLIN(  42)							if (!((decodeState->validBits < (int)1))) {
HXLINE(  42)								goto _hx_goto_29;
            							}
            						}
            						_hx_goto_29:;
HXDLIN(  42)						if ((decodeState->validBits < (int)0)) {
HXLINE(  42)							_hx_tmp10 = (int)0;
            						}
            						else {
HXLINE(  42)							int z14 = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  42)							decodeState->acc = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  42)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState31 = decodeState;
HXDLIN(  42)							decodeState31->validBits = (decodeState31->validBits - (int)1);
HXDLIN(  42)							_hx_tmp10 = z14;
            						}
            					}
            					else {
HXLINE(  42)						int z15 = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  42)						decodeState->acc = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  42)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState32 = decodeState;
HXDLIN(  42)						decodeState32->validBits = (decodeState32->validBits - (int)1);
HXDLIN(  42)						_hx_tmp10 = z15;
            					}
            				}
HXDLIN(  42)				if ((_hx_tmp10 != (int)0)) {
HXLINE(  43)					if ((decodeState->validBits < (int)0)) {
HXLINE(  43)						highBits = (int)0;
            					}
            					else {
HXLINE(  43)						if ((decodeState->validBits < (int)5)) {
HXLINE(  43)							if ((decodeState->validBits == (int)0)) {
HXLINE(  43)								decodeState->acc = (int)0;
            							}
HXDLIN(  43)							while(true){
HXLINE(  43)								bool highBits1;
HXDLIN(  43)								if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  43)									if (!(decodeState->lastSeg)) {
HXLINE(  43)										highBits1 = (decodeState->next() == (int)0);
            									}
            									else {
HXLINE(  43)										highBits1 = true;
            									}
            								}
            								else {
HXLINE(  43)									highBits1 = false;
            								}
HXDLIN(  43)								if (highBits1) {
HXLINE(  43)									decodeState->validBits = (int)-1;
HXDLIN(  43)									goto _hx_goto_30;
            								}
            								else {
HXLINE(  43)									decodeState->bytesInSeg--;
HXDLIN(  43)									int a8 = decodeState->acc;
HXDLIN(  43)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState33 = decodeState;
HXDLIN(  43)									decodeState33->inputPosition = (decodeState33->inputPosition + (int)1);
HXDLIN(  43)									int b8 = decodeState->input->readByte();
HXDLIN(  43)									decodeState->acc = (a8 + ((int)b8 << (int)decodeState->validBits));
HXDLIN(  43)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState34 = decodeState;
HXDLIN(  43)									decodeState34->validBits = (decodeState34->validBits + (int)8);
            								}
HXDLIN(  43)								if (!((decodeState->validBits < (int)5))) {
HXLINE(  43)									goto _hx_goto_30;
            								}
            							}
            							_hx_goto_30:;
HXDLIN(  43)							if ((decodeState->validBits < (int)0)) {
HXLINE(  43)								highBits = (int)0;
            							}
            							else {
HXLINE(  43)								int z16 = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  43)								decodeState->acc = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  43)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState35 = decodeState;
HXDLIN(  43)								decodeState35->validBits = (decodeState35->validBits - (int)5);
HXDLIN(  43)								highBits = z16;
            							}
            						}
            						else {
HXLINE(  43)							int z17 = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  43)							decodeState->acc = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  43)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState36 = decodeState;
HXDLIN(  43)							decodeState36->validBits = (decodeState36->validBits - (int)5);
HXDLIN(  43)							highBits = z17;
            						}
            					}
            				}
HXLINE(  45)				 ::Dynamic residueCascade1 = residueCascade->__Field(HX_("__unsafe_set",e9,ea,a4,60),hx::paccDynamic);
HXDLIN(  45)				residueCascade1(j,((highBits * (int)8) + lowBits));
            			}
            		}
HXLINE(  48)		::Array< ::Dynamic> this2 = ::Array_obj< ::Dynamic>::__new(r->classifications);
HXDLIN(  48)		r->residueBooks = this2;
HXLINE(  49)		{
HXLINE(  49)			int _g11 = (int)0;
HXDLIN(  49)			int _g2 = r->classifications;
HXDLIN(  49)			while((_g11 < _g2)){
HXLINE(  49)				_g11 = (_g11 + (int)1);
HXDLIN(  49)				int j1 = (_g11 - (int)1);
HXLINE(  50)				{
HXLINE(  50)					::Array< ::Dynamic> this3 = r->residueBooks;
HXDLIN(  50)					::Array< int > this4 = ::Array_obj< int >::__new((int)8);
HXDLIN(  50)					this3->__unsafe_set(j1,this4);
            				}
HXLINE(  51)				{
HXLINE(  51)					int _g21 = (int)0;
HXDLIN(  51)					while((_g21 < (int)8)){
HXLINE(  51)						_g21 = (_g21 + (int)1);
HXDLIN(  51)						int k = (_g21 - (int)1);
HXLINE(  52)						int _hx_tmp12 = ( (int)(_hx_array_unsafe_get(residueCascade,j1)) );
HXDLIN(  52)						if ((((int)_hx_tmp12 & (int)((int)(int)1 << (int)k)) != (int)0)) {
HXLINE(  53)							{
HXLINE(  53)								::Array< int > this5 = ( (::Array< int >)(_hx_array_unsafe_get(r->residueBooks,j1)) );
HXDLIN(  53)								int val;
HXDLIN(  53)								if ((decodeState->validBits < (int)0)) {
HXLINE(  53)									val = (int)0;
            								}
            								else {
HXLINE(  53)									if ((decodeState->validBits < (int)8)) {
HXLINE(  53)										if ((decodeState->validBits == (int)0)) {
HXLINE(  53)											decodeState->acc = (int)0;
            										}
HXDLIN(  53)										while(true){
HXLINE(  53)											bool val1;
HXDLIN(  53)											if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  53)												if (!(decodeState->lastSeg)) {
HXLINE(  53)													val1 = (decodeState->next() == (int)0);
            												}
            												else {
HXLINE(  53)													val1 = true;
            												}
            											}
            											else {
HXLINE(  53)												val1 = false;
            											}
HXDLIN(  53)											if (val1) {
HXLINE(  53)												decodeState->validBits = (int)-1;
HXDLIN(  53)												goto _hx_goto_33;
            											}
            											else {
HXLINE(  53)												decodeState->bytesInSeg--;
HXDLIN(  53)												int a9 = decodeState->acc;
HXDLIN(  53)												 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState37 = decodeState;
HXDLIN(  53)												decodeState37->inputPosition = (decodeState37->inputPosition + (int)1);
HXDLIN(  53)												int b9 = decodeState->input->readByte();
HXDLIN(  53)												decodeState->acc = (a9 + ((int)b9 << (int)decodeState->validBits));
HXDLIN(  53)												 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState38 = decodeState;
HXDLIN(  53)												decodeState38->validBits = (decodeState38->validBits + (int)8);
            											}
HXDLIN(  53)											if (!((decodeState->validBits < (int)8))) {
HXLINE(  53)												goto _hx_goto_33;
            											}
            										}
            										_hx_goto_33:;
HXDLIN(  53)										if ((decodeState->validBits < (int)0)) {
HXLINE(  53)											val = (int)0;
            										}
            										else {
HXLINE(  53)											int z18 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  53)											decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  53)											 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState39 = decodeState;
HXDLIN(  53)											decodeState39->validBits = (decodeState39->validBits - (int)8);
HXDLIN(  53)											val = z18;
            										}
            									}
            									else {
HXLINE(  53)										int z19 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  53)										decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  53)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState40 = decodeState;
HXDLIN(  53)										decodeState40->validBits = (decodeState40->validBits - (int)8);
HXDLIN(  53)										val = z19;
            									}
            								}
HXDLIN(  53)								this5->__unsafe_set(k,val);
            							}
HXLINE(  54)							int _hx_tmp13 = ( (int)(_hx_array_unsafe_get(( (::Array< int >)(_hx_array_unsafe_get(r->residueBooks,j1)) ),k)) );
HXDLIN(  54)							if ((_hx_tmp13 >= codebooks->length)) {
HXLINE(  55)								HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Residue.hx",73,8f,87,2d),55,HX_("kha.audio2.ogg.vorbis.data.Residue",7b,8f,98,ce),HX_("read",56,4b,a7,4b))));
            							}
            						}
            						else {
HXLINE(  58)							( (::Array< int >)(_hx_array_unsafe_get(r->residueBooks,j1)) )->__unsafe_set(k,(int)-1);
            						}
            					}
            				}
            			}
            		}
HXLINE(  65)		int el = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,r->classbook)) )->entries;
HXLINE(  66)		int classwords = ( ( ::kha::audio2::ogg::vorbis::data::Codebook)(_hx_array_unsafe_get(codebooks,r->classbook)) )->dimensions;
HXLINE(  67)		::Array< ::Dynamic> this6 = ::Array_obj< ::Dynamic>::__new(el);
HXDLIN(  67)		r->classdata = this6;
HXLINE(  69)		{
HXLINE(  69)			int _g12 = (int)0;
HXDLIN(  69)			int _g3 = el;
HXDLIN(  69)			while((_g12 < _g3)){
HXLINE(  69)				_g12 = (_g12 + (int)1);
HXDLIN(  69)				int j2 = (_g12 - (int)1);
HXLINE(  70)				int temp = j2;
HXLINE(  71)				int k1 = classwords;
HXLINE(  72)				::Array< ::Dynamic> this7 = r->classdata;
HXDLIN(  72)				::Array< int > this8 = ::Array_obj< int >::__new(classwords);
HXDLIN(  72)				::Array< int > cd = this7->__unsafe_set(j2,this8).StaticCast< ::Array< int > >();
HXLINE(  73)				while(true){
HXLINE(  73)					k1 = (k1 - (int)1);
HXDLIN(  73)					if (!((k1 >= (int)0))) {
HXLINE(  73)						goto _hx_goto_35;
            					}
HXLINE(  74)					 ::Dynamic cd1 = cd->__Field(HX_("__unsafe_set",e9,ea,a4,60),hx::paccDynamic);
HXDLIN(  74)					cd1(k1,hx::Mod(temp,classifications2));
HXLINE(  75)					temp = ::Std_obj::_hx_int(((Float)temp / (Float)classifications2));
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(  79)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Residue_obj,read,return )


hx::ObjectPtr< Residue_obj > Residue_obj::__new() {
	hx::ObjectPtr< Residue_obj > __this = new Residue_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Residue_obj > Residue_obj::__alloc(hx::Ctx *_hx_ctx) {
	Residue_obj *__this = (Residue_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Residue_obj), true, "kha.audio2.ogg.vorbis.data.Residue"));
	*(void **)__this = Residue_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Residue_obj::Residue_obj()
{
}

void Residue_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Residue);
	HX_MARK_MEMBER_NAME(begin,"begin");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(partSize,"partSize");
	HX_MARK_MEMBER_NAME(classifications,"classifications");
	HX_MARK_MEMBER_NAME(classbook,"classbook");
	HX_MARK_MEMBER_NAME(classdata,"classdata");
	HX_MARK_MEMBER_NAME(residueBooks,"residueBooks");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_END_CLASS();
}

void Residue_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(begin,"begin");
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(partSize,"partSize");
	HX_VISIT_MEMBER_NAME(classifications,"classifications");
	HX_VISIT_MEMBER_NAME(classbook,"classbook");
	HX_VISIT_MEMBER_NAME(classdata,"classdata");
	HX_VISIT_MEMBER_NAME(residueBooks,"residueBooks");
	HX_VISIT_MEMBER_NAME(type,"type");
}

hx::Val Residue_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"decode") ) { return hx::Val( decode_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"partSize") ) { return hx::Val( partSize ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"classbook") ) { return hx::Val( classbook ); }
		if (HX_FIELD_EQ(inName,"classdata") ) { return hx::Val( classdata ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"residueBooks") ) { return hx::Val( residueBooks ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"classifications") ) { return hx::Val( classifications ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Residue_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
	}
	return false;
}

hx::Val Residue_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { begin=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"partSize") ) { partSize=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"classbook") ) { classbook=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"classdata") ) { classdata=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"residueBooks") ) { residueBooks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"classifications") ) { classifications=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Residue_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"));
	outFields->push(HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("partSize","\x54","\x26","\x0b","\x5e"));
	outFields->push(HX_HCSTRING("classifications","\x8d","\xf6","\x53","\xe7"));
	outFields->push(HX_HCSTRING("classbook","\x61","\x78","\x80","\xe9"));
	outFields->push(HX_HCSTRING("classdata","\x62","\x4a","\xc8","\xea"));
	outFields->push(HX_HCSTRING("residueBooks","\xdf","\xe7","\xab","\x0a"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Residue_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Residue_obj,begin),HX_HCSTRING("begin","\x29","\xea","\x55","\xb0")},
	{hx::fsInt,(int)offsetof(Residue_obj,end),HX_HCSTRING("end","\xdb","\x03","\x4d","\x00")},
	{hx::fsInt,(int)offsetof(Residue_obj,partSize),HX_HCSTRING("partSize","\x54","\x26","\x0b","\x5e")},
	{hx::fsInt,(int)offsetof(Residue_obj,classifications),HX_HCSTRING("classifications","\x8d","\xf6","\x53","\xe7")},
	{hx::fsInt,(int)offsetof(Residue_obj,classbook),HX_HCSTRING("classbook","\x61","\x78","\x80","\xe9")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Residue_obj,classdata),HX_HCSTRING("classdata","\x62","\x4a","\xc8","\xea")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Residue_obj,residueBooks),HX_HCSTRING("residueBooks","\xdf","\xe7","\xab","\x0a")},
	{hx::fsInt,(int)offsetof(Residue_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Residue_obj_sStaticStorageInfo = 0;
#endif

static ::String Residue_obj_sMemberFields[] = {
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("partSize","\x54","\x26","\x0b","\x5e"),
	HX_HCSTRING("classifications","\x8d","\xf6","\x53","\xe7"),
	HX_HCSTRING("classbook","\x61","\x78","\x80","\xe9"),
	HX_HCSTRING("classdata","\x62","\x4a","\xc8","\xea"),
	HX_HCSTRING("residueBooks","\xdf","\xe7","\xab","\x0a"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("decode","\x2e","\x5d","\xed","\x64"),
	::String(null()) };

static void Residue_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Residue_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Residue_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Residue_obj::__mClass,"__mClass");
};

#endif

hx::Class Residue_obj::__mClass;

static ::String Residue_obj_sStaticFields[] = {
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	::String(null())
};

void Residue_obj::__register()
{
	hx::Object *dummy = new Residue_obj;
	Residue_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.data.Residue","\x7b","\x8f","\x98","\xce");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Residue_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Residue_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Residue_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Residue_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Residue_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Residue_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Residue_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Residue_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
