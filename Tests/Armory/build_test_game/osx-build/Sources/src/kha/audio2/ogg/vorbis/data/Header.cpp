// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Comment
#include <kha/audio2/ogg/vorbis/data/Comment.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor
#include <kha/audio2/ogg/vorbis/data/Floor.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <kha/audio2/ogg/vorbis/data/Header.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Mapping
#include <kha/audio2/ogg/vorbis/data/Mapping.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Mode
#include <kha/audio2/ogg/vorbis/data/Mode.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Page
#include <kha/audio2/ogg/vorbis/data/Page.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Residue
#include <kha/audio2/ogg/vorbis/data/Residue.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5d80631968e67c5f_37_new,"kha.audio2.ogg.vorbis.data.Header","new",0x66f8bbcf,"kha.audio2.ogg.vorbis.data.Header.new","kha/audio2/ogg/vorbis/data/Header.hx",37,0x4e0c5e60)
HX_LOCAL_STACK_FRAME(_hx_pos_5d80631968e67c5f_41_read,"kha.audio2.ogg.vorbis.data.Header","read",0xb5506107,"kha.audio2.ogg.vorbis.data.Header.read","kha/audio2/ogg/vorbis/data/Header.hx",41,0x4e0c5e60)
HX_LOCAL_STACK_FRAME(_hx_pos_5d80631968e67c5f_18_boot,"kha.audio2.ogg.vorbis.data.Header","boot",0xaac499e3,"kha.audio2.ogg.vorbis.data.Header.boot","kha/audio2/ogg/vorbis/data/Header.hx",18,0x4e0c5e60)
HX_LOCAL_STACK_FRAME(_hx_pos_5d80631968e67c5f_19_boot,"kha.audio2.ogg.vorbis.data.Header","boot",0xaac499e3,"kha.audio2.ogg.vorbis.data.Header.boot","kha/audio2/ogg/vorbis/data/Header.hx",19,0x4e0c5e60)
HX_LOCAL_STACK_FRAME(_hx_pos_5d80631968e67c5f_20_boot,"kha.audio2.ogg.vorbis.data.Header","boot",0xaac499e3,"kha.audio2.ogg.vorbis.data.Header.boot","kha/audio2/ogg/vorbis/data/Header.hx",20,0x4e0c5e60)
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Header_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5d80631968e67c5f_37_new)
            	}

Dynamic Header_obj::__CreateEmpty() { return new Header_obj; }

void *Header_obj::_hx_vtable = 0;

Dynamic Header_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Header_obj > _hx_result = new Header_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Header_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3258cf5d;
}

int Header_obj::PACKET_ID;

int Header_obj::PACKET_COMMENT;

int Header_obj::PACKET_SETUP;

 ::kha::audio2::ogg::vorbis::data::Header Header_obj::read( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState){
            	HX_GC_STACKFRAME(&_hx_pos_5d80631968e67c5f_41_read)
HXLINE(  42)		 ::kha::audio2::ogg::vorbis::data::Page page = decodeState->page;
HXLINE(  43)		page->start(decodeState);
HXLINE(  45)		if ((((int)page->flag & (int)(int)2) == (int)0)) {
HXLINE(  46)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("not firstPage",52,61,ee,e9),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),46,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  48)		if ((((int)page->flag & (int)(int)4) != (int)0)) {
HXLINE(  49)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("lastPage",c5,f3,9a,dd),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),49,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  51)		if ((((int)page->flag & (int)(int)1) != (int)0)) {
HXLINE(  52)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("continuedPacket",85,39,ee,94),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),52,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  55)		decodeState->firstPageValidate();
HXLINE(  56)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState1 = decodeState;
HXDLIN(  56)		decodeState1->inputPosition = (decodeState1->inputPosition + (int)1);
HXDLIN(  56)		if ((decodeState->input->readByte() != (int)1)) {
HXLINE(  57)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("decodeState head",5d,8c,63,29),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),57,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  61)		{
HXLINE(  61)			 ::haxe::io::Bytes header = ::haxe::io::Bytes_obj::alloc((int)6);
HXDLIN(  61)			{
HXLINE(  61)				int _g = (int)0;
HXDLIN(  61)				while((_g < (int)6)){
HXLINE(  61)					_g = (_g + (int)1);
HXDLIN(  61)					int i = (_g - (int)1);
HXDLIN(  61)					{
HXLINE(  61)						int x;
HXDLIN(  61)						bool x1;
HXDLIN(  61)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  61)							if (!(decodeState->lastSeg)) {
HXLINE(  61)								x1 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  61)								x1 = true;
            							}
            						}
            						else {
HXLINE(  61)							x1 = false;
            						}
HXDLIN(  61)						if (x1) {
HXLINE(  61)							x = (int)-1;
            						}
            						else {
HXLINE(  61)							decodeState->bytesInSeg--;
HXDLIN(  61)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState2 = decodeState;
HXDLIN(  61)							decodeState2->inputPosition = (decodeState2->inputPosition + (int)1);
HXDLIN(  61)							x = decodeState->input->readByte();
            						}
HXDLIN(  61)						decodeState->validBits = (int)0;
HXDLIN(  61)						header->b[i] = x;
            					}
            				}
            			}
HXDLIN(  61)			if ((header->toString() != HX_("vorbis",53,03,3c,63))) {
HXLINE(  61)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("vorbis header",ba,3e,a4,0e),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),300,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("vorbisValidate",09,9b,51,16))));
            			}
            		}
HXLINE(  64)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState3 = decodeState;
HXDLIN(  64)		decodeState3->inputPosition = (decodeState3->inputPosition + (int)4);
HXDLIN(  64)		int version = decodeState->input->readInt32();
HXLINE(  65)		if ((version != (int)0)) {
HXLINE(  66)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),(HX_("vorbis version : ",5b,e2,58,09) + version),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),66,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  69)		 ::kha::audio2::ogg::vorbis::data::Header header1 =  ::kha::audio2::ogg::vorbis::data::Header_obj::__alloc( HX_CTX );
HXLINE(  71)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState4 = decodeState;
HXDLIN(  71)		decodeState4->inputPosition = (decodeState4->inputPosition + (int)1);
HXDLIN(  71)		header1->channel = decodeState->input->readByte();
HXLINE(  72)		if ((header1->channel == (int)0)) {
HXLINE(  73)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("no channel",e4,4d,cc,09),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),73,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
            		else {
HXLINE(  74)			if ((header1->channel > (int)16)) {
HXLINE(  75)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::TOO_MANY_CHANNELS_dyn(),HX_("too many channels",65,2f,80,4b),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),75,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            			}
            		}
HXLINE(  78)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState5 = decodeState;
HXDLIN(  78)		decodeState5->inputPosition = (decodeState5->inputPosition + (int)4);
HXDLIN(  78)		header1->sampleRate = decodeState->input->readInt32();
HXLINE(  79)		if ((header1->sampleRate == (int)0)) {
HXLINE(  80)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("no sampling rate",9a,91,ba,fc),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),80,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  83)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState6 = decodeState;
HXDLIN(  83)		decodeState6->inputPosition = (decodeState6->inputPosition + (int)4);
HXDLIN(  83)		header1->maximumBitRate = decodeState->input->readInt32();
HXLINE(  84)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState7 = decodeState;
HXDLIN(  84)		decodeState7->inputPosition = (decodeState7->inputPosition + (int)4);
HXDLIN(  84)		header1->nominalBitRate = decodeState->input->readInt32();
HXLINE(  85)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState8 = decodeState;
HXDLIN(  85)		decodeState8->inputPosition = (decodeState8->inputPosition + (int)4);
HXDLIN(  85)		header1->minimumBitRate = decodeState->input->readInt32();
HXLINE(  87)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState9 = decodeState;
HXDLIN(  87)		decodeState9->inputPosition = (decodeState9->inputPosition + (int)1);
HXDLIN(  87)		int x2 = decodeState->input->readByte();
HXLINE(  88)		int log0 = ((int)x2 & (int)(int)15);
HXLINE(  89)		int log1 = ((int)x2 >> (int)(int)4);
HXLINE(  90)		header1->blocksize0 = ((int)(int)1 << (int)log0);
HXLINE(  91)		header1->blocksize1 = ((int)(int)1 << (int)log1);
HXLINE(  92)		bool _hx_tmp;
HXDLIN(  92)		if ((log0 >= (int)6)) {
HXLINE(  92)			_hx_tmp = (log0 > (int)13);
            		}
            		else {
HXLINE(  92)			_hx_tmp = true;
            		}
HXDLIN(  92)		if (_hx_tmp) {
HXLINE(  93)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),93,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  95)		bool _hx_tmp1;
HXDLIN(  95)		if ((log1 >= (int)6)) {
HXLINE(  95)			_hx_tmp1 = (log1 > (int)13);
            		}
            		else {
HXLINE(  95)			_hx_tmp1 = true;
            		}
HXDLIN(  95)		if (_hx_tmp1) {
HXLINE(  96)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),96,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  98)		if ((log0 > log1)) {
HXLINE(  99)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),99,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE( 103)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState10 = decodeState;
HXDLIN( 103)		decodeState10->inputPosition = (decodeState10->inputPosition + (int)1);
HXDLIN( 103)		int x3 = decodeState->input->readByte();
HXLINE( 104)		if ((((int)x3 & (int)(int)1) == (int)0)) {
HXLINE( 105)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),105,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE( 109)		decodeState->page->start(decodeState);
HXLINE( 110)		decodeState->startPacket();
HXLINE( 112)		int len = (int)0;
HXLINE( 113)		 ::haxe::io::BytesOutput output =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE( 114)		while(true){
HXLINE( 114)			len = decodeState->next();
HXDLIN( 114)			if (!((len != (int)0))) {
HXLINE( 114)				goto _hx_goto_2;
            			}
HXLINE( 115)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState11 = decodeState;
HXDLIN( 115)			decodeState11->inputPosition = (decodeState11->inputPosition + len);
HXDLIN( 115)			output->write(decodeState->input->read(len));
HXLINE( 116)			decodeState->bytesInSeg = (int)0;
            		}
            		_hx_goto_2:;
HXLINE( 119)		{
HXLINE( 120)			 ::haxe::io::BytesInput packetInput =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,output->getBytes(),null(),null());
HXLINE( 121)			packetInput->readByte();
HXLINE( 122)			packetInput->read((int)6);
HXLINE( 124)			int vendorLength = packetInput->readInt32();
HXLINE( 125)			header1->vendor = packetInput->readString(vendorLength);
HXLINE( 126)			header1->comment =  ::kha::audio2::ogg::vorbis::data::Comment_obj::__alloc( HX_CTX );
HXLINE( 128)			int commentCount = packetInput->readInt32();
HXLINE( 130)			{
HXLINE( 130)				int _g1 = (int)0;
HXDLIN( 130)				int _g2 = commentCount;
HXDLIN( 130)				while((_g1 < _g2)){
HXLINE( 130)					_g1 = (_g1 + (int)1);
HXDLIN( 130)					int i1 = (_g1 - (int)1);
HXLINE( 131)					int n = packetInput->readInt32();
HXLINE( 132)					::String str = packetInput->readString(n);
HXLINE( 133)					int splitter = str.indexOf(HX_("=",3d,00,00,00),null());
HXLINE( 134)					if ((splitter != (int)-1)) {
HXLINE( 135)						 ::kha::audio2::ogg::vorbis::data::Comment header2 = header1->comment;
HXDLIN( 135)						::String _hx_tmp2 = str.substring((int)0,splitter);
HXDLIN( 135)						header2->add(_hx_tmp2,str.substring((splitter + (int)1),null()));
            					}
            				}
            			}
HXLINE( 139)			int x4 = packetInput->readByte();
HXLINE( 140)			if ((((int)x4 & (int)(int)1) == (int)0)) {
HXLINE( 141)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),141,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            			}
            		}
HXLINE( 146)		decodeState->startPacket();
HXLINE( 148)		int x5;
HXDLIN( 148)		bool x6;
HXDLIN( 148)		if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 148)			if (!(decodeState->lastSeg)) {
HXLINE( 148)				x6 = (decodeState->next() == (int)0);
            			}
            			else {
HXLINE( 148)				x6 = true;
            			}
            		}
            		else {
HXLINE( 148)			x6 = false;
            		}
HXDLIN( 148)		if (x6) {
HXLINE( 148)			x5 = (int)-1;
            		}
            		else {
HXLINE( 148)			decodeState->bytesInSeg--;
HXDLIN( 148)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState12 = decodeState;
HXDLIN( 148)			decodeState12->inputPosition = (decodeState12->inputPosition + (int)1);
HXDLIN( 148)			x5 = decodeState->input->readByte();
            		}
HXDLIN( 148)		decodeState->validBits = (int)0;
HXDLIN( 148)		if ((x5 != (int)5)) {
HXLINE( 149)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("setup packet",cb,fa,2a,07),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),149,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            		}
HXLINE( 152)		{
HXLINE( 152)			 ::haxe::io::Bytes header3 = ::haxe::io::Bytes_obj::alloc((int)6);
HXDLIN( 152)			{
HXLINE( 152)				int _g3 = (int)0;
HXDLIN( 152)				while((_g3 < (int)6)){
HXLINE( 152)					_g3 = (_g3 + (int)1);
HXDLIN( 152)					int i2 = (_g3 - (int)1);
HXDLIN( 152)					{
HXLINE( 152)						int x7;
HXDLIN( 152)						bool x8;
HXDLIN( 152)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 152)							if (!(decodeState->lastSeg)) {
HXLINE( 152)								x8 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE( 152)								x8 = true;
            							}
            						}
            						else {
HXLINE( 152)							x8 = false;
            						}
HXDLIN( 152)						if (x8) {
HXLINE( 152)							x7 = (int)-1;
            						}
            						else {
HXLINE( 152)							decodeState->bytesInSeg--;
HXDLIN( 152)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState13 = decodeState;
HXDLIN( 152)							decodeState13->inputPosition = (decodeState13->inputPosition + (int)1);
HXDLIN( 152)							x7 = decodeState->input->readByte();
            						}
HXDLIN( 152)						decodeState->validBits = (int)0;
HXDLIN( 152)						header3->b[i2] = x7;
            					}
            				}
            			}
HXDLIN( 152)			if ((header3->toString() != HX_("vorbis",53,03,3c,63))) {
HXLINE( 152)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("vorbis header",ba,3e,a4,0e),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),300,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("vorbisValidate",09,9b,51,16))));
            			}
            		}
HXLINE( 155)		int codebookCount;
HXDLIN( 155)		if ((decodeState->validBits < (int)0)) {
HXLINE( 155)			codebookCount = (int)0;
            		}
            		else {
HXLINE( 155)			if ((decodeState->validBits < (int)8)) {
HXLINE( 155)				if ((decodeState->validBits == (int)0)) {
HXLINE( 155)					decodeState->acc = (int)0;
            				}
HXDLIN( 155)				while(true){
HXLINE( 155)					bool codebookCount1;
HXDLIN( 155)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 155)						if (!(decodeState->lastSeg)) {
HXLINE( 155)							codebookCount1 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE( 155)							codebookCount1 = true;
            						}
            					}
            					else {
HXLINE( 155)						codebookCount1 = false;
            					}
HXDLIN( 155)					if (codebookCount1) {
HXLINE( 155)						decodeState->validBits = (int)-1;
HXDLIN( 155)						goto _hx_goto_5;
            					}
            					else {
HXLINE( 155)						decodeState->bytesInSeg--;
HXDLIN( 155)						int a = decodeState->acc;
HXDLIN( 155)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState14 = decodeState;
HXDLIN( 155)						decodeState14->inputPosition = (decodeState14->inputPosition + (int)1);
HXDLIN( 155)						int b = decodeState->input->readByte();
HXDLIN( 155)						decodeState->acc = (a + ((int)b << (int)decodeState->validBits));
HXDLIN( 155)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState15 = decodeState;
HXDLIN( 155)						decodeState15->validBits = (decodeState15->validBits + (int)8);
            					}
HXDLIN( 155)					if (!((decodeState->validBits < (int)8))) {
HXLINE( 155)						goto _hx_goto_5;
            					}
            				}
            				_hx_goto_5:;
HXDLIN( 155)				if ((decodeState->validBits < (int)0)) {
HXLINE( 155)					codebookCount = (int)0;
            				}
            				else {
HXLINE( 155)					int z = ((int)decodeState->acc & (int)(int)255);
HXDLIN( 155)					decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN( 155)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState16 = decodeState;
HXDLIN( 155)					decodeState16->validBits = (decodeState16->validBits - (int)8);
HXDLIN( 155)					codebookCount = z;
            				}
            			}
            			else {
HXLINE( 155)				int z1 = ((int)decodeState->acc & (int)(int)255);
HXDLIN( 155)				decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN( 155)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState17 = decodeState;
HXDLIN( 155)				decodeState17->validBits = (decodeState17->validBits - (int)8);
HXDLIN( 155)				codebookCount = z1;
            			}
            		}
HXDLIN( 155)		int codebookCount2 = (codebookCount + (int)1);
HXLINE( 156)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(codebookCount2);
HXDLIN( 156)		header1->codebooks = this1;
HXLINE( 157)		{
HXLINE( 157)			int _g11 = (int)0;
HXDLIN( 157)			int _g4 = codebookCount2;
HXDLIN( 157)			while((_g11 < _g4)){
HXLINE( 157)				_g11 = (_g11 + (int)1);
HXDLIN( 157)				int i3 = (_g11 - (int)1);
HXLINE( 158)				{
HXLINE( 158)					::Array< ::Dynamic> this2 = header1->codebooks;
HXDLIN( 158)					 ::kha::audio2::ogg::vorbis::data::Codebook val = ::kha::audio2::ogg::vorbis::data::Codebook_obj::read(decodeState);
HXDLIN( 158)					this2->__unsafe_set(i3,val);
            				}
            			}
            		}
HXLINE( 162)		int x9;
HXDLIN( 162)		if ((decodeState->validBits < (int)0)) {
HXLINE( 162)			x9 = (int)0;
            		}
            		else {
HXLINE( 162)			if ((decodeState->validBits < (int)6)) {
HXLINE( 162)				if ((decodeState->validBits == (int)0)) {
HXLINE( 162)					decodeState->acc = (int)0;
            				}
HXDLIN( 162)				while(true){
HXLINE( 162)					bool x10;
HXDLIN( 162)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 162)						if (!(decodeState->lastSeg)) {
HXLINE( 162)							x10 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE( 162)							x10 = true;
            						}
            					}
            					else {
HXLINE( 162)						x10 = false;
            					}
HXDLIN( 162)					if (x10) {
HXLINE( 162)						decodeState->validBits = (int)-1;
HXDLIN( 162)						goto _hx_goto_7;
            					}
            					else {
HXLINE( 162)						decodeState->bytesInSeg--;
HXDLIN( 162)						int a1 = decodeState->acc;
HXDLIN( 162)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState18 = decodeState;
HXDLIN( 162)						decodeState18->inputPosition = (decodeState18->inputPosition + (int)1);
HXDLIN( 162)						int b1 = decodeState->input->readByte();
HXDLIN( 162)						decodeState->acc = (a1 + ((int)b1 << (int)decodeState->validBits));
HXDLIN( 162)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState19 = decodeState;
HXDLIN( 162)						decodeState19->validBits = (decodeState19->validBits + (int)8);
            					}
HXDLIN( 162)					if (!((decodeState->validBits < (int)6))) {
HXLINE( 162)						goto _hx_goto_7;
            					}
            				}
            				_hx_goto_7:;
HXDLIN( 162)				if ((decodeState->validBits < (int)0)) {
HXLINE( 162)					x9 = (int)0;
            				}
            				else {
HXLINE( 162)					int z2 = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 162)					decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 162)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState20 = decodeState;
HXDLIN( 162)					decodeState20->validBits = (decodeState20->validBits - (int)6);
HXDLIN( 162)					x9 = z2;
            				}
            			}
            			else {
HXLINE( 162)				int z3 = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 162)				decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 162)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState21 = decodeState;
HXDLIN( 162)				decodeState21->validBits = (decodeState21->validBits - (int)6);
HXDLIN( 162)				x9 = z3;
            			}
            		}
HXDLIN( 162)		x3 = (x9 + (int)1);
HXLINE( 163)		{
HXLINE( 163)			int _g12 = (int)0;
HXDLIN( 163)			int _g5 = x3;
HXDLIN( 163)			while((_g12 < _g5)){
HXLINE( 163)				_g12 = (_g12 + (int)1);
HXDLIN( 163)				int i4 = (_g12 - (int)1);
HXLINE( 164)				int _hx_tmp3;
HXDLIN( 164)				if ((decodeState->validBits < (int)0)) {
HXLINE( 164)					_hx_tmp3 = (int)0;
            				}
            				else {
HXLINE( 164)					if ((decodeState->validBits < (int)16)) {
HXLINE( 164)						if ((decodeState->validBits == (int)0)) {
HXLINE( 164)							decodeState->acc = (int)0;
            						}
HXDLIN( 164)						while(true){
HXLINE( 164)							bool _hx_tmp4;
HXDLIN( 164)							if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 164)								if (!(decodeState->lastSeg)) {
HXLINE( 164)									_hx_tmp4 = (decodeState->next() == (int)0);
            								}
            								else {
HXLINE( 164)									_hx_tmp4 = true;
            								}
            							}
            							else {
HXLINE( 164)								_hx_tmp4 = false;
            							}
HXDLIN( 164)							if (_hx_tmp4) {
HXLINE( 164)								decodeState->validBits = (int)-1;
HXDLIN( 164)								goto _hx_goto_9;
            							}
            							else {
HXLINE( 164)								decodeState->bytesInSeg--;
HXDLIN( 164)								int a2 = decodeState->acc;
HXDLIN( 164)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState22 = decodeState;
HXDLIN( 164)								decodeState22->inputPosition = (decodeState22->inputPosition + (int)1);
HXDLIN( 164)								int b2 = decodeState->input->readByte();
HXDLIN( 164)								decodeState->acc = (a2 + ((int)b2 << (int)decodeState->validBits));
HXDLIN( 164)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState23 = decodeState;
HXDLIN( 164)								decodeState23->validBits = (decodeState23->validBits + (int)8);
            							}
HXDLIN( 164)							if (!((decodeState->validBits < (int)16))) {
HXLINE( 164)								goto _hx_goto_9;
            							}
            						}
            						_hx_goto_9:;
HXDLIN( 164)						if ((decodeState->validBits < (int)0)) {
HXLINE( 164)							_hx_tmp3 = (int)0;
            						}
            						else {
HXLINE( 164)							int z4 = ((int)decodeState->acc & (int)(int)65535);
HXDLIN( 164)							decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN( 164)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState24 = decodeState;
HXDLIN( 164)							decodeState24->validBits = (decodeState24->validBits - (int)16);
HXDLIN( 164)							_hx_tmp3 = z4;
            						}
            					}
            					else {
HXLINE( 164)						int z5 = ((int)decodeState->acc & (int)(int)65535);
HXDLIN( 164)						decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN( 164)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState25 = decodeState;
HXDLIN( 164)						decodeState25->validBits = (decodeState25->validBits - (int)16);
HXDLIN( 164)						_hx_tmp3 = z5;
            					}
            				}
HXDLIN( 164)				if ((_hx_tmp3 != (int)0)) {
HXLINE( 165)					HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),165,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            				}
            			}
            		}
HXLINE( 170)		int floorCount;
HXDLIN( 170)		if ((decodeState->validBits < (int)0)) {
HXLINE( 170)			floorCount = (int)0;
            		}
            		else {
HXLINE( 170)			if ((decodeState->validBits < (int)6)) {
HXLINE( 170)				if ((decodeState->validBits == (int)0)) {
HXLINE( 170)					decodeState->acc = (int)0;
            				}
HXDLIN( 170)				while(true){
HXLINE( 170)					bool floorCount1;
HXDLIN( 170)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 170)						if (!(decodeState->lastSeg)) {
HXLINE( 170)							floorCount1 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE( 170)							floorCount1 = true;
            						}
            					}
            					else {
HXLINE( 170)						floorCount1 = false;
            					}
HXDLIN( 170)					if (floorCount1) {
HXLINE( 170)						decodeState->validBits = (int)-1;
HXDLIN( 170)						goto _hx_goto_10;
            					}
            					else {
HXLINE( 170)						decodeState->bytesInSeg--;
HXDLIN( 170)						int a3 = decodeState->acc;
HXDLIN( 170)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState26 = decodeState;
HXDLIN( 170)						decodeState26->inputPosition = (decodeState26->inputPosition + (int)1);
HXDLIN( 170)						int b3 = decodeState->input->readByte();
HXDLIN( 170)						decodeState->acc = (a3 + ((int)b3 << (int)decodeState->validBits));
HXDLIN( 170)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState27 = decodeState;
HXDLIN( 170)						decodeState27->validBits = (decodeState27->validBits + (int)8);
            					}
HXDLIN( 170)					if (!((decodeState->validBits < (int)6))) {
HXLINE( 170)						goto _hx_goto_10;
            					}
            				}
            				_hx_goto_10:;
HXDLIN( 170)				if ((decodeState->validBits < (int)0)) {
HXLINE( 170)					floorCount = (int)0;
            				}
            				else {
HXLINE( 170)					int z6 = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 170)					decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 170)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState28 = decodeState;
HXDLIN( 170)					decodeState28->validBits = (decodeState28->validBits - (int)6);
HXDLIN( 170)					floorCount = z6;
            				}
            			}
            			else {
HXLINE( 170)				int z7 = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 170)				decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 170)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState29 = decodeState;
HXDLIN( 170)				decodeState29->validBits = (decodeState29->validBits - (int)6);
HXDLIN( 170)				floorCount = z7;
            			}
            		}
HXDLIN( 170)		int floorCount2 = (floorCount + (int)1);
HXLINE( 171)		::Array< ::Dynamic> this3 = ::Array_obj< ::Dynamic>::__new(floorCount2);
HXDLIN( 171)		header1->floorConfig = this3;
HXLINE( 172)		{
HXLINE( 172)			int _g13 = (int)0;
HXDLIN( 172)			int _g6 = floorCount2;
HXDLIN( 172)			while((_g13 < _g6)){
HXLINE( 172)				_g13 = (_g13 + (int)1);
HXDLIN( 172)				int i5 = (_g13 - (int)1);
HXLINE( 173)				{
HXLINE( 173)					::Array< ::Dynamic> this4 = header1->floorConfig;
HXDLIN( 173)					 ::kha::audio2::ogg::vorbis::data::Floor val1 = ::kha::audio2::ogg::vorbis::data::Floor_obj::read(decodeState,header1->codebooks);
HXDLIN( 173)					this4->__unsafe_set(i5,val1);
            				}
            			}
            		}
HXLINE( 177)		int residueCount;
HXDLIN( 177)		if ((decodeState->validBits < (int)0)) {
HXLINE( 177)			residueCount = (int)0;
            		}
            		else {
HXLINE( 177)			if ((decodeState->validBits < (int)6)) {
HXLINE( 177)				if ((decodeState->validBits == (int)0)) {
HXLINE( 177)					decodeState->acc = (int)0;
            				}
HXDLIN( 177)				while(true){
HXLINE( 177)					bool residueCount1;
HXDLIN( 177)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 177)						if (!(decodeState->lastSeg)) {
HXLINE( 177)							residueCount1 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE( 177)							residueCount1 = true;
            						}
            					}
            					else {
HXLINE( 177)						residueCount1 = false;
            					}
HXDLIN( 177)					if (residueCount1) {
HXLINE( 177)						decodeState->validBits = (int)-1;
HXDLIN( 177)						goto _hx_goto_12;
            					}
            					else {
HXLINE( 177)						decodeState->bytesInSeg--;
HXDLIN( 177)						int a4 = decodeState->acc;
HXDLIN( 177)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState30 = decodeState;
HXDLIN( 177)						decodeState30->inputPosition = (decodeState30->inputPosition + (int)1);
HXDLIN( 177)						int b4 = decodeState->input->readByte();
HXDLIN( 177)						decodeState->acc = (a4 + ((int)b4 << (int)decodeState->validBits));
HXDLIN( 177)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState31 = decodeState;
HXDLIN( 177)						decodeState31->validBits = (decodeState31->validBits + (int)8);
            					}
HXDLIN( 177)					if (!((decodeState->validBits < (int)6))) {
HXLINE( 177)						goto _hx_goto_12;
            					}
            				}
            				_hx_goto_12:;
HXDLIN( 177)				if ((decodeState->validBits < (int)0)) {
HXLINE( 177)					residueCount = (int)0;
            				}
            				else {
HXLINE( 177)					int z8 = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 177)					decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 177)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState32 = decodeState;
HXDLIN( 177)					decodeState32->validBits = (decodeState32->validBits - (int)6);
HXDLIN( 177)					residueCount = z8;
            				}
            			}
            			else {
HXLINE( 177)				int z9 = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 177)				decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 177)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState33 = decodeState;
HXDLIN( 177)				decodeState33->validBits = (decodeState33->validBits - (int)6);
HXDLIN( 177)				residueCount = z9;
            			}
            		}
HXDLIN( 177)		int residueCount2 = (residueCount + (int)1);
HXLINE( 178)		::Array< ::Dynamic> this5 = ::Array_obj< ::Dynamic>::__new(residueCount2);
HXDLIN( 178)		header1->residueConfig = this5;
HXLINE( 179)		{
HXLINE( 179)			int _g14 = (int)0;
HXDLIN( 179)			int _g7 = residueCount2;
HXDLIN( 179)			while((_g14 < _g7)){
HXLINE( 179)				_g14 = (_g14 + (int)1);
HXDLIN( 179)				int i6 = (_g14 - (int)1);
HXLINE( 180)				{
HXLINE( 180)					::Array< ::Dynamic> this6 = header1->residueConfig;
HXDLIN( 180)					 ::kha::audio2::ogg::vorbis::data::Residue val2 = ::kha::audio2::ogg::vorbis::data::Residue_obj::read(decodeState,header1->codebooks);
HXDLIN( 180)					this6->__unsafe_set(i6,val2);
            				}
            			}
            		}
HXLINE( 184)		int mappingCount;
HXDLIN( 184)		if ((decodeState->validBits < (int)0)) {
HXLINE( 184)			mappingCount = (int)0;
            		}
            		else {
HXLINE( 184)			if ((decodeState->validBits < (int)6)) {
HXLINE( 184)				if ((decodeState->validBits == (int)0)) {
HXLINE( 184)					decodeState->acc = (int)0;
            				}
HXDLIN( 184)				while(true){
HXLINE( 184)					bool mappingCount1;
HXDLIN( 184)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 184)						if (!(decodeState->lastSeg)) {
HXLINE( 184)							mappingCount1 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE( 184)							mappingCount1 = true;
            						}
            					}
            					else {
HXLINE( 184)						mappingCount1 = false;
            					}
HXDLIN( 184)					if (mappingCount1) {
HXLINE( 184)						decodeState->validBits = (int)-1;
HXDLIN( 184)						goto _hx_goto_14;
            					}
            					else {
HXLINE( 184)						decodeState->bytesInSeg--;
HXDLIN( 184)						int a5 = decodeState->acc;
HXDLIN( 184)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState34 = decodeState;
HXDLIN( 184)						decodeState34->inputPosition = (decodeState34->inputPosition + (int)1);
HXDLIN( 184)						int b5 = decodeState->input->readByte();
HXDLIN( 184)						decodeState->acc = (a5 + ((int)b5 << (int)decodeState->validBits));
HXDLIN( 184)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState35 = decodeState;
HXDLIN( 184)						decodeState35->validBits = (decodeState35->validBits + (int)8);
            					}
HXDLIN( 184)					if (!((decodeState->validBits < (int)6))) {
HXLINE( 184)						goto _hx_goto_14;
            					}
            				}
            				_hx_goto_14:;
HXDLIN( 184)				if ((decodeState->validBits < (int)0)) {
HXLINE( 184)					mappingCount = (int)0;
            				}
            				else {
HXLINE( 184)					int z10 = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 184)					decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 184)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState36 = decodeState;
HXDLIN( 184)					decodeState36->validBits = (decodeState36->validBits - (int)6);
HXDLIN( 184)					mappingCount = z10;
            				}
            			}
            			else {
HXLINE( 184)				int z11 = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 184)				decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 184)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState37 = decodeState;
HXDLIN( 184)				decodeState37->validBits = (decodeState37->validBits - (int)6);
HXDLIN( 184)				mappingCount = z11;
            			}
            		}
HXDLIN( 184)		int mappingCount2 = (mappingCount + (int)1);
HXLINE( 185)		::Array< ::Dynamic> this7 = ::Array_obj< ::Dynamic>::__new(mappingCount2);
HXDLIN( 185)		header1->mapping = this7;
HXLINE( 186)		{
HXLINE( 186)			int _g15 = (int)0;
HXDLIN( 186)			int _g8 = mappingCount2;
HXDLIN( 186)			while((_g15 < _g8)){
HXLINE( 186)				_g15 = (_g15 + (int)1);
HXDLIN( 186)				int i7 = (_g15 - (int)1);
HXLINE( 187)				 ::kha::audio2::ogg::vorbis::data::Mapping map = ::kha::audio2::ogg::vorbis::data::Mapping_obj::read(decodeState,header1->channel);
HXLINE( 188)				header1->mapping->__unsafe_set(i7,map);
HXLINE( 189)				{
HXLINE( 189)					int _g31 = (int)0;
HXDLIN( 189)					int _g21 = map->submaps;
HXDLIN( 189)					while((_g31 < _g21)){
HXLINE( 189)						_g31 = (_g31 + (int)1);
HXDLIN( 189)						int j = (_g31 - (int)1);
HXLINE( 190)						int _hx_tmp5 = ( (int)(_hx_array_unsafe_get(map->submapFloor,j)) );
HXDLIN( 190)						if ((_hx_tmp5 >= header1->floorConfig->length)) {
HXLINE( 191)							HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),191,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            						}
HXLINE( 193)						int _hx_tmp6 = ( (int)(_hx_array_unsafe_get(map->submapResidue,j)) );
HXDLIN( 193)						if ((_hx_tmp6 >= header1->residueConfig->length)) {
HXLINE( 194)							HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),194,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            						}
            					}
            				}
            			}
            		}
HXLINE( 199)		int modeCount;
HXDLIN( 199)		if ((decodeState->validBits < (int)0)) {
HXLINE( 199)			modeCount = (int)0;
            		}
            		else {
HXLINE( 199)			if ((decodeState->validBits < (int)6)) {
HXLINE( 199)				if ((decodeState->validBits == (int)0)) {
HXLINE( 199)					decodeState->acc = (int)0;
            				}
HXDLIN( 199)				while(true){
HXLINE( 199)					bool modeCount1;
HXDLIN( 199)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 199)						if (!(decodeState->lastSeg)) {
HXLINE( 199)							modeCount1 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE( 199)							modeCount1 = true;
            						}
            					}
            					else {
HXLINE( 199)						modeCount1 = false;
            					}
HXDLIN( 199)					if (modeCount1) {
HXLINE( 199)						decodeState->validBits = (int)-1;
HXDLIN( 199)						goto _hx_goto_17;
            					}
            					else {
HXLINE( 199)						decodeState->bytesInSeg--;
HXDLIN( 199)						int a6 = decodeState->acc;
HXDLIN( 199)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState38 = decodeState;
HXDLIN( 199)						decodeState38->inputPosition = (decodeState38->inputPosition + (int)1);
HXDLIN( 199)						int b6 = decodeState->input->readByte();
HXDLIN( 199)						decodeState->acc = (a6 + ((int)b6 << (int)decodeState->validBits));
HXDLIN( 199)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState39 = decodeState;
HXDLIN( 199)						decodeState39->validBits = (decodeState39->validBits + (int)8);
            					}
HXDLIN( 199)					if (!((decodeState->validBits < (int)6))) {
HXLINE( 199)						goto _hx_goto_17;
            					}
            				}
            				_hx_goto_17:;
HXDLIN( 199)				if ((decodeState->validBits < (int)0)) {
HXLINE( 199)					modeCount = (int)0;
            				}
            				else {
HXLINE( 199)					int z12 = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 199)					decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 199)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState40 = decodeState;
HXDLIN( 199)					decodeState40->validBits = (decodeState40->validBits - (int)6);
HXDLIN( 199)					modeCount = z12;
            				}
            			}
            			else {
HXLINE( 199)				int z13 = ((int)decodeState->acc & (int)(int)63);
HXDLIN( 199)				decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN( 199)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState41 = decodeState;
HXDLIN( 199)				decodeState41->validBits = (decodeState41->validBits - (int)6);
HXDLIN( 199)				modeCount = z13;
            			}
            		}
HXDLIN( 199)		int modeCount2 = (modeCount + (int)1);
HXLINE( 200)		::Array< ::Dynamic> this8 = ::Array_obj< ::Dynamic>::__new(modeCount2);
HXDLIN( 200)		header1->modes = this8;
HXLINE( 201)		{
HXLINE( 201)			int _g16 = (int)0;
HXDLIN( 201)			int _g9 = modeCount2;
HXDLIN( 201)			while((_g16 < _g9)){
HXLINE( 201)				_g16 = (_g16 + (int)1);
HXDLIN( 201)				int i8 = (_g16 - (int)1);
HXLINE( 202)				 ::kha::audio2::ogg::vorbis::data::Mode mode = ::kha::audio2::ogg::vorbis::data::Mode_obj::read(decodeState);
HXLINE( 203)				header1->modes->__unsafe_set(i8,mode);
HXLINE( 204)				if ((mode->mapping >= header1->mapping->length)) {
HXLINE( 205)					HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Header.hx",31,cf,14,15),205,HX_("kha.audio2.ogg.vorbis.data.Header",5d,28,45,ae),HX_("read",56,4b,a7,4b))));
            				}
            			}
            		}
HXLINE( 209)		while(true){
HXLINE( 209)			bool _hx_tmp7;
HXDLIN( 209)			if ((decodeState->bytesInSeg == (int)0)) {
HXLINE( 209)				if (!(decodeState->lastSeg)) {
HXLINE( 209)					_hx_tmp7 = (decodeState->next() != (int)0);
            				}
            				else {
HXLINE( 209)					_hx_tmp7 = false;
            				}
            			}
            			else {
HXLINE( 209)				_hx_tmp7 = true;
            			}
HXDLIN( 209)			if (!(_hx_tmp7)) {
HXLINE( 209)				goto _hx_goto_19;
            			}
HXDLIN( 209)			decodeState->bytesInSeg--;
HXDLIN( 209)			{
HXLINE( 209)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState42 = decodeState;
HXDLIN( 209)				decodeState42->inputPosition = (decodeState42->inputPosition + (int)1);
HXDLIN( 209)				decodeState->input->readByte();
            			}
            		}
            		_hx_goto_19:;
HXLINE( 211)		return header1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Header_obj,read,return )


Header_obj::Header_obj()
{
}

void Header_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Header);
	HX_MARK_MEMBER_NAME(maximumBitRate,"maximumBitRate");
	HX_MARK_MEMBER_NAME(nominalBitRate,"nominalBitRate");
	HX_MARK_MEMBER_NAME(minimumBitRate,"minimumBitRate");
	HX_MARK_MEMBER_NAME(sampleRate,"sampleRate");
	HX_MARK_MEMBER_NAME(channel,"channel");
	HX_MARK_MEMBER_NAME(blocksize0,"blocksize0");
	HX_MARK_MEMBER_NAME(blocksize1,"blocksize1");
	HX_MARK_MEMBER_NAME(codebooks,"codebooks");
	HX_MARK_MEMBER_NAME(floorConfig,"floorConfig");
	HX_MARK_MEMBER_NAME(residueConfig,"residueConfig");
	HX_MARK_MEMBER_NAME(mapping,"mapping");
	HX_MARK_MEMBER_NAME(modes,"modes");
	HX_MARK_MEMBER_NAME(comment,"comment");
	HX_MARK_MEMBER_NAME(vendor,"vendor");
	HX_MARK_END_CLASS();
}

void Header_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maximumBitRate,"maximumBitRate");
	HX_VISIT_MEMBER_NAME(nominalBitRate,"nominalBitRate");
	HX_VISIT_MEMBER_NAME(minimumBitRate,"minimumBitRate");
	HX_VISIT_MEMBER_NAME(sampleRate,"sampleRate");
	HX_VISIT_MEMBER_NAME(channel,"channel");
	HX_VISIT_MEMBER_NAME(blocksize0,"blocksize0");
	HX_VISIT_MEMBER_NAME(blocksize1,"blocksize1");
	HX_VISIT_MEMBER_NAME(codebooks,"codebooks");
	HX_VISIT_MEMBER_NAME(floorConfig,"floorConfig");
	HX_VISIT_MEMBER_NAME(residueConfig,"residueConfig");
	HX_VISIT_MEMBER_NAME(mapping,"mapping");
	HX_VISIT_MEMBER_NAME(modes,"modes");
	HX_VISIT_MEMBER_NAME(comment,"comment");
	HX_VISIT_MEMBER_NAME(vendor,"vendor");
}

hx::Val Header_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"modes") ) { return hx::Val( modes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vendor") ) { return hx::Val( vendor ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"channel") ) { return hx::Val( channel ); }
		if (HX_FIELD_EQ(inName,"mapping") ) { return hx::Val( mapping ); }
		if (HX_FIELD_EQ(inName,"comment") ) { return hx::Val( comment ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"codebooks") ) { return hx::Val( codebooks ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { return hx::Val( sampleRate ); }
		if (HX_FIELD_EQ(inName,"blocksize0") ) { return hx::Val( blocksize0 ); }
		if (HX_FIELD_EQ(inName,"blocksize1") ) { return hx::Val( blocksize1 ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"floorConfig") ) { return hx::Val( floorConfig ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"residueConfig") ) { return hx::Val( residueConfig ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"maximumBitRate") ) { return hx::Val( maximumBitRate ); }
		if (HX_FIELD_EQ(inName,"nominalBitRate") ) { return hx::Val( nominalBitRate ); }
		if (HX_FIELD_EQ(inName,"minimumBitRate") ) { return hx::Val( minimumBitRate ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Header_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
	}
	return false;
}

hx::Val Header_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"modes") ) { modes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vendor") ) { vendor=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"channel") ) { channel=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mapping") ) { mapping=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comment") ) { comment=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Comment >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"codebooks") ) { codebooks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { sampleRate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blocksize0") ) { blocksize0=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blocksize1") ) { blocksize1=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"floorConfig") ) { floorConfig=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"residueConfig") ) { residueConfig=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"maximumBitRate") ) { maximumBitRate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nominalBitRate") ) { nominalBitRate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minimumBitRate") ) { minimumBitRate=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Header_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("maximumBitRate","\x4d","\x56","\x30","\x56"));
	outFields->push(HX_HCSTRING("nominalBitRate","\x91","\xa2","\x66","\x22"));
	outFields->push(HX_HCSTRING("minimumBitRate","\x1f","\xfa","\xb9","\xf2"));
	outFields->push(HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67"));
	outFields->push(HX_HCSTRING("channel","\xc3","\x00","\xd2","\xcc"));
	outFields->push(HX_HCSTRING("blocksize0","\xe2","\x3b","\x0f","\xc1"));
	outFields->push(HX_HCSTRING("blocksize1","\xe3","\x3b","\x0f","\xc1"));
	outFields->push(HX_HCSTRING("codebooks","\xdd","\x0b","\xa1","\xb7"));
	outFields->push(HX_HCSTRING("floorConfig","\xae","\xfd","\x8a","\x3c"));
	outFields->push(HX_HCSTRING("residueConfig","\x6d","\x4d","\x6d","\xb1"));
	outFields->push(HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44"));
	outFields->push(HX_HCSTRING("modes","\xb0","\x23","\x58","\x0c"));
	outFields->push(HX_HCSTRING("comment","\x5f","\x7a","\x70","\x81"));
	outFields->push(HX_HCSTRING("vendor","\x88","\xe5","\x96","\x9e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Header_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Header_obj,maximumBitRate),HX_HCSTRING("maximumBitRate","\x4d","\x56","\x30","\x56")},
	{hx::fsInt,(int)offsetof(Header_obj,nominalBitRate),HX_HCSTRING("nominalBitRate","\x91","\xa2","\x66","\x22")},
	{hx::fsInt,(int)offsetof(Header_obj,minimumBitRate),HX_HCSTRING("minimumBitRate","\x1f","\xfa","\xb9","\xf2")},
	{hx::fsInt,(int)offsetof(Header_obj,sampleRate),HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67")},
	{hx::fsInt,(int)offsetof(Header_obj,channel),HX_HCSTRING("channel","\xc3","\x00","\xd2","\xcc")},
	{hx::fsInt,(int)offsetof(Header_obj,blocksize0),HX_HCSTRING("blocksize0","\xe2","\x3b","\x0f","\xc1")},
	{hx::fsInt,(int)offsetof(Header_obj,blocksize1),HX_HCSTRING("blocksize1","\xe3","\x3b","\x0f","\xc1")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Header_obj,codebooks),HX_HCSTRING("codebooks","\xdd","\x0b","\xa1","\xb7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Header_obj,floorConfig),HX_HCSTRING("floorConfig","\xae","\xfd","\x8a","\x3c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Header_obj,residueConfig),HX_HCSTRING("residueConfig","\x6d","\x4d","\x6d","\xb1")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Header_obj,mapping),HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Header_obj,modes),HX_HCSTRING("modes","\xb0","\x23","\x58","\x0c")},
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::Comment*/ ,(int)offsetof(Header_obj,comment),HX_HCSTRING("comment","\x5f","\x7a","\x70","\x81")},
	{hx::fsString,(int)offsetof(Header_obj,vendor),HX_HCSTRING("vendor","\x88","\xe5","\x96","\x9e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Header_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Header_obj::PACKET_ID,HX_HCSTRING("PACKET_ID","\x72","\x37","\x96","\x42")},
	{hx::fsInt,(void *) &Header_obj::PACKET_COMMENT,HX_HCSTRING("PACKET_COMMENT","\x48","\x73","\x92","\xc8")},
	{hx::fsInt,(void *) &Header_obj::PACKET_SETUP,HX_HCSTRING("PACKET_SETUP","\x26","\x87","\x2b","\x68")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Header_obj_sMemberFields[] = {
	HX_HCSTRING("maximumBitRate","\x4d","\x56","\x30","\x56"),
	HX_HCSTRING("nominalBitRate","\x91","\xa2","\x66","\x22"),
	HX_HCSTRING("minimumBitRate","\x1f","\xfa","\xb9","\xf2"),
	HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67"),
	HX_HCSTRING("channel","\xc3","\x00","\xd2","\xcc"),
	HX_HCSTRING("blocksize0","\xe2","\x3b","\x0f","\xc1"),
	HX_HCSTRING("blocksize1","\xe3","\x3b","\x0f","\xc1"),
	HX_HCSTRING("codebooks","\xdd","\x0b","\xa1","\xb7"),
	HX_HCSTRING("floorConfig","\xae","\xfd","\x8a","\x3c"),
	HX_HCSTRING("residueConfig","\x6d","\x4d","\x6d","\xb1"),
	HX_HCSTRING("mapping","\x0e","\x7b","\x7a","\x44"),
	HX_HCSTRING("modes","\xb0","\x23","\x58","\x0c"),
	HX_HCSTRING("comment","\x5f","\x7a","\x70","\x81"),
	HX_HCSTRING("vendor","\x88","\xe5","\x96","\x9e"),
	::String(null()) };

static void Header_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Header_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Header_obj::PACKET_ID,"PACKET_ID");
	HX_MARK_MEMBER_NAME(Header_obj::PACKET_COMMENT,"PACKET_COMMENT");
	HX_MARK_MEMBER_NAME(Header_obj::PACKET_SETUP,"PACKET_SETUP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Header_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Header_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Header_obj::PACKET_ID,"PACKET_ID");
	HX_VISIT_MEMBER_NAME(Header_obj::PACKET_COMMENT,"PACKET_COMMENT");
	HX_VISIT_MEMBER_NAME(Header_obj::PACKET_SETUP,"PACKET_SETUP");
};

#endif

hx::Class Header_obj::__mClass;

static ::String Header_obj_sStaticFields[] = {
	HX_HCSTRING("PACKET_ID","\x72","\x37","\x96","\x42"),
	HX_HCSTRING("PACKET_COMMENT","\x48","\x73","\x92","\xc8"),
	HX_HCSTRING("PACKET_SETUP","\x26","\x87","\x2b","\x68"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	::String(null())
};

void Header_obj::__register()
{
	hx::Object *dummy = new Header_obj;
	Header_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.data.Header","\x5d","\x28","\x45","\xae");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Header_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Header_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Header_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Header_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Header_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Header_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Header_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Header_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Header_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5d80631968e67c5f_18_boot)
HXDLIN(  18)		PACKET_ID = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5d80631968e67c5f_19_boot)
HXDLIN(  19)		PACKET_COMMENT = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5d80631968e67c5f_20_boot)
HXDLIN(  20)		PACKET_SETUP = (int)5;
            	}
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
