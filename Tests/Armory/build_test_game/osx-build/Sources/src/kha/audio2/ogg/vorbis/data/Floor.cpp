// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisTools
#include <kha/audio2/ogg/vorbis/VorbisTools.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor
#include <kha/audio2/ogg/vorbis/data/Floor.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor0
#include <kha/audio2/ogg/vorbis/data/Floor0.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor1
#include <kha/audio2/ogg/vorbis/data/Floor1.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_IntPoint
#include <kha/audio2/ogg/vorbis/data/IntPoint.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8fd99ebc77e89687_18_new,"kha.audio2.ogg.vorbis.data.Floor","new",0x5f0b4bee,"kha.audio2.ogg.vorbis.data.Floor.new","kha/audio2/ogg/vorbis/data/Floor.hx",18,0x2f4d0043)
HX_LOCAL_STACK_FRAME(_hx_pos_8fd99ebc77e89687_23_read,"kha.audio2.ogg.vorbis.data.Floor","read",0xcd7bec08,"kha.audio2.ogg.vorbis.data.Floor.read","kha/audio2/ogg/vorbis/data/Floor.hx",23,0x2f4d0043)
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Floor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_8fd99ebc77e89687_18_new)
            	}

Dynamic Floor_obj::__CreateEmpty() { return new Floor_obj; }

void *Floor_obj::_hx_vtable = 0;

Dynamic Floor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Floor_obj > _hx_result = new Floor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Floor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x695bb0e0;
}

 ::kha::audio2::ogg::vorbis::data::Floor Floor_obj::read( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,::Array< ::Dynamic> codebooks){
            	HX_GC_STACKFRAME(&_hx_pos_8fd99ebc77e89687_23_read)
HXLINE(  24)		 ::kha::audio2::ogg::vorbis::data::Floor floor =  ::kha::audio2::ogg::vorbis::data::Floor_obj::__alloc( HX_CTX );
HXLINE(  26)		int _hx_tmp;
HXDLIN(  26)		if ((decodeState->validBits < (int)0)) {
HXLINE(  26)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  26)			if ((decodeState->validBits < (int)16)) {
HXLINE(  26)				if ((decodeState->validBits == (int)0)) {
HXLINE(  26)					decodeState->acc = (int)0;
            				}
HXDLIN(  26)				while(true){
HXLINE(  26)					bool _hx_tmp1;
HXDLIN(  26)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  26)						if (!(decodeState->lastSeg)) {
HXLINE(  26)							_hx_tmp1 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  26)							_hx_tmp1 = true;
            						}
            					}
            					else {
HXLINE(  26)						_hx_tmp1 = false;
            					}
HXDLIN(  26)					if (_hx_tmp1) {
HXLINE(  26)						decodeState->validBits = (int)-1;
HXDLIN(  26)						goto _hx_goto_1;
            					}
            					else {
HXLINE(  26)						decodeState->bytesInSeg--;
HXDLIN(  26)						int a = decodeState->acc;
HXDLIN(  26)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState1 = decodeState;
HXDLIN(  26)						decodeState1->inputPosition = (decodeState1->inputPosition + (int)1);
HXDLIN(  26)						int b = decodeState->input->readByte();
HXDLIN(  26)						decodeState->acc = (a + ((int)b << (int)decodeState->validBits));
HXDLIN(  26)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState2 = decodeState;
HXDLIN(  26)						decodeState2->validBits = (decodeState2->validBits + (int)8);
            					}
HXDLIN(  26)					if (!((decodeState->validBits < (int)16))) {
HXLINE(  26)						goto _hx_goto_1;
            					}
            				}
            				_hx_goto_1:;
HXDLIN(  26)				if ((decodeState->validBits < (int)0)) {
HXLINE(  26)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE(  26)					int z = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  26)					decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  26)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState3 = decodeState;
HXDLIN(  26)					decodeState3->validBits = (decodeState3->validBits - (int)16);
HXDLIN(  26)					_hx_tmp = z;
            				}
            			}
            			else {
HXLINE(  26)				int z1 = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  26)				decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  26)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState4 = decodeState;
HXDLIN(  26)				decodeState4->validBits = (decodeState4->validBits - (int)16);
HXDLIN(  26)				_hx_tmp = z1;
            			}
            		}
HXDLIN(  26)		floor->type = _hx_tmp;
HXLINE(  27)		if ((floor->type > (int)1)) {
HXLINE(  28)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Floor.hx",92,54,6e,c5),28,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  30)		if ((floor->type == (int)0)) {
HXLINE(  31)			 ::kha::audio2::ogg::vorbis::data::Floor0 g = (floor->floor0 =  ::kha::audio2::ogg::vorbis::data::Floor0_obj::__alloc( HX_CTX ));
HXLINE(  32)			int _hx_tmp2;
HXDLIN(  32)			if ((decodeState->validBits < (int)0)) {
HXLINE(  32)				_hx_tmp2 = (int)0;
            			}
            			else {
HXLINE(  32)				if ((decodeState->validBits < (int)8)) {
HXLINE(  32)					if ((decodeState->validBits == (int)0)) {
HXLINE(  32)						decodeState->acc = (int)0;
            					}
HXDLIN(  32)					while(true){
HXLINE(  32)						bool _hx_tmp3;
HXDLIN(  32)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  32)							if (!(decodeState->lastSeg)) {
HXLINE(  32)								_hx_tmp3 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  32)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(  32)							_hx_tmp3 = false;
            						}
HXDLIN(  32)						if (_hx_tmp3) {
HXLINE(  32)							decodeState->validBits = (int)-1;
HXDLIN(  32)							goto _hx_goto_2;
            						}
            						else {
HXLINE(  32)							decodeState->bytesInSeg--;
HXDLIN(  32)							int a1 = decodeState->acc;
HXDLIN(  32)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState5 = decodeState;
HXDLIN(  32)							decodeState5->inputPosition = (decodeState5->inputPosition + (int)1);
HXDLIN(  32)							int b1 = decodeState->input->readByte();
HXDLIN(  32)							decodeState->acc = (a1 + ((int)b1 << (int)decodeState->validBits));
HXDLIN(  32)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState6 = decodeState;
HXDLIN(  32)							decodeState6->validBits = (decodeState6->validBits + (int)8);
            						}
HXDLIN(  32)						if (!((decodeState->validBits < (int)8))) {
HXLINE(  32)							goto _hx_goto_2;
            						}
            					}
            					_hx_goto_2:;
HXDLIN(  32)					if ((decodeState->validBits < (int)0)) {
HXLINE(  32)						_hx_tmp2 = (int)0;
            					}
            					else {
HXLINE(  32)						int z2 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  32)						decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  32)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState7 = decodeState;
HXDLIN(  32)						decodeState7->validBits = (decodeState7->validBits - (int)8);
HXDLIN(  32)						_hx_tmp2 = z2;
            					}
            				}
            				else {
HXLINE(  32)					int z3 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  32)					decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  32)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState8 = decodeState;
HXDLIN(  32)					decodeState8->validBits = (decodeState8->validBits - (int)8);
HXDLIN(  32)					_hx_tmp2 = z3;
            				}
            			}
HXDLIN(  32)			g->order = _hx_tmp2;
HXLINE(  33)			int _hx_tmp4;
HXDLIN(  33)			if ((decodeState->validBits < (int)0)) {
HXLINE(  33)				_hx_tmp4 = (int)0;
            			}
            			else {
HXLINE(  33)				if ((decodeState->validBits < (int)16)) {
HXLINE(  33)					if ((decodeState->validBits == (int)0)) {
HXLINE(  33)						decodeState->acc = (int)0;
            					}
HXDLIN(  33)					while(true){
HXLINE(  33)						bool _hx_tmp5;
HXDLIN(  33)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  33)							if (!(decodeState->lastSeg)) {
HXLINE(  33)								_hx_tmp5 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  33)								_hx_tmp5 = true;
            							}
            						}
            						else {
HXLINE(  33)							_hx_tmp5 = false;
            						}
HXDLIN(  33)						if (_hx_tmp5) {
HXLINE(  33)							decodeState->validBits = (int)-1;
HXDLIN(  33)							goto _hx_goto_3;
            						}
            						else {
HXLINE(  33)							decodeState->bytesInSeg--;
HXDLIN(  33)							int a2 = decodeState->acc;
HXDLIN(  33)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState9 = decodeState;
HXDLIN(  33)							decodeState9->inputPosition = (decodeState9->inputPosition + (int)1);
HXDLIN(  33)							int b2 = decodeState->input->readByte();
HXDLIN(  33)							decodeState->acc = (a2 + ((int)b2 << (int)decodeState->validBits));
HXDLIN(  33)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState10 = decodeState;
HXDLIN(  33)							decodeState10->validBits = (decodeState10->validBits + (int)8);
            						}
HXDLIN(  33)						if (!((decodeState->validBits < (int)16))) {
HXLINE(  33)							goto _hx_goto_3;
            						}
            					}
            					_hx_goto_3:;
HXDLIN(  33)					if ((decodeState->validBits < (int)0)) {
HXLINE(  33)						_hx_tmp4 = (int)0;
            					}
            					else {
HXLINE(  33)						int z4 = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  33)						decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  33)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState11 = decodeState;
HXDLIN(  33)						decodeState11->validBits = (decodeState11->validBits - (int)16);
HXDLIN(  33)						_hx_tmp4 = z4;
            					}
            				}
            				else {
HXLINE(  33)					int z5 = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  33)					decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  33)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState12 = decodeState;
HXDLIN(  33)					decodeState12->validBits = (decodeState12->validBits - (int)16);
HXDLIN(  33)					_hx_tmp4 = z5;
            				}
            			}
HXDLIN(  33)			g->rate = _hx_tmp4;
HXLINE(  34)			int _hx_tmp6;
HXDLIN(  34)			if ((decodeState->validBits < (int)0)) {
HXLINE(  34)				_hx_tmp6 = (int)0;
            			}
            			else {
HXLINE(  34)				if ((decodeState->validBits < (int)16)) {
HXLINE(  34)					if ((decodeState->validBits == (int)0)) {
HXLINE(  34)						decodeState->acc = (int)0;
            					}
HXDLIN(  34)					while(true){
HXLINE(  34)						bool _hx_tmp7;
HXDLIN(  34)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  34)							if (!(decodeState->lastSeg)) {
HXLINE(  34)								_hx_tmp7 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  34)								_hx_tmp7 = true;
            							}
            						}
            						else {
HXLINE(  34)							_hx_tmp7 = false;
            						}
HXDLIN(  34)						if (_hx_tmp7) {
HXLINE(  34)							decodeState->validBits = (int)-1;
HXDLIN(  34)							goto _hx_goto_4;
            						}
            						else {
HXLINE(  34)							decodeState->bytesInSeg--;
HXDLIN(  34)							int a3 = decodeState->acc;
HXDLIN(  34)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState13 = decodeState;
HXDLIN(  34)							decodeState13->inputPosition = (decodeState13->inputPosition + (int)1);
HXDLIN(  34)							int b3 = decodeState->input->readByte();
HXDLIN(  34)							decodeState->acc = (a3 + ((int)b3 << (int)decodeState->validBits));
HXDLIN(  34)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState14 = decodeState;
HXDLIN(  34)							decodeState14->validBits = (decodeState14->validBits + (int)8);
            						}
HXDLIN(  34)						if (!((decodeState->validBits < (int)16))) {
HXLINE(  34)							goto _hx_goto_4;
            						}
            					}
            					_hx_goto_4:;
HXDLIN(  34)					if ((decodeState->validBits < (int)0)) {
HXLINE(  34)						_hx_tmp6 = (int)0;
            					}
            					else {
HXLINE(  34)						int z6 = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  34)						decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  34)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState15 = decodeState;
HXDLIN(  34)						decodeState15->validBits = (decodeState15->validBits - (int)16);
HXDLIN(  34)						_hx_tmp6 = z6;
            					}
            				}
            				else {
HXLINE(  34)					int z7 = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  34)					decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  34)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState16 = decodeState;
HXDLIN(  34)					decodeState16->validBits = (decodeState16->validBits - (int)16);
HXDLIN(  34)					_hx_tmp6 = z7;
            				}
            			}
HXDLIN(  34)			g->barkMapSize = _hx_tmp6;
HXLINE(  35)			int _hx_tmp8;
HXDLIN(  35)			if ((decodeState->validBits < (int)0)) {
HXLINE(  35)				_hx_tmp8 = (int)0;
            			}
            			else {
HXLINE(  35)				if ((decodeState->validBits < (int)6)) {
HXLINE(  35)					if ((decodeState->validBits == (int)0)) {
HXLINE(  35)						decodeState->acc = (int)0;
            					}
HXDLIN(  35)					while(true){
HXLINE(  35)						bool _hx_tmp9;
HXDLIN(  35)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  35)							if (!(decodeState->lastSeg)) {
HXLINE(  35)								_hx_tmp9 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  35)								_hx_tmp9 = true;
            							}
            						}
            						else {
HXLINE(  35)							_hx_tmp9 = false;
            						}
HXDLIN(  35)						if (_hx_tmp9) {
HXLINE(  35)							decodeState->validBits = (int)-1;
HXDLIN(  35)							goto _hx_goto_5;
            						}
            						else {
HXLINE(  35)							decodeState->bytesInSeg--;
HXDLIN(  35)							int a4 = decodeState->acc;
HXDLIN(  35)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState17 = decodeState;
HXDLIN(  35)							decodeState17->inputPosition = (decodeState17->inputPosition + (int)1);
HXDLIN(  35)							int b4 = decodeState->input->readByte();
HXDLIN(  35)							decodeState->acc = (a4 + ((int)b4 << (int)decodeState->validBits));
HXDLIN(  35)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState18 = decodeState;
HXDLIN(  35)							decodeState18->validBits = (decodeState18->validBits + (int)8);
            						}
HXDLIN(  35)						if (!((decodeState->validBits < (int)6))) {
HXLINE(  35)							goto _hx_goto_5;
            						}
            					}
            					_hx_goto_5:;
HXDLIN(  35)					if ((decodeState->validBits < (int)0)) {
HXLINE(  35)						_hx_tmp8 = (int)0;
            					}
            					else {
HXLINE(  35)						int z8 = ((int)decodeState->acc & (int)(int)63);
HXDLIN(  35)						decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN(  35)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState19 = decodeState;
HXDLIN(  35)						decodeState19->validBits = (decodeState19->validBits - (int)6);
HXDLIN(  35)						_hx_tmp8 = z8;
            					}
            				}
            				else {
HXLINE(  35)					int z9 = ((int)decodeState->acc & (int)(int)63);
HXDLIN(  35)					decodeState->acc = hx::UShr(decodeState->acc,(int)6);
HXDLIN(  35)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState20 = decodeState;
HXDLIN(  35)					decodeState20->validBits = (decodeState20->validBits - (int)6);
HXDLIN(  35)					_hx_tmp8 = z9;
            				}
            			}
HXDLIN(  35)			g->amplitudeBits = _hx_tmp8;
HXLINE(  36)			int _hx_tmp10;
HXDLIN(  36)			if ((decodeState->validBits < (int)0)) {
HXLINE(  36)				_hx_tmp10 = (int)0;
            			}
            			else {
HXLINE(  36)				if ((decodeState->validBits < (int)8)) {
HXLINE(  36)					if ((decodeState->validBits == (int)0)) {
HXLINE(  36)						decodeState->acc = (int)0;
            					}
HXDLIN(  36)					while(true){
HXLINE(  36)						bool _hx_tmp11;
HXDLIN(  36)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  36)							if (!(decodeState->lastSeg)) {
HXLINE(  36)								_hx_tmp11 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  36)								_hx_tmp11 = true;
            							}
            						}
            						else {
HXLINE(  36)							_hx_tmp11 = false;
            						}
HXDLIN(  36)						if (_hx_tmp11) {
HXLINE(  36)							decodeState->validBits = (int)-1;
HXDLIN(  36)							goto _hx_goto_6;
            						}
            						else {
HXLINE(  36)							decodeState->bytesInSeg--;
HXDLIN(  36)							int a5 = decodeState->acc;
HXDLIN(  36)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState21 = decodeState;
HXDLIN(  36)							decodeState21->inputPosition = (decodeState21->inputPosition + (int)1);
HXDLIN(  36)							int b5 = decodeState->input->readByte();
HXDLIN(  36)							decodeState->acc = (a5 + ((int)b5 << (int)decodeState->validBits));
HXDLIN(  36)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState22 = decodeState;
HXDLIN(  36)							decodeState22->validBits = (decodeState22->validBits + (int)8);
            						}
HXDLIN(  36)						if (!((decodeState->validBits < (int)8))) {
HXLINE(  36)							goto _hx_goto_6;
            						}
            					}
            					_hx_goto_6:;
HXDLIN(  36)					if ((decodeState->validBits < (int)0)) {
HXLINE(  36)						_hx_tmp10 = (int)0;
            					}
            					else {
HXLINE(  36)						int z10 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  36)						decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  36)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState23 = decodeState;
HXDLIN(  36)						decodeState23->validBits = (decodeState23->validBits - (int)8);
HXDLIN(  36)						_hx_tmp10 = z10;
            					}
            				}
            				else {
HXLINE(  36)					int z11 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  36)					decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  36)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState24 = decodeState;
HXDLIN(  36)					decodeState24->validBits = (decodeState24->validBits - (int)8);
HXDLIN(  36)					_hx_tmp10 = z11;
            				}
            			}
HXDLIN(  36)			g->amplitudeOffset = _hx_tmp10;
HXLINE(  37)			int _hx_tmp12;
HXDLIN(  37)			if ((decodeState->validBits < (int)0)) {
HXLINE(  37)				_hx_tmp12 = (int)0;
            			}
            			else {
HXLINE(  37)				if ((decodeState->validBits < (int)4)) {
HXLINE(  37)					if ((decodeState->validBits == (int)0)) {
HXLINE(  37)						decodeState->acc = (int)0;
            					}
HXDLIN(  37)					while(true){
HXLINE(  37)						bool _hx_tmp13;
HXDLIN(  37)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  37)							if (!(decodeState->lastSeg)) {
HXLINE(  37)								_hx_tmp13 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  37)								_hx_tmp13 = true;
            							}
            						}
            						else {
HXLINE(  37)							_hx_tmp13 = false;
            						}
HXDLIN(  37)						if (_hx_tmp13) {
HXLINE(  37)							decodeState->validBits = (int)-1;
HXDLIN(  37)							goto _hx_goto_7;
            						}
            						else {
HXLINE(  37)							decodeState->bytesInSeg--;
HXDLIN(  37)							int a6 = decodeState->acc;
HXDLIN(  37)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState25 = decodeState;
HXDLIN(  37)							decodeState25->inputPosition = (decodeState25->inputPosition + (int)1);
HXDLIN(  37)							int b6 = decodeState->input->readByte();
HXDLIN(  37)							decodeState->acc = (a6 + ((int)b6 << (int)decodeState->validBits));
HXDLIN(  37)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState26 = decodeState;
HXDLIN(  37)							decodeState26->validBits = (decodeState26->validBits + (int)8);
            						}
HXDLIN(  37)						if (!((decodeState->validBits < (int)4))) {
HXLINE(  37)							goto _hx_goto_7;
            						}
            					}
            					_hx_goto_7:;
HXDLIN(  37)					if ((decodeState->validBits < (int)0)) {
HXLINE(  37)						_hx_tmp12 = (int)0;
            					}
            					else {
HXLINE(  37)						int z12 = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  37)						decodeState->acc = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  37)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState27 = decodeState;
HXDLIN(  37)						decodeState27->validBits = (decodeState27->validBits - (int)4);
HXDLIN(  37)						_hx_tmp12 = z12;
            					}
            				}
            				else {
HXLINE(  37)					int z13 = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  37)					decodeState->acc = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  37)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState28 = decodeState;
HXDLIN(  37)					decodeState28->validBits = (decodeState28->validBits - (int)4);
HXDLIN(  37)					_hx_tmp12 = z13;
            				}
            			}
HXDLIN(  37)			g->numberOfBooks = (_hx_tmp12 + (int)1);
HXLINE(  38)			{
HXLINE(  38)				int _g1 = (int)0;
HXDLIN(  38)				int _g = g->numberOfBooks;
HXDLIN(  38)				while((_g1 < _g)){
HXLINE(  38)					_g1 = (_g1 + (int)1);
HXDLIN(  38)					int j = (_g1 - (int)1);
HXLINE(  39)					{
HXLINE(  39)						::Array< int > this1 = g->bookList;
HXDLIN(  39)						int val;
HXDLIN(  39)						if ((decodeState->validBits < (int)0)) {
HXLINE(  39)							val = (int)0;
            						}
            						else {
HXLINE(  39)							if ((decodeState->validBits < (int)8)) {
HXLINE(  39)								if ((decodeState->validBits == (int)0)) {
HXLINE(  39)									decodeState->acc = (int)0;
            								}
HXDLIN(  39)								while(true){
HXLINE(  39)									bool val1;
HXDLIN(  39)									if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  39)										if (!(decodeState->lastSeg)) {
HXLINE(  39)											val1 = (decodeState->next() == (int)0);
            										}
            										else {
HXLINE(  39)											val1 = true;
            										}
            									}
            									else {
HXLINE(  39)										val1 = false;
            									}
HXDLIN(  39)									if (val1) {
HXLINE(  39)										decodeState->validBits = (int)-1;
HXDLIN(  39)										goto _hx_goto_9;
            									}
            									else {
HXLINE(  39)										decodeState->bytesInSeg--;
HXDLIN(  39)										int a7 = decodeState->acc;
HXDLIN(  39)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState29 = decodeState;
HXDLIN(  39)										decodeState29->inputPosition = (decodeState29->inputPosition + (int)1);
HXDLIN(  39)										int b7 = decodeState->input->readByte();
HXDLIN(  39)										decodeState->acc = (a7 + ((int)b7 << (int)decodeState->validBits));
HXDLIN(  39)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState30 = decodeState;
HXDLIN(  39)										decodeState30->validBits = (decodeState30->validBits + (int)8);
            									}
HXDLIN(  39)									if (!((decodeState->validBits < (int)8))) {
HXLINE(  39)										goto _hx_goto_9;
            									}
            								}
            								_hx_goto_9:;
HXDLIN(  39)								if ((decodeState->validBits < (int)0)) {
HXLINE(  39)									val = (int)0;
            								}
            								else {
HXLINE(  39)									int z14 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  39)									decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  39)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState31 = decodeState;
HXDLIN(  39)									decodeState31->validBits = (decodeState31->validBits - (int)8);
HXDLIN(  39)									val = z14;
            								}
            							}
            							else {
HXLINE(  39)								int z15 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  39)								decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  39)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState32 = decodeState;
HXDLIN(  39)								decodeState32->validBits = (decodeState32->validBits - (int)8);
HXDLIN(  39)								val = z15;
            							}
            						}
HXDLIN(  39)						this1->__unsafe_set(j,val);
            					}
            				}
            			}
HXLINE(  41)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::FEATURE_NOT_SUPPORTED_dyn(),null(),hx::SourceInfo(HX_("Floor.hx",92,54,6e,c5),41,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b))));
            		}
            		else {
HXLINE(  43)			::Array< ::Dynamic> p = ::Array_obj< ::Dynamic>::__new();
HXLINE(  44)			 ::kha::audio2::ogg::vorbis::data::Floor1 g1 = (floor->floor1 =  ::kha::audio2::ogg::vorbis::data::Floor1_obj::__alloc( HX_CTX ));
HXLINE(  45)			int maxClass = (int)-1;
HXLINE(  46)			int _hx_tmp14;
HXDLIN(  46)			if ((decodeState->validBits < (int)0)) {
HXLINE(  46)				_hx_tmp14 = (int)0;
            			}
            			else {
HXLINE(  46)				if ((decodeState->validBits < (int)5)) {
HXLINE(  46)					if ((decodeState->validBits == (int)0)) {
HXLINE(  46)						decodeState->acc = (int)0;
            					}
HXDLIN(  46)					while(true){
HXLINE(  46)						bool _hx_tmp15;
HXDLIN(  46)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  46)							if (!(decodeState->lastSeg)) {
HXLINE(  46)								_hx_tmp15 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  46)								_hx_tmp15 = true;
            							}
            						}
            						else {
HXLINE(  46)							_hx_tmp15 = false;
            						}
HXDLIN(  46)						if (_hx_tmp15) {
HXLINE(  46)							decodeState->validBits = (int)-1;
HXDLIN(  46)							goto _hx_goto_10;
            						}
            						else {
HXLINE(  46)							decodeState->bytesInSeg--;
HXDLIN(  46)							int a8 = decodeState->acc;
HXDLIN(  46)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState33 = decodeState;
HXDLIN(  46)							decodeState33->inputPosition = (decodeState33->inputPosition + (int)1);
HXDLIN(  46)							int b8 = decodeState->input->readByte();
HXDLIN(  46)							decodeState->acc = (a8 + ((int)b8 << (int)decodeState->validBits));
HXDLIN(  46)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState34 = decodeState;
HXDLIN(  46)							decodeState34->validBits = (decodeState34->validBits + (int)8);
            						}
HXDLIN(  46)						if (!((decodeState->validBits < (int)5))) {
HXLINE(  46)							goto _hx_goto_10;
            						}
            					}
            					_hx_goto_10:;
HXDLIN(  46)					if ((decodeState->validBits < (int)0)) {
HXLINE(  46)						_hx_tmp14 = (int)0;
            					}
            					else {
HXLINE(  46)						int z16 = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  46)						decodeState->acc = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  46)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState35 = decodeState;
HXDLIN(  46)						decodeState35->validBits = (decodeState35->validBits - (int)5);
HXDLIN(  46)						_hx_tmp14 = z16;
            					}
            				}
            				else {
HXLINE(  46)					int z17 = ((int)decodeState->acc & (int)(int)31);
HXDLIN(  46)					decodeState->acc = hx::UShr(decodeState->acc,(int)5);
HXDLIN(  46)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState36 = decodeState;
HXDLIN(  46)					decodeState36->validBits = (decodeState36->validBits - (int)5);
HXDLIN(  46)					_hx_tmp14 = z17;
            				}
            			}
HXDLIN(  46)			g1->partitions = _hx_tmp14;
HXLINE(  47)			::Array< int > this2 = ::Array_obj< int >::__new(g1->partitions);
HXDLIN(  47)			g1->partitionClassList = this2;
HXLINE(  48)			{
HXLINE(  48)				int _g11 = (int)0;
HXDLIN(  48)				int _g2 = g1->partitions;
HXDLIN(  48)				while((_g11 < _g2)){
HXLINE(  48)					_g11 = (_g11 + (int)1);
HXDLIN(  48)					int j1 = (_g11 - (int)1);
HXLINE(  49)					{
HXLINE(  49)						::Array< int > this3 = g1->partitionClassList;
HXDLIN(  49)						int val2;
HXDLIN(  49)						if ((decodeState->validBits < (int)0)) {
HXLINE(  49)							val2 = (int)0;
            						}
            						else {
HXLINE(  49)							if ((decodeState->validBits < (int)4)) {
HXLINE(  49)								if ((decodeState->validBits == (int)0)) {
HXLINE(  49)									decodeState->acc = (int)0;
            								}
HXDLIN(  49)								while(true){
HXLINE(  49)									bool val3;
HXDLIN(  49)									if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  49)										if (!(decodeState->lastSeg)) {
HXLINE(  49)											val3 = (decodeState->next() == (int)0);
            										}
            										else {
HXLINE(  49)											val3 = true;
            										}
            									}
            									else {
HXLINE(  49)										val3 = false;
            									}
HXDLIN(  49)									if (val3) {
HXLINE(  49)										decodeState->validBits = (int)-1;
HXDLIN(  49)										goto _hx_goto_12;
            									}
            									else {
HXLINE(  49)										decodeState->bytesInSeg--;
HXDLIN(  49)										int a9 = decodeState->acc;
HXDLIN(  49)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState37 = decodeState;
HXDLIN(  49)										decodeState37->inputPosition = (decodeState37->inputPosition + (int)1);
HXDLIN(  49)										int b9 = decodeState->input->readByte();
HXDLIN(  49)										decodeState->acc = (a9 + ((int)b9 << (int)decodeState->validBits));
HXDLIN(  49)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState38 = decodeState;
HXDLIN(  49)										decodeState38->validBits = (decodeState38->validBits + (int)8);
            									}
HXDLIN(  49)									if (!((decodeState->validBits < (int)4))) {
HXLINE(  49)										goto _hx_goto_12;
            									}
            								}
            								_hx_goto_12:;
HXDLIN(  49)								if ((decodeState->validBits < (int)0)) {
HXLINE(  49)									val2 = (int)0;
            								}
            								else {
HXLINE(  49)									int z18 = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  49)									decodeState->acc = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  49)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState39 = decodeState;
HXDLIN(  49)									decodeState39->validBits = (decodeState39->validBits - (int)4);
HXDLIN(  49)									val2 = z18;
            								}
            							}
            							else {
HXLINE(  49)								int z19 = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  49)								decodeState->acc = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  49)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState40 = decodeState;
HXDLIN(  49)								decodeState40->validBits = (decodeState40->validBits - (int)4);
HXDLIN(  49)								val2 = z19;
            							}
            						}
HXDLIN(  49)						this3->__unsafe_set(j1,val2);
            					}
HXLINE(  50)					if ((( (int)(_hx_array_unsafe_get(g1->partitionClassList,j1)) ) > maxClass)) {
HXLINE(  51)						maxClass = ( (int)(_hx_array_unsafe_get(g1->partitionClassList,j1)) );
            					}
            				}
            			}
HXLINE(  54)			::Array< int > this4 = ::Array_obj< int >::__new((maxClass + (int)1));
HXDLIN(  54)			g1->classDimensions = this4;
HXLINE(  55)			::Array< int > this5 = ::Array_obj< int >::__new((maxClass + (int)1));
HXDLIN(  55)			g1->classMasterbooks = this5;
HXLINE(  56)			::Array< int > this6 = ::Array_obj< int >::__new((maxClass + (int)1));
HXDLIN(  56)			g1->classSubclasses = this6;
HXLINE(  57)			::Array< ::Dynamic> this7 = ::Array_obj< ::Dynamic>::__new((maxClass + (int)1));
HXDLIN(  57)			g1->subclassBooks = this7;
HXLINE(  58)			{
HXLINE(  58)				int _g12 = (int)0;
HXDLIN(  58)				int _g3 = (maxClass + (int)1);
HXDLIN(  58)				while((_g12 < _g3)){
HXLINE(  58)					_g12 = (_g12 + (int)1);
HXDLIN(  58)					int j2 = (_g12 - (int)1);
HXLINE(  59)					{
HXLINE(  59)						::Array< int > this8 = g1->classDimensions;
HXDLIN(  59)						int val4;
HXDLIN(  59)						if ((decodeState->validBits < (int)0)) {
HXLINE(  59)							val4 = (int)0;
            						}
            						else {
HXLINE(  59)							if ((decodeState->validBits < (int)3)) {
HXLINE(  59)								if ((decodeState->validBits == (int)0)) {
HXLINE(  59)									decodeState->acc = (int)0;
            								}
HXDLIN(  59)								while(true){
HXLINE(  59)									bool val5;
HXDLIN(  59)									if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  59)										if (!(decodeState->lastSeg)) {
HXLINE(  59)											val5 = (decodeState->next() == (int)0);
            										}
            										else {
HXLINE(  59)											val5 = true;
            										}
            									}
            									else {
HXLINE(  59)										val5 = false;
            									}
HXDLIN(  59)									if (val5) {
HXLINE(  59)										decodeState->validBits = (int)-1;
HXDLIN(  59)										goto _hx_goto_14;
            									}
            									else {
HXLINE(  59)										decodeState->bytesInSeg--;
HXDLIN(  59)										int a10 = decodeState->acc;
HXDLIN(  59)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState41 = decodeState;
HXDLIN(  59)										decodeState41->inputPosition = (decodeState41->inputPosition + (int)1);
HXDLIN(  59)										int b10 = decodeState->input->readByte();
HXDLIN(  59)										decodeState->acc = (a10 + ((int)b10 << (int)decodeState->validBits));
HXDLIN(  59)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState42 = decodeState;
HXDLIN(  59)										decodeState42->validBits = (decodeState42->validBits + (int)8);
            									}
HXDLIN(  59)									if (!((decodeState->validBits < (int)3))) {
HXLINE(  59)										goto _hx_goto_14;
            									}
            								}
            								_hx_goto_14:;
HXDLIN(  59)								if ((decodeState->validBits < (int)0)) {
HXLINE(  59)									val4 = (int)0;
            								}
            								else {
HXLINE(  59)									int z20 = ((int)decodeState->acc & (int)(int)7);
HXDLIN(  59)									decodeState->acc = hx::UShr(decodeState->acc,(int)3);
HXDLIN(  59)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState43 = decodeState;
HXDLIN(  59)									decodeState43->validBits = (decodeState43->validBits - (int)3);
HXDLIN(  59)									val4 = z20;
            								}
            							}
            							else {
HXLINE(  59)								int z21 = ((int)decodeState->acc & (int)(int)7);
HXDLIN(  59)								decodeState->acc = hx::UShr(decodeState->acc,(int)3);
HXDLIN(  59)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState44 = decodeState;
HXDLIN(  59)								decodeState44->validBits = (decodeState44->validBits - (int)3);
HXDLIN(  59)								val4 = z21;
            							}
            						}
HXDLIN(  59)						this8->__unsafe_set(j2,(val4 + (int)1));
            					}
HXLINE(  60)					{
HXLINE(  60)						::Array< int > this9 = g1->classSubclasses;
HXDLIN(  60)						int val6;
HXDLIN(  60)						if ((decodeState->validBits < (int)0)) {
HXLINE(  60)							val6 = (int)0;
            						}
            						else {
HXLINE(  60)							if ((decodeState->validBits < (int)2)) {
HXLINE(  60)								if ((decodeState->validBits == (int)0)) {
HXLINE(  60)									decodeState->acc = (int)0;
            								}
HXDLIN(  60)								while(true){
HXLINE(  60)									bool val7;
HXDLIN(  60)									if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  60)										if (!(decodeState->lastSeg)) {
HXLINE(  60)											val7 = (decodeState->next() == (int)0);
            										}
            										else {
HXLINE(  60)											val7 = true;
            										}
            									}
            									else {
HXLINE(  60)										val7 = false;
            									}
HXDLIN(  60)									if (val7) {
HXLINE(  60)										decodeState->validBits = (int)-1;
HXDLIN(  60)										goto _hx_goto_15;
            									}
            									else {
HXLINE(  60)										decodeState->bytesInSeg--;
HXDLIN(  60)										int a11 = decodeState->acc;
HXDLIN(  60)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState45 = decodeState;
HXDLIN(  60)										decodeState45->inputPosition = (decodeState45->inputPosition + (int)1);
HXDLIN(  60)										int b11 = decodeState->input->readByte();
HXDLIN(  60)										decodeState->acc = (a11 + ((int)b11 << (int)decodeState->validBits));
HXDLIN(  60)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState46 = decodeState;
HXDLIN(  60)										decodeState46->validBits = (decodeState46->validBits + (int)8);
            									}
HXDLIN(  60)									if (!((decodeState->validBits < (int)2))) {
HXLINE(  60)										goto _hx_goto_15;
            									}
            								}
            								_hx_goto_15:;
HXDLIN(  60)								if ((decodeState->validBits < (int)0)) {
HXLINE(  60)									val6 = (int)0;
            								}
            								else {
HXLINE(  60)									int z22 = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  60)									decodeState->acc = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  60)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState47 = decodeState;
HXDLIN(  60)									decodeState47->validBits = (decodeState47->validBits - (int)2);
HXDLIN(  60)									val6 = z22;
            								}
            							}
            							else {
HXLINE(  60)								int z23 = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  60)								decodeState->acc = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  60)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState48 = decodeState;
HXDLIN(  60)								decodeState48->validBits = (decodeState48->validBits - (int)2);
HXDLIN(  60)								val6 = z23;
            							}
            						}
HXDLIN(  60)						this9->__unsafe_set(j2,val6);
            					}
HXLINE(  61)					if ((( (int)(_hx_array_unsafe_get(g1->classSubclasses,j2)) ) != (int)0)) {
HXLINE(  62)						{
HXLINE(  62)							::Array< int > this10 = g1->classMasterbooks;
HXDLIN(  62)							int val8;
HXDLIN(  62)							if ((decodeState->validBits < (int)0)) {
HXLINE(  62)								val8 = (int)0;
            							}
            							else {
HXLINE(  62)								if ((decodeState->validBits < (int)8)) {
HXLINE(  62)									if ((decodeState->validBits == (int)0)) {
HXLINE(  62)										decodeState->acc = (int)0;
            									}
HXDLIN(  62)									while(true){
HXLINE(  62)										bool val9;
HXDLIN(  62)										if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  62)											if (!(decodeState->lastSeg)) {
HXLINE(  62)												val9 = (decodeState->next() == (int)0);
            											}
            											else {
HXLINE(  62)												val9 = true;
            											}
            										}
            										else {
HXLINE(  62)											val9 = false;
            										}
HXDLIN(  62)										if (val9) {
HXLINE(  62)											decodeState->validBits = (int)-1;
HXDLIN(  62)											goto _hx_goto_16;
            										}
            										else {
HXLINE(  62)											decodeState->bytesInSeg--;
HXDLIN(  62)											int a12 = decodeState->acc;
HXDLIN(  62)											 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState49 = decodeState;
HXDLIN(  62)											decodeState49->inputPosition = (decodeState49->inputPosition + (int)1);
HXDLIN(  62)											int b12 = decodeState->input->readByte();
HXDLIN(  62)											decodeState->acc = (a12 + ((int)b12 << (int)decodeState->validBits));
HXDLIN(  62)											 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState50 = decodeState;
HXDLIN(  62)											decodeState50->validBits = (decodeState50->validBits + (int)8);
            										}
HXDLIN(  62)										if (!((decodeState->validBits < (int)8))) {
HXLINE(  62)											goto _hx_goto_16;
            										}
            									}
            									_hx_goto_16:;
HXDLIN(  62)									if ((decodeState->validBits < (int)0)) {
HXLINE(  62)										val8 = (int)0;
            									}
            									else {
HXLINE(  62)										int z24 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  62)										decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  62)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState51 = decodeState;
HXDLIN(  62)										decodeState51->validBits = (decodeState51->validBits - (int)8);
HXDLIN(  62)										val8 = z24;
            									}
            								}
            								else {
HXLINE(  62)									int z25 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  62)									decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  62)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState52 = decodeState;
HXDLIN(  62)									decodeState52->validBits = (decodeState52->validBits - (int)8);
HXDLIN(  62)									val8 = z25;
            								}
            							}
HXDLIN(  62)							this10->__unsafe_set(j2,val8);
            						}
HXLINE(  63)						int _hx_tmp16 = ( (int)(_hx_array_unsafe_get(g1->classMasterbooks,j2)) );
HXDLIN(  63)						if ((_hx_tmp16 >= codebooks->length)) {
HXLINE(  64)							HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Floor.hx",92,54,6e,c5),64,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b))));
            						}
            					}
HXLINE(  68)					int kl = ((int)(int)1 << (int)( (int)(_hx_array_unsafe_get(g1->classSubclasses,j2)) ));
HXLINE(  69)					{
HXLINE(  69)						::Array< ::Dynamic> this11 = g1->subclassBooks;
HXDLIN(  69)						::Array< int > this12 = ::Array_obj< int >::__new(kl);
HXDLIN(  69)						this11->__unsafe_set(j2,this12);
            					}
HXLINE(  70)					{
HXLINE(  70)						int _g31 = (int)0;
HXDLIN(  70)						int _g21 = kl;
HXDLIN(  70)						while((_g31 < _g21)){
HXLINE(  70)							_g31 = (_g31 + (int)1);
HXDLIN(  70)							int k = (_g31 - (int)1);
HXLINE(  71)							{
HXLINE(  71)								::Array< int > this13 = ( (::Array< int >)(_hx_array_unsafe_get(g1->subclassBooks,j2)) );
HXDLIN(  71)								int val10;
HXDLIN(  71)								if ((decodeState->validBits < (int)0)) {
HXLINE(  71)									val10 = (int)0;
            								}
            								else {
HXLINE(  71)									if ((decodeState->validBits < (int)8)) {
HXLINE(  71)										if ((decodeState->validBits == (int)0)) {
HXLINE(  71)											decodeState->acc = (int)0;
            										}
HXDLIN(  71)										while(true){
HXLINE(  71)											bool val11;
HXDLIN(  71)											if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  71)												if (!(decodeState->lastSeg)) {
HXLINE(  71)													val11 = (decodeState->next() == (int)0);
            												}
            												else {
HXLINE(  71)													val11 = true;
            												}
            											}
            											else {
HXLINE(  71)												val11 = false;
            											}
HXDLIN(  71)											if (val11) {
HXLINE(  71)												decodeState->validBits = (int)-1;
HXDLIN(  71)												goto _hx_goto_18;
            											}
            											else {
HXLINE(  71)												decodeState->bytesInSeg--;
HXDLIN(  71)												int a13 = decodeState->acc;
HXDLIN(  71)												 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState53 = decodeState;
HXDLIN(  71)												decodeState53->inputPosition = (decodeState53->inputPosition + (int)1);
HXDLIN(  71)												int b13 = decodeState->input->readByte();
HXDLIN(  71)												decodeState->acc = (a13 + ((int)b13 << (int)decodeState->validBits));
HXDLIN(  71)												 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState54 = decodeState;
HXDLIN(  71)												decodeState54->validBits = (decodeState54->validBits + (int)8);
            											}
HXDLIN(  71)											if (!((decodeState->validBits < (int)8))) {
HXLINE(  71)												goto _hx_goto_18;
            											}
            										}
            										_hx_goto_18:;
HXDLIN(  71)										if ((decodeState->validBits < (int)0)) {
HXLINE(  71)											val10 = (int)0;
            										}
            										else {
HXLINE(  71)											int z26 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  71)											decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  71)											 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState55 = decodeState;
HXDLIN(  71)											decodeState55->validBits = (decodeState55->validBits - (int)8);
HXDLIN(  71)											val10 = z26;
            										}
            									}
            									else {
HXLINE(  71)										int z27 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  71)										decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  71)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState56 = decodeState;
HXDLIN(  71)										decodeState56->validBits = (decodeState56->validBits - (int)8);
HXDLIN(  71)										val10 = z27;
            									}
            								}
HXDLIN(  71)								this13->__unsafe_set(k,(val10 - (int)1));
            							}
HXLINE(  72)							int _hx_tmp17 = ( (int)(_hx_array_unsafe_get(( (::Array< int >)(_hx_array_unsafe_get(g1->subclassBooks,j2)) ),k)) );
HXDLIN(  72)							if ((_hx_tmp17 >= codebooks->length)) {
HXLINE(  73)								HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Floor.hx",92,54,6e,c5),73,HX_("kha.audio2.ogg.vorbis.data.Floor",fc,7c,e7,f7),HX_("read",56,4b,a7,4b))));
            							}
            						}
            					}
            				}
            			}
HXLINE(  78)			int _hx_tmp18;
HXDLIN(  78)			if ((decodeState->validBits < (int)0)) {
HXLINE(  78)				_hx_tmp18 = (int)0;
            			}
            			else {
HXLINE(  78)				if ((decodeState->validBits < (int)2)) {
HXLINE(  78)					if ((decodeState->validBits == (int)0)) {
HXLINE(  78)						decodeState->acc = (int)0;
            					}
HXDLIN(  78)					while(true){
HXLINE(  78)						bool _hx_tmp19;
HXDLIN(  78)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  78)							if (!(decodeState->lastSeg)) {
HXLINE(  78)								_hx_tmp19 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  78)								_hx_tmp19 = true;
            							}
            						}
            						else {
HXLINE(  78)							_hx_tmp19 = false;
            						}
HXDLIN(  78)						if (_hx_tmp19) {
HXLINE(  78)							decodeState->validBits = (int)-1;
HXDLIN(  78)							goto _hx_goto_19;
            						}
            						else {
HXLINE(  78)							decodeState->bytesInSeg--;
HXDLIN(  78)							int a14 = decodeState->acc;
HXDLIN(  78)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState57 = decodeState;
HXDLIN(  78)							decodeState57->inputPosition = (decodeState57->inputPosition + (int)1);
HXDLIN(  78)							int b14 = decodeState->input->readByte();
HXDLIN(  78)							decodeState->acc = (a14 + ((int)b14 << (int)decodeState->validBits));
HXDLIN(  78)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState58 = decodeState;
HXDLIN(  78)							decodeState58->validBits = (decodeState58->validBits + (int)8);
            						}
HXDLIN(  78)						if (!((decodeState->validBits < (int)2))) {
HXLINE(  78)							goto _hx_goto_19;
            						}
            					}
            					_hx_goto_19:;
HXDLIN(  78)					if ((decodeState->validBits < (int)0)) {
HXLINE(  78)						_hx_tmp18 = (int)0;
            					}
            					else {
HXLINE(  78)						int z28 = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  78)						decodeState->acc = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  78)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState59 = decodeState;
HXDLIN(  78)						decodeState59->validBits = (decodeState59->validBits - (int)2);
HXDLIN(  78)						_hx_tmp18 = z28;
            					}
            				}
            				else {
HXLINE(  78)					int z29 = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  78)					decodeState->acc = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  78)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState60 = decodeState;
HXDLIN(  78)					decodeState60->validBits = (decodeState60->validBits - (int)2);
HXDLIN(  78)					_hx_tmp18 = z29;
            				}
            			}
HXDLIN(  78)			g1->floor1Multiplier = (_hx_tmp18 + (int)1);
HXLINE(  79)			int _hx_tmp20;
HXDLIN(  79)			if ((decodeState->validBits < (int)0)) {
HXLINE(  79)				_hx_tmp20 = (int)0;
            			}
            			else {
HXLINE(  79)				if ((decodeState->validBits < (int)4)) {
HXLINE(  79)					if ((decodeState->validBits == (int)0)) {
HXLINE(  79)						decodeState->acc = (int)0;
            					}
HXDLIN(  79)					while(true){
HXLINE(  79)						bool _hx_tmp21;
HXDLIN(  79)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  79)							if (!(decodeState->lastSeg)) {
HXLINE(  79)								_hx_tmp21 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  79)								_hx_tmp21 = true;
            							}
            						}
            						else {
HXLINE(  79)							_hx_tmp21 = false;
            						}
HXDLIN(  79)						if (_hx_tmp21) {
HXLINE(  79)							decodeState->validBits = (int)-1;
HXDLIN(  79)							goto _hx_goto_20;
            						}
            						else {
HXLINE(  79)							decodeState->bytesInSeg--;
HXDLIN(  79)							int a15 = decodeState->acc;
HXDLIN(  79)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState61 = decodeState;
HXDLIN(  79)							decodeState61->inputPosition = (decodeState61->inputPosition + (int)1);
HXDLIN(  79)							int b15 = decodeState->input->readByte();
HXDLIN(  79)							decodeState->acc = (a15 + ((int)b15 << (int)decodeState->validBits));
HXDLIN(  79)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState62 = decodeState;
HXDLIN(  79)							decodeState62->validBits = (decodeState62->validBits + (int)8);
            						}
HXDLIN(  79)						if (!((decodeState->validBits < (int)4))) {
HXLINE(  79)							goto _hx_goto_20;
            						}
            					}
            					_hx_goto_20:;
HXDLIN(  79)					if ((decodeState->validBits < (int)0)) {
HXLINE(  79)						_hx_tmp20 = (int)0;
            					}
            					else {
HXLINE(  79)						int z30 = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  79)						decodeState->acc = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  79)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState63 = decodeState;
HXDLIN(  79)						decodeState63->validBits = (decodeState63->validBits - (int)4);
HXDLIN(  79)						_hx_tmp20 = z30;
            					}
            				}
            				else {
HXLINE(  79)					int z31 = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  79)					decodeState->acc = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  79)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState64 = decodeState;
HXDLIN(  79)					decodeState64->validBits = (decodeState64->validBits - (int)4);
HXDLIN(  79)					_hx_tmp20 = z31;
            				}
            			}
HXDLIN(  79)			g1->rangebits = _hx_tmp20;
HXLINE(  80)			::Array< int > this14 = ::Array_obj< int >::__new((int)250);
HXDLIN(  80)			g1->xlist = this14;
HXLINE(  81)			g1->xlist->__unsafe_set((int)0,(int)0);
HXLINE(  82)			g1->xlist->__unsafe_set((int)1,((int)(int)1 << (int)g1->rangebits));
HXLINE(  83)			g1->values = (int)2;
HXLINE(  84)			{
HXLINE(  84)				int _g13 = (int)0;
HXDLIN(  84)				int _g4 = g1->partitions;
HXDLIN(  84)				while((_g13 < _g4)){
HXLINE(  84)					_g13 = (_g13 + (int)1);
HXDLIN(  84)					int j3 = (_g13 - (int)1);
HXLINE(  85)					int c = ( (int)(_hx_array_unsafe_get(g1->partitionClassList,j3)) );
HXLINE(  86)					{
HXLINE(  86)						int _g32 = (int)0;
HXDLIN(  86)						int _g22 = ( (int)(_hx_array_unsafe_get(g1->classDimensions,c)) );
HXDLIN(  86)						while((_g32 < _g22)){
HXLINE(  86)							_g32 = (_g32 + (int)1);
HXDLIN(  86)							int k1 = (_g32 - (int)1);
HXLINE(  87)							{
HXLINE(  87)								::Array< int > this15 = g1->xlist;
HXDLIN(  87)								int index = g1->values;
HXDLIN(  87)								int n = g1->rangebits;
HXDLIN(  87)								int val12;
HXDLIN(  87)								if ((decodeState->validBits < (int)0)) {
HXLINE(  87)									val12 = (int)0;
            								}
            								else {
HXLINE(  87)									if ((decodeState->validBits < n)) {
HXLINE(  87)										if ((n > (int)24)) {
HXLINE(  87)											int val13 = decodeState->readBits((int)24);
HXDLIN(  87)											val12 = (val13 + ((int)decodeState->readBits((n - (int)24)) << (int)(int)24));
            										}
            										else {
HXLINE(  87)											if ((decodeState->validBits == (int)0)) {
HXLINE(  87)												decodeState->acc = (int)0;
            											}
HXDLIN(  87)											while(true){
HXLINE(  87)												bool val14;
HXDLIN(  87)												if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  87)													if (!(decodeState->lastSeg)) {
HXLINE(  87)														val14 = (decodeState->next() == (int)0);
            													}
            													else {
HXLINE(  87)														val14 = true;
            													}
            												}
            												else {
HXLINE(  87)													val14 = false;
            												}
HXDLIN(  87)												if (val14) {
HXLINE(  87)													decodeState->validBits = (int)-1;
HXDLIN(  87)													goto _hx_goto_23;
            												}
            												else {
HXLINE(  87)													decodeState->bytesInSeg--;
HXDLIN(  87)													int a16 = decodeState->acc;
HXDLIN(  87)													 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState65 = decodeState;
HXDLIN(  87)													decodeState65->inputPosition = (decodeState65->inputPosition + (int)1);
HXDLIN(  87)													int b16 = decodeState->input->readByte();
HXDLIN(  87)													decodeState->acc = (a16 + ((int)b16 << (int)decodeState->validBits));
HXDLIN(  87)													 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState66 = decodeState;
HXDLIN(  87)													decodeState66->validBits = (decodeState66->validBits + (int)8);
            												}
HXDLIN(  87)												if (!((decodeState->validBits < n))) {
HXLINE(  87)													goto _hx_goto_23;
            												}
            											}
            											_hx_goto_23:;
HXDLIN(  87)											if ((decodeState->validBits < (int)0)) {
HXLINE(  87)												val12 = (int)0;
            											}
            											else {
HXLINE(  87)												int z32 = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n) - (int)1));
HXDLIN(  87)												decodeState->acc = hx::UShr(decodeState->acc,n);
HXDLIN(  87)												 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState67 = decodeState;
HXDLIN(  87)												decodeState67->validBits = (decodeState67->validBits - n);
HXDLIN(  87)												val12 = z32;
            											}
            										}
            									}
            									else {
HXLINE(  87)										int z33 = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n) - (int)1));
HXDLIN(  87)										decodeState->acc = hx::UShr(decodeState->acc,n);
HXDLIN(  87)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState68 = decodeState;
HXDLIN(  87)										decodeState68->validBits = (decodeState68->validBits - n);
HXDLIN(  87)										val12 = z33;
            									}
            								}
HXDLIN(  87)								this15->__unsafe_set(index,val12);
            							}
HXLINE(  88)							g1->values++;
            						}
            					}
            				}
            			}
HXLINE(  93)			{
HXLINE(  93)				int _g14 = (int)0;
HXDLIN(  93)				int _g5 = g1->values;
HXDLIN(  93)				while((_g14 < _g5)){
HXLINE(  93)					_g14 = (_g14 + (int)1);
HXDLIN(  93)					int j4 = (_g14 - (int)1);
HXLINE(  94)					p->push( ::kha::audio2::ogg::vorbis::data::IntPoint_obj::__alloc( HX_CTX ));
HXLINE(  95)					int _hx_tmp22 = ( (int)(_hx_array_unsafe_get(g1->xlist,j4)) );
HXDLIN(  95)					p->__get(j4).StaticCast<  ::kha::audio2::ogg::vorbis::data::IntPoint >()->x = _hx_tmp22;
HXLINE(  96)					p->__get(j4).StaticCast<  ::kha::audio2::ogg::vorbis::data::IntPoint >()->y = j4;
            				}
            			}
HXLINE(  99)			p->sort(::kha::audio2::ogg::vorbis::VorbisTools_obj::pointCompare_dyn());
HXLINE( 101)			::Array< int > this16 = ::Array_obj< int >::__new(g1->values);
HXDLIN( 101)			g1->sortedOrder = this16;
HXLINE( 102)			{
HXLINE( 102)				int _g15 = (int)0;
HXDLIN( 102)				int _g6 = g1->values;
HXDLIN( 102)				while((_g15 < _g6)){
HXLINE( 102)					_g15 = (_g15 + (int)1);
HXDLIN( 102)					int j5 = (_g15 - (int)1);
HXLINE( 103)					g1->sortedOrder->__unsafe_set(j5,p->__get(j5).StaticCast<  ::kha::audio2::ogg::vorbis::data::IntPoint >()->y);
            				}
            			}
HXLINE( 106)			::Array< ::Dynamic> this17 = ::Array_obj< ::Dynamic>::__new(g1->values);
HXDLIN( 106)			g1->neighbors = this17;
HXLINE( 108)			{
HXLINE( 108)				int _g16 = (int)2;
HXDLIN( 108)				int _g7 = g1->values;
HXDLIN( 108)				while((_g16 < _g7)){
HXLINE( 108)					_g16 = (_g16 + (int)1);
HXDLIN( 108)					int j6 = (_g16 - (int)1);
HXLINE( 109)					int ne_low;
HXDLIN( 109)					int ne_high;
HXDLIN( 109)					::Array< int > x = g1->xlist;
HXDLIN( 109)					int low = (int)-1;
HXDLIN( 109)					int high = (int)65536;
HXDLIN( 109)					int plow = (int)0;
HXDLIN( 109)					int phigh = (int)0;
HXDLIN( 109)					int _g17 = (int)0;
HXDLIN( 109)					int _g8 = j6;
HXDLIN( 109)					while((_g17 < _g8)){
HXLINE( 109)						_g17 = (_g17 + (int)1);
HXDLIN( 109)						int i = (_g17 - (int)1);
HXDLIN( 109)						bool _hx_tmp23;
HXDLIN( 109)						if ((( (int)(_hx_array_unsafe_get(x,i)) ) > low)) {
HXLINE( 109)							int _hx_tmp24 = ( (int)(_hx_array_unsafe_get(x,i)) );
HXDLIN( 109)							_hx_tmp23 = (_hx_tmp24 < ( (int)(_hx_array_unsafe_get(x,j6)) ));
            						}
            						else {
HXLINE( 109)							_hx_tmp23 = false;
            						}
HXDLIN( 109)						if (_hx_tmp23) {
HXLINE( 109)							plow = i;
HXDLIN( 109)							low = ( (int)(_hx_array_unsafe_get(x,i)) );
            						}
HXDLIN( 109)						bool _hx_tmp25;
HXDLIN( 109)						if ((( (int)(_hx_array_unsafe_get(x,i)) ) < high)) {
HXLINE( 109)							int _hx_tmp26 = ( (int)(_hx_array_unsafe_get(x,i)) );
HXDLIN( 109)							_hx_tmp25 = (_hx_tmp26 > ( (int)(_hx_array_unsafe_get(x,j6)) ));
            						}
            						else {
HXLINE( 109)							_hx_tmp25 = false;
            						}
HXDLIN( 109)						if (_hx_tmp25) {
HXLINE( 109)							phigh = i;
HXDLIN( 109)							high = ( (int)(_hx_array_unsafe_get(x,i)) );
            						}
            					}
HXDLIN( 109)					ne_low = plow;
HXDLIN( 109)					ne_high = phigh;
HXLINE( 110)					{
HXLINE( 110)						::Array< ::Dynamic> this18 = g1->neighbors;
HXDLIN( 110)						::Array< int > this19 = ::Array_obj< int >::__new(g1->values);
HXDLIN( 110)						this18->__unsafe_set(j6,this19);
            					}
HXLINE( 111)					( (::Array< int >)(_hx_array_unsafe_get(g1->neighbors,j6)) )->__unsafe_set((int)0,ne_low);
HXLINE( 112)					( (::Array< int >)(_hx_array_unsafe_get(g1->neighbors,j6)) )->__unsafe_set((int)1,ne_high);
            				}
            			}
            		}
HXLINE( 116)		return floor;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Floor_obj,read,return )


Floor_obj::Floor_obj()
{
}

void Floor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Floor);
	HX_MARK_MEMBER_NAME(floor0,"floor0");
	HX_MARK_MEMBER_NAME(floor1,"floor1");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_END_CLASS();
}

void Floor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(floor0,"floor0");
	HX_VISIT_MEMBER_NAME(floor1,"floor1");
	HX_VISIT_MEMBER_NAME(type,"type");
}

hx::Val Floor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"floor0") ) { return hx::Val( floor0 ); }
		if (HX_FIELD_EQ(inName,"floor1") ) { return hx::Val( floor1 ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Floor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
	}
	return false;
}

hx::Val Floor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"floor0") ) { floor0=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Floor0 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"floor1") ) { floor1=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Floor1 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Floor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("floor0","\xe4","\xc0","\x60","\x41"));
	outFields->push(HX_HCSTRING("floor1","\xe5","\xc0","\x60","\x41"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Floor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::Floor0*/ ,(int)offsetof(Floor_obj,floor0),HX_HCSTRING("floor0","\xe4","\xc0","\x60","\x41")},
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::Floor1*/ ,(int)offsetof(Floor_obj,floor1),HX_HCSTRING("floor1","\xe5","\xc0","\x60","\x41")},
	{hx::fsInt,(int)offsetof(Floor_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Floor_obj_sStaticStorageInfo = 0;
#endif

static ::String Floor_obj_sMemberFields[] = {
	HX_HCSTRING("floor0","\xe4","\xc0","\x60","\x41"),
	HX_HCSTRING("floor1","\xe5","\xc0","\x60","\x41"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	::String(null()) };

static void Floor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Floor_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Floor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Floor_obj::__mClass,"__mClass");
};

#endif

hx::Class Floor_obj::__mClass;

static ::String Floor_obj_sStaticFields[] = {
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	::String(null())
};

void Floor_obj::__register()
{
	hx::Object *dummy = new Floor_obj;
	Floor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.data.Floor","\xfc","\x7c","\xe7","\xf7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Floor_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Floor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Floor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Floor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Floor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Floor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Floor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Floor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
