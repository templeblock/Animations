// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_audio1_AudioChannel
#include <kha/audio1/AudioChannel.h>
#endif
#ifndef INCLUDED_kha_audio2_StreamChannel
#include <kha/audio2/StreamChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f5e0555984af9b17_8_new,"kha.audio2.StreamChannel","new",0x8b4239ad,"kha.audio2.StreamChannel.new","kha/audio2/StreamChannel.hx",8,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_21_initVorbis,"kha.audio2.StreamChannel","initVorbis",0x1b4e68d6,"kha.audio2.StreamChannel.initVorbis","kha/audio2/StreamChannel.hx",21,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_39_nextVorbisSamples,"kha.audio2.StreamChannel","nextVorbisSamples",0xf2e4ef10,"kha.audio2.StreamChannel.nextVorbisSamples","kha/audio2/StreamChannel.hx",39,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_43_nextSamples,"kha.audio2.StreamChannel","nextSamples",0xf9af3aa3,"kha.audio2.StreamChannel.nextSamples","kha/audio2/StreamChannel.hx",43,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_55_play,"kha.audio2.StreamChannel","play",0x5007e807,"kha.audio2.StreamChannel.play","kha/audio2/StreamChannel.hx",55,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_59_pause,"kha.audio2.StreamChannel","pause",0xafaced83,"kha.audio2.StreamChannel.pause","kha/audio2/StreamChannel.hx",59,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_63_stop,"kha.audio2.StreamChannel","stop",0x5209aa15,"kha.audio2.StreamChannel.stop","kha/audio2/StreamChannel.hx",63,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_73_get_length,"kha.audio2.StreamChannel","get_length",0x435c0f02,"kha.audio2.StreamChannel.get_length","kha/audio2/StreamChannel.hx",73,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_83_get_position,"kha.audio2.StreamChannel","get_position",0x88f6d9c5,"kha.audio2.StreamChannel.get_position","kha/audio2/StreamChannel.hx",83,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_89_get_volume,"kha.audio2.StreamChannel","get_volume",0x03a7a3f6,"kha.audio2.StreamChannel.get_volume","kha/audio2/StreamChannel.hx",89,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_93_set_volume,"kha.audio2.StreamChannel","set_volume",0x0725426a,"kha.audio2.StreamChannel.set_volume","kha/audio2/StreamChannel.hx",93,0x97220c83)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e0555984af9b17_99_get_finished,"kha.audio2.StreamChannel","get_finished",0x530acc8e,"kha.audio2.StreamChannel.get_finished","kha/audio2/StreamChannel.hx",99,0x97220c83)
namespace kha{
namespace audio2{

void StreamChannel_obj::__construct( ::haxe::io::Bytes data,bool loop){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_8_new)
HXLINE(  12)		this->paused = false;
HXLINE(   9)		this->atend = false;
HXLINE(  15)		this->myVolume = (int)1;
HXLINE(  16)		this->loop = loop;
HXLINE(  17)		this->initVorbis(data);
            	}

Dynamic StreamChannel_obj::__CreateEmpty() { return new StreamChannel_obj; }

void *StreamChannel_obj::_hx_vtable = 0;

Dynamic StreamChannel_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StreamChannel_obj > _hx_result = new StreamChannel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool StreamChannel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a48e3c3;
}

static ::kha::audio1::AudioChannel_obj _hx_kha_audio2_StreamChannel__hx_kha_audio1_AudioChannel= {
	( void (hx::Object::*)())&::kha::audio2::StreamChannel_obj::play,
	( void (hx::Object::*)())&::kha::audio2::StreamChannel_obj::pause,
	( void (hx::Object::*)())&::kha::audio2::StreamChannel_obj::stop,
	( Float (hx::Object::*)())&::kha::audio2::StreamChannel_obj::get_length_f78ba10e,
	( Float (hx::Object::*)())&::kha::audio2::StreamChannel_obj::get_position_f78ba10e,
	( Float (hx::Object::*)())&::kha::audio2::StreamChannel_obj::get_volume,
	( Float (hx::Object::*)(Float))&::kha::audio2::StreamChannel_obj::set_volume,
	( bool (hx::Object::*)())&::kha::audio2::StreamChannel_obj::get_finished,
};

Float StreamChannel_obj::get_position_f78ba10e() {
			return get_position();
}

Float StreamChannel_obj::get_length_f78ba10e() {
			return get_length();
}
void *StreamChannel_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x78040b2c: return &_hx_kha_audio2_StreamChannel__hx_kha_audio1_AudioChannel;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void StreamChannel_obj::initVorbis( ::haxe::io::Bytes data){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_21_initVorbis)
            	vorbis = stb_vorbis_open_memory(data->b->Pointer(), data->length, NULL, NULL);

            	}


HX_DEFINE_DYNAMIC_FUNC1(StreamChannel_obj,initVorbis,(void))

void StreamChannel_obj::nextVorbisSamples( ::kha::arrays::Float32ArrayPrivate samples,int length){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_39_nextVorbisSamples)
            	
		int read = stb_vorbis_get_samples_float_interleaved(vorbis, 2, samples->self.data, length);
		if (read < length / 2) {
			if (loop) {
				stb_vorbis_seek_start(vorbis);
			}
			else {
				atend = true;
			}
			for (int i = read; i < length; ++i) {
				samples->self.data[i] = 0;
			}
		}
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(StreamChannel_obj,nextVorbisSamples,(void))

void StreamChannel_obj::nextSamples( ::kha::arrays::Float32ArrayPrivate samples,int length,int sampleRate){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_43_nextSamples)
HXLINE(  44)		if (this->paused) {
HXLINE(  45)			{
HXLINE(  45)				int _g1 = (int)0;
HXDLIN(  45)				int _g = length;
HXDLIN(  45)				while((_g1 < _g)){
HXLINE(  45)					_g1 = (_g1 + (int)1);
HXDLIN(  45)					int i = (_g1 - (int)1);
HXLINE(  46)					samples->self.set(i,(int)0);
            				}
            			}
HXLINE(  48)			return;
            		}
HXLINE(  51)		this->nextVorbisSamples(samples,length);
            	}


HX_DEFINE_DYNAMIC_FUNC3(StreamChannel_obj,nextSamples,(void))

void StreamChannel_obj::play(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_55_play)
HXDLIN(  55)		this->paused = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,play,(void))

void StreamChannel_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_59_pause)
HXDLIN(  59)		this->paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,pause,(void))

void StreamChannel_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_63_stop)
HXDLIN(  63)		this->atend = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,stop,(void))

int StreamChannel_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_73_get_length)
            	
		if (vorbis == NULL) return 0;
		return stb_vorbis_stream_length_in_seconds(vorbis) * 1000;
	

HXDLIN(  73)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,get_length,return )

int StreamChannel_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_83_get_position)
            	
		 if (vorbis == NULL) return 0;
		return stb_vorbis_get_sample_offset(vorbis) / stb_vorbis_stream_length_in_samples(vorbis) * 1000;
	

HXDLIN(  83)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,get_position,return )

Float StreamChannel_obj::get_volume(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_89_get_volume)
HXDLIN(  89)		return this->myVolume;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,get_volume,return )

Float StreamChannel_obj::set_volume(Float value){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_93_set_volume)
HXDLIN(  93)		return (this->myVolume = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StreamChannel_obj,set_volume,return )

bool StreamChannel_obj::get_finished(){
            	HX_STACKFRAME(&_hx_pos_f5e0555984af9b17_99_get_finished)
HXDLIN(  99)		return this->atend;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StreamChannel_obj,get_finished,return )


hx::ObjectPtr< StreamChannel_obj > StreamChannel_obj::__new( ::haxe::io::Bytes data,bool loop) {
	hx::ObjectPtr< StreamChannel_obj > __this = new StreamChannel_obj();
	__this->__construct(data,loop);
	return __this;
}

hx::ObjectPtr< StreamChannel_obj > StreamChannel_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::io::Bytes data,bool loop) {
	StreamChannel_obj *__this = (StreamChannel_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StreamChannel_obj), false, "kha.audio2.StreamChannel"));
	*(void **)__this = StreamChannel_obj::_hx_vtable;
	__this->__construct(data,loop);
	return __this;
}

StreamChannel_obj::StreamChannel_obj()
{
}

hx::Val StreamChannel_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"atend") ) { return hx::Val( atend ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( inCallProp == hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_volume() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { return hx::Val( myVolume ); }
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( inCallProp == hx::paccAlways ? get_position() : position ); }
		if (HX_FIELD_EQ(inName,"finished") ) { return hx::Val( inCallProp == hx::paccAlways ? get_finished() : finished ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initVorbis") ) { return hx::Val( initVorbis_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_volume") ) { return hx::Val( get_volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_volume") ) { return hx::Val( set_volume_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nextSamples") ) { return hx::Val( nextSamples_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_finished") ) { return hx::Val( get_finished_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nextVorbisSamples") ) { return hx::Val( nextVorbisSamples_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val StreamChannel_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"loop") ) { loop=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"atend") ) { atend=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_volume(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { myVolume=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StreamChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("atend","\xc8","\x08","\xd8","\x26"));
	outFields->push(HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47"));
	outFields->push(HX_HCSTRING("myVolume","\x66","\x56","\x07","\x96"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"));
	outFields->push(HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo StreamChannel_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(StreamChannel_obj,atend),HX_HCSTRING("atend","\xc8","\x08","\xd8","\x26")},
	{hx::fsBool,(int)offsetof(StreamChannel_obj,loop),HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47")},
	{hx::fsFloat,(int)offsetof(StreamChannel_obj,myVolume),HX_HCSTRING("myVolume","\x66","\x56","\x07","\x96")},
	{hx::fsBool,(int)offsetof(StreamChannel_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsInt,(int)offsetof(StreamChannel_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsInt,(int)offsetof(StreamChannel_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsBool,(int)offsetof(StreamChannel_obj,finished),HX_HCSTRING("finished","\x72","\x93","\x0e","\x95")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *StreamChannel_obj_sStaticStorageInfo = 0;
#endif

static ::String StreamChannel_obj_sMemberFields[] = {
	HX_HCSTRING("atend","\xc8","\x08","\xd8","\x26"),
	HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47"),
	HX_HCSTRING("myVolume","\x66","\x56","\x07","\x96"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("initVorbis","\x83","\x5e","\x81","\x67"),
	HX_HCSTRING("nextVorbisSamples","\x03","\xb9","\x41","\x5f"),
	HX_HCSTRING("nextSamples","\x56","\x3c","\x13","\x5a"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("get_volume","\xa3","\x99","\xda","\x4f"),
	HX_HCSTRING("set_volume","\x17","\x38","\x58","\x53"),
	HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"),
	HX_HCSTRING("get_finished","\x7b","\x47","\x28","\x4a"),
	::String(null()) };

static void StreamChannel_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StreamChannel_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StreamChannel_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StreamChannel_obj::__mClass,"__mClass");
};

#endif

hx::Class StreamChannel_obj::__mClass;

void StreamChannel_obj::__register()
{
	hx::Object *dummy = new StreamChannel_obj;
	StreamChannel_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.StreamChannel","\x3b","\xdf","\x86","\xdd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StreamChannel_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StreamChannel_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StreamChannel_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StreamChannel_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StreamChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StreamChannel_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
