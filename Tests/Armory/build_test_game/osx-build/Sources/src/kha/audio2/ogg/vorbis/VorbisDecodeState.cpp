// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_tools_Crc32
#include <kha/audio2/ogg/tools/Crc32.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis__VorbisDecodeState_FindPageResult
#include <kha/audio2/ogg/vorbis/_VorbisDecodeState/FindPageResult.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Codebook
#include <kha/audio2/ogg/vorbis/data/Codebook.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <kha/audio2/ogg/vorbis/data/Header.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Mode
#include <kha/audio2/ogg/vorbis/data/Mode.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Page
#include <kha/audio2/ogg/vorbis/data/Page.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ProbedPage
#include <kha/audio2/ogg/vorbis/data/ProbedPage.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_687b22a8d42715b8_27_new,"kha.audio2.ogg.vorbis.VorbisDecodeState","new",0xe15b5a2e,"kha.audio2.ogg.vorbis.VorbisDecodeState.new","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",27,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_78_setup,"kha.audio2.ogg.vorbis.VorbisDecodeState","setup",0x5387c7cb,"kha.audio2.ogg.vorbis.VorbisDecodeState.setup","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",78,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_119_clone,"kha.audio2.ogg.vorbis.VorbisDecodeState","clone",0x21bb2cab,"kha.audio2.ogg.vorbis.VorbisDecodeState.clone","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",119,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_154_next,"kha.audio2.ogg.vorbis.VorbisDecodeState","next",0x4e938f65,"kha.audio2.ogg.vorbis.VorbisDecodeState.next","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",154,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_189_startPacket,"kha.audio2.ogg.vorbis.VorbisDecodeState","startPacket",0x0af9bd58,"kha.audio2.ogg.vorbis.VorbisDecodeState.startPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",189,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_203_maybeStartPacket,"kha.audio2.ogg.vorbis.VorbisDecodeState","maybeStartPacket",0x5a5cf834,"kha.audio2.ogg.vorbis.VorbisDecodeState.maybeStartPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",203,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_232_readBits,"kha.audio2.ogg.vorbis.VorbisDecodeState","readBits",0xb09b00ee,"kha.audio2.ogg.vorbis.VorbisDecodeState.readBits","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",232,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_271_readPacketRaw,"kha.audio2.ogg.vorbis.VorbisDecodeState","readPacketRaw",0xa4b12c58,"kha.audio2.ogg.vorbis.VorbisDecodeState.readPacketRaw","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",271,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_281_readPacket,"kha.audio2.ogg.vorbis.VorbisDecodeState","readPacket",0x4097a770,"kha.audio2.ogg.vorbis.VorbisDecodeState.readPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",281,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_288_flushPacket,"kha.audio2.ogg.vorbis.VorbisDecodeState","flushPacket",0x3e67a13a,"kha.audio2.ogg.vorbis.VorbisDecodeState.flushPacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",288,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_294_vorbisValidate,"kha.audio2.ogg.vorbis.VorbisDecodeState","vorbisValidate",0x2e5ee7fb,"kha.audio2.ogg.vorbis.VorbisDecodeState.vorbisValidate","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",294,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_305_firstPageValidate,"kha.audio2.ogg.vorbis.VorbisDecodeState","firstPageValidate",0xa72bf0a3,"kha.audio2.ogg.vorbis.VorbisDecodeState.firstPageValidate","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",305,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_315_startFirstDecode,"kha.audio2.ogg.vorbis.VorbisDecodeState","startFirstDecode",0xf83b15ae,"kha.audio2.ogg.vorbis.VorbisDecodeState.startFirstDecode","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",315,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_322_capturePattern,"kha.audio2.ogg.vorbis.VorbisDecodeState","capturePattern",0x38c5675c,"kha.audio2.ogg.vorbis.VorbisDecodeState.capturePattern","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",322,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_329_skip,"kha.audio2.ogg.vorbis.VorbisDecodeState","skip",0x51e620f1,"kha.audio2.ogg.vorbis.VorbisDecodeState.skip","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",329,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_334_prepHuffman,"kha.audio2.ogg.vorbis.VorbisDecodeState","prepHuffman",0x69ac478e,"kha.audio2.ogg.vorbis.VorbisDecodeState.prepHuffman","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",334,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_350_decode,"kha.audio2.ogg.vorbis.VorbisDecodeState","decode",0xb8ab6820,"kha.audio2.ogg.vorbis.VorbisDecodeState.decode","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",350,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_359_decodeRaw,"kha.audio2.ogg.vorbis.VorbisDecodeState","decodeRaw",0x97caf9a8,"kha.audio2.ogg.vorbis.VorbisDecodeState.decodeRaw","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",359,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_384_isLastByte,"kha.audio2.ogg.vorbis.VorbisDecodeState","isLastByte",0xb29eb67a,"kha.audio2.ogg.vorbis.VorbisDecodeState.isLastByte","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",384,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_388_finishDecodePacket,"kha.audio2.ogg.vorbis.VorbisDecodeState","finishDecodePacket",0xed4f2a3b,"kha.audio2.ogg.vorbis.VorbisDecodeState.finishDecodePacket","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",388,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_463_readInt32,"kha.audio2.ogg.vorbis.VorbisDecodeState","readInt32",0xe221b866,"kha.audio2.ogg.vorbis.VorbisDecodeState.readInt32","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",463,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_469_readByte,"kha.audio2.ogg.vorbis.VorbisDecodeState","readByte",0xb0a724f0,"kha.audio2.ogg.vorbis.VorbisDecodeState.readByte","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",469,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_474_read,"kha.audio2.ogg.vorbis.VorbisDecodeState","read",0x513855c8,"kha.audio2.ogg.vorbis.VorbisDecodeState.read","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",474,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_483_readBytes,"kha.audio2.ogg.vorbis.VorbisDecodeState","readBytes",0xe1992d83,"kha.audio2.ogg.vorbis.VorbisDecodeState.readBytes","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",483,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_489_readString,"kha.audio2.ogg.vorbis.VorbisDecodeState","readString",0x6e2f78b9,"kha.audio2.ogg.vorbis.VorbisDecodeState.readString","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",489,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_494_getSampleNumber,"kha.audio2.ogg.vorbis.VorbisDecodeState","getSampleNumber",0xfc673317,"kha.audio2.ogg.vorbis.VorbisDecodeState.getSampleNumber","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",494,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_568_forcePageResync,"kha.audio2.ogg.vorbis.VorbisDecodeState","forcePageResync",0xba9c57d6,"kha.audio2.ogg.vorbis.VorbisDecodeState.forcePageResync","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",568,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_573_setInputOffset,"kha.audio2.ogg.vorbis.VorbisDecodeState","setInputOffset",0x153efbad,"kha.audio2.ogg.vorbis.VorbisDecodeState.setInputOffset","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",573,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_577_findPage,"kha.audio2.ogg.vorbis.VorbisDecodeState","findPage",0xe472129a,"kha.audio2.ogg.vorbis.VorbisDecodeState.findPage","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",577,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_651_analyzePage,"kha.audio2.ogg.vorbis.VorbisDecodeState","analyzePage",0xfe54df89,"kha.audio2.ogg.vorbis.VorbisDecodeState.analyzePage","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",651,0x1d2e7902)
static const int _hx_array_data_19036b3c_55[] = {
	(int)0,(int)1,(int)2,(int)2,(int)3,(int)3,(int)3,(int)3,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,
};
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_784_decodeScalarRaw,"kha.audio2.ogg.vorbis.VorbisDecodeState","decodeScalarRaw",0x3c61dddc,"kha.audio2.ogg.vorbis.VorbisDecodeState.decodeScalarRaw","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",784,0x1d2e7902)
HX_LOCAL_STACK_FRAME(_hx_pos_687b22a8d42715b8_29_boot,"kha.audio2.ogg.vorbis.VorbisDecodeState","boot",0x46ac8ea4,"kha.audio2.ogg.vorbis.VorbisDecodeState.boot","kha/audio2/ogg/vorbis/VorbisDecodeState.hx",29,0x1d2e7902)
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{

void VorbisDecodeState_obj::__construct( ::haxe::io::Input input){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_27_new)
HXLINE(  54)		this->nextSeg = (int)0;
HXLINE(  53)		this->firstDecode = false;
HXLINE(  40)		this->bytesInSeg = (int)0;
HXLINE(  35)		this->validBits = (int)0;
HXLINE(  72)		this->input = input;
HXLINE(  73)		this->inputPosition = (int)0;
HXLINE(  74)		this->page =  ::kha::audio2::ogg::vorbis::data::Page_obj::__alloc( HX_CTX );
HXLINE(  75)		::kha::audio2::ogg::tools::Crc32_obj::init();
            	}

Dynamic VorbisDecodeState_obj::__CreateEmpty() { return new VorbisDecodeState_obj; }

void *VorbisDecodeState_obj::_hx_vtable = 0;

Dynamic VorbisDecodeState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VorbisDecodeState_obj > _hx_result = new VorbisDecodeState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool VorbisDecodeState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5601b2ae;
}

void VorbisDecodeState_obj::setup(int loc0,int loc1){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_78_setup)
HXLINE(  79)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  79)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + (int)1);
HXDLIN(  79)		int segmentCount = this->input->readByte();
HXLINE(  80)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  80)		_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + segmentCount);
HXDLIN(  80)		::Array< int > this1 = ::Array_obj< int >::__new(segmentCount);
HXDLIN(  80)		::Array< int > vec = this1;
HXDLIN(  80)		{
HXLINE(  80)			int _g1 = (int)0;
HXDLIN(  80)			int _g = segmentCount;
HXDLIN(  80)			while((_g1 < _g)){
HXLINE(  80)				_g1 = (_g1 + (int)1);
HXDLIN(  80)				int i = (_g1 - (int)1);
HXDLIN(  80)				{
HXLINE(  80)					int val = this->input->readByte();
HXDLIN(  80)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXDLIN(  80)		this->segments = vec;
HXLINE(  83)		this->endSegWithKnownLoc = (int)-2;
HXLINE(  84)		bool _hx_tmp2;
HXDLIN(  84)		if ((loc0 == (int)-1)) {
HXLINE(  84)			_hx_tmp2 = (loc1 != (int)-1);
            		}
            		else {
HXLINE(  84)			_hx_tmp2 = true;
            		}
HXDLIN(  84)		if (_hx_tmp2) {
HXLINE(  85)			int i1 = (segmentCount - (int)1);
HXLINE(  86)			while((i1 >= (int)0)){
HXLINE(  87)				if ((( (int)(_hx_array_unsafe_get(this->segments,i1)) ) < (int)255)) {
HXLINE(  88)					goto _hx_goto_2;
            				}
HXLINE(  90)				if ((i1 >= (int)0)) {
HXLINE(  91)					this->endSegWithKnownLoc = i1;
HXLINE(  92)					this->knownLocForPacket = loc0;
            				}
HXLINE(  94)				i1 = (i1 - (int)1);
            			}
            			_hx_goto_2:;
            		}
HXLINE(  98)		if (this->firstDecode) {
HXLINE(  99)			int i2 = (int)0;
HXLINE( 100)			int len = (int)0;
HXLINE( 101)			 ::kha::audio2::ogg::vorbis::data::ProbedPage p =  ::kha::audio2::ogg::vorbis::data::ProbedPage_obj::__alloc( HX_CTX );
HXLINE( 103)			{
HXLINE( 103)				int _g11 = (int)0;
HXDLIN( 103)				int _g2 = segmentCount;
HXDLIN( 103)				while((_g11 < _g2)){
HXLINE( 103)					_g11 = (_g11 + (int)1);
HXDLIN( 103)					int i3 = (_g11 - (int)1);
HXLINE( 104)					len = (len + ( (int)(_hx_array_unsafe_get(this->segments,i3)) ));
            				}
            			}
HXLINE( 106)			len = (len + ((int)27 + segmentCount));
HXLINE( 108)			p->pageStart = this->firstAudioPageOffset;
HXLINE( 109)			p->pageEnd = (p->pageStart + len);
HXLINE( 110)			p->firstDecodedSample = (int)0;
HXLINE( 111)			p->lastDecodedSample = loc0;
HXLINE( 112)			this->pFirst = p;
            		}
HXLINE( 115)		this->nextSeg = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,setup,(void))

 ::kha::audio2::ogg::vorbis::VorbisDecodeState VorbisDecodeState_obj::clone( ::Dynamic seekFunc){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_119_clone)
HXLINE( 120)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState state = ( ( ::kha::audio2::ogg::vorbis::VorbisDecodeState)(::Type_obj::createEmptyInstance(hx::ClassOf< ::kha::audio2::ogg::vorbis::VorbisDecodeState >())) );
HXLINE( 122)		seekFunc(this->inputPosition);
HXLINE( 123)		state->input = this->input;
HXLINE( 126)		state->eof = this->eof;
HXLINE( 127)		state->validBits = this->validBits;
HXLINE( 128)		state->discardSamplesDeferred = this->discardSamplesDeferred;
HXLINE( 129)		state->firstDecode = this->firstDecode;
HXLINE( 130)		state->nextSeg = this->nextSeg;
HXLINE( 131)		state->bytesInSeg = this->bytesInSeg;
HXLINE( 132)		state->acc = state->acc;
HXLINE( 133)		state->lastSeg = this->lastSeg;
HXLINE( 134)		state->lastSegWhich = this->lastSegWhich;
HXLINE( 135)		state->currentLoc = this->currentLoc;
HXLINE( 136)		state->currentLocValid = this->currentLocValid;
HXLINE( 137)		state->inputPosition = this->inputPosition;
HXLINE( 138)		state->firstAudioPageOffset = this->firstAudioPageOffset;
HXLINE( 141)		state->error = this->error;
HXLINE( 142)		state->segments = this->segments;
HXLINE( 143)		state->pFirst = this->pFirst;
HXLINE( 144)		state->pLast = this->pLast;
HXLINE( 147)		state->page = this->page->clone();
HXLINE( 149)		return state;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,clone,return )

int VorbisDecodeState_obj::next(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_154_next)
HXLINE( 155)		if (this->lastSeg) {
HXLINE( 156)			return (int)0;
            		}
HXLINE( 159)		if ((this->nextSeg == (int)-1)) {
HXLINE( 160)			this->lastSegWhich = (this->segments->length - (int)1);
HXLINE( 162)			try {
            				HX_STACK_CATCHABLE( ::kha::audio2::ogg::vorbis::data::ReaderError, 0);
HXLINE( 163)				this->page->start(hx::ObjectPtr<OBJ_>(this));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::kha::audio2::ogg::vorbis::data::ReaderError >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::kha::audio2::ogg::vorbis::data::ReaderError e = _hx_e;
HXLINE( 165)					this->lastSeg = true;
HXLINE( 166)					this->error = e;
HXLINE( 167)					return (int)0;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 170)			if ((((int)this->page->flag & (int)(int)1) == (int)0)) {
HXLINE( 171)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::CONTINUED_PACKET_FLAG_INVALID_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),171,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("next",f3,84,02,49))));
            			}
            		}
HXLINE( 175)		int len = ( (int)(_hx_array_unsafe_get(this->segments,this->nextSeg++)) );
HXLINE( 176)		if ((len < (int)255)) {
HXLINE( 177)			this->lastSeg = true;
HXLINE( 178)			this->lastSegWhich = (this->nextSeg - (int)1);
            		}
HXLINE( 180)		if ((this->nextSeg >= this->segments->length)) {
HXLINE( 181)			this->nextSeg = (int)-1;
            		}
HXLINE( 184)		bool b = (this->bytesInSeg == (int)0);
HXLINE( 185)		this->bytesInSeg = len;
HXLINE( 186)		return len;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,next,return )

void VorbisDecodeState_obj::startPacket(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_189_startPacket)
HXLINE( 190)		while((this->nextSeg == (int)-1)){
HXLINE( 191)			this->page->start(hx::ObjectPtr<OBJ_>(this));
HXLINE( 192)			if ((((int)this->page->flag & (int)(int)1) != (int)0)) {
HXLINE( 193)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::MISSING_CAPTURE_PATTERN_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),193,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("startPacket",8a,b5,7e,5b))));
            			}
            		}
HXLINE( 197)		this->lastSeg = false;
HXLINE( 198)		this->validBits = (int)0;
HXLINE( 199)		this->bytesInSeg = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,startPacket,(void))

bool VorbisDecodeState_obj::maybeStartPacket(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_203_maybeStartPacket)
HXLINE( 204)		if ((this->nextSeg == (int)-1)) {
HXLINE( 205)			bool eof = false;
HXLINE( 206)			int x;
HXDLIN( 206)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 207)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState x1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 207)				x1->inputPosition = (x1->inputPosition + (int)1);
HXLINE( 206)				x = this->input->readByte();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof e = _hx_e;
HXLINE( 209)					eof = true;
HXLINE( 206)					x = (int)0;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 213)			if (eof) {
HXLINE( 214)				return false;
            			}
HXLINE( 217)			bool _hx_tmp;
HXDLIN( 217)			bool _hx_tmp1;
HXDLIN( 217)			bool _hx_tmp2;
HXDLIN( 217)			if ((x == (int)79)) {
HXLINE( 217)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 217)				_hx_tmp3->inputPosition = (_hx_tmp3->inputPosition + (int)1);
HXDLIN( 217)				_hx_tmp2 = (this->input->readByte() != (int)103);
            			}
            			else {
HXLINE( 217)				_hx_tmp2 = true;
            			}
HXDLIN( 217)			if (!(_hx_tmp2)) {
HXLINE( 217)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 217)				_hx_tmp4->inputPosition = (_hx_tmp4->inputPosition + (int)1);
HXDLIN( 217)				_hx_tmp1 = (this->input->readByte() != (int)103);
            			}
            			else {
HXLINE( 217)				_hx_tmp1 = true;
            			}
HXDLIN( 217)			if (!(_hx_tmp1)) {
HXLINE( 217)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 217)				_hx_tmp5->inputPosition = (_hx_tmp5->inputPosition + (int)1);
HXDLIN( 217)				_hx_tmp = (this->input->readByte() != (int)83);
            			}
            			else {
HXLINE( 217)				_hx_tmp = true;
            			}
HXDLIN( 217)			if (_hx_tmp) {
HXLINE( 218)				HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::MISSING_CAPTURE_PATTERN_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),218,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("maybeStartPacket",c2,0a,ad,2a))));
            			}
HXLINE( 221)			this->page->startWithoutCapturePattern(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 224)		this->startPacket();
HXLINE( 225)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,maybeStartPacket,return )

int VorbisDecodeState_obj::readBits(int n){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_232_readBits)
HXDLIN( 232)		if ((this->validBits < (int)0)) {
HXLINE( 233)			return (int)0;
            		}
            		else {
HXLINE( 234)			if ((this->validBits < n)) {
HXLINE( 235)				if ((n > (int)24)) {
HXLINE( 237)					int _hx_tmp = this->readBits((int)24);
HXDLIN( 237)					return (_hx_tmp + ((int)this->readBits((n - (int)24)) << (int)(int)24));
            				}
            				else {
HXLINE( 239)					if ((this->validBits == (int)0)) {
HXLINE( 240)						this->acc = (int)0;
            					}
HXLINE( 243)					while(true){
HXLINE( 244)						bool _hx_tmp1;
HXDLIN( 244)						if ((this->bytesInSeg == (int)0)) {
HXLINE( 244)							if (!(this->lastSeg)) {
HXLINE( 244)								_hx_tmp1 = (this->next() == (int)0);
            							}
            							else {
HXLINE( 244)								_hx_tmp1 = true;
            							}
            						}
            						else {
HXLINE( 244)							_hx_tmp1 = false;
            						}
HXDLIN( 244)						if (_hx_tmp1) {
HXLINE( 245)							this->validBits = (int)-1;
HXLINE( 246)							goto _hx_goto_10;
            						}
            						else {
HXLINE( 248)							this->bytesInSeg--;
HXLINE( 249)							int a = this->acc;
HXDLIN( 249)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState b = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 249)							b->inputPosition = (b->inputPosition + (int)1);
HXDLIN( 249)							int b1 = this->input->readByte();
HXDLIN( 249)							this->acc = (a + ((int)b1 << (int)this->validBits));
HXLINE( 250)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 250)							_hx_tmp2->validBits = (_hx_tmp2->validBits + (int)8);
            						}
HXLINE( 243)						if (!((this->validBits < n))) {
HXLINE( 243)							goto _hx_goto_10;
            						}
            					}
            					_hx_goto_10:;
HXLINE( 254)					if ((this->validBits < (int)0)) {
HXLINE( 255)						return (int)0;
            					}
            					else {
HXLINE( 257)						int z = ((int)this->acc & (int)(((int)(int)1 << (int)n) - (int)1));
HXLINE( 258)						this->acc = hx::UShr(this->acc,n);
HXLINE( 259)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 259)						_hx_tmp3->validBits = (_hx_tmp3->validBits - n);
HXLINE( 260)						return z;
            					}
            				}
            			}
            			else {
HXLINE( 264)				int z1 = ((int)this->acc & (int)(((int)(int)1 << (int)n) - (int)1));
HXLINE( 265)				this->acc = hx::UShr(this->acc,n);
HXLINE( 266)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 266)				_hx_tmp4->validBits = (_hx_tmp4->validBits - n);
HXLINE( 267)				return z1;
            			}
            		}
HXLINE( 232)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,readBits,return )

int VorbisDecodeState_obj::readPacketRaw(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_271_readPacketRaw)
HXDLIN( 271)		bool _hx_tmp;
HXDLIN( 271)		if ((this->bytesInSeg == (int)0)) {
HXDLIN( 271)			if (!(this->lastSeg)) {
HXDLIN( 271)				_hx_tmp = (this->next() == (int)0);
            			}
            			else {
HXDLIN( 271)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN( 271)			_hx_tmp = false;
            		}
HXDLIN( 271)		if (_hx_tmp) {
HXLINE( 272)			return (int)-1;
            		}
            		else {
HXLINE( 275)			this->bytesInSeg--;
HXLINE( 276)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 276)			_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + (int)1);
HXDLIN( 276)			return this->input->readByte();
            		}
HXLINE( 271)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readPacketRaw,return )

int VorbisDecodeState_obj::readPacket(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_281_readPacket)
HXLINE( 282)		int x;
HXDLIN( 282)		bool x1;
HXDLIN( 282)		if ((this->bytesInSeg == (int)0)) {
HXLINE( 282)			if (!(this->lastSeg)) {
HXLINE( 282)				x1 = (this->next() == (int)0);
            			}
            			else {
HXLINE( 282)				x1 = true;
            			}
            		}
            		else {
HXLINE( 282)			x1 = false;
            		}
HXDLIN( 282)		if (x1) {
HXLINE( 282)			x = (int)-1;
            		}
            		else {
HXLINE( 282)			this->bytesInSeg--;
HXDLIN( 282)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState x2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 282)			x2->inputPosition = (x2->inputPosition + (int)1);
HXDLIN( 282)			x = this->input->readByte();
            		}
HXLINE( 283)		this->validBits = (int)0;
HXLINE( 284)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readPacket,return )

void VorbisDecodeState_obj::flushPacket(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_288_flushPacket)
HXDLIN( 288)		while(true){
HXDLIN( 288)			bool _hx_tmp;
HXDLIN( 288)			if ((this->bytesInSeg == (int)0)) {
HXDLIN( 288)				if (!(this->lastSeg)) {
HXDLIN( 288)					_hx_tmp = (this->next() != (int)0);
            				}
            				else {
HXDLIN( 288)					_hx_tmp = false;
            				}
            			}
            			else {
HXDLIN( 288)				_hx_tmp = true;
            			}
HXDLIN( 288)			if (!(_hx_tmp)) {
HXDLIN( 288)				goto _hx_goto_14;
            			}
HXLINE( 289)			this->bytesInSeg--;
HXLINE( 290)			{
HXLINE( 290)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 290)				_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + (int)1);
HXDLIN( 290)				this->input->readByte();
            			}
            		}
            		_hx_goto_14:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,flushPacket,(void))

void VorbisDecodeState_obj::vorbisValidate(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_294_vorbisValidate)
HXLINE( 295)		 ::haxe::io::Bytes header = ::haxe::io::Bytes_obj::alloc((int)6);
HXLINE( 296)		{
HXLINE( 296)			int _g = (int)0;
HXDLIN( 296)			while((_g < (int)6)){
HXLINE( 296)				_g = (_g + (int)1);
HXDLIN( 296)				int i = (_g - (int)1);
HXLINE( 297)				{
HXLINE( 297)					int x;
HXDLIN( 297)					bool x1;
HXDLIN( 297)					if ((this->bytesInSeg == (int)0)) {
HXLINE( 297)						if (!(this->lastSeg)) {
HXLINE( 297)							x1 = (this->next() == (int)0);
            						}
            						else {
HXLINE( 297)							x1 = true;
            						}
            					}
            					else {
HXLINE( 297)						x1 = false;
            					}
HXDLIN( 297)					if (x1) {
HXLINE( 297)						x = (int)-1;
            					}
            					else {
HXLINE( 297)						this->bytesInSeg--;
HXDLIN( 297)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState x2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 297)						x2->inputPosition = (x2->inputPosition + (int)1);
HXDLIN( 297)						x = this->input->readByte();
            					}
HXDLIN( 297)					this->validBits = (int)0;
HXDLIN( 297)					header->b[i] = x;
            				}
            			}
            		}
HXLINE( 299)		if ((header->toString() != HX_("vorbis",53,03,3c,63))) {
HXLINE( 300)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),HX_("vorbis header",ba,3e,a4,0e),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),300,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("vorbisValidate",09,9b,51,16))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,vorbisValidate,(void))

void VorbisDecodeState_obj::firstPageValidate(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_305_firstPageValidate)
HXLINE( 306)		if ((this->segments->length != (int)1)) {
HXLINE( 307)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("segmentCount",1c,1c,95,3d),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),307,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("firstPageValidate",55,1a,ec,1c))));
            		}
HXLINE( 309)		if ((( (int)(_hx_array_unsafe_get(this->segments,(int)0)) ) != (int)30)) {
HXLINE( 310)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_FIRST_PAGE_dyn(),HX_("decodeState head",5d,8c,63,29),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),310,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("firstPageValidate",55,1a,ec,1c))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,firstPageValidate,(void))

void VorbisDecodeState_obj::startFirstDecode(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_315_startFirstDecode)
HXLINE( 316)		this->firstAudioPageOffset = this->inputPosition;
HXLINE( 317)		this->firstDecode = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,startFirstDecode,(void))

void VorbisDecodeState_obj::capturePattern(){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_322_capturePattern)
HXDLIN( 322)		bool _hx_tmp;
HXDLIN( 322)		bool _hx_tmp1;
HXDLIN( 322)		bool _hx_tmp2;
HXDLIN( 322)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 322)		_hx_tmp3->inputPosition = (_hx_tmp3->inputPosition + (int)1);
HXDLIN( 322)		if ((this->input->readByte() == (int)79)) {
HXDLIN( 322)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 322)			_hx_tmp4->inputPosition = (_hx_tmp4->inputPosition + (int)1);
HXDLIN( 322)			_hx_tmp2 = (this->input->readByte() != (int)103);
            		}
            		else {
HXDLIN( 322)			_hx_tmp2 = true;
            		}
HXDLIN( 322)		if (!(_hx_tmp2)) {
HXDLIN( 322)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 322)			_hx_tmp5->inputPosition = (_hx_tmp5->inputPosition + (int)1);
HXDLIN( 322)			_hx_tmp1 = (this->input->readByte() != (int)103);
            		}
            		else {
HXDLIN( 322)			_hx_tmp1 = true;
            		}
HXDLIN( 322)		if (!(_hx_tmp1)) {
HXDLIN( 322)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 322)			_hx_tmp6->inputPosition = (_hx_tmp6->inputPosition + (int)1);
HXDLIN( 322)			_hx_tmp = (this->input->readByte() != (int)83);
            		}
            		else {
HXDLIN( 322)			_hx_tmp = true;
            		}
HXDLIN( 322)		if (_hx_tmp) {
HXLINE( 323)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::MISSING_CAPTURE_PATTERN_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),323,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("capturePattern",6a,1a,b8,20))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,capturePattern,(void))

void VorbisDecodeState_obj::skip(int len){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_329_skip)
HXDLIN( 329)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 329)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + len);
HXDLIN( 329)		::Array< int > this1 = ::Array_obj< int >::__new(len);
HXDLIN( 329)		::Array< int > vec = this1;
HXDLIN( 329)		{
HXDLIN( 329)			int _g1 = (int)0;
HXDLIN( 329)			int _g = len;
HXDLIN( 329)			while((_g1 < _g)){
HXDLIN( 329)				_g1 = (_g1 + (int)1);
HXDLIN( 329)				int i = (_g1 - (int)1);
HXDLIN( 329)				{
HXDLIN( 329)					int val = this->input->readByte();
HXDLIN( 329)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,skip,(void))

void VorbisDecodeState_obj::prepHuffman(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_334_prepHuffman)
HXDLIN( 334)		if ((this->validBits <= (int)24)) {
HXLINE( 335)			if ((this->validBits == (int)0)) {
HXLINE( 336)				this->acc = (int)0;
            			}
HXLINE( 338)			while(true){
HXLINE( 339)				bool _hx_tmp;
HXDLIN( 339)				if ((this->bytesInSeg == (int)0)) {
HXLINE( 339)					if (!(this->lastSeg)) {
HXLINE( 339)						_hx_tmp = (this->next() == (int)0);
            					}
            					else {
HXLINE( 339)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 339)					_hx_tmp = false;
            				}
HXDLIN( 339)				if (_hx_tmp) {
HXLINE( 340)					return;
            				}
            				else {
HXLINE( 342)					this->bytesInSeg--;
HXLINE( 343)					int a = this->acc;
HXDLIN( 343)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState b = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 343)					b->inputPosition = (b->inputPosition + (int)1);
HXDLIN( 343)					int b1 = this->input->readByte();
HXDLIN( 343)					this->acc = (a + ((int)b1 << (int)this->validBits));
HXLINE( 344)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 344)					_hx_tmp1->validBits = (_hx_tmp1->validBits + (int)8);
            				}
HXLINE( 338)				if (!((this->validBits <= (int)24))) {
HXLINE( 338)					goto _hx_goto_23;
            				}
            			}
            			_hx_goto_23:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,prepHuffman,(void))

int VorbisDecodeState_obj::decode( ::kha::audio2::ogg::vorbis::data::Codebook c){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_350_decode)
HXLINE( 351)		if ((this->validBits < (int)10)) {
HXLINE( 351)			this->prepHuffman();
            		}
HXDLIN( 351)		int i = ( (int)(_hx_array_unsafe_get(c->fastHuffman,((int)this->acc & (int)(int)1023))) );
HXDLIN( 351)		int val;
HXDLIN( 351)		if ((i >= (int)0)) {
HXLINE( 351)			int l = ( (int)(_hx_array_unsafe_get(c->codewordLengths,i)) );
HXDLIN( 351)			this->acc = hx::UShr(this->acc,l);
HXDLIN( 351)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState val1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 351)			val1->validBits = (val1->validBits - l);
HXDLIN( 351)			if ((this->validBits < (int)0)) {
HXLINE( 351)				this->validBits = (int)0;
HXDLIN( 351)				val = (int)-1;
            			}
            			else {
HXLINE( 351)				val = i;
            			}
            		}
            		else {
HXLINE( 351)			val = this->decodeScalarRaw(c);
            		}
HXLINE( 352)		if (c->sparse) {
HXLINE( 353)			val = ( (int)(_hx_array_unsafe_get(c->sortedValues,val)) );
            		}
HXLINE( 355)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,decode,return )

int VorbisDecodeState_obj::decodeRaw( ::kha::audio2::ogg::vorbis::data::Codebook c){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_359_decodeRaw)
HXLINE( 360)		if ((this->validBits < (int)10)) {
HXLINE( 361)			this->prepHuffman();
            		}
HXLINE( 365)		int i = ( (int)(_hx_array_unsafe_get(c->fastHuffman,((int)this->acc & (int)(int)1023))) );
HXLINE( 367)		if ((i >= (int)0)) {
HXLINE( 368)			int l = ( (int)(_hx_array_unsafe_get(c->codewordLengths,i)) );
HXLINE( 369)			this->acc = hx::UShr(this->acc,l);
HXLINE( 370)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 370)			_hx_tmp->validBits = (_hx_tmp->validBits - l);
HXLINE( 371)			if ((this->validBits < (int)0)) {
HXLINE( 372)				this->validBits = (int)0;
HXLINE( 373)				return (int)-1;
            			}
            			else {
HXLINE( 375)				return i;
            			}
            		}
            		else {
HXLINE( 378)			return this->decodeScalarRaw(c);
            		}
HXLINE( 367)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,decodeRaw,return )

bool VorbisDecodeState_obj::isLastByte(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_384_isLastByte)
HXDLIN( 384)		if ((this->bytesInSeg == (int)0)) {
HXDLIN( 384)			return this->lastSeg;
            		}
            		else {
HXDLIN( 384)			return false;
            		}
HXDLIN( 384)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,isLastByte,return )

 ::Dynamic VorbisDecodeState_obj::finishDecodePacket(int previousLength,int n, ::Dynamic r){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_388_finishDecodePacket)
HXLINE( 389)		int left = ( (int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) );
HXLINE( 390)		bool currentLocValid = false;
HXLINE( 391)		int n2 = ((int)n >> (int)(int)1);
HXLINE( 393)		if (this->firstDecode) {
HXLINE( 398)			this->currentLoc = -(n2);
HXLINE( 401)			this->discardSamplesDeferred = (n - ( (int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)) ));
HXLINE( 402)			currentLocValid = true;
HXLINE( 403)			this->firstDecode = false;
            		}
            		else {
HXLINE( 404)			if ((this->discardSamplesDeferred != (int)0)) {
HXLINE( 405)				 ::Dynamic r1 = r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic);
HXDLIN( 405)				r1->__SetField(HX_("start",62,74,0b,84),(( (int)(r1->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) ) + this->discardSamplesDeferred),hx::paccDynamic);
HXLINE( 406)				left = ( (int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) );
HXLINE( 407)				this->discardSamplesDeferred = (int)0;
            			}
            			else {
HXLINE( 408)				bool _hx_tmp;
HXDLIN( 408)				if ((previousLength == (int)0)) {
HXLINE( 408)					_hx_tmp = currentLocValid;
            				}
            				else {
HXLINE( 408)					_hx_tmp = false;
            				}
            			}
            		}
HXLINE( 418)		if ((this->lastSegWhich == this->endSegWithKnownLoc)) {
HXLINE( 420)			bool _hx_tmp1;
HXDLIN( 420)			if (currentLocValid) {
HXLINE( 420)				_hx_tmp1 = (((int)this->page->flag & (int)(int)4) != (int)0);
            			}
            			else {
HXLINE( 420)				_hx_tmp1 = false;
            			}
HXDLIN( 420)			if (_hx_tmp1) {
HXLINE( 421)				int currentEnd = this->knownLocForPacket;
HXDLIN( 421)				int currentEnd1 = (currentEnd - (n - ( (int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)) )));
HXLINE( 423)				if ((currentEnd1 < (this->currentLoc + ( (int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)) )))) {
HXLINE( 424)					int len;
HXDLIN( 424)					if ((currentEnd1 < this->currentLoc)) {
HXLINE( 424)						len = (int)0;
            					}
            					else {
HXLINE( 424)						len = (currentEnd1 - this->currentLoc);
            					}
HXLINE( 430)					len = (len + ( (int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) ));
HXLINE( 431)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 431)					_hx_tmp2->currentLoc = (_hx_tmp2->currentLoc + len);
HXLINE( 433)					return  ::Dynamic(hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("right",dc,0b,64,e9), ::Dynamic( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)))
            						->setFixed(1,HX_("len",d5,4b,52,00),len)
            						->setFixed(2,HX_("left",07,08,b0,47),left));
            				}
            			}
HXLINE( 444)			int _hx_tmp3 = this->knownLocForPacket;
HXDLIN( 444)			this->currentLoc = (_hx_tmp3 - (n2 - ( (int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) )));
HXLINE( 445)			currentLocValid = true;
            		}
HXLINE( 448)		if (currentLocValid) {
HXLINE( 449)			 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 449)			_hx_tmp4->currentLoc = (_hx_tmp4->currentLoc + (( (int)( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) ) - ( (int)( ::Dynamic(r->__Field(HX_("left",07,08,b0,47),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)) )));
            		}
HXLINE( 455)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("right",dc,0b,64,e9), ::Dynamic( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("start",62,74,0b,84),hx::paccDynamic)))
            			->setFixed(1,HX_("len",d5,4b,52,00), ::Dynamic( ::Dynamic(r->__Field(HX_("right",dc,0b,64,e9),hx::paccDynamic))->__Field(HX_("end",db,03,4d,00),hx::paccDynamic)))
            			->setFixed(2,HX_("left",07,08,b0,47),left));
            	}


HX_DEFINE_DYNAMIC_FUNC3(VorbisDecodeState_obj,finishDecodePacket,return )

int VorbisDecodeState_obj::readInt32(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_463_readInt32)
HXLINE( 464)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 464)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + (int)4);
HXLINE( 465)		return this->input->readInt32();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readInt32,return )

int VorbisDecodeState_obj::readByte(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_469_readByte)
HXLINE( 470)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 470)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + (int)1);
HXLINE( 471)		return this->input->readByte();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,readByte,return )

::Array< int > VorbisDecodeState_obj::read(int n){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_474_read)
HXLINE( 475)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 475)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + n);
HXLINE( 476)		::Array< int > this1 = ::Array_obj< int >::__new(n);
HXDLIN( 476)		::Array< int > vec = this1;
HXLINE( 477)		{
HXLINE( 477)			int _g1 = (int)0;
HXDLIN( 477)			int _g = n;
HXDLIN( 477)			while((_g1 < _g)){
HXLINE( 477)				_g1 = (_g1 + (int)1);
HXDLIN( 477)				int i = (_g1 - (int)1);
HXLINE( 478)				{
HXLINE( 478)					int val = this->input->readByte();
HXDLIN( 478)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXLINE( 480)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,read,return )

 ::haxe::io::Bytes VorbisDecodeState_obj::readBytes(int n){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_483_readBytes)
HXLINE( 484)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 484)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + n);
HXLINE( 485)		return this->input->read(n);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,readBytes,return )

::String VorbisDecodeState_obj::readString(int n){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_489_readString)
HXLINE( 490)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 490)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + n);
HXLINE( 491)		return this->input->readString(n);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,readString,return )

int VorbisDecodeState_obj::getSampleNumber( ::Dynamic seekFunc,int inputLength){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_494_getSampleNumber)
HXLINE( 497)		int restoreOffset = this->inputPosition;
HXLINE( 501)		int previousSafe;
HXDLIN( 501)		bool previousSafe1;
HXDLIN( 501)		bool aNeg = (inputLength < (int)0);
HXDLIN( 501)		bool bNeg = ((int)65536 < (int)0);
HXDLIN( 501)		bool previousSafe2;
HXDLIN( 501)		if ((aNeg != bNeg)) {
HXLINE( 501)			previousSafe2 = aNeg;
            		}
            		else {
HXLINE( 501)			previousSafe2 = (inputLength >= (int)65536);
            		}
HXDLIN( 501)		if (previousSafe2) {
HXLINE( 501)			int a = (inputLength - (int)65536);
HXDLIN( 501)			int b = this->firstAudioPageOffset;
HXDLIN( 501)			bool aNeg1 = (a < (int)0);
HXDLIN( 501)			bool bNeg1 = (b < (int)0);
HXDLIN( 501)			if ((aNeg1 != bNeg1)) {
HXLINE( 501)				previousSafe1 = aNeg1;
            			}
            			else {
HXLINE( 501)				previousSafe1 = (a >= b);
            			}
            		}
            		else {
HXLINE( 501)			previousSafe1 = false;
            		}
HXDLIN( 501)		if (previousSafe1) {
HXLINE( 501)			previousSafe = (inputLength - (int)65536);
            		}
            		else {
HXLINE( 501)			previousSafe = this->firstAudioPageOffset;
            		}
HXLINE( 507)		seekFunc((this->inputPosition = previousSafe));
HXLINE( 511)		int end = (int)0;
HXLINE( 512)		bool last = false;
HXLINE( 513)		{
HXLINE( 513)			 ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult _g = this->findPage(seekFunc,inputLength);
HXDLIN( 513)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 514)					bool l = _g->_hx_getBool(1);
HXDLIN( 514)					int e = _g->_hx_getInt(0);
HXDLIN( 514)					{
HXLINE( 515)						end = e;
HXLINE( 516)						last = l;
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 518)					HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::CANT_FIND_LAST_PAGE_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),518,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("getSampleNumber",49,2c,d1,08))));
            				}
            				break;
            			}
            		}
HXLINE( 522)		int lastPageLoc = this->inputPosition;
HXLINE( 527)		while(!(last)){
HXLINE( 528)			seekFunc((this->inputPosition = end));
HXLINE( 529)			{
HXLINE( 529)				 ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult _g1 = this->findPage(seekFunc,inputLength);
HXDLIN( 529)				switch((int)(_hx_getEnumValueIndex(_g1))){
            					case (int)0: {
HXLINE( 530)						bool l1 = _g1->_hx_getBool(1);
HXDLIN( 530)						int e1 = _g1->_hx_getInt(0);
HXDLIN( 530)						{
HXLINE( 531)							end = e1;
HXLINE( 532)							last = l1;
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 536)						goto _hx_goto_35;
            					}
            					break;
            				}
            			}
HXLINE( 539)			previousSafe = (lastPageLoc + (int)1);
HXLINE( 540)			lastPageLoc = this->inputPosition;
            		}
            		_hx_goto_35:;
HXLINE( 543)		seekFunc((this->inputPosition = lastPageLoc));
HXLINE( 546)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 546)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + (int)6);
HXDLIN( 546)		::Array< int > this1 = ::Array_obj< int >::__new((int)6);
HXDLIN( 546)		::Array< int > vec = this1;
HXDLIN( 546)		{
HXLINE( 546)			int _g11 = (int)0;
HXDLIN( 546)			int _g2 = (int)6;
HXDLIN( 546)			while((_g11 < _g2)){
HXLINE( 546)				_g11 = (_g11 + (int)1);
HXDLIN( 546)				int i = (_g11 - (int)1);
HXDLIN( 546)				{
HXLINE( 546)					int val = this->input->readByte();
HXDLIN( 546)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXDLIN( 546)		::Array< int > vorbisHeader = vec;
HXLINE( 549)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 549)		_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + (int)4);
HXDLIN( 549)		int lo = this->input->readInt32();
HXLINE( 550)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 550)		_hx_tmp2->inputPosition = (_hx_tmp2->inputPosition + (int)4);
HXDLIN( 550)		int hi = this->input->readInt32();
HXLINE( 551)		bool _hx_tmp3;
HXDLIN( 551)		bool _hx_tmp4;
HXDLIN( 551)		if ((lo == (int)-1)) {
HXLINE( 551)			_hx_tmp4 = (hi == (int)-1);
            		}
            		else {
HXLINE( 551)			_hx_tmp4 = false;
            		}
HXDLIN( 551)		if (!(_hx_tmp4)) {
HXLINE( 551)			_hx_tmp3 = (hi > (int)0);
            		}
            		else {
HXLINE( 551)			_hx_tmp3 = true;
            		}
HXDLIN( 551)		if (_hx_tmp3) {
HXLINE( 552)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::CANT_FIND_LAST_PAGE_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),552,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("getSampleNumber",49,2c,d1,08))));
            		}
HXLINE( 555)		this->pLast =  ::kha::audio2::ogg::vorbis::data::ProbedPage_obj::__alloc( HX_CTX );
HXLINE( 556)		this->pLast->pageStart = lastPageLoc;
HXLINE( 557)		this->pLast->pageEnd = end;
HXLINE( 558)		this->pLast->lastDecodedSample = lo;
HXLINE( 559)		this->pLast->firstDecodedSample = null();
HXLINE( 560)		this->pLast->afterPreviousPageStart = previousSafe;
HXLINE( 562)		seekFunc((this->inputPosition = restoreOffset));
HXLINE( 563)		return lo;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,getSampleNumber,return )

void VorbisDecodeState_obj::forcePageResync(){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_568_forcePageResync)
HXDLIN( 568)		this->nextSeg = (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VorbisDecodeState_obj,forcePageResync,(void))

void VorbisDecodeState_obj::setInputOffset( ::Dynamic seekFunc,int n){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_573_setInputOffset)
HXDLIN( 573)		seekFunc((this->inputPosition = n));
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,setInputOffset,(void))

 ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult VorbisDecodeState_obj::findPage( ::Dynamic seekFunc,int inputLength){
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_577_findPage)
HXDLIN( 577)		try {
            			HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 578)			while(true){
HXLINE( 579)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 579)				_hx_tmp->inputPosition = (_hx_tmp->inputPosition + (int)1);
HXDLIN( 579)				int n = this->input->readByte();
HXLINE( 580)				if ((n == (int)79)) {
HXLINE( 581)					int retryLoc = this->inputPosition;
HXLINE( 583)					if (((retryLoc - (int)25) > inputLength)) {
HXLINE( 584)						return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::NotFound_dyn();
            					}
HXLINE( 587)					bool _hx_tmp1;
HXDLIN( 587)					bool _hx_tmp2;
HXDLIN( 587)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 587)					_hx_tmp3->inputPosition = (_hx_tmp3->inputPosition + (int)1);
HXDLIN( 587)					if ((this->input->readByte() == (int)103)) {
HXLINE( 587)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 587)						_hx_tmp4->inputPosition = (_hx_tmp4->inputPosition + (int)1);
HXDLIN( 587)						_hx_tmp2 = (this->input->readByte() != (int)103);
            					}
            					else {
HXLINE( 587)						_hx_tmp2 = true;
            					}
HXDLIN( 587)					if (!(_hx_tmp2)) {
HXLINE( 587)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 587)						_hx_tmp5->inputPosition = (_hx_tmp5->inputPosition + (int)1);
HXDLIN( 587)						_hx_tmp1 = (this->input->readByte() != (int)83);
            					}
            					else {
HXLINE( 587)						_hx_tmp1 = true;
            					}
HXDLIN( 587)					if (_hx_tmp1) {
HXLINE( 588)						continue;
            					}
HXLINE( 591)					::Array< int > this1 = ::Array_obj< int >::__new((int)27);
HXDLIN( 591)					::Array< int > header = this1;
HXLINE( 592)					header->__unsafe_set((int)0,(int)79);
HXLINE( 593)					header->__unsafe_set((int)1,(int)103);
HXLINE( 594)					header->__unsafe_set((int)2,(int)103);
HXLINE( 595)					header->__unsafe_set((int)3,(int)83);
HXLINE( 596)					{
HXLINE( 596)						int _g = (int)4;
HXDLIN( 596)						while((_g < (int)27)){
HXLINE( 596)							_g = (_g + (int)1);
HXDLIN( 596)							int i = (_g - (int)1);
HXLINE( 597)							{
HXLINE( 597)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 597)								_hx_tmp6->inputPosition = (_hx_tmp6->inputPosition + (int)1);
HXDLIN( 597)								int val = this->input->readByte();
HXDLIN( 597)								header->__unsafe_set(i,val);
            							}
            						}
            					}
HXLINE( 600)					if ((( (int)(_hx_array_unsafe_get(header,(int)4)) ) != (int)0)) {
HXLINE( 601)						seekFunc((this->inputPosition = retryLoc));
HXLINE( 602)						continue;
            					}
HXLINE( 605)					int a = ( (int)(_hx_array_unsafe_get(header,(int)22)) );
HXDLIN( 605)					int a1 = (a + ((int)( (int)(_hx_array_unsafe_get(header,(int)23)) ) << (int)(int)8));
HXDLIN( 605)					int a2 = (a1 + ((int)( (int)(_hx_array_unsafe_get(header,(int)24)) ) << (int)(int)16));
HXDLIN( 605)					int goal = (a2 + ((int)( (int)(_hx_array_unsafe_get(header,(int)25)) ) << (int)(int)24));
HXLINE( 606)					{
HXLINE( 606)						int _g1 = (int)22;
HXDLIN( 606)						while((_g1 < (int)26)){
HXLINE( 606)							_g1 = (_g1 + (int)1);
HXDLIN( 606)							int i1 = (_g1 - (int)1);
HXLINE( 607)							header->__unsafe_set(i1,(int)0);
            						}
            					}
HXLINE( 610)					int crc = (int)0;
HXLINE( 611)					{
HXLINE( 611)						int _g2 = (int)0;
HXDLIN( 611)						while((_g2 < (int)27)){
HXLINE( 611)							_g2 = (_g2 + (int)1);
HXDLIN( 611)							int i2 = (_g2 - (int)1);
HXLINE( 612)							int byte = ( (int)(_hx_array_unsafe_get(header,i2)) );
HXDLIN( 612)							crc = ((int)((int)crc << (int)(int)8) ^ (int)( (int)(_hx_array_unsafe_get(::kha::audio2::ogg::tools::Crc32_obj::table,((int)byte ^ (int)hx::UShr(crc,(int)24)))) ));
            						}
            					}
HXLINE( 615)					int len = (int)0;
HXLINE( 616)					try {
            						HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 617)						{
HXLINE( 617)							int _g11 = (int)0;
HXDLIN( 617)							int _g3 = ( (int)(_hx_array_unsafe_get(header,(int)26)) );
HXDLIN( 617)							while((_g11 < _g3)){
HXLINE( 617)								_g11 = (_g11 + (int)1);
HXDLIN( 617)								int i3 = (_g11 - (int)1);
HXLINE( 618)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 618)								_hx_tmp7->inputPosition = (_hx_tmp7->inputPosition + (int)1);
HXDLIN( 618)								int s = this->input->readByte();
HXLINE( 619)								crc = ((int)((int)crc << (int)(int)8) ^ (int)( (int)(_hx_array_unsafe_get(::kha::audio2::ogg::tools::Crc32_obj::table,((int)s ^ (int)hx::UShr(crc,(int)24)))) ));
HXLINE( 620)								len = (len + s);
            							}
            						}
HXLINE( 622)						{
HXLINE( 622)							int _g12 = (int)0;
HXDLIN( 622)							int _g4 = len;
HXDLIN( 622)							while((_g12 < _g4)){
HXLINE( 622)								_g12 = (_g12 + (int)1);
HXDLIN( 622)								int i4 = (_g12 - (int)1);
HXLINE( 623)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState crc1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 623)								crc1->inputPosition = (crc1->inputPosition + (int)1);
HXDLIN( 623)								int byte1 = this->input->readByte();
HXDLIN( 623)								crc = ((int)((int)crc << (int)(int)8) ^ (int)( (int)(_hx_array_unsafe_get(::kha::audio2::ogg::tools::Crc32_obj::table,((int)byte1 ^ (int)hx::UShr(crc,(int)24)))) ));
            							}
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::haxe::io::Eof e = _hx_e;
HXLINE( 626)							return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::NotFound_dyn();
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 630)					if ((crc == goal)) {
HXLINE( 639)						int end = this->inputPosition;
HXLINE( 640)						seekFunc((this->inputPosition = (retryLoc - (int)1)));
HXLINE( 641)						return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::Found(end,(((int)( (int)(_hx_array_unsafe_get(header,(int)5)) ) & (int)(int)4) != (int)0));
            					}
            				}
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::io::Eof e1 = _hx_e;
HXLINE( 646)				return ::kha::audio2::ogg::vorbis::_VorbisDecodeState::FindPageResult_obj::NotFound_dyn();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 577)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,findPage,return )

 ::kha::audio2::ogg::vorbis::data::ProbedPage VorbisDecodeState_obj::analyzePage( ::Dynamic seekFunc, ::kha::audio2::ogg::vorbis::data::Header h){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_651_analyzePage)
HXLINE( 652)		 ::kha::audio2::ogg::vorbis::data::ProbedPage z =  ::kha::audio2::ogg::vorbis::data::ProbedPage_obj::__alloc( HX_CTX );
HXLINE( 653)		::Array< bool > this1 = ::Array_obj< bool >::__new((int)255);
HXDLIN( 653)		::Array< bool > packetType = this1;
HXLINE( 656)		z->pageStart = this->inputPosition;
HXLINE( 659)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 659)		_hx_tmp->inputPosition = (_hx_tmp->inputPosition + (int)27);
HXDLIN( 659)		::Array< int > this2 = ::Array_obj< int >::__new((int)27);
HXDLIN( 659)		::Array< int > vec = this2;
HXDLIN( 659)		{
HXLINE( 659)			int _g1 = (int)0;
HXDLIN( 659)			int _g = (int)27;
HXDLIN( 659)			while((_g1 < _g)){
HXLINE( 659)				_g1 = (_g1 + (int)1);
HXDLIN( 659)				int i = (_g1 - (int)1);
HXDLIN( 659)				{
HXLINE( 659)					int val = this->input->readByte();
HXDLIN( 659)					vec->__unsafe_set(i,val);
            				}
            			}
            		}
HXDLIN( 659)		::Array< int > pageHeader = vec;
HXLINE( 660)		{
HXLINE( 660)			bool b;
HXDLIN( 660)			bool b1;
HXDLIN( 660)			bool b2;
HXDLIN( 660)			if ((( (int)(_hx_array_unsafe_get(pageHeader,(int)0)) ) == (int)79)) {
HXLINE( 660)				b2 = (( (int)(_hx_array_unsafe_get(pageHeader,(int)1)) ) == (int)103);
            			}
            			else {
HXLINE( 660)				b2 = false;
            			}
HXDLIN( 660)			if (b2) {
HXLINE( 660)				b1 = (( (int)(_hx_array_unsafe_get(pageHeader,(int)2)) ) == (int)103);
            			}
            			else {
HXLINE( 660)				b1 = false;
            			}
HXDLIN( 660)			if (b1) {
HXLINE( 660)				b = (( (int)(_hx_array_unsafe_get(pageHeader,(int)3)) ) == (int)83);
            			}
            			else {
HXLINE( 660)				b = false;
            			}
            		}
HXLINE( 661)		int n = ( (int)(_hx_array_unsafe_get(pageHeader,(int)26)) );
HXDLIN( 661)		 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 661)		_hx_tmp1->inputPosition = (_hx_tmp1->inputPosition + n);
HXDLIN( 661)		::Array< int > this3 = ::Array_obj< int >::__new(n);
HXDLIN( 661)		::Array< int > vec1 = this3;
HXDLIN( 661)		{
HXLINE( 661)			int _g11 = (int)0;
HXDLIN( 661)			int _g2 = n;
HXDLIN( 661)			while((_g11 < _g2)){
HXLINE( 661)				_g11 = (_g11 + (int)1);
HXDLIN( 661)				int i1 = (_g11 - (int)1);
HXDLIN( 661)				{
HXLINE( 661)					int val1 = this->input->readByte();
HXDLIN( 661)					vec1->__unsafe_set(i1,val1);
            				}
            			}
            		}
HXDLIN( 661)		::Array< int > lacing = vec1;
HXLINE( 664)		int len = (int)0;
HXLINE( 665)		{
HXLINE( 665)			int _g12 = (int)0;
HXDLIN( 665)			int _g3 = ( (int)(_hx_array_unsafe_get(pageHeader,(int)26)) );
HXDLIN( 665)			while((_g12 < _g3)){
HXLINE( 665)				_g12 = (_g12 + (int)1);
HXDLIN( 665)				int i2 = (_g12 - (int)1);
HXLINE( 666)				len = (len + ( (int)(_hx_array_unsafe_get(lacing,i2)) ));
            			}
            		}
HXLINE( 670)		int _hx_tmp2 = (z->pageStart + (int)27);
HXDLIN( 670)		z->pageEnd = ((_hx_tmp2 + ( (int)(_hx_array_unsafe_get(pageHeader,(int)26)) )) + len);
HXLINE( 673)		int _hx_tmp3 = ( (int)(_hx_array_unsafe_get(pageHeader,(int)6)) );
HXDLIN( 673)		int _hx_tmp4 = (_hx_tmp3 + ((int)( (int)(_hx_array_unsafe_get(pageHeader,(int)7)) ) << (int)(int)8));
HXDLIN( 673)		int _hx_tmp5 = (_hx_tmp4 + ((int)( (int)(_hx_array_unsafe_get(pageHeader,(int)8)) ) << (int)(int)16));
HXDLIN( 673)		z->lastDecodedSample = (_hx_tmp5 + ((int)( (int)(_hx_array_unsafe_get(pageHeader,(int)9)) ) << (int)(int)16));
HXLINE( 675)		if ((((int)( (int)(_hx_array_unsafe_get(pageHeader,(int)5)) ) & (int)(int)4) != (int)0)) {
HXLINE( 678)			z->firstDecodedSample = null();
HXLINE( 679)			seekFunc((this->inputPosition = z->pageStart));
HXLINE( 680)			return z;
            		}
HXLINE( 687)		int numPacket = (int)0;
HXLINE( 688)		bool packetStart = (((int)( (int)(_hx_array_unsafe_get(pageHeader,(int)5)) ) & (int)(int)1) == (int)0);
HXLINE( 690)		int modeCount = h->modes->length;
HXLINE( 692)		{
HXLINE( 692)			int _g13 = (int)0;
HXDLIN( 692)			int _g4 = ( (int)(_hx_array_unsafe_get(pageHeader,(int)26)) );
HXDLIN( 692)			while((_g13 < _g4)){
HXLINE( 692)				_g13 = (_g13 + (int)1);
HXDLIN( 692)				int i3 = (_g13 - (int)1);
HXLINE( 693)				if (packetStart) {
HXLINE( 694)					if ((( (int)(_hx_array_unsafe_get(lacing,i3)) ) == (int)0)) {
HXLINE( 696)						seekFunc((this->inputPosition = z->pageStart));
HXLINE( 697)						return null();
            					}
HXLINE( 699)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 699)					_hx_tmp6->inputPosition = (_hx_tmp6->inputPosition + (int)1);
HXDLIN( 699)					int n1 = this->input->readByte();
HXLINE( 702)					if ((((int)n1 & (int)(int)1) != (int)0)) {
HXLINE( 703)						seekFunc((this->inputPosition = z->pageStart));
HXLINE( 704)						return null();
            					}
HXLINE( 706)					n1 = ((int)n1 >> (int)(int)1);
HXLINE( 707)					int n2 = (modeCount - (int)1);
HXDLIN( 707)					::Array< int > log2_4 = ::Array_obj< int >::fromData( _hx_array_data_19036b3c_55,16);
HXDLIN( 707)					int b3;
HXDLIN( 707)					if ((n2 < (int)16384)) {
HXLINE( 707)						if ((n2 < (int)16)) {
HXLINE( 707)							b3 = log2_4->__get(n2);
            						}
            						else {
HXLINE( 707)							if ((n2 < (int)512)) {
HXLINE( 707)								b3 = ((int)5 + log2_4->__get(((int)n2 >> (int)(int)5)));
            							}
            							else {
HXLINE( 707)								b3 = ((int)10 + log2_4->__get(((int)n2 >> (int)(int)10)));
            							}
            						}
            					}
            					else {
HXLINE( 707)						if ((n2 < (int)16777216)) {
HXLINE( 707)							if ((n2 < (int)524288)) {
HXLINE( 707)								b3 = ((int)15 + log2_4->__get(((int)n2 >> (int)(int)15)));
            							}
            							else {
HXLINE( 707)								b3 = ((int)20 + log2_4->__get(((int)n2 >> (int)(int)20)));
            							}
            						}
            						else {
HXLINE( 707)							if ((n2 < (int)536870912)) {
HXLINE( 707)								b3 = ((int)25 + log2_4->__get(((int)n2 >> (int)(int)25)));
            							}
            							else {
HXLINE( 707)								if ((n2 < (int)-2147483648)) {
HXLINE( 707)									b3 = ((int)30 + log2_4->__get(((int)n2 >> (int)(int)30)));
            								}
            								else {
HXLINE( 707)									b3 = (int)0;
            								}
            							}
            						}
            					}
HXLINE( 708)					n1 = ((int)n1 & (int)(((int)(int)1 << (int)b3) - (int)1));
HXLINE( 709)					if ((n1 >= modeCount)) {
HXLINE( 710)						seekFunc((this->inputPosition = z->pageStart));
HXLINE( 711)						return null();
            					}
HXLINE( 713)					{
HXLINE( 713)						numPacket = (numPacket + (int)1);
HXDLIN( 713)						bool val2 = ( ( ::kha::audio2::ogg::vorbis::data::Mode)(_hx_array_unsafe_get(h->modes,n1)) )->blockflag;
HXDLIN( 713)						packetType->__unsafe_set((numPacket - (int)1),val2);
            					}
HXLINE( 714)					{
HXLINE( 714)						int len1 = (( (int)(_hx_array_unsafe_get(lacing,i3)) ) - (int)1);
HXDLIN( 714)						{
HXLINE( 714)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 714)							_hx_tmp7->inputPosition = (_hx_tmp7->inputPosition + len1);
HXDLIN( 714)							::Array< int > this4 = ::Array_obj< int >::__new(len1);
HXDLIN( 714)							::Array< int > vec2 = this4;
HXDLIN( 714)							{
HXLINE( 714)								int _g14 = (int)0;
HXDLIN( 714)								int _g5 = len1;
HXDLIN( 714)								while((_g14 < _g5)){
HXLINE( 714)									_g14 = (_g14 + (int)1);
HXDLIN( 714)									int i4 = (_g14 - (int)1);
HXDLIN( 714)									{
HXLINE( 714)										int val3 = this->input->readByte();
HXDLIN( 714)										vec2->__unsafe_set(i4,val3);
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 716)					int len2 = ( (int)(_hx_array_unsafe_get(lacing,i3)) );
HXDLIN( 716)					{
HXLINE( 716)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 716)						_hx_tmp8->inputPosition = (_hx_tmp8->inputPosition + len2);
HXDLIN( 716)						::Array< int > this5 = ::Array_obj< int >::__new(len2);
HXDLIN( 716)						::Array< int > vec3 = this5;
HXDLIN( 716)						{
HXLINE( 716)							int _g15 = (int)0;
HXDLIN( 716)							int _g6 = len2;
HXDLIN( 716)							while((_g15 < _g6)){
HXLINE( 716)								_g15 = (_g15 + (int)1);
HXDLIN( 716)								int i5 = (_g15 - (int)1);
HXDLIN( 716)								{
HXLINE( 716)									int val4 = this->input->readByte();
HXDLIN( 716)									vec3->__unsafe_set(i5,val4);
            								}
            							}
            						}
            					}
            				}
HXLINE( 718)				packetStart = (( (int)(_hx_array_unsafe_get(lacing,i3)) ) < (int)255);
            			}
            		}
HXLINE( 723)		int samples = (int)0;
HXLINE( 731)		if ((numPacket > (int)1)) {
HXLINE( 732)			int samples1;
HXDLIN( 732)			if (( (bool)(_hx_array_unsafe_get(packetType,(numPacket - (int)1))) )) {
HXLINE( 732)				samples1 = h->blocksize1;
            			}
            			else {
HXLINE( 732)				samples1 = h->blocksize0;
            			}
HXDLIN( 732)			samples = (samples + samples1);
            		}
HXLINE( 735)		int i6 = (numPacket - (int)2);
HXLINE( 736)		while((i6 >= (int)1)){
HXLINE( 737)			i6 = (i6 - (int)1);
HXLINE( 740)			if (( (bool)(_hx_array_unsafe_get(packetType,i6)) )) {
HXLINE( 741)				if (( (bool)(_hx_array_unsafe_get(packetType,(i6 + (int)1))) )) {
HXLINE( 742)					samples = (samples + ((int)h->blocksize1 >> (int)(int)1));
            				}
            				else {
HXLINE( 744)					int samples2 = ((int)(h->blocksize1 - h->blocksize0) >> (int)(int)2);
HXDLIN( 744)					samples = (samples + (samples2 + ((int)h->blocksize0 >> (int)(int)1)));
            				}
            			}
            			else {
HXLINE( 747)				samples = (samples + ((int)h->blocksize0 >> (int)(int)1));
            			}
HXLINE( 749)			i6 = (i6 - (int)1);
            		}
HXLINE( 775)		z->firstDecodedSample = (z->lastDecodedSample - samples);
HXLINE( 778)		seekFunc((this->inputPosition = z->pageStart));
HXLINE( 779)		return z;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VorbisDecodeState_obj,analyzePage,return )

int VorbisDecodeState_obj::decodeScalarRaw( ::kha::audio2::ogg::vorbis::data::Codebook c){
            	HX_GC_STACKFRAME(&_hx_pos_687b22a8d42715b8_784_decodeScalarRaw)
HXLINE( 785)		this->prepHuffman();
HXLINE( 787)		{
HXLINE( 787)			bool b;
HXDLIN( 787)			if (hx::IsNull( c->sortedCodewords )) {
HXLINE( 787)				b = hx::IsNotNull( c->codewords );
            			}
            			else {
HXLINE( 787)				b = true;
            			}
            		}
HXLINE( 790)		::Array< int > codewordLengths = c->codewordLengths;
HXLINE( 791)		::Array< int > codewords = c->codewords;
HXLINE( 792)		::Array< int > sortedCodewords = c->sortedCodewords;
HXLINE( 794)		bool _hx_tmp;
HXDLIN( 794)		if ((c->entries > (int)8)) {
HXLINE( 794)			_hx_tmp = hx::IsNotNull( sortedCodewords );
            		}
            		else {
HXLINE( 794)			_hx_tmp = hx::IsNotNull( codewords );
            		}
HXDLIN( 794)		if (_hx_tmp) {
HXLINE( 796)			int n = this->acc;
HXDLIN( 796)			n = ((int)hx::UShr(((int)n & (int)(int)-1431655766),(int)1) | (int)((int)((int)n & (int)(int)1431655765) << (int)(int)1));
HXDLIN( 796)			n = ((int)hx::UShr(((int)n & (int)(int)-858993460),(int)2) | (int)((int)((int)n & (int)(int)858993459) << (int)(int)2));
HXDLIN( 796)			n = ((int)hx::UShr(((int)n & (int)(int)-252645136),(int)4) | (int)((int)((int)n & (int)(int)252645135) << (int)(int)4));
HXDLIN( 796)			n = ((int)hx::UShr(((int)n & (int)(int)-16711936),(int)8) | (int)((int)((int)n & (int)(int)16711935) << (int)(int)8));
HXDLIN( 796)			int code = ((int)hx::UShr(n,(int)16) | (int)((int)n << (int)(int)16));
HXLINE( 797)			int x = (int)0;
HXLINE( 798)			int n1 = c->sortedEntries;
HXLINE( 800)			while((n1 > (int)1)){
HXLINE( 802)				int m = (x + ((int)n1 >> (int)(int)1));
HXLINE( 803)				int a = sortedCodewords->__get(m);
HXDLIN( 803)				bool aNeg = (code < (int)0);
HXDLIN( 803)				bool bNeg = (a < (int)0);
HXDLIN( 803)				bool _hx_tmp1;
HXDLIN( 803)				if ((aNeg != bNeg)) {
HXLINE( 803)					_hx_tmp1 = aNeg;
            				}
            				else {
HXLINE( 803)					_hx_tmp1 = (code >= a);
            				}
HXDLIN( 803)				if (_hx_tmp1) {
HXLINE( 804)					x = m;
HXLINE( 805)					n1 = (n1 - ((int)n1 >> (int)(int)1));
            				}
            				else {
HXLINE( 807)					n1 = ((int)n1 >> (int)(int)1);
            				}
            			}
HXLINE( 812)			if (!(c->sparse)) {
HXLINE( 813)				x = ( (int)(_hx_array_unsafe_get(c->sortedValues,x)) );
            			}
HXLINE( 817)			int len = ( (int)(_hx_array_unsafe_get(codewordLengths,x)) );
HXLINE( 818)			if ((this->validBits >= len)) {
HXLINE( 819)				this->acc = hx::UShr(this->acc,len);
HXLINE( 820)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 820)				_hx_tmp2->validBits = (_hx_tmp2->validBits - len);
HXLINE( 821)				return x;
            			}
HXLINE( 824)			this->validBits = (int)0;
HXLINE( 825)			return (int)-1;
            		}
HXLINE( 829)		bool b1 = !(c->sparse);
HXLINE( 830)		{
HXLINE( 830)			int _g1 = (int)0;
HXDLIN( 830)			int _g = c->entries;
HXDLIN( 830)			while((_g1 < _g)){
HXLINE( 830)				_g1 = (_g1 + (int)1);
HXDLIN( 830)				int i = (_g1 - (int)1);
HXLINE( 831)				int cl = ( (int)(_hx_array_unsafe_get(codewordLengths,i)) );
HXLINE( 832)				if ((cl == (int)255)) {
HXLINE( 833)					continue;
            				}
HXLINE( 835)				int a1 = ( (int)(_hx_array_unsafe_get(codewords,i)) );
HXDLIN( 835)				if ((a1 == ((int)this->acc & (int)(((int)(int)1 << (int)cl) - (int)1)))) {
HXLINE( 836)					if ((this->validBits >= cl)) {
HXLINE( 837)						this->acc = hx::UShr(this->acc,cl);
HXLINE( 838)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 838)						_hx_tmp3->validBits = (_hx_tmp3->validBits - cl);
HXLINE( 839)						return i;
            					}
HXLINE( 841)					this->validBits = (int)0;
HXLINE( 842)					return (int)-1;
            				}
            			}
            		}
HXLINE( 846)		this->error =  ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_STREAM_dyn(),null(),hx::SourceInfo(HX_("VorbisDecodeState.hx",6e,33,f8,9f),846,HX_("kha.audio2.ogg.vorbis.VorbisDecodeState",3c,6b,03,19),HX_("decodeScalarRaw",0e,d7,cb,48)));
HXLINE( 847)		this->validBits = (int)0;
HXLINE( 848)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VorbisDecodeState_obj,decodeScalarRaw,return )

int VorbisDecodeState_obj::INVALID_BITS;


hx::ObjectPtr< VorbisDecodeState_obj > VorbisDecodeState_obj::__new( ::haxe::io::Input input) {
	hx::ObjectPtr< VorbisDecodeState_obj > __this = new VorbisDecodeState_obj();
	__this->__construct(input);
	return __this;
}

hx::ObjectPtr< VorbisDecodeState_obj > VorbisDecodeState_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::io::Input input) {
	VorbisDecodeState_obj *__this = (VorbisDecodeState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VorbisDecodeState_obj), true, "kha.audio2.ogg.vorbis.VorbisDecodeState"));
	*(void **)__this = VorbisDecodeState_obj::_hx_vtable;
	__this->__construct(input);
	return __this;
}

VorbisDecodeState_obj::VorbisDecodeState_obj()
{
}

void VorbisDecodeState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VorbisDecodeState);
	HX_MARK_MEMBER_NAME(page,"page");
	HX_MARK_MEMBER_NAME(eof,"eof");
	HX_MARK_MEMBER_NAME(pFirst,"pFirst");
	HX_MARK_MEMBER_NAME(pLast,"pLast");
	HX_MARK_MEMBER_NAME(validBits,"validBits");
	HX_MARK_MEMBER_NAME(inputPosition,"inputPosition");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(discardSamplesDeferred,"discardSamplesDeferred");
	HX_MARK_MEMBER_NAME(segments,"segments");
	HX_MARK_MEMBER_NAME(bytesInSeg,"bytesInSeg");
	HX_MARK_MEMBER_NAME(channelBuffers,"channelBuffers");
	HX_MARK_MEMBER_NAME(channelBufferStart,"channelBufferStart");
	HX_MARK_MEMBER_NAME(channelBufferEnd,"channelBufferEnd");
	HX_MARK_MEMBER_NAME(currentSample,"currentSample");
	HX_MARK_MEMBER_NAME(previousWindow,"previousWindow");
	HX_MARK_MEMBER_NAME(previousLength,"previousLength");
	HX_MARK_MEMBER_NAME(finalY,"finalY");
	HX_MARK_MEMBER_NAME(firstDecode,"firstDecode");
	HX_MARK_MEMBER_NAME(nextSeg,"nextSeg");
	HX_MARK_MEMBER_NAME(acc,"acc");
	HX_MARK_MEMBER_NAME(lastSeg,"lastSeg");
	HX_MARK_MEMBER_NAME(lastSegWhich,"lastSegWhich");
	HX_MARK_MEMBER_NAME(endSegWithKnownLoc,"endSegWithKnownLoc");
	HX_MARK_MEMBER_NAME(knownLocForPacket,"knownLocForPacket");
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_MEMBER_NAME(currentLoc,"currentLoc");
	HX_MARK_MEMBER_NAME(currentLocValid,"currentLocValid");
	HX_MARK_MEMBER_NAME(firstAudioPageOffset,"firstAudioPageOffset");
	HX_MARK_END_CLASS();
}

void VorbisDecodeState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(page,"page");
	HX_VISIT_MEMBER_NAME(eof,"eof");
	HX_VISIT_MEMBER_NAME(pFirst,"pFirst");
	HX_VISIT_MEMBER_NAME(pLast,"pLast");
	HX_VISIT_MEMBER_NAME(validBits,"validBits");
	HX_VISIT_MEMBER_NAME(inputPosition,"inputPosition");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(discardSamplesDeferred,"discardSamplesDeferred");
	HX_VISIT_MEMBER_NAME(segments,"segments");
	HX_VISIT_MEMBER_NAME(bytesInSeg,"bytesInSeg");
	HX_VISIT_MEMBER_NAME(channelBuffers,"channelBuffers");
	HX_VISIT_MEMBER_NAME(channelBufferStart,"channelBufferStart");
	HX_VISIT_MEMBER_NAME(channelBufferEnd,"channelBufferEnd");
	HX_VISIT_MEMBER_NAME(currentSample,"currentSample");
	HX_VISIT_MEMBER_NAME(previousWindow,"previousWindow");
	HX_VISIT_MEMBER_NAME(previousLength,"previousLength");
	HX_VISIT_MEMBER_NAME(finalY,"finalY");
	HX_VISIT_MEMBER_NAME(firstDecode,"firstDecode");
	HX_VISIT_MEMBER_NAME(nextSeg,"nextSeg");
	HX_VISIT_MEMBER_NAME(acc,"acc");
	HX_VISIT_MEMBER_NAME(lastSeg,"lastSeg");
	HX_VISIT_MEMBER_NAME(lastSegWhich,"lastSegWhich");
	HX_VISIT_MEMBER_NAME(endSegWithKnownLoc,"endSegWithKnownLoc");
	HX_VISIT_MEMBER_NAME(knownLocForPacket,"knownLocForPacket");
	HX_VISIT_MEMBER_NAME(error,"error");
	HX_VISIT_MEMBER_NAME(currentLoc,"currentLoc");
	HX_VISIT_MEMBER_NAME(currentLocValid,"currentLocValid");
	HX_VISIT_MEMBER_NAME(firstAudioPageOffset,"firstAudioPageOffset");
}

hx::Val VorbisDecodeState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"eof") ) { return hx::Val( eof ); }
		if (HX_FIELD_EQ(inName,"acc") ) { return hx::Val( acc ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"page") ) { return hx::Val( page ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		if (HX_FIELD_EQ(inName,"skip") ) { return hx::Val( skip_dyn() ); }
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pLast") ) { return hx::Val( pLast ); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error ); }
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pFirst") ) { return hx::Val( pFirst ); }
		if (HX_FIELD_EQ(inName,"finalY") ) { return hx::Val( finalY ); }
		if (HX_FIELD_EQ(inName,"decode") ) { return hx::Val( decode_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nextSeg") ) { return hx::Val( nextSeg ); }
		if (HX_FIELD_EQ(inName,"lastSeg") ) { return hx::Val( lastSeg ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"segments") ) { return hx::Val( segments ); }
		if (HX_FIELD_EQ(inName,"readBits") ) { return hx::Val( readBits_dyn() ); }
		if (HX_FIELD_EQ(inName,"readByte") ) { return hx::Val( readByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"findPage") ) { return hx::Val( findPage_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"validBits") ) { return hx::Val( validBits ); }
		if (HX_FIELD_EQ(inName,"decodeRaw") ) { return hx::Val( decodeRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"readInt32") ) { return hx::Val( readInt32_dyn() ); }
		if (HX_FIELD_EQ(inName,"readBytes") ) { return hx::Val( readBytes_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesInSeg") ) { return hx::Val( bytesInSeg ); }
		if (HX_FIELD_EQ(inName,"currentLoc") ) { return hx::Val( currentLoc ); }
		if (HX_FIELD_EQ(inName,"readPacket") ) { return hx::Val( readPacket_dyn() ); }
		if (HX_FIELD_EQ(inName,"isLastByte") ) { return hx::Val( isLastByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"readString") ) { return hx::Val( readString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"firstDecode") ) { return hx::Val( firstDecode ); }
		if (HX_FIELD_EQ(inName,"startPacket") ) { return hx::Val( startPacket_dyn() ); }
		if (HX_FIELD_EQ(inName,"flushPacket") ) { return hx::Val( flushPacket_dyn() ); }
		if (HX_FIELD_EQ(inName,"prepHuffman") ) { return hx::Val( prepHuffman_dyn() ); }
		if (HX_FIELD_EQ(inName,"analyzePage") ) { return hx::Val( analyzePage_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastSegWhich") ) { return hx::Val( lastSegWhich ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inputPosition") ) { return hx::Val( inputPosition ); }
		if (HX_FIELD_EQ(inName,"currentSample") ) { return hx::Val( currentSample ); }
		if (HX_FIELD_EQ(inName,"readPacketRaw") ) { return hx::Val( readPacketRaw_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"channelBuffers") ) { return hx::Val( channelBuffers ); }
		if (HX_FIELD_EQ(inName,"previousWindow") ) { return hx::Val( previousWindow ); }
		if (HX_FIELD_EQ(inName,"previousLength") ) { return hx::Val( previousLength ); }
		if (HX_FIELD_EQ(inName,"vorbisValidate") ) { return hx::Val( vorbisValidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"capturePattern") ) { return hx::Val( capturePattern_dyn() ); }
		if (HX_FIELD_EQ(inName,"setInputOffset") ) { return hx::Val( setInputOffset_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentLocValid") ) { return hx::Val( currentLocValid ); }
		if (HX_FIELD_EQ(inName,"getSampleNumber") ) { return hx::Val( getSampleNumber_dyn() ); }
		if (HX_FIELD_EQ(inName,"forcePageResync") ) { return hx::Val( forcePageResync_dyn() ); }
		if (HX_FIELD_EQ(inName,"decodeScalarRaw") ) { return hx::Val( decodeScalarRaw_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"channelBufferEnd") ) { return hx::Val( channelBufferEnd ); }
		if (HX_FIELD_EQ(inName,"maybeStartPacket") ) { return hx::Val( maybeStartPacket_dyn() ); }
		if (HX_FIELD_EQ(inName,"startFirstDecode") ) { return hx::Val( startFirstDecode_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"knownLocForPacket") ) { return hx::Val( knownLocForPacket ); }
		if (HX_FIELD_EQ(inName,"firstPageValidate") ) { return hx::Val( firstPageValidate_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"channelBufferStart") ) { return hx::Val( channelBufferStart ); }
		if (HX_FIELD_EQ(inName,"endSegWithKnownLoc") ) { return hx::Val( endSegWithKnownLoc ); }
		if (HX_FIELD_EQ(inName,"finishDecodePacket") ) { return hx::Val( finishDecodePacket_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"firstAudioPageOffset") ) { return hx::Val( firstAudioPageOffset ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"discardSamplesDeferred") ) { return hx::Val( discardSamplesDeferred ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VorbisDecodeState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"eof") ) { eof=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acc") ) { acc=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"page") ) { page=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::Page >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pLast") ) { pLast=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::ProbedPage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::haxe::io::Input >(); return inValue; }
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::ReaderError >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pFirst") ) { pFirst=inValue.Cast<  ::kha::audio2::ogg::vorbis::data::ProbedPage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finalY") ) { finalY=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nextSeg") ) { nextSeg=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastSeg") ) { lastSeg=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"segments") ) { segments=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"validBits") ) { validBits=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesInSeg") ) { bytesInSeg=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentLoc") ) { currentLoc=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"firstDecode") ) { firstDecode=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastSegWhich") ) { lastSegWhich=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inputPosition") ) { inputPosition=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentSample") ) { currentSample=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"channelBuffers") ) { channelBuffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousWindow") ) { previousWindow=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousLength") ) { previousLength=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentLocValid") ) { currentLocValid=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"channelBufferEnd") ) { channelBufferEnd=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"knownLocForPacket") ) { knownLocForPacket=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"channelBufferStart") ) { channelBufferStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endSegWithKnownLoc") ) { endSegWithKnownLoc=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"firstAudioPageOffset") ) { firstAudioPageOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"discardSamplesDeferred") ) { discardSamplesDeferred=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VorbisDecodeState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("page","\x4f","\xda","\x51","\x4a"));
	outFields->push(HX_HCSTRING("eof","\xbc","\x04","\x4d","\x00"));
	outFields->push(HX_HCSTRING("pFirst","\xa0","\x51","\xc3","\x5b"));
	outFields->push(HX_HCSTRING("pLast","\xe6","\x2e","\x67","\xaf"));
	outFields->push(HX_HCSTRING("validBits","\x22","\xca","\xec","\x2d"));
	outFields->push(HX_HCSTRING("inputPosition","\xd3","\x3a","\x9c","\x59"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("discardSamplesDeferred","\xca","\x30","\xf6","\x72"));
	outFields->push(HX_HCSTRING("segments","\x60","\xed","\x26","\x4e"));
	outFields->push(HX_HCSTRING("bytesInSeg","\x45","\xb8","\xaf","\xef"));
	outFields->push(HX_HCSTRING("channelBuffers","\xf0","\xb8","\xbc","\x61"));
	outFields->push(HX_HCSTRING("channelBufferStart","\x3f","\x1f","\xc8","\xba"));
	outFields->push(HX_HCSTRING("channelBufferEnd","\x78","\x4d","\xee","\xd4"));
	outFields->push(HX_HCSTRING("currentSample","\x43","\xe1","\xa6","\x00"));
	outFields->push(HX_HCSTRING("previousWindow","\x87","\x47","\x23","\x41"));
	outFields->push(HX_HCSTRING("previousLength","\x7d","\x48","\x9e","\x8d"));
	outFields->push(HX_HCSTRING("finalY","\x23","\x28","\x79","\x86"));
	outFields->push(HX_HCSTRING("firstDecode","\x7e","\x8d","\x8f","\x49"));
	outFields->push(HX_HCSTRING("nextSeg","\x62","\x28","\x46","\xa5"));
	outFields->push(HX_HCSTRING("acc","\x41","\xf1","\x49","\x00"));
	outFields->push(HX_HCSTRING("lastSeg","\xdf","\xe2","\xac","\xd7"));
	outFields->push(HX_HCSTRING("lastSegWhich","\x7e","\x00","\xe0","\x06"));
	outFields->push(HX_HCSTRING("endSegWithKnownLoc","\x7d","\x01","\xc0","\x57"));
	outFields->push(HX_HCSTRING("knownLocForPacket","\xf4","\xab","\xab","\x3c"));
	outFields->push(HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"));
	outFields->push(HX_HCSTRING("currentLoc","\xc7","\x19","\x2d","\xc7"));
	outFields->push(HX_HCSTRING("currentLocValid","\xb5","\xf9","\xa2","\x57"));
	outFields->push(HX_HCSTRING("firstAudioPageOffset","\x68","\x75","\x67","\x0d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VorbisDecodeState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::Page*/ ,(int)offsetof(VorbisDecodeState_obj,page),HX_HCSTRING("page","\x4f","\xda","\x51","\x4a")},
	{hx::fsBool,(int)offsetof(VorbisDecodeState_obj,eof),HX_HCSTRING("eof","\xbc","\x04","\x4d","\x00")},
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::ProbedPage*/ ,(int)offsetof(VorbisDecodeState_obj,pFirst),HX_HCSTRING("pFirst","\xa0","\x51","\xc3","\x5b")},
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::ProbedPage*/ ,(int)offsetof(VorbisDecodeState_obj,pLast),HX_HCSTRING("pLast","\xe6","\x2e","\x67","\xaf")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,validBits),HX_HCSTRING("validBits","\x22","\xca","\xec","\x2d")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,inputPosition),HX_HCSTRING("inputPosition","\xd3","\x3a","\x9c","\x59")},
	{hx::fsObject /*::haxe::io::Input*/ ,(int)offsetof(VorbisDecodeState_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,discardSamplesDeferred),HX_HCSTRING("discardSamplesDeferred","\xca","\x30","\xf6","\x72")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(VorbisDecodeState_obj,segments),HX_HCSTRING("segments","\x60","\xed","\x26","\x4e")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,bytesInSeg),HX_HCSTRING("bytesInSeg","\x45","\xb8","\xaf","\xef")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(VorbisDecodeState_obj,channelBuffers),HX_HCSTRING("channelBuffers","\xf0","\xb8","\xbc","\x61")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,channelBufferStart),HX_HCSTRING("channelBufferStart","\x3f","\x1f","\xc8","\xba")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,channelBufferEnd),HX_HCSTRING("channelBufferEnd","\x78","\x4d","\xee","\xd4")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,currentSample),HX_HCSTRING("currentSample","\x43","\xe1","\xa6","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(VorbisDecodeState_obj,previousWindow),HX_HCSTRING("previousWindow","\x87","\x47","\x23","\x41")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,previousLength),HX_HCSTRING("previousLength","\x7d","\x48","\x9e","\x8d")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(VorbisDecodeState_obj,finalY),HX_HCSTRING("finalY","\x23","\x28","\x79","\x86")},
	{hx::fsBool,(int)offsetof(VorbisDecodeState_obj,firstDecode),HX_HCSTRING("firstDecode","\x7e","\x8d","\x8f","\x49")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,nextSeg),HX_HCSTRING("nextSeg","\x62","\x28","\x46","\xa5")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,acc),HX_HCSTRING("acc","\x41","\xf1","\x49","\x00")},
	{hx::fsBool,(int)offsetof(VorbisDecodeState_obj,lastSeg),HX_HCSTRING("lastSeg","\xdf","\xe2","\xac","\xd7")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,lastSegWhich),HX_HCSTRING("lastSegWhich","\x7e","\x00","\xe0","\x06")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,endSegWithKnownLoc),HX_HCSTRING("endSegWithKnownLoc","\x7d","\x01","\xc0","\x57")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,knownLocForPacket),HX_HCSTRING("knownLocForPacket","\xf4","\xab","\xab","\x3c")},
	{hx::fsObject /*::kha::audio2::ogg::vorbis::data::ReaderError*/ ,(int)offsetof(VorbisDecodeState_obj,error),HX_HCSTRING("error","\xc8","\xcb","\x29","\x73")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,currentLoc),HX_HCSTRING("currentLoc","\xc7","\x19","\x2d","\xc7")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,currentLocValid),HX_HCSTRING("currentLocValid","\xb5","\xf9","\xa2","\x57")},
	{hx::fsInt,(int)offsetof(VorbisDecodeState_obj,firstAudioPageOffset),HX_HCSTRING("firstAudioPageOffset","\x68","\x75","\x67","\x0d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo VorbisDecodeState_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &VorbisDecodeState_obj::INVALID_BITS,HX_HCSTRING("INVALID_BITS","\xae","\x04","\x71","\x11")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String VorbisDecodeState_obj_sMemberFields[] = {
	HX_HCSTRING("page","\x4f","\xda","\x51","\x4a"),
	HX_HCSTRING("eof","\xbc","\x04","\x4d","\x00"),
	HX_HCSTRING("pFirst","\xa0","\x51","\xc3","\x5b"),
	HX_HCSTRING("pLast","\xe6","\x2e","\x67","\xaf"),
	HX_HCSTRING("validBits","\x22","\xca","\xec","\x2d"),
	HX_HCSTRING("inputPosition","\xd3","\x3a","\x9c","\x59"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("discardSamplesDeferred","\xca","\x30","\xf6","\x72"),
	HX_HCSTRING("segments","\x60","\xed","\x26","\x4e"),
	HX_HCSTRING("bytesInSeg","\x45","\xb8","\xaf","\xef"),
	HX_HCSTRING("channelBuffers","\xf0","\xb8","\xbc","\x61"),
	HX_HCSTRING("channelBufferStart","\x3f","\x1f","\xc8","\xba"),
	HX_HCSTRING("channelBufferEnd","\x78","\x4d","\xee","\xd4"),
	HX_HCSTRING("currentSample","\x43","\xe1","\xa6","\x00"),
	HX_HCSTRING("previousWindow","\x87","\x47","\x23","\x41"),
	HX_HCSTRING("previousLength","\x7d","\x48","\x9e","\x8d"),
	HX_HCSTRING("finalY","\x23","\x28","\x79","\x86"),
	HX_HCSTRING("firstDecode","\x7e","\x8d","\x8f","\x49"),
	HX_HCSTRING("nextSeg","\x62","\x28","\x46","\xa5"),
	HX_HCSTRING("acc","\x41","\xf1","\x49","\x00"),
	HX_HCSTRING("lastSeg","\xdf","\xe2","\xac","\xd7"),
	HX_HCSTRING("lastSegWhich","\x7e","\x00","\xe0","\x06"),
	HX_HCSTRING("endSegWithKnownLoc","\x7d","\x01","\xc0","\x57"),
	HX_HCSTRING("knownLocForPacket","\xf4","\xab","\xab","\x3c"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("currentLoc","\xc7","\x19","\x2d","\xc7"),
	HX_HCSTRING("currentLocValid","\xb5","\xf9","\xa2","\x57"),
	HX_HCSTRING("firstAudioPageOffset","\x68","\x75","\x67","\x0d"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("startPacket","\x8a","\xb5","\x7e","\x5b"),
	HX_HCSTRING("maybeStartPacket","\xc2","\x0a","\xad","\x2a"),
	HX_HCSTRING("readBits","\x7c","\xd5","\x0e","\x69"),
	HX_HCSTRING("readPacketRaw","\x0a","\x15","\x8a","\xda"),
	HX_HCSTRING("readPacket","\x7e","\x3b","\x14","\xdd"),
	HX_HCSTRING("flushPacket","\x6c","\x99","\xec","\x8e"),
	HX_HCSTRING("vorbisValidate","\x09","\x9b","\x51","\x16"),
	HX_HCSTRING("firstPageValidate","\x55","\x1a","\xec","\x1c"),
	HX_HCSTRING("startFirstDecode","\x3c","\x28","\x8b","\xc8"),
	HX_HCSTRING("capturePattern","\x6a","\x1a","\xb8","\x20"),
	HX_HCSTRING("skip","\x7f","\x16","\x55","\x4c"),
	HX_HCSTRING("prepHuffman","\xc0","\x3f","\x31","\xba"),
	HX_HCSTRING("decode","\x2e","\x5d","\xed","\x64"),
	HX_HCSTRING("decodeRaw","\x5a","\x21","\xb1","\x44"),
	HX_HCSTRING("isLastByte","\x88","\x4a","\x1b","\x4f"),
	HX_HCSTRING("finishDecodePacket","\x49","\x7c","\xb3","\x7f"),
	HX_HCSTRING("readInt32","\x18","\xe0","\x07","\x8f"),
	HX_HCSTRING("readByte","\x7e","\xf9","\x1a","\x69"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("readBytes","\x35","\x55","\x7f","\x8e"),
	HX_HCSTRING("readString","\xc7","\x0c","\xac","\x0a"),
	HX_HCSTRING("getSampleNumber","\x49","\x2c","\xd1","\x08"),
	HX_HCSTRING("forcePageResync","\x08","\x51","\x06","\xc7"),
	HX_HCSTRING("setInputOffset","\xbb","\xae","\x31","\xfd"),
	HX_HCSTRING("findPage","\x28","\xe7","\xe5","\x9c"),
	HX_HCSTRING("analyzePage","\xbb","\xd7","\xd9","\x4e"),
	HX_HCSTRING("decodeScalarRaw","\x0e","\xd7","\xcb","\x48"),
	::String(null()) };

static void VorbisDecodeState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VorbisDecodeState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(VorbisDecodeState_obj::INVALID_BITS,"INVALID_BITS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VorbisDecodeState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VorbisDecodeState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(VorbisDecodeState_obj::INVALID_BITS,"INVALID_BITS");
};

#endif

hx::Class VorbisDecodeState_obj::__mClass;

static ::String VorbisDecodeState_obj_sStaticFields[] = {
	HX_HCSTRING("INVALID_BITS","\xae","\x04","\x71","\x11"),
	::String(null())
};

void VorbisDecodeState_obj::__register()
{
	hx::Object *dummy = new VorbisDecodeState_obj;
	VorbisDecodeState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.VorbisDecodeState","\x3c","\x6b","\x03","\x19");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VorbisDecodeState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(VorbisDecodeState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VorbisDecodeState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VorbisDecodeState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VorbisDecodeState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VorbisDecodeState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VorbisDecodeState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VorbisDecodeState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_687b22a8d42715b8_29_boot)
HXDLIN(  29)		INVALID_BITS = (int)-1;
            	}
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
