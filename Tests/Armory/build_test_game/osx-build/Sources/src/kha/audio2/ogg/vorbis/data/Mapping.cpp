// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisDecodeState
#include <kha/audio2/ogg/vorbis/VorbisDecodeState.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_VorbisTools
#include <kha/audio2/ogg/vorbis/VorbisTools.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor
#include <kha/audio2/ogg/vorbis/data/Floor.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Floor1
#include <kha/audio2/ogg/vorbis/data/Floor1.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Mapping
#include <kha/audio2/ogg/vorbis/data/Mapping.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_MappingChannel
#include <kha/audio2/ogg/vorbis/data/MappingChannel.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderError
#include <kha/audio2/ogg/vorbis/data/ReaderError.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_ReaderErrorType
#include <kha/audio2/ogg/vorbis/data/ReaderErrorType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_74f37dde401c2255_14_new,"kha.audio2.ogg.vorbis.data.Mapping","new",0xf4d4ea30,"kha.audio2.ogg.vorbis.data.Mapping.new","kha/audio2/ogg/vorbis/data/Mapping.hx",14,0x30bf6281)
HX_LOCAL_STACK_FRAME(_hx_pos_74f37dde401c2255_89_doFloor,"kha.audio2.ogg.vorbis.data.Mapping","doFloor",0xc69df411,"kha.audio2.ogg.vorbis.data.Mapping.doFloor","kha/audio2/ogg/vorbis/data/Mapping.hx",89,0x30bf6281)
HX_LOCAL_STACK_FRAME(_hx_pos_74f37dde401c2255_18_read,"kha.audio2.ogg.vorbis.data.Mapping","read",0x481cc786,"kha.audio2.ogg.vorbis.data.Mapping.read","kha/audio2/ogg/vorbis/data/Mapping.hx",18,0x30bf6281)
static const int _hx_array_data_afb0523e_22[] = {
	(int)0,(int)1,(int)2,(int)2,(int)3,(int)3,(int)3,(int)3,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,
};
static const int _hx_array_data_afb0523e_23[] = {
	(int)0,(int)1,(int)2,(int)2,(int)3,(int)3,(int)3,(int)3,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,(int)4,
};
namespace kha{
namespace audio2{
namespace ogg{
namespace vorbis{
namespace data{

void Mapping_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_74f37dde401c2255_14_new)
            	}

Dynamic Mapping_obj::__CreateEmpty() { return new Mapping_obj; }

void *Mapping_obj::_hx_vtable = 0;

Dynamic Mapping_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mapping_obj > _hx_result = new Mapping_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Mapping_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1b63d376;
}

void Mapping_obj::doFloor(::Array< ::Dynamic> floors,int i,int n,::Array< Float > target,::Array< int > finalY,::Array< bool > step2Flag){
            	HX_GC_STACKFRAME(&_hx_pos_74f37dde401c2255_89_doFloor)
HXLINE(  90)		int n2 = ((int)n >> (int)(int)1);
HXLINE(  91)		int s = ( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(this->chan,i)) )->mux;
HXDLIN(  91)		 ::Dynamic floor;
HXLINE(  92)		 ::kha::audio2::ogg::vorbis::data::Floor floor1 = ( ( ::kha::audio2::ogg::vorbis::data::Floor)(_hx_array_unsafe_get(floors,( (int)(_hx_array_unsafe_get(this->submapFloor,s)) ))) );
HXLINE(  93)		if ((floor1->type == (int)0)) {
HXLINE(  94)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_STREAM_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),94,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("doFloor",41,b2,c3,35))));
            		}
            		else {
HXLINE(  96)			 ::kha::audio2::ogg::vorbis::data::Floor1 g = floor1->floor1;
HXLINE(  97)			int lx = (int)0;
HXDLIN(  97)			int ly = (finalY->__get((int)0) * g->floor1Multiplier);
HXLINE(  98)			{
HXLINE(  98)				int _g1 = (int)1;
HXDLIN(  98)				int _g = g->values;
HXDLIN(  98)				while((_g1 < _g)){
HXLINE(  98)					_g1 = (_g1 + (int)1);
HXDLIN(  98)					int q = (_g1 - (int)1);
HXLINE(  99)					int j = ( (int)(_hx_array_unsafe_get(g->sortedOrder,q)) );
HXLINE( 100)					if ((finalY->__get(j) >= (int)0)) {
HXLINE( 102)						int hy = (finalY->__get(j) * g->floor1Multiplier);
HXLINE( 103)						int hx = ( (int)(_hx_array_unsafe_get(g->xlist,j)) );
HXLINE( 104)						::kha::audio2::ogg::vorbis::VorbisTools_obj::drawLine(target,lx,ly,hx,hy,n2);
HXLINE( 105)						lx = hx;
HXLINE( 106)						ly = hy;
            					}
            				}
            			}
HXLINE( 109)			if ((lx < n2)) {
HXLINE( 111)				int _g11 = lx;
HXDLIN( 111)				int _g2 = n2;
HXDLIN( 111)				while((_g11 < _g2)){
HXLINE( 111)					_g11 = (_g11 + (int)1);
HXDLIN( 111)					int j1 = (_g11 - (int)1);
HXLINE( 112)					{
HXLINE( 112)						int _g21 = j1;
HXDLIN( 112)						::Array< Float > _g3 = target;
HXDLIN( 112)						{
HXLINE( 112)							Float val = ( (Float)(_hx_array_unsafe_get(_g3,_g21)) );
HXDLIN( 112)							_g3->__unsafe_set(_g21,(val * ::kha::audio2::ogg::vorbis::VorbisTools_obj::INVERSE_DB_TABLE->__get(ly)));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Mapping_obj,doFloor,(void))

 ::kha::audio2::ogg::vorbis::data::Mapping Mapping_obj::read( ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState,int channels){
            	HX_GC_STACKFRAME(&_hx_pos_74f37dde401c2255_18_read)
HXLINE(  19)		 ::kha::audio2::ogg::vorbis::data::Mapping m =  ::kha::audio2::ogg::vorbis::data::Mapping_obj::__alloc( HX_CTX );
HXLINE(  20)		int mappingType;
HXDLIN(  20)		if ((decodeState->validBits < (int)0)) {
HXLINE(  20)			mappingType = (int)0;
            		}
            		else {
HXLINE(  20)			if ((decodeState->validBits < (int)16)) {
HXLINE(  20)				if ((decodeState->validBits == (int)0)) {
HXLINE(  20)					decodeState->acc = (int)0;
            				}
HXDLIN(  20)				while(true){
HXLINE(  20)					bool mappingType1;
HXDLIN(  20)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  20)						if (!(decodeState->lastSeg)) {
HXLINE(  20)							mappingType1 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  20)							mappingType1 = true;
            						}
            					}
            					else {
HXLINE(  20)						mappingType1 = false;
            					}
HXDLIN(  20)					if (mappingType1) {
HXLINE(  20)						decodeState->validBits = (int)-1;
HXDLIN(  20)						goto _hx_goto_4;
            					}
            					else {
HXLINE(  20)						decodeState->bytesInSeg--;
HXDLIN(  20)						int a = decodeState->acc;
HXDLIN(  20)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState1 = decodeState;
HXDLIN(  20)						decodeState1->inputPosition = (decodeState1->inputPosition + (int)1);
HXDLIN(  20)						int b = decodeState->input->readByte();
HXDLIN(  20)						decodeState->acc = (a + ((int)b << (int)decodeState->validBits));
HXDLIN(  20)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState2 = decodeState;
HXDLIN(  20)						decodeState2->validBits = (decodeState2->validBits + (int)8);
            					}
HXDLIN(  20)					if (!((decodeState->validBits < (int)16))) {
HXLINE(  20)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
HXDLIN(  20)				if ((decodeState->validBits < (int)0)) {
HXLINE(  20)					mappingType = (int)0;
            				}
            				else {
HXLINE(  20)					int z = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  20)					decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  20)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState3 = decodeState;
HXDLIN(  20)					decodeState3->validBits = (decodeState3->validBits - (int)16);
HXDLIN(  20)					mappingType = z;
            				}
            			}
            			else {
HXLINE(  20)				int z1 = ((int)decodeState->acc & (int)(int)65535);
HXDLIN(  20)				decodeState->acc = hx::UShr(decodeState->acc,(int)16);
HXDLIN(  20)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState4 = decodeState;
HXDLIN(  20)				decodeState4->validBits = (decodeState4->validBits - (int)16);
HXDLIN(  20)				mappingType = z1;
            			}
            		}
HXLINE(  21)		if ((mappingType != (int)0)) {
HXLINE(  22)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),(HX_("mapping type ",94,35,6c,d8) + mappingType),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),22,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  25)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(channels);
HXDLIN(  25)		m->chan = this1;
HXLINE(  26)		{
HXLINE(  26)			int _g1 = (int)0;
HXDLIN(  26)			int _g = channels;
HXDLIN(  26)			while((_g1 < _g)){
HXLINE(  26)				_g1 = (_g1 + (int)1);
HXDLIN(  26)				int j = (_g1 - (int)1);
HXLINE(  27)				{
HXLINE(  27)					::Array< ::Dynamic> this2 = m->chan;
HXDLIN(  27)					 ::kha::audio2::ogg::vorbis::data::MappingChannel val =  ::kha::audio2::ogg::vorbis::data::MappingChannel_obj::__alloc( HX_CTX );
HXDLIN(  27)					this2->__unsafe_set(j,val);
            				}
            			}
            		}
HXLINE(  30)		int _hx_tmp;
HXDLIN(  30)		if ((decodeState->validBits < (int)0)) {
HXLINE(  30)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  30)			if ((decodeState->validBits < (int)1)) {
HXLINE(  30)				if ((decodeState->validBits == (int)0)) {
HXLINE(  30)					decodeState->acc = (int)0;
            				}
HXDLIN(  30)				while(true){
HXLINE(  30)					bool _hx_tmp1;
HXDLIN(  30)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  30)						if (!(decodeState->lastSeg)) {
HXLINE(  30)							_hx_tmp1 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  30)							_hx_tmp1 = true;
            						}
            					}
            					else {
HXLINE(  30)						_hx_tmp1 = false;
            					}
HXDLIN(  30)					if (_hx_tmp1) {
HXLINE(  30)						decodeState->validBits = (int)-1;
HXDLIN(  30)						goto _hx_goto_6;
            					}
            					else {
HXLINE(  30)						decodeState->bytesInSeg--;
HXDLIN(  30)						int a1 = decodeState->acc;
HXDLIN(  30)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState5 = decodeState;
HXDLIN(  30)						decodeState5->inputPosition = (decodeState5->inputPosition + (int)1);
HXDLIN(  30)						int b1 = decodeState->input->readByte();
HXDLIN(  30)						decodeState->acc = (a1 + ((int)b1 << (int)decodeState->validBits));
HXDLIN(  30)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState6 = decodeState;
HXDLIN(  30)						decodeState6->validBits = (decodeState6->validBits + (int)8);
            					}
HXDLIN(  30)					if (!((decodeState->validBits < (int)1))) {
HXLINE(  30)						goto _hx_goto_6;
            					}
            				}
            				_hx_goto_6:;
HXDLIN(  30)				if ((decodeState->validBits < (int)0)) {
HXLINE(  30)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE(  30)					int z2 = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  30)					decodeState->acc = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  30)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState7 = decodeState;
HXDLIN(  30)					decodeState7->validBits = (decodeState7->validBits - (int)1);
HXDLIN(  30)					_hx_tmp = z2;
            				}
            			}
            			else {
HXLINE(  30)				int z3 = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  30)				decodeState->acc = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  30)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState8 = decodeState;
HXDLIN(  30)				decodeState8->validBits = (decodeState8->validBits - (int)1);
HXDLIN(  30)				_hx_tmp = z3;
            			}
            		}
HXDLIN(  30)		if ((_hx_tmp != (int)0)) {
HXLINE(  31)			int _hx_tmp2;
HXDLIN(  31)			if ((decodeState->validBits < (int)0)) {
HXLINE(  31)				_hx_tmp2 = (int)0;
            			}
            			else {
HXLINE(  31)				if ((decodeState->validBits < (int)4)) {
HXLINE(  31)					if ((decodeState->validBits == (int)0)) {
HXLINE(  31)						decodeState->acc = (int)0;
            					}
HXDLIN(  31)					while(true){
HXLINE(  31)						bool _hx_tmp3;
HXDLIN(  31)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  31)							if (!(decodeState->lastSeg)) {
HXLINE(  31)								_hx_tmp3 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  31)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(  31)							_hx_tmp3 = false;
            						}
HXDLIN(  31)						if (_hx_tmp3) {
HXLINE(  31)							decodeState->validBits = (int)-1;
HXDLIN(  31)							goto _hx_goto_7;
            						}
            						else {
HXLINE(  31)							decodeState->bytesInSeg--;
HXDLIN(  31)							int a2 = decodeState->acc;
HXDLIN(  31)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState9 = decodeState;
HXDLIN(  31)							decodeState9->inputPosition = (decodeState9->inputPosition + (int)1);
HXDLIN(  31)							int b2 = decodeState->input->readByte();
HXDLIN(  31)							decodeState->acc = (a2 + ((int)b2 << (int)decodeState->validBits));
HXDLIN(  31)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState10 = decodeState;
HXDLIN(  31)							decodeState10->validBits = (decodeState10->validBits + (int)8);
            						}
HXDLIN(  31)						if (!((decodeState->validBits < (int)4))) {
HXLINE(  31)							goto _hx_goto_7;
            						}
            					}
            					_hx_goto_7:;
HXDLIN(  31)					if ((decodeState->validBits < (int)0)) {
HXLINE(  31)						_hx_tmp2 = (int)0;
            					}
            					else {
HXLINE(  31)						int z4 = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  31)						decodeState->acc = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  31)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState11 = decodeState;
HXDLIN(  31)						decodeState11->validBits = (decodeState11->validBits - (int)4);
HXDLIN(  31)						_hx_tmp2 = z4;
            					}
            				}
            				else {
HXLINE(  31)					int z5 = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  31)					decodeState->acc = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  31)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState12 = decodeState;
HXDLIN(  31)					decodeState12->validBits = (decodeState12->validBits - (int)4);
HXDLIN(  31)					_hx_tmp2 = z5;
            				}
            			}
HXDLIN(  31)			m->submaps = (_hx_tmp2 + (int)1);
            		}
            		else {
HXLINE(  33)			m->submaps = (int)1;
            		}
HXLINE(  40)		int _hx_tmp4;
HXDLIN(  40)		if ((decodeState->validBits < (int)0)) {
HXLINE(  40)			_hx_tmp4 = (int)0;
            		}
            		else {
HXLINE(  40)			if ((decodeState->validBits < (int)1)) {
HXLINE(  40)				if ((decodeState->validBits == (int)0)) {
HXLINE(  40)					decodeState->acc = (int)0;
            				}
HXDLIN(  40)				while(true){
HXLINE(  40)					bool _hx_tmp5;
HXDLIN(  40)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  40)						if (!(decodeState->lastSeg)) {
HXLINE(  40)							_hx_tmp5 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  40)							_hx_tmp5 = true;
            						}
            					}
            					else {
HXLINE(  40)						_hx_tmp5 = false;
            					}
HXDLIN(  40)					if (_hx_tmp5) {
HXLINE(  40)						decodeState->validBits = (int)-1;
HXDLIN(  40)						goto _hx_goto_8;
            					}
            					else {
HXLINE(  40)						decodeState->bytesInSeg--;
HXDLIN(  40)						int a3 = decodeState->acc;
HXDLIN(  40)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState13 = decodeState;
HXDLIN(  40)						decodeState13->inputPosition = (decodeState13->inputPosition + (int)1);
HXDLIN(  40)						int b3 = decodeState->input->readByte();
HXDLIN(  40)						decodeState->acc = (a3 + ((int)b3 << (int)decodeState->validBits));
HXDLIN(  40)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState14 = decodeState;
HXDLIN(  40)						decodeState14->validBits = (decodeState14->validBits + (int)8);
            					}
HXDLIN(  40)					if (!((decodeState->validBits < (int)1))) {
HXLINE(  40)						goto _hx_goto_8;
            					}
            				}
            				_hx_goto_8:;
HXDLIN(  40)				if ((decodeState->validBits < (int)0)) {
HXLINE(  40)					_hx_tmp4 = (int)0;
            				}
            				else {
HXLINE(  40)					int z6 = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  40)					decodeState->acc = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  40)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState15 = decodeState;
HXDLIN(  40)					decodeState15->validBits = (decodeState15->validBits - (int)1);
HXDLIN(  40)					_hx_tmp4 = z6;
            				}
            			}
            			else {
HXLINE(  40)				int z7 = ((int)decodeState->acc & (int)(int)1);
HXDLIN(  40)				decodeState->acc = hx::UShr(decodeState->acc,(int)1);
HXDLIN(  40)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState16 = decodeState;
HXDLIN(  40)				decodeState16->validBits = (decodeState16->validBits - (int)1);
HXDLIN(  40)				_hx_tmp4 = z7;
            			}
            		}
HXDLIN(  40)		if ((_hx_tmp4 != (int)0)) {
HXLINE(  41)			int _hx_tmp6;
HXDLIN(  41)			if ((decodeState->validBits < (int)0)) {
HXLINE(  41)				_hx_tmp6 = (int)0;
            			}
            			else {
HXLINE(  41)				if ((decodeState->validBits < (int)8)) {
HXLINE(  41)					if ((decodeState->validBits == (int)0)) {
HXLINE(  41)						decodeState->acc = (int)0;
            					}
HXDLIN(  41)					while(true){
HXLINE(  41)						bool _hx_tmp7;
HXDLIN(  41)						if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  41)							if (!(decodeState->lastSeg)) {
HXLINE(  41)								_hx_tmp7 = (decodeState->next() == (int)0);
            							}
            							else {
HXLINE(  41)								_hx_tmp7 = true;
            							}
            						}
            						else {
HXLINE(  41)							_hx_tmp7 = false;
            						}
HXDLIN(  41)						if (_hx_tmp7) {
HXLINE(  41)							decodeState->validBits = (int)-1;
HXDLIN(  41)							goto _hx_goto_9;
            						}
            						else {
HXLINE(  41)							decodeState->bytesInSeg--;
HXDLIN(  41)							int a4 = decodeState->acc;
HXDLIN(  41)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState17 = decodeState;
HXDLIN(  41)							decodeState17->inputPosition = (decodeState17->inputPosition + (int)1);
HXDLIN(  41)							int b4 = decodeState->input->readByte();
HXDLIN(  41)							decodeState->acc = (a4 + ((int)b4 << (int)decodeState->validBits));
HXDLIN(  41)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState18 = decodeState;
HXDLIN(  41)							decodeState18->validBits = (decodeState18->validBits + (int)8);
            						}
HXDLIN(  41)						if (!((decodeState->validBits < (int)8))) {
HXLINE(  41)							goto _hx_goto_9;
            						}
            					}
            					_hx_goto_9:;
HXDLIN(  41)					if ((decodeState->validBits < (int)0)) {
HXLINE(  41)						_hx_tmp6 = (int)0;
            					}
            					else {
HXLINE(  41)						int z8 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  41)						decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  41)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState19 = decodeState;
HXDLIN(  41)						decodeState19->validBits = (decodeState19->validBits - (int)8);
HXDLIN(  41)						_hx_tmp6 = z8;
            					}
            				}
            				else {
HXLINE(  41)					int z9 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  41)					decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  41)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState20 = decodeState;
HXDLIN(  41)					decodeState20->validBits = (decodeState20->validBits - (int)8);
HXDLIN(  41)					_hx_tmp6 = z9;
            				}
            			}
HXDLIN(  41)			m->couplingSteps = (_hx_tmp6 + (int)1);
HXLINE(  42)			{
HXLINE(  42)				int _g11 = (int)0;
HXDLIN(  42)				int _g2 = m->couplingSteps;
HXDLIN(  42)				while((_g11 < _g2)){
HXLINE(  42)					_g11 = (_g11 + (int)1);
HXDLIN(  42)					int k = (_g11 - (int)1);
HXLINE(  43)					 ::kha::audio2::ogg::vorbis::data::MappingChannel _hx_tmp8 = ( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) );
HXDLIN(  43)					int n = (channels - (int)1);
HXDLIN(  43)					::Array< int > log2_4 = ::Array_obj< int >::fromData( _hx_array_data_afb0523e_22,16);
HXDLIN(  43)					int n1;
HXDLIN(  43)					if ((n < (int)16384)) {
HXLINE(  43)						if ((n < (int)16)) {
HXLINE(  43)							n1 = log2_4->__get(n);
            						}
            						else {
HXLINE(  43)							if ((n < (int)512)) {
HXLINE(  43)								n1 = ((int)5 + log2_4->__get(((int)n >> (int)(int)5)));
            							}
            							else {
HXLINE(  43)								n1 = ((int)10 + log2_4->__get(((int)n >> (int)(int)10)));
            							}
            						}
            					}
            					else {
HXLINE(  43)						if ((n < (int)16777216)) {
HXLINE(  43)							if ((n < (int)524288)) {
HXLINE(  43)								n1 = ((int)15 + log2_4->__get(((int)n >> (int)(int)15)));
            							}
            							else {
HXLINE(  43)								n1 = ((int)20 + log2_4->__get(((int)n >> (int)(int)20)));
            							}
            						}
            						else {
HXLINE(  43)							if ((n < (int)536870912)) {
HXLINE(  43)								n1 = ((int)25 + log2_4->__get(((int)n >> (int)(int)25)));
            							}
            							else {
HXLINE(  43)								if ((n < (int)-2147483648)) {
HXLINE(  43)									n1 = ((int)30 + log2_4->__get(((int)n >> (int)(int)30)));
            								}
            								else {
HXLINE(  43)									n1 = (int)0;
            								}
            							}
            						}
            					}
HXDLIN(  43)					int _hx_tmp9;
HXDLIN(  43)					if ((decodeState->validBits < (int)0)) {
HXLINE(  43)						_hx_tmp9 = (int)0;
            					}
            					else {
HXLINE(  43)						if ((decodeState->validBits < n1)) {
HXLINE(  43)							if ((n1 > (int)24)) {
HXLINE(  43)								int _hx_tmp10 = decodeState->readBits((int)24);
HXDLIN(  43)								_hx_tmp9 = (_hx_tmp10 + ((int)decodeState->readBits((n1 - (int)24)) << (int)(int)24));
            							}
            							else {
HXLINE(  43)								if ((decodeState->validBits == (int)0)) {
HXLINE(  43)									decodeState->acc = (int)0;
            								}
HXDLIN(  43)								while(true){
HXLINE(  43)									bool _hx_tmp11;
HXDLIN(  43)									if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  43)										if (!(decodeState->lastSeg)) {
HXLINE(  43)											_hx_tmp11 = (decodeState->next() == (int)0);
            										}
            										else {
HXLINE(  43)											_hx_tmp11 = true;
            										}
            									}
            									else {
HXLINE(  43)										_hx_tmp11 = false;
            									}
HXDLIN(  43)									if (_hx_tmp11) {
HXLINE(  43)										decodeState->validBits = (int)-1;
HXDLIN(  43)										goto _hx_goto_11;
            									}
            									else {
HXLINE(  43)										decodeState->bytesInSeg--;
HXDLIN(  43)										int a5 = decodeState->acc;
HXDLIN(  43)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState21 = decodeState;
HXDLIN(  43)										decodeState21->inputPosition = (decodeState21->inputPosition + (int)1);
HXDLIN(  43)										int b5 = decodeState->input->readByte();
HXDLIN(  43)										decodeState->acc = (a5 + ((int)b5 << (int)decodeState->validBits));
HXDLIN(  43)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState22 = decodeState;
HXDLIN(  43)										decodeState22->validBits = (decodeState22->validBits + (int)8);
            									}
HXDLIN(  43)									if (!((decodeState->validBits < n1))) {
HXLINE(  43)										goto _hx_goto_11;
            									}
            								}
            								_hx_goto_11:;
HXDLIN(  43)								if ((decodeState->validBits < (int)0)) {
HXLINE(  43)									_hx_tmp9 = (int)0;
            								}
            								else {
HXLINE(  43)									int z10 = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n1) - (int)1));
HXDLIN(  43)									decodeState->acc = hx::UShr(decodeState->acc,n1);
HXDLIN(  43)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState23 = decodeState;
HXDLIN(  43)									decodeState23->validBits = (decodeState23->validBits - n1);
HXDLIN(  43)									_hx_tmp9 = z10;
            								}
            							}
            						}
            						else {
HXLINE(  43)							int z11 = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n1) - (int)1));
HXDLIN(  43)							decodeState->acc = hx::UShr(decodeState->acc,n1);
HXDLIN(  43)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState24 = decodeState;
HXDLIN(  43)							decodeState24->validBits = (decodeState24->validBits - n1);
HXDLIN(  43)							_hx_tmp9 = z11;
            						}
            					}
HXDLIN(  43)					_hx_tmp8->magnitude = _hx_tmp9;
HXLINE(  44)					 ::kha::audio2::ogg::vorbis::data::MappingChannel _hx_tmp12 = ( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) );
HXDLIN(  44)					int n2 = (channels - (int)1);
HXDLIN(  44)					::Array< int > log2_41 = ::Array_obj< int >::fromData( _hx_array_data_afb0523e_23,16);
HXDLIN(  44)					int n3;
HXDLIN(  44)					if ((n2 < (int)16384)) {
HXLINE(  44)						if ((n2 < (int)16)) {
HXLINE(  44)							n3 = log2_41->__get(n2);
            						}
            						else {
HXLINE(  44)							if ((n2 < (int)512)) {
HXLINE(  44)								n3 = ((int)5 + log2_41->__get(((int)n2 >> (int)(int)5)));
            							}
            							else {
HXLINE(  44)								n3 = ((int)10 + log2_41->__get(((int)n2 >> (int)(int)10)));
            							}
            						}
            					}
            					else {
HXLINE(  44)						if ((n2 < (int)16777216)) {
HXLINE(  44)							if ((n2 < (int)524288)) {
HXLINE(  44)								n3 = ((int)15 + log2_41->__get(((int)n2 >> (int)(int)15)));
            							}
            							else {
HXLINE(  44)								n3 = ((int)20 + log2_41->__get(((int)n2 >> (int)(int)20)));
            							}
            						}
            						else {
HXLINE(  44)							if ((n2 < (int)536870912)) {
HXLINE(  44)								n3 = ((int)25 + log2_41->__get(((int)n2 >> (int)(int)25)));
            							}
            							else {
HXLINE(  44)								if ((n2 < (int)-2147483648)) {
HXLINE(  44)									n3 = ((int)30 + log2_41->__get(((int)n2 >> (int)(int)30)));
            								}
            								else {
HXLINE(  44)									n3 = (int)0;
            								}
            							}
            						}
            					}
HXDLIN(  44)					int _hx_tmp13;
HXDLIN(  44)					if ((decodeState->validBits < (int)0)) {
HXLINE(  44)						_hx_tmp13 = (int)0;
            					}
            					else {
HXLINE(  44)						if ((decodeState->validBits < n3)) {
HXLINE(  44)							if ((n3 > (int)24)) {
HXLINE(  44)								int _hx_tmp14 = decodeState->readBits((int)24);
HXDLIN(  44)								_hx_tmp13 = (_hx_tmp14 + ((int)decodeState->readBits((n3 - (int)24)) << (int)(int)24));
            							}
            							else {
HXLINE(  44)								if ((decodeState->validBits == (int)0)) {
HXLINE(  44)									decodeState->acc = (int)0;
            								}
HXDLIN(  44)								while(true){
HXLINE(  44)									bool _hx_tmp15;
HXDLIN(  44)									if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  44)										if (!(decodeState->lastSeg)) {
HXLINE(  44)											_hx_tmp15 = (decodeState->next() == (int)0);
            										}
            										else {
HXLINE(  44)											_hx_tmp15 = true;
            										}
            									}
            									else {
HXLINE(  44)										_hx_tmp15 = false;
            									}
HXDLIN(  44)									if (_hx_tmp15) {
HXLINE(  44)										decodeState->validBits = (int)-1;
HXDLIN(  44)										goto _hx_goto_12;
            									}
            									else {
HXLINE(  44)										decodeState->bytesInSeg--;
HXDLIN(  44)										int a6 = decodeState->acc;
HXDLIN(  44)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState25 = decodeState;
HXDLIN(  44)										decodeState25->inputPosition = (decodeState25->inputPosition + (int)1);
HXDLIN(  44)										int b6 = decodeState->input->readByte();
HXDLIN(  44)										decodeState->acc = (a6 + ((int)b6 << (int)decodeState->validBits));
HXDLIN(  44)										 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState26 = decodeState;
HXDLIN(  44)										decodeState26->validBits = (decodeState26->validBits + (int)8);
            									}
HXDLIN(  44)									if (!((decodeState->validBits < n3))) {
HXLINE(  44)										goto _hx_goto_12;
            									}
            								}
            								_hx_goto_12:;
HXDLIN(  44)								if ((decodeState->validBits < (int)0)) {
HXLINE(  44)									_hx_tmp13 = (int)0;
            								}
            								else {
HXLINE(  44)									int z12 = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n3) - (int)1));
HXDLIN(  44)									decodeState->acc = hx::UShr(decodeState->acc,n3);
HXDLIN(  44)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState27 = decodeState;
HXDLIN(  44)									decodeState27->validBits = (decodeState27->validBits - n3);
HXDLIN(  44)									_hx_tmp13 = z12;
            								}
            							}
            						}
            						else {
HXLINE(  44)							int z13 = ((int)decodeState->acc & (int)(((int)(int)1 << (int)n3) - (int)1));
HXDLIN(  44)							decodeState->acc = hx::UShr(decodeState->acc,n3);
HXDLIN(  44)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState28 = decodeState;
HXDLIN(  44)							decodeState28->validBits = (decodeState28->validBits - n3);
HXDLIN(  44)							_hx_tmp13 = z13;
            						}
            					}
HXDLIN(  44)					_hx_tmp12->angle = _hx_tmp13;
HXLINE(  45)					if ((( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) )->magnitude >= channels)) {
HXLINE(  46)						HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),46,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            					}
HXLINE(  48)					if ((( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) )->angle >= channels)) {
HXLINE(  49)						HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),49,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            					}
HXLINE(  51)					int _hx_tmp16 = ( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) )->magnitude;
HXDLIN(  51)					if ((_hx_tmp16 == ( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,k)) )->angle)) {
HXLINE(  52)						HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),52,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            					}
            				}
            			}
            		}
            		else {
HXLINE(  56)			m->couplingSteps = (int)0;
            		}
HXLINE(  60)		int _hx_tmp17;
HXDLIN(  60)		if ((decodeState->validBits < (int)0)) {
HXLINE(  60)			_hx_tmp17 = (int)0;
            		}
            		else {
HXLINE(  60)			if ((decodeState->validBits < (int)2)) {
HXLINE(  60)				if ((decodeState->validBits == (int)0)) {
HXLINE(  60)					decodeState->acc = (int)0;
            				}
HXDLIN(  60)				while(true){
HXLINE(  60)					bool _hx_tmp18;
HXDLIN(  60)					if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  60)						if (!(decodeState->lastSeg)) {
HXLINE(  60)							_hx_tmp18 = (decodeState->next() == (int)0);
            						}
            						else {
HXLINE(  60)							_hx_tmp18 = true;
            						}
            					}
            					else {
HXLINE(  60)						_hx_tmp18 = false;
            					}
HXDLIN(  60)					if (_hx_tmp18) {
HXLINE(  60)						decodeState->validBits = (int)-1;
HXDLIN(  60)						goto _hx_goto_13;
            					}
            					else {
HXLINE(  60)						decodeState->bytesInSeg--;
HXDLIN(  60)						int a7 = decodeState->acc;
HXDLIN(  60)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState29 = decodeState;
HXDLIN(  60)						decodeState29->inputPosition = (decodeState29->inputPosition + (int)1);
HXDLIN(  60)						int b7 = decodeState->input->readByte();
HXDLIN(  60)						decodeState->acc = (a7 + ((int)b7 << (int)decodeState->validBits));
HXDLIN(  60)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState30 = decodeState;
HXDLIN(  60)						decodeState30->validBits = (decodeState30->validBits + (int)8);
            					}
HXDLIN(  60)					if (!((decodeState->validBits < (int)2))) {
HXLINE(  60)						goto _hx_goto_13;
            					}
            				}
            				_hx_goto_13:;
HXDLIN(  60)				if ((decodeState->validBits < (int)0)) {
HXLINE(  60)					_hx_tmp17 = (int)0;
            				}
            				else {
HXLINE(  60)					int z14 = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  60)					decodeState->acc = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  60)					 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState31 = decodeState;
HXDLIN(  60)					decodeState31->validBits = (decodeState31->validBits - (int)2);
HXDLIN(  60)					_hx_tmp17 = z14;
            				}
            			}
            			else {
HXLINE(  60)				int z15 = ((int)decodeState->acc & (int)(int)3);
HXDLIN(  60)				decodeState->acc = hx::UShr(decodeState->acc,(int)2);
HXDLIN(  60)				 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState32 = decodeState;
HXDLIN(  60)				decodeState32->validBits = (decodeState32->validBits - (int)2);
HXDLIN(  60)				_hx_tmp17 = z15;
            			}
            		}
HXDLIN(  60)		if ((_hx_tmp17 != (int)0)) {
HXLINE(  61)			HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),61,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            		}
HXLINE(  63)		if ((m->submaps > (int)1)) {
HXLINE(  64)			int _g12 = (int)0;
HXDLIN(  64)			int _g3 = channels;
HXDLIN(  64)			while((_g12 < _g3)){
HXLINE(  64)				_g12 = (_g12 + (int)1);
HXDLIN(  64)				int j1 = (_g12 - (int)1);
HXLINE(  65)				 ::kha::audio2::ogg::vorbis::data::MappingChannel _hx_tmp19 = ( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,j1)) );
HXDLIN(  65)				int _hx_tmp20;
HXDLIN(  65)				if ((decodeState->validBits < (int)0)) {
HXLINE(  65)					_hx_tmp20 = (int)0;
            				}
            				else {
HXLINE(  65)					if ((decodeState->validBits < (int)4)) {
HXLINE(  65)						if ((decodeState->validBits == (int)0)) {
HXLINE(  65)							decodeState->acc = (int)0;
            						}
HXDLIN(  65)						while(true){
HXLINE(  65)							bool _hx_tmp21;
HXDLIN(  65)							if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  65)								if (!(decodeState->lastSeg)) {
HXLINE(  65)									_hx_tmp21 = (decodeState->next() == (int)0);
            								}
            								else {
HXLINE(  65)									_hx_tmp21 = true;
            								}
            							}
            							else {
HXLINE(  65)								_hx_tmp21 = false;
            							}
HXDLIN(  65)							if (_hx_tmp21) {
HXLINE(  65)								decodeState->validBits = (int)-1;
HXDLIN(  65)								goto _hx_goto_15;
            							}
            							else {
HXLINE(  65)								decodeState->bytesInSeg--;
HXDLIN(  65)								int a8 = decodeState->acc;
HXDLIN(  65)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState33 = decodeState;
HXDLIN(  65)								decodeState33->inputPosition = (decodeState33->inputPosition + (int)1);
HXDLIN(  65)								int b8 = decodeState->input->readByte();
HXDLIN(  65)								decodeState->acc = (a8 + ((int)b8 << (int)decodeState->validBits));
HXDLIN(  65)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState34 = decodeState;
HXDLIN(  65)								decodeState34->validBits = (decodeState34->validBits + (int)8);
            							}
HXDLIN(  65)							if (!((decodeState->validBits < (int)4))) {
HXLINE(  65)								goto _hx_goto_15;
            							}
            						}
            						_hx_goto_15:;
HXDLIN(  65)						if ((decodeState->validBits < (int)0)) {
HXLINE(  65)							_hx_tmp20 = (int)0;
            						}
            						else {
HXLINE(  65)							int z16 = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  65)							decodeState->acc = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  65)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState35 = decodeState;
HXDLIN(  65)							decodeState35->validBits = (decodeState35->validBits - (int)4);
HXDLIN(  65)							_hx_tmp20 = z16;
            						}
            					}
            					else {
HXLINE(  65)						int z17 = ((int)decodeState->acc & (int)(int)15);
HXDLIN(  65)						decodeState->acc = hx::UShr(decodeState->acc,(int)4);
HXDLIN(  65)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState36 = decodeState;
HXDLIN(  65)						decodeState36->validBits = (decodeState36->validBits - (int)4);
HXDLIN(  65)						_hx_tmp20 = z17;
            					}
            				}
HXDLIN(  65)				_hx_tmp19->mux = _hx_tmp20;
HXLINE(  66)				 ::kha::audio2::ogg::vorbis::data::MappingChannel _hx_tmp22 = ( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,j1)) );
HXDLIN(  66)				if ((_hx_tmp22->mux >= m->submaps)) {
HXLINE(  67)					HX_STACK_DO_THROW( ::kha::audio2::ogg::vorbis::data::ReaderError_obj::__alloc( HX_CTX ,::kha::audio2::ogg::vorbis::data::ReaderErrorType_obj::INVALID_SETUP_dyn(),null(),hx::SourceInfo(HX_("Mapping.hx",90,a8,19,91),67,HX_("kha.audio2.ogg.vorbis.data.Mapping",3e,52,b0,af),HX_("read",56,4b,a7,4b))));
            				}
            			}
            		}
            		else {
HXLINE(  71)			int _g13 = (int)0;
HXDLIN(  71)			int _g4 = channels;
HXDLIN(  71)			while((_g13 < _g4)){
HXLINE(  71)				_g13 = (_g13 + (int)1);
HXDLIN(  71)				int j2 = (_g13 - (int)1);
HXLINE(  72)				( ( ::kha::audio2::ogg::vorbis::data::MappingChannel)(_hx_array_unsafe_get(m->chan,j2)) )->mux = (int)0;
            			}
            		}
HXLINE(  76)		::Array< int > this3 = ::Array_obj< int >::__new(m->submaps);
HXDLIN(  76)		m->submapFloor = this3;
HXLINE(  77)		::Array< int > this4 = ::Array_obj< int >::__new(m->submaps);
HXDLIN(  77)		m->submapResidue = this4;
HXLINE(  79)		{
HXLINE(  79)			int _g14 = (int)0;
HXDLIN(  79)			int _g5 = m->submaps;
HXDLIN(  79)			while((_g14 < _g5)){
HXLINE(  79)				_g14 = (_g14 + (int)1);
HXDLIN(  79)				int j3 = (_g14 - (int)1);
HXLINE(  80)				if ((decodeState->validBits >= (int)0)) {
HXLINE(  80)					if ((decodeState->validBits < (int)8)) {
HXLINE(  80)						if ((decodeState->validBits == (int)0)) {
HXLINE(  80)							decodeState->acc = (int)0;
            						}
HXDLIN(  80)						while(true){
HXLINE(  80)							bool _hx_tmp23;
HXDLIN(  80)							if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  80)								if (!(decodeState->lastSeg)) {
HXLINE(  80)									_hx_tmp23 = (decodeState->next() == (int)0);
            								}
            								else {
HXLINE(  80)									_hx_tmp23 = true;
            								}
            							}
            							else {
HXLINE(  80)								_hx_tmp23 = false;
            							}
HXDLIN(  80)							if (_hx_tmp23) {
HXLINE(  80)								decodeState->validBits = (int)-1;
HXDLIN(  80)								goto _hx_goto_18;
            							}
            							else {
HXLINE(  80)								decodeState->bytesInSeg--;
HXDLIN(  80)								int a9 = decodeState->acc;
HXDLIN(  80)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState37 = decodeState;
HXDLIN(  80)								decodeState37->inputPosition = (decodeState37->inputPosition + (int)1);
HXDLIN(  80)								int b9 = decodeState->input->readByte();
HXDLIN(  80)								decodeState->acc = (a9 + ((int)b9 << (int)decodeState->validBits));
HXDLIN(  80)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState38 = decodeState;
HXDLIN(  80)								decodeState38->validBits = (decodeState38->validBits + (int)8);
            							}
HXDLIN(  80)							if (!((decodeState->validBits < (int)8))) {
HXLINE(  80)								goto _hx_goto_18;
            							}
            						}
            						_hx_goto_18:;
HXDLIN(  80)						if ((decodeState->validBits >= (int)0)) {
HXLINE(  80)							int z18 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  80)							decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  80)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState39 = decodeState;
HXDLIN(  80)							decodeState39->validBits = (decodeState39->validBits - (int)8);
            						}
            					}
            					else {
HXLINE(  80)						int z19 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  80)						decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  80)						 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState40 = decodeState;
HXDLIN(  80)						decodeState40->validBits = (decodeState40->validBits - (int)8);
            					}
            				}
HXLINE(  81)				{
HXLINE(  81)					::Array< int > this5 = m->submapFloor;
HXDLIN(  81)					int val1;
HXDLIN(  81)					if ((decodeState->validBits < (int)0)) {
HXLINE(  81)						val1 = (int)0;
            					}
            					else {
HXLINE(  81)						if ((decodeState->validBits < (int)8)) {
HXLINE(  81)							if ((decodeState->validBits == (int)0)) {
HXLINE(  81)								decodeState->acc = (int)0;
            							}
HXDLIN(  81)							while(true){
HXLINE(  81)								bool val2;
HXDLIN(  81)								if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  81)									if (!(decodeState->lastSeg)) {
HXLINE(  81)										val2 = (decodeState->next() == (int)0);
            									}
            									else {
HXLINE(  81)										val2 = true;
            									}
            								}
            								else {
HXLINE(  81)									val2 = false;
            								}
HXDLIN(  81)								if (val2) {
HXLINE(  81)									decodeState->validBits = (int)-1;
HXDLIN(  81)									goto _hx_goto_19;
            								}
            								else {
HXLINE(  81)									decodeState->bytesInSeg--;
HXDLIN(  81)									int a10 = decodeState->acc;
HXDLIN(  81)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState41 = decodeState;
HXDLIN(  81)									decodeState41->inputPosition = (decodeState41->inputPosition + (int)1);
HXDLIN(  81)									int b10 = decodeState->input->readByte();
HXDLIN(  81)									decodeState->acc = (a10 + ((int)b10 << (int)decodeState->validBits));
HXDLIN(  81)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState42 = decodeState;
HXDLIN(  81)									decodeState42->validBits = (decodeState42->validBits + (int)8);
            								}
HXDLIN(  81)								if (!((decodeState->validBits < (int)8))) {
HXLINE(  81)									goto _hx_goto_19;
            								}
            							}
            							_hx_goto_19:;
HXDLIN(  81)							if ((decodeState->validBits < (int)0)) {
HXLINE(  81)								val1 = (int)0;
            							}
            							else {
HXLINE(  81)								int z20 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  81)								decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  81)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState43 = decodeState;
HXDLIN(  81)								decodeState43->validBits = (decodeState43->validBits - (int)8);
HXDLIN(  81)								val1 = z20;
            							}
            						}
            						else {
HXLINE(  81)							int z21 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  81)							decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  81)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState44 = decodeState;
HXDLIN(  81)							decodeState44->validBits = (decodeState44->validBits - (int)8);
HXDLIN(  81)							val1 = z21;
            						}
            					}
HXDLIN(  81)					this5->__unsafe_set(j3,val1);
            				}
HXLINE(  82)				{
HXLINE(  82)					::Array< int > this6 = m->submapResidue;
HXDLIN(  82)					int val3;
HXDLIN(  82)					if ((decodeState->validBits < (int)0)) {
HXLINE(  82)						val3 = (int)0;
            					}
            					else {
HXLINE(  82)						if ((decodeState->validBits < (int)8)) {
HXLINE(  82)							if ((decodeState->validBits == (int)0)) {
HXLINE(  82)								decodeState->acc = (int)0;
            							}
HXDLIN(  82)							while(true){
HXLINE(  82)								bool val4;
HXDLIN(  82)								if ((decodeState->bytesInSeg == (int)0)) {
HXLINE(  82)									if (!(decodeState->lastSeg)) {
HXLINE(  82)										val4 = (decodeState->next() == (int)0);
            									}
            									else {
HXLINE(  82)										val4 = true;
            									}
            								}
            								else {
HXLINE(  82)									val4 = false;
            								}
HXDLIN(  82)								if (val4) {
HXLINE(  82)									decodeState->validBits = (int)-1;
HXDLIN(  82)									goto _hx_goto_20;
            								}
            								else {
HXLINE(  82)									decodeState->bytesInSeg--;
HXDLIN(  82)									int a11 = decodeState->acc;
HXDLIN(  82)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState45 = decodeState;
HXDLIN(  82)									decodeState45->inputPosition = (decodeState45->inputPosition + (int)1);
HXDLIN(  82)									int b11 = decodeState->input->readByte();
HXDLIN(  82)									decodeState->acc = (a11 + ((int)b11 << (int)decodeState->validBits));
HXDLIN(  82)									 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState46 = decodeState;
HXDLIN(  82)									decodeState46->validBits = (decodeState46->validBits + (int)8);
            								}
HXDLIN(  82)								if (!((decodeState->validBits < (int)8))) {
HXLINE(  82)									goto _hx_goto_20;
            								}
            							}
            							_hx_goto_20:;
HXDLIN(  82)							if ((decodeState->validBits < (int)0)) {
HXLINE(  82)								val3 = (int)0;
            							}
            							else {
HXLINE(  82)								int z22 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  82)								decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  82)								 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState47 = decodeState;
HXDLIN(  82)								decodeState47->validBits = (decodeState47->validBits - (int)8);
HXDLIN(  82)								val3 = z22;
            							}
            						}
            						else {
HXLINE(  82)							int z23 = ((int)decodeState->acc & (int)(int)255);
HXDLIN(  82)							decodeState->acc = hx::UShr(decodeState->acc,(int)8);
HXDLIN(  82)							 ::kha::audio2::ogg::vorbis::VorbisDecodeState decodeState48 = decodeState;
HXDLIN(  82)							decodeState48->validBits = (decodeState48->validBits - (int)8);
HXDLIN(  82)							val3 = z23;
            						}
            					}
HXDLIN(  82)					this6->__unsafe_set(j3,val3);
            				}
            			}
            		}
HXLINE(  85)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Mapping_obj,read,return )


hx::ObjectPtr< Mapping_obj > Mapping_obj::__new() {
	hx::ObjectPtr< Mapping_obj > __this = new Mapping_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Mapping_obj > Mapping_obj::__alloc(hx::Ctx *_hx_ctx) {
	Mapping_obj *__this = (Mapping_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mapping_obj), true, "kha.audio2.ogg.vorbis.data.Mapping"));
	*(void **)__this = Mapping_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Mapping_obj::Mapping_obj()
{
}

void Mapping_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mapping);
	HX_MARK_MEMBER_NAME(couplingSteps,"couplingSteps");
	HX_MARK_MEMBER_NAME(chan,"chan");
	HX_MARK_MEMBER_NAME(submaps,"submaps");
	HX_MARK_MEMBER_NAME(submapFloor,"submapFloor");
	HX_MARK_MEMBER_NAME(submapResidue,"submapResidue");
	HX_MARK_END_CLASS();
}

void Mapping_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(couplingSteps,"couplingSteps");
	HX_VISIT_MEMBER_NAME(chan,"chan");
	HX_VISIT_MEMBER_NAME(submaps,"submaps");
	HX_VISIT_MEMBER_NAME(submapFloor,"submapFloor");
	HX_VISIT_MEMBER_NAME(submapResidue,"submapResidue");
}

hx::Val Mapping_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"chan") ) { return hx::Val( chan ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"submaps") ) { return hx::Val( submaps ); }
		if (HX_FIELD_EQ(inName,"doFloor") ) { return hx::Val( doFloor_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"submapFloor") ) { return hx::Val( submapFloor ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"couplingSteps") ) { return hx::Val( couplingSteps ); }
		if (HX_FIELD_EQ(inName,"submapResidue") ) { return hx::Val( submapResidue ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Mapping_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
	}
	return false;
}

hx::Val Mapping_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"chan") ) { chan=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"submaps") ) { submaps=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"submapFloor") ) { submapFloor=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"couplingSteps") ) { couplingSteps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"submapResidue") ) { submapResidue=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mapping_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("couplingSteps","\xea","\xbe","\x6c","\x19"));
	outFields->push(HX_HCSTRING("chan","\xd2","\x5e","\xbf","\x41"));
	outFields->push(HX_HCSTRING("submaps","\xd7","\xa7","\x80","\x2b"));
	outFields->push(HX_HCSTRING("submapFloor","\x10","\x6b","\x36","\x00"));
	outFields->push(HX_HCSTRING("submapResidue","\x8f","\x2a","\x0e","\xbb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Mapping_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Mapping_obj,couplingSteps),HX_HCSTRING("couplingSteps","\xea","\xbe","\x6c","\x19")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Mapping_obj,chan),HX_HCSTRING("chan","\xd2","\x5e","\xbf","\x41")},
	{hx::fsInt,(int)offsetof(Mapping_obj,submaps),HX_HCSTRING("submaps","\xd7","\xa7","\x80","\x2b")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Mapping_obj,submapFloor),HX_HCSTRING("submapFloor","\x10","\x6b","\x36","\x00")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Mapping_obj,submapResidue),HX_HCSTRING("submapResidue","\x8f","\x2a","\x0e","\xbb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Mapping_obj_sStaticStorageInfo = 0;
#endif

static ::String Mapping_obj_sMemberFields[] = {
	HX_HCSTRING("couplingSteps","\xea","\xbe","\x6c","\x19"),
	HX_HCSTRING("chan","\xd2","\x5e","\xbf","\x41"),
	HX_HCSTRING("submaps","\xd7","\xa7","\x80","\x2b"),
	HX_HCSTRING("submapFloor","\x10","\x6b","\x36","\x00"),
	HX_HCSTRING("submapResidue","\x8f","\x2a","\x0e","\xbb"),
	HX_HCSTRING("doFloor","\x41","\xb2","\xc3","\x35"),
	::String(null()) };

static void Mapping_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mapping_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mapping_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mapping_obj::__mClass,"__mClass");
};

#endif

hx::Class Mapping_obj::__mClass;

static ::String Mapping_obj_sStaticFields[] = {
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	::String(null())
};

void Mapping_obj::__register()
{
	hx::Object *dummy = new Mapping_obj;
	Mapping_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.audio2.ogg.vorbis.data.Mapping","\x3e","\x52","\xb0","\xaf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mapping_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Mapping_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mapping_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mapping_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mapping_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mapping_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mapping_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mapping_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
} // end namespace ogg
} // end namespace vorbis
} // end namespace data
