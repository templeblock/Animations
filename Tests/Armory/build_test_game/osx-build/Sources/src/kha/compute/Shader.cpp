// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_compute_ConstantLocation
#include <kha/compute/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_compute_Shader
#include <kha/compute/Shader.h>
#endif
#ifndef INCLUDED_kha_compute_TextureUnit
#include <kha/compute/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <kha/internal/BytesBlob.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d66caa0f25d52fb9_20_new,"kha.compute.Shader","new",0x16e56c58,"kha.compute.Shader.new","kha/compute/Shader.hx",20,0xe526ccd6)
HX_LOCAL_STACK_FRAME(_hx_pos_d66caa0f25d52fb9_24_init,"kha.compute.Shader","init",0xee921818,"kha.compute.Shader.init","kha/compute/Shader.hx",24,0xe526ccd6)
HX_LOCAL_STACK_FRAME(_hx_pos_d66caa0f25d52fb9_28_delete,"kha.compute.Shader","delete",0x1ce6ef33,"kha.compute.Shader.delete","kha/compute/Shader.hx",28,0xe526ccd6)
HX_LOCAL_STACK_FRAME(_hx_pos_d66caa0f25d52fb9_31_getConstantLocation,"kha.compute.Shader","getConstantLocation",0x6f1d6467,"kha.compute.Shader.getConstantLocation","kha/compute/Shader.hx",31,0xe526ccd6)
HX_LOCAL_STACK_FRAME(_hx_pos_d66caa0f25d52fb9_40_initConstantLocation,"kha.compute.Shader","initConstantLocation",0x1f2493f1,"kha.compute.Shader.initConstantLocation","kha/compute/Shader.hx",40,0xe526ccd6)
HX_LOCAL_STACK_FRAME(_hx_pos_d66caa0f25d52fb9_44_getTextureUnit,"kha.compute.Shader","getTextureUnit",0xe5a79311,"kha.compute.Shader.getTextureUnit","kha/compute/Shader.hx",44,0xe526ccd6)
HX_LOCAL_STACK_FRAME(_hx_pos_d66caa0f25d52fb9_53_initTextureUnit,"kha.compute.Shader","initTextureUnit",0x5b428fc7,"kha.compute.Shader.initTextureUnit","kha/compute/Shader.hx",53,0xe526ccd6)

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif

namespace kha{
namespace compute{

void Shader_obj::__construct(::Array< ::Dynamic> sources,::Array< ::String > files){
            	HX_STACKFRAME(&_hx_pos_d66caa0f25d52fb9_20_new)
HXDLIN(  20)		this->init(sources->__get((int)0).StaticCast<  ::kha::internal::BytesBlob >(),files->__get((int)0));
            	}

Dynamic Shader_obj::__CreateEmpty() { return new Shader_obj; }

void *Shader_obj::_hx_vtable = 0;

Dynamic Shader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Shader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e347d18;
}

void Shader_obj::init( ::kha::internal::BytesBlob source,::String file){
            	HX_STACKFRAME(&_hx_pos_d66caa0f25d52fb9_24_init)
HXDLIN(  24)		shader = new Kore::ComputeShader(source->bytes->b->Pointer(), source->get_length());;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,init,(void))

void Shader_obj::_hx_delete(){
            	HX_STACKFRAME(&_hx_pos_d66caa0f25d52fb9_28_delete)
HXDLIN(  28)		delete shader; shader = nullptr;;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx_delete,(void))

 ::kha::compute::ConstantLocation Shader_obj::getConstantLocation(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_d66caa0f25d52fb9_31_getConstantLocation)
HXLINE(  32)		 ::kha::compute::ConstantLocation location =  ::kha::compute::ConstantLocation_obj::__alloc( HX_CTX );
HXLINE(  33)		this->initConstantLocation(location,name);
HXLINE(  34)		return location;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,getConstantLocation,return )

void Shader_obj::initConstantLocation( ::kha::compute::ConstantLocation location,::String name){
            	HX_STACKFRAME(&_hx_pos_d66caa0f25d52fb9_40_initConstantLocation)
            	
		location->location = shader->getConstantLocation(name.c_str());
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,initConstantLocation,(void))

 ::kha::compute::TextureUnit Shader_obj::getTextureUnit(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_d66caa0f25d52fb9_44_getTextureUnit)
HXLINE(  45)		 ::kha::compute::TextureUnit unit =  ::kha::compute::TextureUnit_obj::__alloc( HX_CTX );
HXLINE(  46)		this->initTextureUnit(unit,name);
HXLINE(  47)		return unit;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,getTextureUnit,return )

void Shader_obj::initTextureUnit( ::kha::compute::TextureUnit unit,::String name){
            	HX_STACKFRAME(&_hx_pos_d66caa0f25d52fb9_53_initTextureUnit)
            	
		unit->unit = shader->getTextureUnit(name.c_str());
	

            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,initTextureUnit,(void))


hx::ObjectPtr< Shader_obj > Shader_obj::__new(::Array< ::Dynamic> sources,::Array< ::String > files) {
	hx::ObjectPtr< Shader_obj > __this = new Shader_obj();
	__this->__construct(sources,files);
	return __this;
}

hx::ObjectPtr< Shader_obj > Shader_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> sources,::Array< ::String > files) {
	Shader_obj *__this = (Shader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Shader_obj), false, "kha.compute.Shader"));
	*(void **)__this = Shader_obj::_hx_vtable;
	__this->__construct(sources,files);
	return __this;
}

Shader_obj::Shader_obj()
{
}

hx::Val Shader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"delete") ) { return hx::Val( _hx_delete_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getTextureUnit") ) { return hx::Val( getTextureUnit_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"initTextureUnit") ) { return hx::Val( initTextureUnit_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getConstantLocation") ) { return hx::Val( getConstantLocation_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"initConstantLocation") ) { return hx::Val( initConstantLocation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Shader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Shader_obj_sStaticStorageInfo = 0;
#endif

static ::String Shader_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("delete","\x2b","\xc0","\xd8","\x6a"),
	HX_HCSTRING("getConstantLocation","\x6f","\x58","\x32","\xea"),
	HX_HCSTRING("initConstantLocation","\xe9","\x26","\x65","\x56"),
	HX_HCSTRING("getTextureUnit","\x09","\x1c","\xc7","\x8b"),
	HX_HCSTRING("initTextureUnit","\xcf","\xdf","\xba","\x10"),
	::String(null()) };

static void Shader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#endif

hx::Class Shader_obj::__mClass;

void Shader_obj::__register()
{
	hx::Object *dummy = new Shader_obj;
	Shader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.compute.Shader","\x66","\xa0","\x7a","\xdb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Shader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Shader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Shader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace compute
