// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_kha_FrameTask
#include <kha/FrameTask.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_System
#include <kha/System.h>
#endif
#ifndef INCLUDED_kha_TimeTask
#include <kha/TimeTask.h>
#endif
#ifndef INCLUDED_kha_network_Session
#include <kha/network/Session.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_69_init,"kha.Scheduler","init",0x2bf4b74d,"kha.Scheduler.init","kha/Scheduler.hx",69,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_89_start,"kha.Scheduler","start",0x101ead85,"kha.Scheduler.start","kha/Scheduler.hx",89,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_112_stop,"kha.Scheduler","stop",0x32956c3f,"kha.Scheduler.stop","kha/Scheduler.hx",112,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_116_isStopped,"kha.Scheduler","isStopped",0xd70a55e6,"kha.Scheduler.isStopped","kha/Scheduler.hx",116,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_120_warpTimeTasksBack,"kha.Scheduler","warpTimeTasksBack",0x71b62f43,"kha.Scheduler.warpTimeTasksBack","kha/Scheduler.hx",120,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_133_warp,"kha.Scheduler","warp",0x352bde85,"kha.Scheduler.warp","kha/Scheduler.hx",133,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_173_executeFrame,"kha.Scheduler","executeFrame",0x3aa53ef5,"kha.Scheduler.executeFrame","kha/Scheduler.hx",173,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_282_executeTimeTasks,"kha.Scheduler","executeTimeTasks",0x97823d09,"kha.Scheduler.executeTimeTasks","kha/Scheduler.hx",282,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_310_archiveTimeTask,"kha.Scheduler","archiveTimeTask",0xf7ae86b7,"kha.Scheduler.archiveTimeTask","kha/Scheduler.hx",310,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_323_time,"kha.Scheduler","time",0x3336484a,"kha.Scheduler.time","kha/Scheduler.hx",323,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_330_realTime,"kha.Scheduler","realTime",0xd6422948,"kha.Scheduler.realTime","kha/Scheduler.hx",330,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_333_resetTime,"kha.Scheduler","resetTime",0x2292dc1f,"kha.Scheduler.resetTime","kha/Scheduler.hx",333,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_346_addBreakableFrameTask,"kha.Scheduler","addBreakableFrameTask",0x44621e9d,"kha.Scheduler.addBreakableFrameTask","kha/Scheduler.hx",346,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_353_addFrameTask,"kha.Scheduler","addFrameTask",0xb36720ee,"kha.Scheduler.addFrameTask","kha/Scheduler.hx",353,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_360_pauseFrameTask,"kha.Scheduler","pauseFrameTask",0xfc4302b9,"kha.Scheduler.pauseFrameTask","kha/Scheduler.hx",360,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_369_removeFrameTask,"kha.Scheduler","removeFrameTask",0x21b33c11,"kha.Scheduler.removeFrameTask","kha/Scheduler.hx",369,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_378_generateGroupId,"kha.Scheduler","generateGroupId",0x08ceed28,"kha.Scheduler.generateGroupId","kha/Scheduler.hx",378,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_381_addBreakableTimeTaskToGroup,"kha.Scheduler","addBreakableTimeTaskToGroup",0x55e602bd,"kha.Scheduler.addBreakableTimeTaskToGroup","kha/Scheduler.hx",381,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_400_addTimeTaskToGroup,"kha.Scheduler","addTimeTaskToGroup",0xa9e317ce,"kha.Scheduler.addTimeTaskToGroup","kha/Scheduler.hx",400,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_407_addBreakableTimeTask,"kha.Scheduler","addBreakableTimeTask",0x71683bc7,"kha.Scheduler.addBreakableTimeTask","kha/Scheduler.hx",407,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_411_addTimeTask,"kha.Scheduler","addTimeTask",0x71e7ae96,"kha.Scheduler.addTimeTask","kha/Scheduler.hx",411,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_414_getTimeTask,"kha.Scheduler","getTimeTask",0x667f3a0b,"kha.Scheduler.getTimeTask","kha/Scheduler.hx",414,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_429_pauseTimeTask,"kha.Scheduler","pauseTimeTask",0xa3984f2b,"kha.Scheduler.pauseTimeTask","kha/Scheduler.hx",429,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_439_pauseRunningTimeTask,"kha.Scheduler","pauseRunningTimeTask",0x8966fef8,"kha.Scheduler.pauseRunningTimeTask","kha/Scheduler.hx",439,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_451_pauseTimeTasks,"kha.Scheduler","pauseTimeTasks",0x81acf6e8,"kha.Scheduler.pauseTimeTasks","kha/Scheduler.hx",451,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_462_removeTimeTask,"kha.Scheduler","removeTimeTask",0x701a88d3,"kha.Scheduler.removeTimeTask","kha/Scheduler.hx",462,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_470_removeTimeTasks,"kha.Scheduler","removeTimeTasks",0xa71d3040,"kha.Scheduler.removeTimeTasks","kha/Scheduler.hx",470,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_490_numTasksInSchedule,"kha.Scheduler","numTasksInSchedule",0x5bfae3e1,"kha.Scheduler.numTasksInSchedule","kha/Scheduler.hx",490,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_493_insertSorted,"kha.Scheduler","insertSorted",0x20607c93,"kha.Scheduler.insertSorted","kha/Scheduler.hx",493,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_506_sortFrameTasks,"kha.Scheduler","sortFrameTasks",0xfb8e299c,"kha.Scheduler.sortFrameTasks","kha/Scheduler.hx",506,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_503_sortFrameTasks,"kha.Scheduler","sortFrameTasks",0xfb8e299c,"kha.Scheduler.sortFrameTasks","kha/Scheduler.hx",503,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_42_boot,"kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",42,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_60_boot,"kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",60,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_61_boot,"kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",61,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_65_boot,"kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",65,0xd275db8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f04e9fa6a521eb07_67_boot,"kha.Scheduler","boot",0x2755006f,"kha.Scheduler.boot","kha/Scheduler.hx",67,0xd275db8e)
namespace kha{

void Scheduler_obj::__construct() { }

Dynamic Scheduler_obj::__CreateEmpty() { return new Scheduler_obj; }

void *Scheduler_obj::_hx_vtable = 0;

Dynamic Scheduler_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Scheduler_obj > _hx_result = new Scheduler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Scheduler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0cb5f5b7;
}

::Array< ::Dynamic> Scheduler_obj::timeTasks;

::Array< ::Dynamic> Scheduler_obj::pausedTimeTasks;

::Array< ::Dynamic> Scheduler_obj::outdatedTimeTasks;

::Array< ::Dynamic> Scheduler_obj::timeTasksScratchpad;

Float Scheduler_obj::timeWarpSaveTime;

::Array< ::Dynamic> Scheduler_obj::frameTasks;

::Array< ::Dynamic> Scheduler_obj::toDeleteFrame;

Float Scheduler_obj::current;

Float Scheduler_obj::lastTime;

bool Scheduler_obj::frame_tasks_sorted;

bool Scheduler_obj::stopped;

bool Scheduler_obj::vsync;

Float Scheduler_obj::onedifhz;

int Scheduler_obj::currentFrameTaskId;

int Scheduler_obj::currentTimeTaskId;

int Scheduler_obj::currentGroupId;

int Scheduler_obj::DIF_COUNT;

Float Scheduler_obj::maxframetime;

::Array< Float > Scheduler_obj::deltas;

Float Scheduler_obj::startTime;

 ::kha::TimeTask Scheduler_obj::activeTimeTask;

void Scheduler_obj::init(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_69_init)
HXLINE(  70)		::kha::Scheduler_obj::deltas = ::Array_obj< Float >::__new();
HXLINE(  71)		{
HXLINE(  71)			int _g1 = (int)0;
HXDLIN(  71)			int _g = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN(  71)			while((_g1 < _g)){
HXLINE(  71)				_g1 = (_g1 + (int)1);
HXDLIN(  71)				int i = (_g1 - (int)1);
HXDLIN(  71)				::kha::Scheduler_obj::deltas[i] = (int)0;
            			}
            		}
HXLINE(  73)		::kha::Scheduler_obj::stopped = true;
HXLINE(  74)		::kha::Scheduler_obj::frame_tasks_sorted = true;
HXLINE(  75)		::kha::Scheduler_obj::current = (::kha::Scheduler_obj::lastTime = ::kha::Scheduler_obj::realTime());
HXLINE(  77)		::kha::Scheduler_obj::currentFrameTaskId = (int)0;
HXLINE(  78)		::kha::Scheduler_obj::currentTimeTaskId = (int)0;
HXLINE(  79)		::kha::Scheduler_obj::currentGroupId = (int)0;
HXLINE(  81)		::kha::Scheduler_obj::timeTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  82)		::kha::Scheduler_obj::pausedTimeTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  83)		::kha::Scheduler_obj::outdatedTimeTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  84)		::kha::Scheduler_obj::timeTasksScratchpad = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  85)		::kha::Scheduler_obj::frameTasks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  86)		::kha::Scheduler_obj::toDeleteFrame = ::Array_obj< ::Dynamic>::__new(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,init,(void))

void Scheduler_obj::start(hx::Null< bool >  __o_restartTimers){
bool restartTimers = __o_restartTimers.Default(false);
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_89_start)
HXLINE(  90)		::kha::Scheduler_obj::vsync = ::kha::System_obj::get_vsync();
HXLINE(  91)		int hz = ::kha::System_obj::get_refreshRate();
HXLINE(  92)		bool _hx_tmp;
HXDLIN(  92)		if ((hz >= (int)57)) {
HXLINE(  92)			_hx_tmp = (hz <= (int)63);
            		}
            		else {
HXLINE(  92)			_hx_tmp = false;
            		}
HXDLIN(  92)		if (_hx_tmp) {
HXLINE(  92)			hz = (int)60;
            		}
HXLINE(  93)		::kha::Scheduler_obj::onedifhz = ((Float)((Float)1.0) / (Float)hz);
HXLINE(  95)		::kha::Scheduler_obj::stopped = false;
HXLINE(  96)		::kha::Scheduler_obj::resetTime();
HXLINE(  97)		Float _hx_tmp1 = ::kha::Scheduler_obj::realTime();
HXDLIN(  97)		::kha::Scheduler_obj::lastTime = (_hx_tmp1 - ::kha::Scheduler_obj::startTime);
HXLINE(  98)		{
HXLINE(  98)			int _g1 = (int)0;
HXDLIN(  98)			int _g = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN(  98)			while((_g1 < _g)){
HXLINE(  98)				_g1 = (_g1 + (int)1);
HXDLIN(  98)				int i = (_g1 - (int)1);
HXDLIN(  98)				::kha::Scheduler_obj::deltas[i] = (int)0;
            			}
            		}
HXLINE( 100)		if (restartTimers) {
HXLINE( 101)			{
HXLINE( 101)				int _g2 = (int)0;
HXDLIN( 101)				::Array< ::Dynamic> _g11 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 101)				while((_g2 < _g11->length)){
HXLINE( 101)					 ::kha::TimeTask timeTask = _g11->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 101)					_g2 = (_g2 + (int)1);
HXLINE( 102)					timeTask->paused = false;
            				}
            			}
HXLINE( 105)			{
HXLINE( 105)				int _g3 = (int)0;
HXDLIN( 105)				::Array< ::Dynamic> _g12 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 105)				while((_g3 < _g12->length)){
HXLINE( 105)					 ::kha::FrameTask frameTask = _g12->__get(_g3).StaticCast<  ::kha::FrameTask >();
HXDLIN( 105)					_g3 = (_g3 + (int)1);
HXLINE( 106)					frameTask->paused = false;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,start,(void))

void Scheduler_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_112_stop)
HXDLIN( 112)		::kha::Scheduler_obj::stopped = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,stop,(void))

bool Scheduler_obj::isStopped(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_116_isStopped)
HXDLIN( 116)		return ::kha::Scheduler_obj::stopped;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,isStopped,return )

void Scheduler_obj::warpTimeTasksBack(Float time,::Array< ::Dynamic> tasks){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_120_warpTimeTasksBack)
HXDLIN( 120)		int _g = (int)0;
HXDLIN( 120)		while((_g < tasks->length)){
HXDLIN( 120)			 ::kha::TimeTask timeTask = tasks->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 120)			_g = (_g + (int)1);
HXLINE( 121)			if ((timeTask->start >= time)) {
HXLINE( 122)				timeTask->next = timeTask->start;
            			}
            			else {
HXLINE( 124)				if ((timeTask->period > (int)0)) {
HXLINE( 125)					Float sinceStart = (time - timeTask->start);
HXLINE( 126)					int times = ::Math_obj::ceil(((Float)sinceStart / (Float)timeTask->period));
HXLINE( 127)					Float timeTask1 = timeTask->start;
HXDLIN( 127)					timeTask->next = (timeTask1 + (times * timeTask->period));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,warpTimeTasksBack,(void))

void Scheduler_obj::warp(Float time){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_133_warp)
HXDLIN( 133)		if ((time < ::kha::Scheduler_obj::lastTime)) {
HXLINE( 134)			::kha::Scheduler_obj::current = time;
HXLINE( 135)			::kha::Scheduler_obj::lastTime = time;
HXLINE( 137)			::kha::Scheduler_obj::warpTimeTasksBack(time,::kha::Scheduler_obj::outdatedTimeTasks);
HXLINE( 138)			::kha::Scheduler_obj::warpTimeTasksBack(time,::kha::Scheduler_obj::timeTasks);
HXLINE( 140)			{
HXLINE( 140)				int _g = (int)0;
HXDLIN( 140)				::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::outdatedTimeTasks;
HXDLIN( 140)				while((_g < _g1->length)){
HXLINE( 140)					 ::kha::TimeTask task = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 140)					_g = (_g + (int)1);
HXLINE( 141)					if ((task->next >= time)) {
HXLINE( 142)						::kha::Scheduler_obj::timeTasksScratchpad->push(task);
            					}
            				}
            			}
HXLINE( 145)			{
HXLINE( 145)				int _g2 = (int)0;
HXDLIN( 145)				::Array< ::Dynamic> _g11 = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 145)				while((_g2 < _g11->length)){
HXLINE( 145)					 ::kha::TimeTask task1 = _g11->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 145)					_g2 = (_g2 + (int)1);
HXLINE( 146)					::kha::Scheduler_obj::outdatedTimeTasks->remove(task1);
            				}
            			}
HXLINE( 148)			{
HXLINE( 148)				int _g3 = (int)0;
HXDLIN( 148)				::Array< ::Dynamic> _g12 = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 148)				while((_g3 < _g12->length)){
HXLINE( 148)					 ::kha::TimeTask task2 = _g12->__get(_g3).StaticCast<  ::kha::TimeTask >();
HXDLIN( 148)					_g3 = (_g3 + (int)1);
HXLINE( 149)					::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,task2);
            				}
            			}
HXLINE( 151)			while((::kha::Scheduler_obj::timeTasksScratchpad->length > (int)0)){
HXLINE( 152)				::Array< ::Dynamic> _hx_tmp = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 152)				_hx_tmp->remove(::kha::Scheduler_obj::timeTasksScratchpad->__get((int)0).StaticCast<  ::kha::TimeTask >());
            			}
            		}
            		else {
HXLINE( 155)			if ((time > ::kha::Scheduler_obj::lastTime)) {
HXLINE( 164)				 ::Dynamic _hx_tmp1 = hx::ClassOf< ::kha::Scheduler >();
HXDLIN( 164)				::kha::Scheduler_obj::startTime = (::kha::Scheduler_obj::startTime - (time - ::kha::Scheduler_obj::lastTime));
HXLINE( 166)				::kha::Scheduler_obj::current = time;
HXLINE( 167)				::kha::Scheduler_obj::lastTime = time;
HXLINE( 169)				::kha::Scheduler_obj::executeTimeTasks(time);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,warp,(void))

void Scheduler_obj::executeFrame(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_173_executeFrame)
HXLINE( 174)		Float now = ::kha::Scheduler_obj::realTime();
HXDLIN( 174)		Float now1 = (now - ::kha::Scheduler_obj::startTime);
HXLINE( 175)		Float delta = (now1 - ::kha::Scheduler_obj::lastTime);
HXLINE( 177)		Float frameEnd = ::kha::Scheduler_obj::current;
HXLINE( 179)		if ((delta >= (int)0)) {
HXLINE( 180)			if (hx::IsNull( ::kha::network::Session_obj::the() )) {
HXLINE( 183)				if ((delta > ::kha::Scheduler_obj::maxframetime)) {
HXLINE( 184)					 ::Dynamic _hx_tmp = hx::ClassOf< ::kha::Scheduler >();
HXDLIN( 184)					::kha::Scheduler_obj::startTime = (::kha::Scheduler_obj::startTime + (delta - ::kha::Scheduler_obj::maxframetime));
HXLINE( 185)					delta = ::kha::Scheduler_obj::maxframetime;
HXLINE( 186)					frameEnd = (frameEnd + delta);
            				}
            				else {
HXLINE( 189)					if (::kha::Scheduler_obj::vsync) {
HXLINE( 192)						Float realdif = ::kha::Scheduler_obj::onedifhz;
HXLINE( 193)						while((realdif < (delta - ::kha::Scheduler_obj::onedifhz))){
HXLINE( 194)							realdif = (realdif + ::kha::Scheduler_obj::onedifhz);
            						}
HXLINE( 197)						delta = realdif;
HXLINE( 198)						{
HXLINE( 198)							int _g1 = (int)0;
HXDLIN( 198)							int _g = (::kha::Scheduler_obj::DIF_COUNT - (int)2);
HXDLIN( 198)							while((_g1 < _g)){
HXLINE( 198)								_g1 = (_g1 + (int)1);
HXDLIN( 198)								int i = (_g1 - (int)1);
HXLINE( 199)								delta = (delta + ::kha::Scheduler_obj::deltas->__get(i));
HXLINE( 200)								::Array< Float > _hx_tmp1 = ::kha::Scheduler_obj::deltas;
HXDLIN( 200)								::Array< Float > _hx_tmp2 = ::kha::Scheduler_obj::deltas;
HXDLIN( 200)								_hx_tmp1[i] = _hx_tmp2->__get((i + (int)1));
            							}
            						}
HXLINE( 202)						::Array< Float > delta1 = ::kha::Scheduler_obj::deltas;
HXDLIN( 202)						delta = (delta + delta1->__get((::kha::Scheduler_obj::DIF_COUNT - (int)2)));
HXLINE( 203)						delta = ((Float)delta / (Float)::kha::Scheduler_obj::DIF_COUNT);
HXLINE( 204)						::Array< Float > _hx_tmp3 = ::kha::Scheduler_obj::deltas;
HXDLIN( 204)						_hx_tmp3[(::kha::Scheduler_obj::DIF_COUNT - (int)2)] = realdif;
HXLINE( 206)						frameEnd = (frameEnd + delta);
            					}
            					else {
HXLINE( 209)						{
HXLINE( 209)							int _g11 = (int)0;
HXDLIN( 209)							int _g2 = (::kha::Scheduler_obj::DIF_COUNT - (int)1);
HXDLIN( 209)							while((_g11 < _g2)){
HXLINE( 209)								_g11 = (_g11 + (int)1);
HXDLIN( 209)								int i1 = (_g11 - (int)1);
HXLINE( 210)								::Array< Float > _hx_tmp4 = ::kha::Scheduler_obj::deltas;
HXDLIN( 210)								::Array< Float > _hx_tmp5 = ::kha::Scheduler_obj::deltas;
HXDLIN( 210)								_hx_tmp4[i1] = _hx_tmp5->__get((i1 + (int)1));
            							}
            						}
HXLINE( 212)						::Array< Float > _hx_tmp6 = ::kha::Scheduler_obj::deltas;
HXDLIN( 212)						_hx_tmp6[(::kha::Scheduler_obj::DIF_COUNT - (int)1)] = delta;
HXLINE( 214)						Float next = (int)0;
HXLINE( 215)						{
HXLINE( 215)							int _g12 = (int)0;
HXDLIN( 215)							int _g3 = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN( 215)							while((_g12 < _g3)){
HXLINE( 215)								_g12 = (_g12 + (int)1);
HXDLIN( 215)								int i2 = (_g12 - (int)1);
HXLINE( 216)								next = (next + ::kha::Scheduler_obj::deltas->__get(i2));
            							}
            						}
HXLINE( 218)						next = ((Float)next / (Float)::kha::Scheduler_obj::DIF_COUNT);
HXLINE( 223)						frameEnd = (frameEnd + next);
            					}
            				}
            			}
            			else {
HXLINE( 228)				frameEnd = (frameEnd + delta);
            			}
HXLINE( 231)			::kha::Scheduler_obj::lastTime = frameEnd;
HXLINE( 232)			if (!(::kha::Scheduler_obj::stopped)) {
HXLINE( 233)				::kha::Scheduler_obj::current = frameEnd;
            			}
HXLINE( 237)			{
HXLINE( 237)				int _g4 = (int)0;
HXDLIN( 237)				::Array< ::Dynamic> _g13 = ::kha::Scheduler_obj::pausedTimeTasks;
HXDLIN( 237)				while((_g4 < _g13->length)){
HXLINE( 237)					 ::kha::TimeTask pausedTask = _g13->__get(_g4).StaticCast<  ::kha::TimeTask >();
HXDLIN( 237)					_g4 = (_g4 + (int)1);
HXLINE( 238)					 ::kha::TimeTask pausedTask1 = pausedTask;
HXDLIN( 238)					pausedTask1->next = (pausedTask1->next + delta);
            				}
            			}
HXLINE( 241)			if (::kha::Scheduler_obj::stopped) {
HXLINE( 243)				int _g5 = (int)0;
HXDLIN( 243)				::Array< ::Dynamic> _g14 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 243)				while((_g5 < _g14->length)){
HXLINE( 243)					 ::kha::TimeTask timeTask = _g14->__get(_g5).StaticCast<  ::kha::TimeTask >();
HXDLIN( 243)					_g5 = (_g5 + (int)1);
HXLINE( 244)					 ::kha::TimeTask timeTask1 = timeTask;
HXDLIN( 244)					timeTask1->next = (timeTask1->next + delta);
            				}
            			}
HXLINE( 248)			::kha::Scheduler_obj::executeTimeTasks(frameEnd);
HXLINE( 251)			{
HXLINE( 251)				int _g6 = (int)0;
HXDLIN( 251)				::Array< ::Dynamic> _g15 = ::kha::Scheduler_obj::outdatedTimeTasks;
HXDLIN( 251)				while((_g6 < _g15->length)){
HXLINE( 251)					 ::kha::TimeTask task = _g15->__get(_g6).StaticCast<  ::kha::TimeTask >();
HXDLIN( 251)					_g6 = (_g6 + (int)1);
HXLINE( 252)					Float task1 = task->next;
HXDLIN( 252)					if ((task1 < (frameEnd - ((Float)10.0)))) {
HXLINE( 253)						::kha::Scheduler_obj::timeTasksScratchpad->push(task);
            					}
            				}
            			}
HXLINE( 256)			{
HXLINE( 256)				int _g7 = (int)0;
HXDLIN( 256)				::Array< ::Dynamic> _g16 = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 256)				while((_g7 < _g16->length)){
HXLINE( 256)					 ::kha::TimeTask task2 = _g16->__get(_g7).StaticCast<  ::kha::TimeTask >();
HXDLIN( 256)					_g7 = (_g7 + (int)1);
HXLINE( 257)					::kha::Scheduler_obj::outdatedTimeTasks->remove(task2);
            				}
            			}
HXLINE( 259)			while((::kha::Scheduler_obj::timeTasksScratchpad->length > (int)0)){
HXLINE( 260)				::Array< ::Dynamic> _hx_tmp7 = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 260)				_hx_tmp7->remove(::kha::Scheduler_obj::timeTasksScratchpad->__get((int)0).StaticCast<  ::kha::TimeTask >());
            			}
            		}
HXLINE( 264)		::kha::Scheduler_obj::sortFrameTasks();
HXLINE( 265)		{
HXLINE( 265)			int _g8 = (int)0;
HXDLIN( 265)			::Array< ::Dynamic> _g17 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 265)			while((_g8 < _g17->length)){
HXLINE( 265)				 ::kha::FrameTask frameTask = _g17->__get(_g8).StaticCast<  ::kha::FrameTask >();
HXDLIN( 265)				_g8 = (_g8 + (int)1);
HXLINE( 266)				bool _hx_tmp8;
HXDLIN( 266)				bool _hx_tmp9;
HXDLIN( 266)				if (!(::kha::Scheduler_obj::stopped)) {
HXLINE( 266)					_hx_tmp9 = !(frameTask->paused);
            				}
            				else {
HXLINE( 266)					_hx_tmp9 = false;
            				}
HXDLIN( 266)				if (_hx_tmp9) {
HXLINE( 266)					_hx_tmp8 = frameTask->active;
            				}
            				else {
HXLINE( 266)					_hx_tmp8 = false;
            				}
HXDLIN( 266)				if (_hx_tmp8) {
HXLINE( 267)					if (!(( (bool)(frameTask->task()) ))) {
HXLINE( 267)						frameTask->active = false;
            					}
            				}
            			}
            		}
HXLINE( 271)		{
HXLINE( 271)			int _g9 = (int)0;
HXDLIN( 271)			::Array< ::Dynamic> _g18 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 271)			while((_g9 < _g18->length)){
HXLINE( 271)				 ::kha::FrameTask frameTask1 = _g18->__get(_g9).StaticCast<  ::kha::FrameTask >();
HXDLIN( 271)				_g9 = (_g9 + (int)1);
HXLINE( 272)				if (!(frameTask1->active)) {
HXLINE( 273)					::kha::Scheduler_obj::toDeleteFrame->push(frameTask1);
            				}
            			}
            		}
HXLINE( 277)		while((::kha::Scheduler_obj::toDeleteFrame->length > (int)0)){
HXLINE( 278)			::Array< ::Dynamic> _hx_tmp10 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 278)			_hx_tmp10->remove(::kha::Scheduler_obj::toDeleteFrame->pop().StaticCast<  ::kha::FrameTask >());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,executeFrame,(void))

void Scheduler_obj::executeTimeTasks(Float until){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_282_executeTimeTasks)
HXLINE( 283)		while((::kha::Scheduler_obj::timeTasks->length > (int)0)){
HXLINE( 284)			::kha::Scheduler_obj::activeTimeTask = ::kha::Scheduler_obj::timeTasks->__get((int)0).StaticCast<  ::kha::TimeTask >();
HXLINE( 286)			if ((::kha::Scheduler_obj::activeTimeTask->next <= until)) {
HXLINE( 287)				 ::kha::TimeTask _hx_tmp = ::kha::Scheduler_obj::activeTimeTask;
HXDLIN( 287)				_hx_tmp->next = (_hx_tmp->next + ::kha::Scheduler_obj::activeTimeTask->period);
HXLINE( 288)				::kha::Scheduler_obj::timeTasks->remove(::kha::Scheduler_obj::activeTimeTask);
HXLINE( 290)				bool _hx_tmp1;
HXDLIN( 290)				if (::kha::Scheduler_obj::activeTimeTask->active) {
HXLINE( 290)					_hx_tmp1 = ( (bool)(::kha::Scheduler_obj::activeTimeTask->task()) );
            				}
            				else {
HXLINE( 290)					_hx_tmp1 = false;
            				}
HXDLIN( 290)				if (_hx_tmp1) {
HXLINE( 291)					bool _hx_tmp2;
HXDLIN( 291)					if ((::kha::Scheduler_obj::activeTimeTask->period > (int)0)) {
HXLINE( 291)						if ((::kha::Scheduler_obj::activeTimeTask->duration != (int)0)) {
HXLINE( 291)							Float _hx_tmp3 = ::kha::Scheduler_obj::activeTimeTask->duration;
HXDLIN( 291)							_hx_tmp2 = (_hx_tmp3 >= (::kha::Scheduler_obj::activeTimeTask->start + ::kha::Scheduler_obj::activeTimeTask->next));
            						}
            						else {
HXLINE( 291)							_hx_tmp2 = true;
            						}
            					}
            					else {
HXLINE( 291)						_hx_tmp2 = false;
            					}
HXDLIN( 291)					if (_hx_tmp2) {
HXLINE( 292)						::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,::kha::Scheduler_obj::activeTimeTask);
            					}
            					else {
HXLINE( 295)						::kha::Scheduler_obj::archiveTimeTask(::kha::Scheduler_obj::activeTimeTask,until);
            					}
            				}
            				else {
HXLINE( 299)					::kha::Scheduler_obj::activeTimeTask->active = false;
HXLINE( 300)					::kha::Scheduler_obj::archiveTimeTask(::kha::Scheduler_obj::activeTimeTask,until);
            				}
            			}
            			else {
HXLINE( 304)				goto _hx_goto_28;
            			}
            		}
            		_hx_goto_28:;
HXLINE( 307)		::kha::Scheduler_obj::activeTimeTask = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,executeTimeTasks,(void))

void Scheduler_obj::archiveTimeTask( ::kha::TimeTask timeTask,Float frameEnd){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_310_archiveTimeTask)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,archiveTimeTask,(void))

Float Scheduler_obj::time(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_323_time)
HXDLIN( 323)		return ::kha::Scheduler_obj::current;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,time,return )

Float Scheduler_obj::realTime(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_330_realTime)
HXDLIN( 330)		return ::kha::System_obj::get_time();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,realTime,return )

void Scheduler_obj::resetTime(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_333_resetTime)
HXLINE( 334)		Float now = ::kha::System_obj::get_time();
HXLINE( 335)		Float dif = (now - ::kha::Scheduler_obj::startTime);
HXLINE( 336)		::kha::Scheduler_obj::startTime = now;
HXLINE( 337)		{
HXLINE( 337)			int _g = (int)0;
HXDLIN( 337)			::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 337)			while((_g < _g1->length)){
HXLINE( 337)				 ::kha::TimeTask timeTask = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 337)				_g = (_g + (int)1);
HXLINE( 338)				 ::kha::TimeTask timeTask1 = timeTask;
HXDLIN( 338)				timeTask1->start = (timeTask1->start - dif);
HXLINE( 339)				 ::kha::TimeTask timeTask2 = timeTask;
HXDLIN( 339)				timeTask2->next = (timeTask2->next - dif);
            			}
            		}
HXLINE( 341)		{
HXLINE( 341)			int _g11 = (int)0;
HXDLIN( 341)			int _g2 = ::kha::Scheduler_obj::DIF_COUNT;
HXDLIN( 341)			while((_g11 < _g2)){
HXLINE( 341)				_g11 = (_g11 + (int)1);
HXDLIN( 341)				int i = (_g11 - (int)1);
HXDLIN( 341)				::kha::Scheduler_obj::deltas[i] = (int)0;
            			}
            		}
HXLINE( 342)		::kha::Scheduler_obj::current = (int)0;
HXLINE( 343)		::kha::Scheduler_obj::lastTime = (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,resetTime,(void))

int Scheduler_obj::addBreakableFrameTask( ::Dynamic task,int priority){
            	HX_GC_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_346_addBreakableFrameTask)
HXLINE( 347)		::Array< ::Dynamic> _hx_tmp = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 347)		_hx_tmp->push( ::kha::FrameTask_obj::__alloc( HX_CTX ,task,priority,++::kha::Scheduler_obj::currentFrameTaskId));
HXLINE( 348)		::kha::Scheduler_obj::frame_tasks_sorted = false;
HXLINE( 349)		return ::kha::Scheduler_obj::currentFrameTaskId;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,addBreakableFrameTask,return )

int Scheduler_obj::addFrameTask( ::Dynamic task,int priority){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,task) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_353_addFrameTask)
HXLINE( 354)			task();
HXLINE( 355)			return true;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_353_addFrameTask)
HXDLIN( 353)		return ::kha::Scheduler_obj::addBreakableFrameTask( ::Dynamic(new _hx_Closure_0(task)),priority);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,addFrameTask,return )

void Scheduler_obj::pauseFrameTask(int id,bool paused){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_360_pauseFrameTask)
HXDLIN( 360)		int _g = (int)0;
HXDLIN( 360)		::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 360)		while((_g < _g1->length)){
HXDLIN( 360)			 ::kha::FrameTask frameTask = _g1->__get(_g).StaticCast<  ::kha::FrameTask >();
HXDLIN( 360)			_g = (_g + (int)1);
HXLINE( 361)			if ((frameTask->id == id)) {
HXLINE( 362)				frameTask->paused = paused;
HXLINE( 363)				goto _hx_goto_39;
            			}
            		}
            		_hx_goto_39:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseFrameTask,(void))

void Scheduler_obj::removeFrameTask(int id){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_369_removeFrameTask)
HXDLIN( 369)		int _g = (int)0;
HXDLIN( 369)		::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::frameTasks;
HXDLIN( 369)		while((_g < _g1->length)){
HXDLIN( 369)			 ::kha::FrameTask frameTask = _g1->__get(_g).StaticCast<  ::kha::FrameTask >();
HXDLIN( 369)			_g = (_g + (int)1);
HXLINE( 370)			if ((frameTask->id == id)) {
HXLINE( 371)				frameTask->active = false;
HXLINE( 372)				goto _hx_goto_41;
            			}
            		}
            		_hx_goto_41:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,removeFrameTask,(void))

int Scheduler_obj::generateGroupId(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_378_generateGroupId)
HXDLIN( 378)		return ++::kha::Scheduler_obj::currentGroupId;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,generateGroupId,return )

int Scheduler_obj::addBreakableTimeTaskToGroup(int groupId, ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
Float period = __o_period.Default(0);
Float duration = __o_duration.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_381_addBreakableTimeTaskToGroup)
HXLINE( 382)		 ::kha::TimeTask t =  ::kha::TimeTask_obj::__alloc( HX_CTX );
HXLINE( 383)		t->active = true;
HXLINE( 384)		t->task = task;
HXLINE( 385)		t->id = ++::kha::Scheduler_obj::currentTimeTaskId;
HXLINE( 386)		t->groupId = groupId;
HXLINE( 388)		t->start = (::kha::Scheduler_obj::current + start);
HXLINE( 389)		t->period = (int)0;
HXLINE( 390)		if ((period != (int)0)) {
HXLINE( 390)			t->period = period;
            		}
HXLINE( 391)		t->duration = (int)0;
HXLINE( 392)		if ((duration != (int)0)) {
HXLINE( 392)			t->duration = (t->start + duration);
            		}
HXLINE( 394)		t->next = t->start;
HXLINE( 395)		::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,t);
HXLINE( 396)		return t->id;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Scheduler_obj,addBreakableTimeTaskToGroup,return )

int Scheduler_obj::addTimeTaskToGroup(int groupId, ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,task) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_400_addTimeTaskToGroup)
HXLINE( 401)			task();
HXLINE( 402)			return true;
            		}
            		HX_END_LOCAL_FUNC0(return)

Float period = __o_period.Default(0);
Float duration = __o_duration.Default(0);
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_400_addTimeTaskToGroup)
HXDLIN( 400)		return ::kha::Scheduler_obj::addBreakableTimeTaskToGroup(groupId, ::Dynamic(new _hx_Closure_0(task)),start,period,duration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Scheduler_obj,addTimeTaskToGroup,return )

int Scheduler_obj::addBreakableTimeTask( ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
Float period = __o_period.Default(0);
Float duration = __o_duration.Default(0);
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_407_addBreakableTimeTask)
HXDLIN( 407)		return ::kha::Scheduler_obj::addBreakableTimeTaskToGroup((int)0,task,start,period,duration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Scheduler_obj,addBreakableTimeTask,return )

int Scheduler_obj::addTimeTask( ::Dynamic task,Float start,hx::Null< Float >  __o_period,hx::Null< Float >  __o_duration){
Float period = __o_period.Default(0);
Float duration = __o_duration.Default(0);
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_411_addTimeTask)
HXDLIN( 411)		return ::kha::Scheduler_obj::addTimeTaskToGroup((int)0,task,start,period,duration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Scheduler_obj,addTimeTask,return )

 ::kha::TimeTask Scheduler_obj::getTimeTask(int id){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_414_getTimeTask)
HXLINE( 415)		bool _hx_tmp;
HXDLIN( 415)		if (hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask )) {
HXLINE( 415)			_hx_tmp = (::kha::Scheduler_obj::activeTimeTask->id == id);
            		}
            		else {
HXLINE( 415)			_hx_tmp = false;
            		}
HXDLIN( 415)		if (_hx_tmp) {
HXLINE( 415)			return ::kha::Scheduler_obj::activeTimeTask;
            		}
HXLINE( 416)		{
HXLINE( 416)			int _g = (int)0;
HXDLIN( 416)			::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 416)			while((_g < _g1->length)){
HXLINE( 416)				 ::kha::TimeTask timeTask = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 416)				_g = (_g + (int)1);
HXLINE( 417)				if ((timeTask->id == id)) {
HXLINE( 418)					return timeTask;
            				}
            			}
            		}
HXLINE( 421)		{
HXLINE( 421)			int _g2 = (int)0;
HXDLIN( 421)			::Array< ::Dynamic> _g11 = ::kha::Scheduler_obj::pausedTimeTasks;
HXDLIN( 421)			while((_g2 < _g11->length)){
HXLINE( 421)				 ::kha::TimeTask timeTask1 = _g11->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 421)				_g2 = (_g2 + (int)1);
HXLINE( 422)				if ((timeTask1->id == id)) {
HXLINE( 423)					return timeTask1;
            				}
            			}
            		}
HXLINE( 426)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,getTimeTask,return )

void Scheduler_obj::pauseTimeTask(int id,bool paused){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_429_pauseTimeTask)
HXLINE( 430)		 ::kha::TimeTask timeTask = ::kha::Scheduler_obj::getTimeTask(id);
HXLINE( 431)		if (hx::IsNotNull( timeTask )) {
HXLINE( 432)			::kha::Scheduler_obj::pauseRunningTimeTask(timeTask,paused);
            		}
HXLINE( 434)		bool _hx_tmp;
HXDLIN( 434)		if (hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask )) {
HXLINE( 434)			_hx_tmp = (::kha::Scheduler_obj::activeTimeTask->id == id);
            		}
            		else {
HXLINE( 434)			_hx_tmp = false;
            		}
HXDLIN( 434)		if (_hx_tmp) {
HXLINE( 435)			::kha::Scheduler_obj::activeTimeTask->paused = paused;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseTimeTask,(void))

void Scheduler_obj::pauseRunningTimeTask( ::kha::TimeTask timeTask,bool paused){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_439_pauseRunningTimeTask)
HXLINE( 440)		timeTask->paused = paused;
HXLINE( 441)		if (paused) {
HXLINE( 442)			::kha::Scheduler_obj::timeTasks->remove(timeTask);
HXLINE( 443)			::kha::Scheduler_obj::pausedTimeTasks->push(timeTask);
            		}
            		else {
HXLINE( 446)			::kha::Scheduler_obj::insertSorted(::kha::Scheduler_obj::timeTasks,timeTask);
HXLINE( 447)			::kha::Scheduler_obj::pausedTimeTasks->remove(timeTask);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseRunningTimeTask,(void))

void Scheduler_obj::pauseTimeTasks(int groupId,bool paused){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_451_pauseTimeTasks)
HXLINE( 452)		{
HXLINE( 452)			int _g = (int)0;
HXDLIN( 452)			::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 452)			while((_g < _g1->length)){
HXLINE( 452)				 ::kha::TimeTask timeTask = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 452)				_g = (_g + (int)1);
HXLINE( 453)				if ((timeTask->groupId == groupId)) {
HXLINE( 454)					::kha::Scheduler_obj::pauseRunningTimeTask(timeTask,paused);
            				}
            			}
            		}
HXLINE( 457)		bool _hx_tmp;
HXDLIN( 457)		if (hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask )) {
HXLINE( 457)			_hx_tmp = (::kha::Scheduler_obj::activeTimeTask->groupId == groupId);
            		}
            		else {
HXLINE( 457)			_hx_tmp = false;
            		}
HXDLIN( 457)		if (_hx_tmp) {
HXLINE( 458)			::kha::Scheduler_obj::activeTimeTask->paused = paused;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,pauseTimeTasks,(void))

void Scheduler_obj::removeTimeTask(int id){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_462_removeTimeTask)
HXLINE( 463)		 ::kha::TimeTask timeTask = ::kha::Scheduler_obj::getTimeTask(id);
HXLINE( 464)		if (hx::IsNotNull( timeTask )) {
HXLINE( 465)			timeTask->active = false;
HXLINE( 466)			::kha::Scheduler_obj::timeTasks->remove(timeTask);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,removeTimeTask,(void))

void Scheduler_obj::removeTimeTasks(int groupId){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_470_removeTimeTasks)
HXLINE( 471)		{
HXLINE( 471)			int _g = (int)0;
HXDLIN( 471)			::Array< ::Dynamic> _g1 = ::kha::Scheduler_obj::timeTasks;
HXDLIN( 471)			while((_g < _g1->length)){
HXLINE( 471)				 ::kha::TimeTask timeTask = _g1->__get(_g).StaticCast<  ::kha::TimeTask >();
HXDLIN( 471)				_g = (_g + (int)1);
HXLINE( 472)				if ((timeTask->groupId == groupId)) {
HXLINE( 473)					timeTask->active = false;
HXLINE( 474)					::kha::Scheduler_obj::timeTasksScratchpad->push(timeTask);
            				}
            			}
            		}
HXLINE( 477)		{
HXLINE( 477)			int _g2 = (int)0;
HXDLIN( 477)			::Array< ::Dynamic> _g11 = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 477)			while((_g2 < _g11->length)){
HXLINE( 477)				 ::kha::TimeTask timeTask1 = _g11->__get(_g2).StaticCast<  ::kha::TimeTask >();
HXDLIN( 477)				_g2 = (_g2 + (int)1);
HXLINE( 478)				::kha::Scheduler_obj::timeTasks->remove(timeTask1);
            			}
            		}
HXLINE( 480)		while((::kha::Scheduler_obj::timeTasksScratchpad->length > (int)0)){
HXLINE( 481)			::Array< ::Dynamic> _hx_tmp = ::kha::Scheduler_obj::timeTasksScratchpad;
HXDLIN( 481)			_hx_tmp->remove(::kha::Scheduler_obj::timeTasksScratchpad->__get((int)0).StaticCast<  ::kha::TimeTask >());
            		}
HXLINE( 484)		bool _hx_tmp1;
HXDLIN( 484)		if (hx::IsNotNull( ::kha::Scheduler_obj::activeTimeTask )) {
HXLINE( 484)			_hx_tmp1 = (::kha::Scheduler_obj::activeTimeTask->groupId == groupId);
            		}
            		else {
HXLINE( 484)			_hx_tmp1 = false;
            		}
HXDLIN( 484)		if (_hx_tmp1) {
HXLINE( 485)			::kha::Scheduler_obj::activeTimeTask->active = false;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scheduler_obj,removeTimeTasks,(void))

int Scheduler_obj::numTasksInSchedule(){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_490_numTasksInSchedule)
HXDLIN( 490)		return (::kha::Scheduler_obj::timeTasks->length + ::kha::Scheduler_obj::frameTasks->length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,numTasksInSchedule,return )

void Scheduler_obj::insertSorted(::Array< ::Dynamic> list, ::kha::TimeTask task){
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_493_insertSorted)
HXLINE( 494)		{
HXLINE( 494)			int _g1 = (int)0;
HXDLIN( 494)			int _g = list->length;
HXDLIN( 494)			while((_g1 < _g)){
HXLINE( 494)				_g1 = (_g1 + (int)1);
HXDLIN( 494)				int i = (_g1 - (int)1);
HXLINE( 495)				if ((list->__get(i).StaticCast<  ::kha::TimeTask >()->next > task->next)) {
HXLINE( 496)					list->insert(i,task);
HXLINE( 497)					return;
            				}
            			}
            		}
HXLINE( 500)		list->push(task);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scheduler_obj,insertSorted,(void))

void Scheduler_obj::sortFrameTasks(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::kha::FrameTask a, ::kha::FrameTask b){
            			HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_506_sortFrameTasks)
HXLINE( 506)			if ((a->priority > b->priority)) {
HXLINE( 506)				return (int)1;
            			}
            			else {
HXLINE( 506)				if ((a->priority < b->priority)) {
HXLINE( 506)					return (int)-1;
            				}
            				else {
HXLINE( 506)					return (int)0;
            				}
            			}
HXDLIN( 506)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_503_sortFrameTasks)
HXLINE( 504)		if (::kha::Scheduler_obj::frame_tasks_sorted) {
HXLINE( 504)			return;
            		}
HXLINE( 505)		::kha::Scheduler_obj::frameTasks->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 508)		::kha::Scheduler_obj::frame_tasks_sorted = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Scheduler_obj,sortFrameTasks,(void))


Scheduler_obj::Scheduler_obj()
{
}

bool Scheduler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"warp") ) { outValue = warp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"time") ) { outValue = time_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vsync") ) { outValue = ( vsync ); return true; }
		if (HX_FIELD_EQ(inName,"start") ) { outValue = start_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"deltas") ) { outValue = ( deltas ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { outValue = ( current ); return true; }
		if (HX_FIELD_EQ(inName,"stopped") ) { outValue = ( stopped ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastTime") ) { outValue = ( lastTime ); return true; }
		if (HX_FIELD_EQ(inName,"onedifhz") ) { outValue = ( onedifhz ); return true; }
		if (HX_FIELD_EQ(inName,"realTime") ) { outValue = realTime_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timeTasks") ) { outValue = ( timeTasks ); return true; }
		if (HX_FIELD_EQ(inName,"DIF_COUNT") ) { outValue = ( DIF_COUNT ); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { outValue = ( startTime ); return true; }
		if (HX_FIELD_EQ(inName,"isStopped") ) { outValue = isStopped_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetTime") ) { outValue = resetTime_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameTasks") ) { outValue = ( frameTasks ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addTimeTask") ) { outValue = addTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTimeTask") ) { outValue = getTimeTask_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"maxframetime") ) { outValue = ( maxframetime ); return true; }
		if (HX_FIELD_EQ(inName,"executeFrame") ) { outValue = executeFrame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addFrameTask") ) { outValue = addFrameTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"insertSorted") ) { outValue = insertSorted_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toDeleteFrame") ) { outValue = ( toDeleteFrame ); return true; }
		if (HX_FIELD_EQ(inName,"pauseTimeTask") ) { outValue = pauseTimeTask_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentGroupId") ) { outValue = ( currentGroupId ); return true; }
		if (HX_FIELD_EQ(inName,"activeTimeTask") ) { outValue = ( activeTimeTask ); return true; }
		if (HX_FIELD_EQ(inName,"pauseFrameTask") ) { outValue = pauseFrameTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pauseTimeTasks") ) { outValue = pauseTimeTasks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeTimeTask") ) { outValue = removeTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sortFrameTasks") ) { outValue = sortFrameTasks_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"pausedTimeTasks") ) { outValue = ( pausedTimeTasks ); return true; }
		if (HX_FIELD_EQ(inName,"archiveTimeTask") ) { outValue = archiveTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeFrameTask") ) { outValue = removeFrameTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"generateGroupId") ) { outValue = generateGroupId_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeTimeTasks") ) { outValue = removeTimeTasks_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"executeTimeTasks") ) { outValue = executeTimeTasks_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"outdatedTimeTasks") ) { outValue = ( outdatedTimeTasks ); return true; }
		if (HX_FIELD_EQ(inName,"currentTimeTaskId") ) { outValue = ( currentTimeTaskId ); return true; }
		if (HX_FIELD_EQ(inName,"warpTimeTasksBack") ) { outValue = warpTimeTasksBack_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"frame_tasks_sorted") ) { outValue = ( frame_tasks_sorted ); return true; }
		if (HX_FIELD_EQ(inName,"currentFrameTaskId") ) { outValue = ( currentFrameTaskId ); return true; }
		if (HX_FIELD_EQ(inName,"addTimeTaskToGroup") ) { outValue = addTimeTaskToGroup_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"numTasksInSchedule") ) { outValue = numTasksInSchedule_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"timeTasksScratchpad") ) { outValue = ( timeTasksScratchpad ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"addBreakableTimeTask") ) { outValue = addBreakableTimeTask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pauseRunningTimeTask") ) { outValue = pauseRunningTimeTask_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"addBreakableFrameTask") ) { outValue = addBreakableFrameTask_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"addBreakableTimeTaskToGroup") ) { outValue = addBreakableTimeTaskToGroup_dyn(); return true; }
	}
	return false;
}

bool Scheduler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"vsync") ) { vsync=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"deltas") ) { deltas=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"stopped") ) { stopped=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastTime") ) { lastTime=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"onedifhz") ) { onedifhz=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timeTasks") ) { timeTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"DIF_COUNT") ) { DIF_COUNT=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameTasks") ) { frameTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"maxframetime") ) { maxframetime=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toDeleteFrame") ) { toDeleteFrame=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentGroupId") ) { currentGroupId=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"activeTimeTask") ) { activeTimeTask=ioValue.Cast<  ::kha::TimeTask >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"pausedTimeTasks") ) { pausedTimeTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"outdatedTimeTasks") ) { outdatedTimeTasks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"currentTimeTaskId") ) { currentTimeTaskId=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"frame_tasks_sorted") ) { frame_tasks_sorted=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"currentFrameTaskId") ) { currentFrameTaskId=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"timeTasksScratchpad") ) { timeTasksScratchpad=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Scheduler_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Scheduler_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::timeTasks,HX_HCSTRING("timeTasks","\x41","\x72","\xe1","\xbf")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::pausedTimeTasks,HX_HCSTRING("pausedTimeTasks","\xb3","\x8b","\x45","\xb2")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::outdatedTimeTasks,HX_HCSTRING("outdatedTimeTasks","\xf9","\x7d","\xac","\xed")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::timeTasksScratchpad,HX_HCSTRING("timeTasksScratchpad","\xfa","\x41","\x1b","\x54")},
	{hx::fsFloat,(void *) &Scheduler_obj::timeWarpSaveTime,HX_HCSTRING("timeWarpSaveTime","\xff","\x83","\x49","\xb7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::frameTasks,HX_HCSTRING("frameTasks","\x21","\xd2","\x16","\xee")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Scheduler_obj::toDeleteFrame,HX_HCSTRING("toDeleteFrame","\x47","\xaa","\xe4","\x97")},
	{hx::fsFloat,(void *) &Scheduler_obj::current,HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb")},
	{hx::fsFloat,(void *) &Scheduler_obj::lastTime,HX_HCSTRING("lastTime","\x83","\xe5","\x45","\xe0")},
	{hx::fsBool,(void *) &Scheduler_obj::frame_tasks_sorted,HX_HCSTRING("frame_tasks_sorted","\xa0","\xb7","\x4e","\xb9")},
	{hx::fsBool,(void *) &Scheduler_obj::stopped,HX_HCSTRING("stopped","\x0d","\xd2","\x61","\x43")},
	{hx::fsBool,(void *) &Scheduler_obj::vsync,HX_HCSTRING("vsync","\xd1","\x2d","\xa8","\x3d")},
	{hx::fsFloat,(void *) &Scheduler_obj::onedifhz,HX_HCSTRING("onedifhz","\x6d","\x1e","\xeb","\xe6")},
	{hx::fsInt,(void *) &Scheduler_obj::currentFrameTaskId,HX_HCSTRING("currentFrameTaskId","\xd4","\xca","\x7c","\xdd")},
	{hx::fsInt,(void *) &Scheduler_obj::currentTimeTaskId,HX_HCSTRING("currentTimeTaskId","\x06","\xe4","\x97","\xfc")},
	{hx::fsInt,(void *) &Scheduler_obj::currentGroupId,HX_HCSTRING("currentGroupId","\xc1","\xf5","\x8b","\x94")},
	{hx::fsInt,(void *) &Scheduler_obj::DIF_COUNT,HX_HCSTRING("DIF_COUNT","\xd1","\xab","\x99","\x7a")},
	{hx::fsFloat,(void *) &Scheduler_obj::maxframetime,HX_HCSTRING("maxframetime","\x96","\xdf","\x54","\x45")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &Scheduler_obj::deltas,HX_HCSTRING("deltas","\x7b","\x11","\xe4","\x6a")},
	{hx::fsFloat,(void *) &Scheduler_obj::startTime,HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05")},
	{hx::fsObject /*::kha::TimeTask*/ ,(void *) &Scheduler_obj::activeTimeTask,HX_HCSTRING("activeTimeTask","\xd8","\x75","\xb0","\x05")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Scheduler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Scheduler_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Scheduler_obj::timeTasks,"timeTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::pausedTimeTasks,"pausedTimeTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::outdatedTimeTasks,"outdatedTimeTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::timeTasksScratchpad,"timeTasksScratchpad");
	HX_MARK_MEMBER_NAME(Scheduler_obj::timeWarpSaveTime,"timeWarpSaveTime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::frameTasks,"frameTasks");
	HX_MARK_MEMBER_NAME(Scheduler_obj::toDeleteFrame,"toDeleteFrame");
	HX_MARK_MEMBER_NAME(Scheduler_obj::current,"current");
	HX_MARK_MEMBER_NAME(Scheduler_obj::lastTime,"lastTime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::frame_tasks_sorted,"frame_tasks_sorted");
	HX_MARK_MEMBER_NAME(Scheduler_obj::stopped,"stopped");
	HX_MARK_MEMBER_NAME(Scheduler_obj::vsync,"vsync");
	HX_MARK_MEMBER_NAME(Scheduler_obj::onedifhz,"onedifhz");
	HX_MARK_MEMBER_NAME(Scheduler_obj::currentFrameTaskId,"currentFrameTaskId");
	HX_MARK_MEMBER_NAME(Scheduler_obj::currentTimeTaskId,"currentTimeTaskId");
	HX_MARK_MEMBER_NAME(Scheduler_obj::currentGroupId,"currentGroupId");
	HX_MARK_MEMBER_NAME(Scheduler_obj::DIF_COUNT,"DIF_COUNT");
	HX_MARK_MEMBER_NAME(Scheduler_obj::maxframetime,"maxframetime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::deltas,"deltas");
	HX_MARK_MEMBER_NAME(Scheduler_obj::startTime,"startTime");
	HX_MARK_MEMBER_NAME(Scheduler_obj::activeTimeTask,"activeTimeTask");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Scheduler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Scheduler_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::timeTasks,"timeTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::pausedTimeTasks,"pausedTimeTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::outdatedTimeTasks,"outdatedTimeTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::timeTasksScratchpad,"timeTasksScratchpad");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::timeWarpSaveTime,"timeWarpSaveTime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::frameTasks,"frameTasks");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::toDeleteFrame,"toDeleteFrame");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::current,"current");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::lastTime,"lastTime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::frame_tasks_sorted,"frame_tasks_sorted");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::stopped,"stopped");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::vsync,"vsync");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::onedifhz,"onedifhz");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::currentFrameTaskId,"currentFrameTaskId");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::currentTimeTaskId,"currentTimeTaskId");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::currentGroupId,"currentGroupId");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::DIF_COUNT,"DIF_COUNT");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::maxframetime,"maxframetime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::deltas,"deltas");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::startTime,"startTime");
	HX_VISIT_MEMBER_NAME(Scheduler_obj::activeTimeTask,"activeTimeTask");
};

#endif

hx::Class Scheduler_obj::__mClass;

static ::String Scheduler_obj_sStaticFields[] = {
	HX_HCSTRING("timeTasks","\x41","\x72","\xe1","\xbf"),
	HX_HCSTRING("pausedTimeTasks","\xb3","\x8b","\x45","\xb2"),
	HX_HCSTRING("outdatedTimeTasks","\xf9","\x7d","\xac","\xed"),
	HX_HCSTRING("timeTasksScratchpad","\xfa","\x41","\x1b","\x54"),
	HX_HCSTRING("timeWarpSaveTime","\xff","\x83","\x49","\xb7"),
	HX_HCSTRING("frameTasks","\x21","\xd2","\x16","\xee"),
	HX_HCSTRING("toDeleteFrame","\x47","\xaa","\xe4","\x97"),
	HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"),
	HX_HCSTRING("lastTime","\x83","\xe5","\x45","\xe0"),
	HX_HCSTRING("frame_tasks_sorted","\xa0","\xb7","\x4e","\xb9"),
	HX_HCSTRING("stopped","\x0d","\xd2","\x61","\x43"),
	HX_HCSTRING("vsync","\xd1","\x2d","\xa8","\x3d"),
	HX_HCSTRING("onedifhz","\x6d","\x1e","\xeb","\xe6"),
	HX_HCSTRING("currentFrameTaskId","\xd4","\xca","\x7c","\xdd"),
	HX_HCSTRING("currentTimeTaskId","\x06","\xe4","\x97","\xfc"),
	HX_HCSTRING("currentGroupId","\xc1","\xf5","\x8b","\x94"),
	HX_HCSTRING("DIF_COUNT","\xd1","\xab","\x99","\x7a"),
	HX_HCSTRING("maxframetime","\x96","\xdf","\x54","\x45"),
	HX_HCSTRING("deltas","\x7b","\x11","\xe4","\x6a"),
	HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"),
	HX_HCSTRING("activeTimeTask","\xd8","\x75","\xb0","\x05"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("isStopped","\x43","\x4f","\x60","\x47"),
	HX_HCSTRING("warpTimeTasksBack","\xa0","\x4d","\xe0","\x2f"),
	HX_HCSTRING("warp","\x48","\x62","\xf2","\x4e"),
	HX_HCSTRING("executeFrame","\xb8","\xbd","\x09","\xc1"),
	HX_HCSTRING("executeTimeTasks","\x4c","\xd9","\x20","\xe4"),
	HX_HCSTRING("archiveTimeTask","\xd4","\x63","\x91","\x51"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("realTime","\x8b","\x4a","\x29","\x10"),
	HX_HCSTRING("resetTime","\x7c","\xd5","\xe8","\x92"),
	HX_HCSTRING("addBreakableFrameTask","\x7a","\x2f","\x37","\xf1"),
	HX_HCSTRING("addFrameTask","\xb1","\x9f","\xcb","\x39"),
	HX_HCSTRING("pauseFrameTask","\x3c","\xf8","\xd6","\x43"),
	HX_HCSTRING("removeFrameTask","\x2e","\x19","\x96","\x7b"),
	HX_HCSTRING("generateGroupId","\x45","\xca","\xb1","\x62"),
	HX_HCSTRING("addBreakableTimeTaskToGroup","\x5a","\x97","\xee","\x0d"),
	HX_HCSTRING("addTimeTaskToGroup","\xd1","\x8a","\x93","\x50"),
	HX_HCSTRING("addBreakableTimeTask","\x8a","\xb5","\x5d","\x7b"),
	HX_HCSTRING("addTimeTask","\x33","\x79","\xb4","\x1e"),
	HX_HCSTRING("getTimeTask","\xa8","\x04","\x4c","\x13"),
	HX_HCSTRING("pauseTimeTask","\x08","\xbb","\x22","\xb5"),
	HX_HCSTRING("pauseRunningTimeTask","\xbb","\x78","\x5c","\x93"),
	HX_HCSTRING("pauseTimeTasks","\x6b","\xec","\x40","\xc9"),
	HX_HCSTRING("removeTimeTask","\x56","\x7e","\xae","\xb7"),
	HX_HCSTRING("removeTimeTasks","\x5d","\x0d","\x00","\x01"),
	HX_HCSTRING("numTasksInSchedule","\xe4","\x56","\xab","\x02"),
	HX_HCSTRING("insertSorted","\x56","\xfb","\xc4","\xa6"),
	HX_HCSTRING("sortFrameTasks","\x1f","\x1f","\x22","\x43"),
	::String(null())
};

void Scheduler_obj::__register()
{
	hx::Object *dummy = new Scheduler_obj;
	Scheduler_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.Scheduler","\x51","\x4d","\x26","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Scheduler_obj::__GetStatic;
	__mClass->mSetStaticField = &Scheduler_obj::__SetStatic;
	__mClass->mMarkFunc = Scheduler_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Scheduler_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Scheduler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Scheduler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Scheduler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Scheduler_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Scheduler_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_42_boot)
HXDLIN(  42)		timeWarpSaveTime = ((Float)10.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_60_boot)
HXDLIN(  60)		DIF_COUNT = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_61_boot)
HXDLIN(  61)		maxframetime = ((Float)0.5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_65_boot)
HXDLIN(  65)		startTime = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f04e9fa6a521eb07_67_boot)
HXDLIN(  67)		activeTimeTask = null();
            	}
}

} // end namespace kha
