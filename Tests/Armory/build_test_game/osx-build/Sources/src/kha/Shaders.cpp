// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <kha/internal/BytesBlob.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_6dc83ef3f0d80db1_144_init,"kha.Shaders","init",0xd438187a,"kha.Shaders.init","kha/internal/ShadersBuilder.hx",144,0xb403e06a)
static const ::String _hx_array_data_5c987b44_32[] = {
	HX_("blur_edge_pass.frag.glsl",07,55,ca,e0),
};
static const ::String _hx_array_data_5c987b44_33[] = {
	HX_("compositor_pass.frag.glsl",5b,6b,b7,22),
};
static const ::String _hx_array_data_5c987b44_34[] = {
	HX_("compositor_pass.vert.glsl",7c,c3,ce,5f),
};
static const ::String _hx_array_data_5c987b44_35[] = {
	HX_("deferred_indirect.frag.glsl",7a,9f,41,85),
};
static const ::String _hx_array_data_5c987b44_36[] = {
	HX_("deferred_indirect.vert.glsl",9b,f7,58,c2),
};
static const ::String _hx_array_data_5c987b44_37[] = {
	HX_("deferred_light.frag.glsl",c2,44,51,79),
};
static const ::String _hx_array_data_5c987b44_38[] = {
	HX_("deferred_light_quad.frag.glsl",3c,b9,de,7f),
};
static const ::String _hx_array_data_5c987b44_39[] = {
	HX_("pass.vert.glsl",fe,28,06,07),
};
static const ::String _hx_array_data_5c987b44_40[] = {
	HX_("pass_lamp_volume.vert.glsl",60,84,98,59),
};
static const ::String _hx_array_data_5c987b44_41[] = {
	HX_("pass_viewray.vert.glsl",a4,57,14,03),
};
static const ::String _hx_array_data_5c987b44_42[] = {
	HX_("smaa_blend_weight.frag.glsl",17,1a,89,d2),
};
static const ::String _hx_array_data_5c987b44_43[] = {
	HX_("smaa_blend_weight.vert.glsl",38,72,a0,0f),
};
static const ::String _hx_array_data_5c987b44_44[] = {
	HX_("smaa_edge_detect.frag.glsl",2c,47,81,d1),
};
static const ::String _hx_array_data_5c987b44_45[] = {
	HX_("smaa_edge_detect.vert.glsl",4d,9f,98,0e),
};
static const ::String _hx_array_data_5c987b44_46[] = {
	HX_("smaa_neighborhood_blend.frag.glsl",51,f9,84,bd),
};
static const ::String _hx_array_data_5c987b44_47[] = {
	HX_("smaa_neighborhood_blend.vert.glsl",72,51,9c,fa),
};
static const ::String _hx_array_data_5c987b44_48[] = {
	HX_("ssao_pass.frag.glsl",ae,e7,57,97),
};
static const ::String _hx_array_data_5c987b44_49[] = {
	HX_("world_pass.frag.glsl",6a,6f,f0,1a),
};
static const ::String _hx_array_data_5c987b44_50[] = {
	HX_("world_pass.vert.glsl",8b,c7,07,58),
};
static const ::String _hx_array_data_5c987b44_51[] = {
	HX_("Material_mesh.frag.glsl",b1,58,8e,22),
};
static const ::String _hx_array_data_5c987b44_52[] = {
	HX_("Material_mesh.vert.glsl",d2,b0,a5,5f),
};
static const ::String _hx_array_data_5c987b44_53[] = {
	HX_("Material_shadowmap.frag.glsl",d0,eb,6f,50),
};
static const ::String _hx_array_data_5c987b44_54[] = {
	HX_("Material_shadowmap.vert.glsl",f1,43,87,8d),
};
static const ::String _hx_array_data_5c987b44_55[] = {
	HX_("painter-colored.vert.glsl",6d,c3,6a,24),
};
static const ::String _hx_array_data_5c987b44_56[] = {
	HX_("painter-colored.frag.glsl",4c,6b,53,e7),
};
static const ::String _hx_array_data_5c987b44_57[] = {
	HX_("painter-image.frag.glsl",e5,4f,cb,b1),
};
static const ::String _hx_array_data_5c987b44_58[] = {
	HX_("painter-image.vert.glsl",06,a8,e2,ee),
};
static const ::String _hx_array_data_5c987b44_59[] = {
	HX_("painter-text.frag.glsl",7b,b9,81,77),
};
static const ::String _hx_array_data_5c987b44_60[] = {
	HX_("painter-text.vert.glsl",9c,11,99,b4),
};
static const ::String _hx_array_data_5c987b44_61[] = {
	HX_("painter-video.frag.glsl",05,ed,4f,8e),
};
static const ::String _hx_array_data_5c987b44_62[] = {
	HX_("painter-video.vert.glsl",26,45,67,cb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_6dc83ef3f0d80db1_37_boot,"kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",37,0xb403e06a)
HX_LOCAL_STACK_FRAME(_hx_pos_6dc83ef3f0d80db1_163_boot,"kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",163,0xb403e06a)
HX_LOCAL_STACK_FRAME(_hx_pos_6dc83ef3f0d80db1_140_boot,"kha.Shaders","boot",0xcf98619c,"kha.Shaders.boot","kha/internal/ShadersBuilder.hx",140,0xb403e06a)
namespace kha{

void Shaders_obj::__construct() { }

Dynamic Shaders_obj::__CreateEmpty() { return new Shaders_obj; }

void *Shaders_obj::_hx_vtable = 0;

Dynamic Shaders_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shaders_obj > _hx_result = new Shaders_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Shaders_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1cef2af2;
}

::String Shaders_obj::blur_edge_pass_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::blur_edge_pass_frag;

::String Shaders_obj::compositor_pass_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::compositor_pass_frag;

::String Shaders_obj::compositor_pass_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::compositor_pass_vert;

::String Shaders_obj::deferred_indirect_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::deferred_indirect_frag;

::String Shaders_obj::deferred_indirect_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::deferred_indirect_vert;

::String Shaders_obj::deferred_light_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::deferred_light_frag;

::String Shaders_obj::deferred_light_quad_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::deferred_light_quad_frag;

::String Shaders_obj::pass_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::pass_vert;

::String Shaders_obj::pass_lamp_volume_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::pass_lamp_volume_vert;

::String Shaders_obj::pass_viewray_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::pass_viewray_vert;

::String Shaders_obj::smaa_blend_weight_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::smaa_blend_weight_frag;

::String Shaders_obj::smaa_blend_weight_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::smaa_blend_weight_vert;

::String Shaders_obj::smaa_edge_detect_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::smaa_edge_detect_frag;

::String Shaders_obj::smaa_edge_detect_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::smaa_edge_detect_vert;

::String Shaders_obj::smaa_neighborhood_blend_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::smaa_neighborhood_blend_frag;

::String Shaders_obj::smaa_neighborhood_blend_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::smaa_neighborhood_blend_vert;

::String Shaders_obj::ssao_pass_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::ssao_pass_frag;

::String Shaders_obj::world_pass_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::world_pass_frag;

::String Shaders_obj::world_pass_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::world_pass_vert;

::String Shaders_obj::Material_mesh_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::Material_mesh_frag;

::String Shaders_obj::Material_mesh_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::Material_mesh_vert;

::String Shaders_obj::Material_shadowmap_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::Material_shadowmap_frag;

::String Shaders_obj::Material_shadowmap_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::Material_shadowmap_vert;

::String Shaders_obj::painter_colored_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::painter_colored_vert;

::String Shaders_obj::painter_colored_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::painter_colored_frag;

::String Shaders_obj::painter_image_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::painter_image_frag;

::String Shaders_obj::painter_image_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::painter_image_vert;

::String Shaders_obj::painter_text_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::painter_text_frag;

::String Shaders_obj::painter_text_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::painter_text_vert;

::String Shaders_obj::painter_video_fragData0;

 ::kha::graphics4::FragmentShader Shaders_obj::painter_video_frag;

::String Shaders_obj::painter_video_vertData0;

 ::kha::graphics4::VertexShader Shaders_obj::painter_video_vert;

void Shaders_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_144_init)
HXLINE( 167)		{
HXDLIN( 144)			{
HXLINE( 167)				{
HXDLIN( 144)					{
HXLINE( 167)						{
HXLINE( 167)							{
HXDLIN( 144)								{
HXDLIN( 144)									{
HXLINE( 167)										{
HXDLIN( 144)											{
HXLINE( 167)												{
HXDLIN( 144)													{
HXLINE( 167)														{
HXLINE( 167)															{
HXDLIN( 144)																{
HXLINE( 167)																	{
HXDLIN( 144)																		{
HXLINE( 167)																			{
HXDLIN( 144)																				{
HXLINE( 167)																					{
HXDLIN( 144)																						{
HXDLIN( 144)																							{
HXDLIN( 144)																								{
HXLINE( 167)																									{
HXLINE( 167)																										{
HXDLIN( 144)																											{
HXLINE( 167)																												{
HXDLIN( 144)																													{
HXLINE( 167)																														{
HXLINE( 169)																															{
HXLINE( 170)																																::Array< ::Dynamic> blobs = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)																																{
HXLINE( 171)																																	int _g = (int)0;
HXDLIN( 171)																																	while((_g < (int)1)){
HXLINE( 171)																																		_g = (_g + (int)1);
HXDLIN( 171)																																		int i = (_g - (int)1);
HXLINE( 172)																																		::String data = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("blur_edge_pass_fragData",00,bc,99,30) + i))) );
HXLINE( 173)																																		 ::haxe::io::Bytes bytes = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data)) );
HXLINE( 174)																																		blobs->push(::kha::internal::BytesBlob_obj::fromBytes(bytes));
            																																	}
            																																}
HXLINE( 176)																																::kha::Shaders_obj::blur_edge_pass_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_32,1));
            																															}
HXLINE( 169)																															{
HXLINE( 170)																																::Array< ::Dynamic> blobs1 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)																																{
HXLINE( 171)																																	int _g1 = (int)0;
HXDLIN( 171)																																	while((_g1 < (int)1)){
HXLINE( 171)																																		_g1 = (_g1 + (int)1);
HXDLIN( 171)																																		int i1 = (_g1 - (int)1);
HXLINE( 172)																																		::String data1 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("compositor_pass_fragData",2c,cc,9a,0f) + i1))) );
HXLINE( 173)																																		 ::haxe::io::Bytes bytes1 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data1)) );
HXLINE( 174)																																		blobs1->push(::kha::internal::BytesBlob_obj::fromBytes(bytes1));
            																																	}
            																																}
HXLINE( 176)																																::kha::Shaders_obj::compositor_pass_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs1,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_33,1));
            																															}
            																														}
HXLINE( 146)																														{
HXLINE( 147)																															::Array< ::Dynamic> blobs2 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)																															{
HXLINE( 148)																																int _g2 = (int)0;
HXDLIN( 148)																																while((_g2 < (int)1)){
HXLINE( 148)																																	_g2 = (_g2 + (int)1);
HXDLIN( 148)																																	int i2 = (_g2 - (int)1);
HXLINE( 149)																																	::String data2 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("compositor_pass_vertData",2b,93,71,ce) + i2))) );
HXLINE( 150)																																	 ::haxe::io::Bytes bytes2 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data2)) );
HXLINE( 151)																																	blobs2->push(::kha::internal::BytesBlob_obj::fromBytes(bytes2));
            																																}
            																															}
HXLINE( 153)																															::kha::Shaders_obj::compositor_pass_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs2,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_34,1));
            																														}
            																													}
HXLINE( 169)																													{
HXLINE( 170)																														::Array< ::Dynamic> blobs3 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)																														{
HXLINE( 171)																															int _g3 = (int)0;
HXDLIN( 171)																															while((_g3 < (int)1)){
HXLINE( 171)																																_g3 = (_g3 + (int)1);
HXDLIN( 171)																																int i3 = (_g3 - (int)1);
HXLINE( 172)																																::String data3 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("deferred_indirect_fragData",ed,c0,86,1b) + i3))) );
HXLINE( 173)																																 ::haxe::io::Bytes bytes3 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data3)) );
HXLINE( 174)																																blobs3->push(::kha::internal::BytesBlob_obj::fromBytes(bytes3));
            																															}
            																														}
HXLINE( 176)																														::kha::Shaders_obj::deferred_indirect_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs3,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_35,1));
            																													}
            																												}
HXLINE( 146)																												{
HXLINE( 147)																													::Array< ::Dynamic> blobs4 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)																													{
HXLINE( 148)																														int _g4 = (int)0;
HXDLIN( 148)																														while((_g4 < (int)1)){
HXLINE( 148)																															_g4 = (_g4 + (int)1);
HXDLIN( 148)																															int i4 = (_g4 - (int)1);
HXLINE( 149)																															::String data4 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("deferred_indirect_vertData",ec,87,5d,da) + i4))) );
HXLINE( 150)																															 ::haxe::io::Bytes bytes4 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data4)) );
HXLINE( 151)																															blobs4->push(::kha::internal::BytesBlob_obj::fromBytes(bytes4));
            																														}
            																													}
HXLINE( 153)																													::kha::Shaders_obj::deferred_indirect_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs4,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_36,1));
            																												}
            																											}
HXLINE( 169)																											{
HXLINE( 170)																												::Array< ::Dynamic> blobs5 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)																												{
HXLINE( 171)																													int _g5 = (int)0;
HXDLIN( 171)																													while((_g5 < (int)1)){
HXLINE( 171)																														_g5 = (_g5 + (int)1);
HXDLIN( 171)																														int i5 = (_g5 - (int)1);
HXLINE( 172)																														::String data5 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("deferred_light_fragData",a5,5c,ff,f0) + i5))) );
HXLINE( 173)																														 ::haxe::io::Bytes bytes5 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data5)) );
HXLINE( 174)																														blobs5->push(::kha::internal::BytesBlob_obj::fromBytes(bytes5));
            																													}
            																												}
HXLINE( 176)																												::kha::Shaders_obj::deferred_light_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs5,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_37,1));
            																											}
            																										}
HXLINE( 169)																										{
HXLINE( 170)																											::Array< ::Dynamic> blobs6 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)																											{
HXLINE( 171)																												int _g6 = (int)0;
HXDLIN( 171)																												while((_g6 < (int)1)){
HXLINE( 171)																													_g6 = (_g6 + (int)1);
HXDLIN( 171)																													int i6 = (_g6 - (int)1);
HXLINE( 172)																													::String data6 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("deferred_light_quad_fragData",6b,95,23,ea) + i6))) );
HXLINE( 173)																													 ::haxe::io::Bytes bytes6 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data6)) );
HXLINE( 174)																													blobs6->push(::kha::internal::BytesBlob_obj::fromBytes(bytes6));
            																												}
            																											}
HXLINE( 176)																											::kha::Shaders_obj::deferred_light_quad_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs6,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_38,1));
            																										}
            																									}
HXLINE( 146)																									{
HXLINE( 147)																										::Array< ::Dynamic> blobs7 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)																										{
HXLINE( 148)																											int _g7 = (int)0;
HXDLIN( 148)																											while((_g7 < (int)1)){
HXLINE( 148)																												_g7 = (_g7 + (int)1);
HXDLIN( 148)																												int i7 = (_g7 - (int)1);
HXLINE( 149)																												::String data7 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("pass_vertData",e9,d3,52,4c) + i7))) );
HXLINE( 150)																												 ::haxe::io::Bytes bytes7 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data7)) );
HXLINE( 151)																												blobs7->push(::kha::internal::BytesBlob_obj::fromBytes(bytes7));
            																											}
            																										}
HXLINE( 153)																										::kha::Shaders_obj::pass_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs7,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_39,1));
            																									}
            																								}
HXLINE( 146)																								{
HXLINE( 147)																									::Array< ::Dynamic> blobs8 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)																									{
HXLINE( 148)																										int _g8 = (int)0;
HXDLIN( 148)																										while((_g8 < (int)1)){
HXLINE( 148)																											_g8 = (_g8 + (int)1);
HXDLIN( 148)																											int i8 = (_g8 - (int)1);
HXLINE( 149)																											::String data8 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("pass_lamp_volume_vertData",c7,7a,72,f5) + i8))) );
HXLINE( 150)																											 ::haxe::io::Bytes bytes8 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data8)) );
HXLINE( 151)																											blobs8->push(::kha::internal::BytesBlob_obj::fromBytes(bytes8));
            																										}
            																									}
HXLINE( 153)																									::kha::Shaders_obj::pass_lamp_volume_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs8,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_40,1));
            																								}
            																							}
HXLINE( 146)																							{
HXLINE( 147)																								::Array< ::Dynamic> blobs9 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)																								{
HXLINE( 148)																									int _g9 = (int)0;
HXDLIN( 148)																									while((_g9 < (int)1)){
HXLINE( 148)																										_g9 = (_g9 + (int)1);
HXDLIN( 148)																										int i9 = (_g9 - (int)1);
HXLINE( 149)																										::String data9 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("pass_viewray_vertData",03,bc,8f,65) + i9))) );
HXLINE( 150)																										 ::haxe::io::Bytes bytes9 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data9)) );
HXLINE( 151)																										blobs9->push(::kha::internal::BytesBlob_obj::fromBytes(bytes9));
            																									}
            																								}
HXLINE( 153)																								::kha::Shaders_obj::pass_viewray_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs9,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_41,1));
            																							}
            																						}
HXLINE( 169)																						{
HXLINE( 170)																							::Array< ::Dynamic> blobs10 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)																							{
HXLINE( 171)																								int _g10 = (int)0;
HXDLIN( 171)																								while((_g10 < (int)1)){
HXLINE( 171)																									_g10 = (_g10 + (int)1);
HXDLIN( 171)																									int i10 = (_g10 - (int)1);
HXLINE( 172)																									::String data10 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("smaa_blend_weight_fragData",f0,48,d6,13) + i10))) );
HXLINE( 173)																									 ::haxe::io::Bytes bytes10 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data10)) );
HXLINE( 174)																									blobs10->push(::kha::internal::BytesBlob_obj::fromBytes(bytes10));
            																								}
            																							}
HXLINE( 176)																							::kha::Shaders_obj::smaa_blend_weight_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs10,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_42,1));
            																						}
            																					}
HXLINE( 146)																					{
HXLINE( 147)																						::Array< ::Dynamic> blobs11 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)																						{
HXLINE( 148)																							int _g11 = (int)0;
HXDLIN( 148)																							while((_g11 < (int)1)){
HXLINE( 148)																								_g11 = (_g11 + (int)1);
HXDLIN( 148)																								int i11 = (_g11 - (int)1);
HXLINE( 149)																								::String data11 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("smaa_blend_weight_vertData",ef,0f,ad,d2) + i11))) );
HXLINE( 150)																								 ::haxe::io::Bytes bytes11 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data11)) );
HXLINE( 151)																								blobs11->push(::kha::internal::BytesBlob_obj::fromBytes(bytes11));
            																							}
            																						}
HXLINE( 153)																						::kha::Shaders_obj::smaa_blend_weight_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs11,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_43,1));
            																					}
            																				}
HXLINE( 169)																				{
HXLINE( 170)																					::Array< ::Dynamic> blobs12 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)																					{
HXLINE( 171)																						int _g12 = (int)0;
HXDLIN( 171)																						while((_g12 < (int)1)){
HXLINE( 171)																							_g12 = (_g12 + (int)1);
HXDLIN( 171)																							int i12 = (_g12 - (int)1);
HXLINE( 172)																							::String data12 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("smaa_edge_detect_fragData",7b,15,51,00) + i12))) );
HXLINE( 173)																							 ::haxe::io::Bytes bytes12 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data12)) );
HXLINE( 174)																							blobs12->push(::kha::internal::BytesBlob_obj::fromBytes(bytes12));
            																						}
            																					}
HXLINE( 176)																					::kha::Shaders_obj::smaa_edge_detect_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs12,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_44,1));
            																				}
            																			}
HXLINE( 146)																			{
HXLINE( 147)																				::Array< ::Dynamic> blobs13 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)																				{
HXLINE( 148)																					int _g13 = (int)0;
HXDLIN( 148)																					while((_g13 < (int)1)){
HXLINE( 148)																						_g13 = (_g13 + (int)1);
HXDLIN( 148)																						int i13 = (_g13 - (int)1);
HXLINE( 149)																						::String data13 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("smaa_edge_detect_vertData",7a,dc,27,bf) + i13))) );
HXLINE( 150)																						 ::haxe::io::Bytes bytes13 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data13)) );
HXLINE( 151)																						blobs13->push(::kha::internal::BytesBlob_obj::fromBytes(bytes13));
            																					}
            																				}
HXLINE( 153)																				::kha::Shaders_obj::smaa_edge_detect_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs13,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_45,1));
            																			}
            																		}
HXLINE( 169)																		{
HXLINE( 170)																			::Array< ::Dynamic> blobs14 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)																			{
HXLINE( 171)																				int _g14 = (int)0;
HXDLIN( 171)																				while((_g14 < (int)1)){
HXLINE( 171)																					_g14 = (_g14 + (int)1);
HXDLIN( 171)																					int i14 = (_g14 - (int)1);
HXLINE( 172)																					::String data14 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("smaa_neighborhood_blend_fragData",f6,ae,93,8e) + i14))) );
HXLINE( 173)																					 ::haxe::io::Bytes bytes14 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data14)) );
HXLINE( 174)																					blobs14->push(::kha::internal::BytesBlob_obj::fromBytes(bytes14));
            																				}
            																			}
HXLINE( 176)																			::kha::Shaders_obj::smaa_neighborhood_blend_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs14,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_46,1));
            																		}
            																	}
HXLINE( 146)																	{
HXLINE( 147)																		::Array< ::Dynamic> blobs15 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)																		{
HXLINE( 148)																			int _g15 = (int)0;
HXDLIN( 148)																			while((_g15 < (int)1)){
HXLINE( 148)																				_g15 = (_g15 + (int)1);
HXDLIN( 148)																				int i15 = (_g15 - (int)1);
HXLINE( 149)																				::String data15 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("smaa_neighborhood_blend_vertData",f5,75,6a,4d) + i15))) );
HXLINE( 150)																				 ::haxe::io::Bytes bytes15 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data15)) );
HXLINE( 151)																				blobs15->push(::kha::internal::BytesBlob_obj::fromBytes(bytes15));
            																			}
            																		}
HXLINE( 153)																		::kha::Shaders_obj::smaa_neighborhood_blend_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs15,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_47,1));
            																	}
            																}
HXLINE( 169)																{
HXLINE( 170)																	::Array< ::Dynamic> blobs16 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)																	{
HXLINE( 171)																		int _g16 = (int)0;
HXDLIN( 171)																		while((_g16 < (int)1)){
HXLINE( 171)																			_g16 = (_g16 + (int)1);
HXDLIN( 171)																			int i16 = (_g16 - (int)1);
HXLINE( 172)																			::String data16 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("ssao_pass_fragData",39,7b,93,f4) + i16))) );
HXLINE( 173)																			 ::haxe::io::Bytes bytes16 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data16)) );
HXLINE( 174)																			blobs16->push(::kha::internal::BytesBlob_obj::fromBytes(bytes16));
            																		}
            																	}
HXLINE( 176)																	::kha::Shaders_obj::ssao_pass_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs16,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_48,1));
            																}
            															}
HXLINE( 169)															{
HXLINE( 170)																::Array< ::Dynamic> blobs17 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)																{
HXLINE( 171)																	int _g17 = (int)0;
HXDLIN( 171)																	while((_g17 < (int)1)){
HXLINE( 171)																		_g17 = (_g17 + (int)1);
HXDLIN( 171)																		int i17 = (_g17 - (int)1);
HXLINE( 172)																		::String data17 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("world_pass_fragData",fd,3e,66,a9) + i17))) );
HXLINE( 173)																		 ::haxe::io::Bytes bytes17 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data17)) );
HXLINE( 174)																		blobs17->push(::kha::internal::BytesBlob_obj::fromBytes(bytes17));
            																	}
            																}
HXLINE( 176)																::kha::Shaders_obj::world_pass_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs17,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_49,1));
            															}
            														}
HXLINE( 146)														{
HXLINE( 147)															::Array< ::Dynamic> blobs18 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)															{
HXLINE( 148)																int _g18 = (int)0;
HXDLIN( 148)																while((_g18 < (int)1)){
HXLINE( 148)																	_g18 = (_g18 + (int)1);
HXDLIN( 148)																	int i18 = (_g18 - (int)1);
HXLINE( 149)																	::String data18 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("world_pass_vertData",fc,05,3d,68) + i18))) );
HXLINE( 150)																	 ::haxe::io::Bytes bytes18 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data18)) );
HXLINE( 151)																	blobs18->push(::kha::internal::BytesBlob_obj::fromBytes(bytes18));
            																}
            															}
HXLINE( 153)															::kha::Shaders_obj::world_pass_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs18,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_50,1));
            														}
            													}
HXLINE( 169)													{
HXLINE( 170)														::Array< ::Dynamic> blobs19 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)														{
HXLINE( 171)															int _g19 = (int)0;
HXDLIN( 171)															while((_g19 < (int)1)){
HXLINE( 171)																_g19 = (_g19 + (int)1);
HXDLIN( 171)																int i19 = (_g19 - (int)1);
HXLINE( 172)																::String data19 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("Material_mesh_fragData",96,5b,81,b9) + i19))) );
HXLINE( 173)																 ::haxe::io::Bytes bytes19 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data19)) );
HXLINE( 174)																blobs19->push(::kha::internal::BytesBlob_obj::fromBytes(bytes19));
            															}
            														}
HXLINE( 176)														::kha::Shaders_obj::Material_mesh_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs19,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_51,1));
            													}
            												}
HXLINE( 146)												{
HXLINE( 147)													::Array< ::Dynamic> blobs20 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)													{
HXLINE( 148)														int _g20 = (int)0;
HXDLIN( 148)														while((_g20 < (int)1)){
HXLINE( 148)															_g20 = (_g20 + (int)1);
HXDLIN( 148)															int i20 = (_g20 - (int)1);
HXLINE( 149)															::String data20 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("Material_mesh_vertData",95,22,58,78) + i20))) );
HXLINE( 150)															 ::haxe::io::Bytes bytes20 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data20)) );
HXLINE( 151)															blobs20->push(::kha::internal::BytesBlob_obj::fromBytes(bytes20));
            														}
            													}
HXLINE( 153)													::kha::Shaders_obj::Material_mesh_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs20,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_52,1));
            												}
            											}
HXLINE( 169)											{
HXLINE( 170)												::Array< ::Dynamic> blobs21 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)												{
HXLINE( 171)													int _g21 = (int)0;
HXDLIN( 171)													while((_g21 < (int)1)){
HXLINE( 171)														_g21 = (_g21 + (int)1);
HXDLIN( 171)														int i21 = (_g21 - (int)1);
HXLINE( 172)														::String data21 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("Material_shadowmap_fragData",57,d1,66,14) + i21))) );
HXLINE( 173)														 ::haxe::io::Bytes bytes21 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data21)) );
HXLINE( 174)														blobs21->push(::kha::internal::BytesBlob_obj::fromBytes(bytes21));
            													}
            												}
HXLINE( 176)												::kha::Shaders_obj::Material_shadowmap_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs21,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_53,1));
            											}
            										}
HXLINE( 146)										{
HXLINE( 147)											::Array< ::Dynamic> blobs22 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)											{
HXLINE( 148)												int _g22 = (int)0;
HXDLIN( 148)												while((_g22 < (int)1)){
HXLINE( 148)													_g22 = (_g22 + (int)1);
HXDLIN( 148)													int i22 = (_g22 - (int)1);
HXLINE( 149)													::String data22 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("Material_shadowmap_vertData",56,98,3d,d3) + i22))) );
HXLINE( 150)													 ::haxe::io::Bytes bytes22 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data22)) );
HXLINE( 151)													blobs22->push(::kha::internal::BytesBlob_obj::fromBytes(bytes22));
            												}
            											}
HXLINE( 153)											::kha::Shaders_obj::Material_shadowmap_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs22,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_54,1));
            										}
            									}
HXLINE( 146)									{
HXLINE( 147)										::Array< ::Dynamic> blobs23 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)										{
HXLINE( 148)											int _g23 = (int)0;
HXDLIN( 148)											while((_g23 < (int)1)){
HXLINE( 148)												_g23 = (_g23 + (int)1);
HXDLIN( 148)												int i23 = (_g23 - (int)1);
HXLINE( 149)												::String data23 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("painter_colored_vertData",8c,a0,fc,4b) + i23))) );
HXLINE( 150)												 ::haxe::io::Bytes bytes23 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data23)) );
HXLINE( 151)												blobs23->push(::kha::internal::BytesBlob_obj::fromBytes(bytes23));
            											}
            										}
HXLINE( 153)										::kha::Shaders_obj::painter_colored_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs23,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_55,1));
            									}
            								}
HXLINE( 169)								{
HXLINE( 170)									::Array< ::Dynamic> blobs24 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)									{
HXLINE( 171)										int _g24 = (int)0;
HXDLIN( 171)										while((_g24 < (int)1)){
HXLINE( 171)											_g24 = (_g24 + (int)1);
HXDLIN( 171)											int i24 = (_g24 - (int)1);
HXLINE( 172)											::String data24 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("painter_colored_fragData",8d,d9,25,8d) + i24))) );
HXLINE( 173)											 ::haxe::io::Bytes bytes24 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data24)) );
HXLINE( 174)											blobs24->push(::kha::internal::BytesBlob_obj::fromBytes(bytes24));
            										}
            									}
HXLINE( 176)									::kha::Shaders_obj::painter_colored_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs24,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_56,1));
            								}
            							}
HXLINE( 169)							{
HXLINE( 170)								::Array< ::Dynamic> blobs25 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)								{
HXLINE( 171)									int _g25 = (int)0;
HXDLIN( 171)									while((_g25 < (int)1)){
HXLINE( 171)										_g25 = (_g25 + (int)1);
HXDLIN( 171)										int i25 = (_g25 - (int)1);
HXLINE( 172)										::String data25 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("painter_image_fragData",94,7a,37,e2) + i25))) );
HXLINE( 173)										 ::haxe::io::Bytes bytes25 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data25)) );
HXLINE( 174)										blobs25->push(::kha::internal::BytesBlob_obj::fromBytes(bytes25));
            									}
            								}
HXLINE( 176)								::kha::Shaders_obj::painter_image_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs25,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_57,1));
            							}
            						}
HXLINE( 146)						{
HXLINE( 147)							::Array< ::Dynamic> blobs26 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)							{
HXLINE( 148)								int _g26 = (int)0;
HXDLIN( 148)								while((_g26 < (int)1)){
HXLINE( 148)									_g26 = (_g26 + (int)1);
HXDLIN( 148)									int i26 = (_g26 - (int)1);
HXLINE( 149)									::String data26 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("painter_image_vertData",93,41,0e,a1) + i26))) );
HXLINE( 150)									 ::haxe::io::Bytes bytes26 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data26)) );
HXLINE( 151)									blobs26->push(::kha::internal::BytesBlob_obj::fromBytes(bytes26));
            								}
            							}
HXLINE( 153)							::kha::Shaders_obj::painter_image_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs26,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_58,1));
            						}
            					}
HXLINE( 169)					{
HXLINE( 170)						::Array< ::Dynamic> blobs27 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)						{
HXLINE( 171)							int _g27 = (int)0;
HXDLIN( 171)							while((_g27 < (int)1)){
HXLINE( 171)								_g27 = (_g27 + (int)1);
HXDLIN( 171)								int i27 = (_g27 - (int)1);
HXLINE( 172)								::String data27 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("painter_text_fragData",9a,ea,65,f3) + i27))) );
HXLINE( 173)								 ::haxe::io::Bytes bytes27 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data27)) );
HXLINE( 174)								blobs27->push(::kha::internal::BytesBlob_obj::fromBytes(bytes27));
            							}
            						}
HXLINE( 176)						::kha::Shaders_obj::painter_text_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs27,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_59,1));
            					}
            				}
HXLINE( 146)				{
HXLINE( 147)					::Array< ::Dynamic> blobs28 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)					{
HXLINE( 148)						int _g28 = (int)0;
HXDLIN( 148)						while((_g28 < (int)1)){
HXLINE( 148)							_g28 = (_g28 + (int)1);
HXDLIN( 148)							int i28 = (_g28 - (int)1);
HXLINE( 149)							::String data28 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("painter_text_vertData",99,b1,3c,b2) + i28))) );
HXLINE( 150)							 ::haxe::io::Bytes bytes28 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data28)) );
HXLINE( 151)							blobs28->push(::kha::internal::BytesBlob_obj::fromBytes(bytes28));
            						}
            					}
HXLINE( 153)					::kha::Shaders_obj::painter_text_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs28,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_60,1));
            				}
            			}
HXLINE( 169)			{
HXLINE( 170)				::Array< ::Dynamic> blobs29 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 171)				{
HXLINE( 171)					int _g29 = (int)0;
HXDLIN( 171)					while((_g29 < (int)1)){
HXLINE( 171)						_g29 = (_g29 + (int)1);
HXDLIN( 171)						int i29 = (_g29 - (int)1);
HXLINE( 172)						::String data29 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("painter_video_fragData",74,e1,6c,f4) + i29))) );
HXLINE( 173)						 ::haxe::io::Bytes bytes29 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data29)) );
HXLINE( 174)						blobs29->push(::kha::internal::BytesBlob_obj::fromBytes(bytes29));
            					}
            				}
HXLINE( 176)				::kha::Shaders_obj::painter_video_frag =  ::kha::graphics4::FragmentShader_obj::__alloc( HX_CTX ,blobs29,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_61,1));
            			}
            		}
HXLINE( 146)		{
HXLINE( 147)			::Array< ::Dynamic> blobs30 = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)			{
HXLINE( 148)				int _g30 = (int)0;
HXDLIN( 148)				while((_g30 < (int)1)){
HXLINE( 148)					_g30 = (_g30 + (int)1);
HXDLIN( 148)					int i30 = (_g30 - (int)1);
HXLINE( 149)					::String data30 = ( (::String)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(HX_("painter_video_vertData",73,a8,43,b3) + i30))) );
HXLINE( 150)					 ::haxe::io::Bytes bytes30 = ( ( ::haxe::io::Bytes)(::haxe::Unserializer_obj::run(data30)) );
HXLINE( 151)					blobs30->push(::kha::internal::BytesBlob_obj::fromBytes(bytes30));
            				}
            			}
HXLINE( 153)			::kha::Shaders_obj::painter_video_vert =  ::kha::graphics4::VertexShader_obj::__alloc( HX_CTX ,blobs30,::Array_obj< ::String >::fromData( _hx_array_data_5c987b44_62,1));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Shaders_obj,init,(void))


Shaders_obj::Shaders_obj()
{
}

bool Shaders_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pass_vert") ) { outValue = ( pass_vert ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pass_vertData0") ) { outValue = ( pass_vertData0 ); return true; }
		if (HX_FIELD_EQ(inName,"ssao_pass_frag") ) { outValue = ( ssao_pass_frag ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"world_pass_frag") ) { outValue = ( world_pass_frag ); return true; }
		if (HX_FIELD_EQ(inName,"world_pass_vert") ) { outValue = ( world_pass_vert ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"pass_viewray_vert") ) { outValue = ( pass_viewray_vert ); return true; }
		if (HX_FIELD_EQ(inName,"painter_text_frag") ) { outValue = ( painter_text_frag ); return true; }
		if (HX_FIELD_EQ(inName,"painter_text_vert") ) { outValue = ( painter_text_vert ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"Material_mesh_frag") ) { outValue = ( Material_mesh_frag ); return true; }
		if (HX_FIELD_EQ(inName,"Material_mesh_vert") ) { outValue = ( Material_mesh_vert ); return true; }
		if (HX_FIELD_EQ(inName,"painter_image_frag") ) { outValue = ( painter_image_frag ); return true; }
		if (HX_FIELD_EQ(inName,"painter_image_vert") ) { outValue = ( painter_image_vert ); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_frag") ) { outValue = ( painter_video_frag ); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_vert") ) { outValue = ( painter_video_vert ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"blur_edge_pass_frag") ) { outValue = ( blur_edge_pass_frag ); return true; }
		if (HX_FIELD_EQ(inName,"deferred_light_frag") ) { outValue = ( deferred_light_frag ); return true; }
		if (HX_FIELD_EQ(inName,"ssao_pass_fragData0") ) { outValue = ( ssao_pass_fragData0 ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"compositor_pass_frag") ) { outValue = ( compositor_pass_frag ); return true; }
		if (HX_FIELD_EQ(inName,"compositor_pass_vert") ) { outValue = ( compositor_pass_vert ); return true; }
		if (HX_FIELD_EQ(inName,"world_pass_fragData0") ) { outValue = ( world_pass_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"world_pass_vertData0") ) { outValue = ( world_pass_vertData0 ); return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_vert") ) { outValue = ( painter_colored_vert ); return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_frag") ) { outValue = ( painter_colored_frag ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"pass_lamp_volume_vert") ) { outValue = ( pass_lamp_volume_vert ); return true; }
		if (HX_FIELD_EQ(inName,"smaa_edge_detect_frag") ) { outValue = ( smaa_edge_detect_frag ); return true; }
		if (HX_FIELD_EQ(inName,"smaa_edge_detect_vert") ) { outValue = ( smaa_edge_detect_vert ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"deferred_indirect_frag") ) { outValue = ( deferred_indirect_frag ); return true; }
		if (HX_FIELD_EQ(inName,"deferred_indirect_vert") ) { outValue = ( deferred_indirect_vert ); return true; }
		if (HX_FIELD_EQ(inName,"pass_viewray_vertData0") ) { outValue = ( pass_viewray_vertData0 ); return true; }
		if (HX_FIELD_EQ(inName,"smaa_blend_weight_frag") ) { outValue = ( smaa_blend_weight_frag ); return true; }
		if (HX_FIELD_EQ(inName,"smaa_blend_weight_vert") ) { outValue = ( smaa_blend_weight_vert ); return true; }
		if (HX_FIELD_EQ(inName,"painter_text_fragData0") ) { outValue = ( painter_text_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"painter_text_vertData0") ) { outValue = ( painter_text_vertData0 ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"Material_mesh_fragData0") ) { outValue = ( Material_mesh_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"Material_mesh_vertData0") ) { outValue = ( Material_mesh_vertData0 ); return true; }
		if (HX_FIELD_EQ(inName,"Material_shadowmap_frag") ) { outValue = ( Material_shadowmap_frag ); return true; }
		if (HX_FIELD_EQ(inName,"Material_shadowmap_vert") ) { outValue = ( Material_shadowmap_vert ); return true; }
		if (HX_FIELD_EQ(inName,"painter_image_fragData0") ) { outValue = ( painter_image_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"painter_image_vertData0") ) { outValue = ( painter_image_vertData0 ); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_fragData0") ) { outValue = ( painter_video_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_vertData0") ) { outValue = ( painter_video_vertData0 ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"blur_edge_pass_fragData0") ) { outValue = ( blur_edge_pass_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"deferred_light_fragData0") ) { outValue = ( deferred_light_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"deferred_light_quad_frag") ) { outValue = ( deferred_light_quad_frag ); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"compositor_pass_fragData0") ) { outValue = ( compositor_pass_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"compositor_pass_vertData0") ) { outValue = ( compositor_pass_vertData0 ); return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_vertData0") ) { outValue = ( painter_colored_vertData0 ); return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_fragData0") ) { outValue = ( painter_colored_fragData0 ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"pass_lamp_volume_vertData0") ) { outValue = ( pass_lamp_volume_vertData0 ); return true; }
		if (HX_FIELD_EQ(inName,"smaa_edge_detect_fragData0") ) { outValue = ( smaa_edge_detect_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"smaa_edge_detect_vertData0") ) { outValue = ( smaa_edge_detect_vertData0 ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"deferred_indirect_fragData0") ) { outValue = ( deferred_indirect_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"deferred_indirect_vertData0") ) { outValue = ( deferred_indirect_vertData0 ); return true; }
		if (HX_FIELD_EQ(inName,"smaa_blend_weight_fragData0") ) { outValue = ( smaa_blend_weight_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"smaa_blend_weight_vertData0") ) { outValue = ( smaa_blend_weight_vertData0 ); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"smaa_neighborhood_blend_frag") ) { outValue = ( smaa_neighborhood_blend_frag ); return true; }
		if (HX_FIELD_EQ(inName,"smaa_neighborhood_blend_vert") ) { outValue = ( smaa_neighborhood_blend_vert ); return true; }
		if (HX_FIELD_EQ(inName,"Material_shadowmap_fragData0") ) { outValue = ( Material_shadowmap_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"Material_shadowmap_vertData0") ) { outValue = ( Material_shadowmap_vertData0 ); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"deferred_light_quad_fragData0") ) { outValue = ( deferred_light_quad_fragData0 ); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"smaa_neighborhood_blend_fragData0") ) { outValue = ( smaa_neighborhood_blend_fragData0 ); return true; }
		if (HX_FIELD_EQ(inName,"smaa_neighborhood_blend_vertData0") ) { outValue = ( smaa_neighborhood_blend_vertData0 ); return true; }
	}
	return false;
}

bool Shaders_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"pass_vert") ) { pass_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pass_vertData0") ) { pass_vertData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"ssao_pass_frag") ) { ssao_pass_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"world_pass_frag") ) { world_pass_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"world_pass_vert") ) { world_pass_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"pass_viewray_vert") ) { pass_viewray_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_text_frag") ) { painter_text_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_text_vert") ) { painter_text_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"Material_mesh_frag") ) { Material_mesh_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"Material_mesh_vert") ) { Material_mesh_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_image_frag") ) { painter_image_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_image_vert") ) { painter_image_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_frag") ) { painter_video_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_vert") ) { painter_video_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"blur_edge_pass_frag") ) { blur_edge_pass_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"deferred_light_frag") ) { deferred_light_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"ssao_pass_fragData0") ) { ssao_pass_fragData0=ioValue.Cast< ::String >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"compositor_pass_frag") ) { compositor_pass_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"compositor_pass_vert") ) { compositor_pass_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"world_pass_fragData0") ) { world_pass_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"world_pass_vertData0") ) { world_pass_vertData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_vert") ) { painter_colored_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_frag") ) { painter_colored_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"pass_lamp_volume_vert") ) { pass_lamp_volume_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"smaa_edge_detect_frag") ) { smaa_edge_detect_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"smaa_edge_detect_vert") ) { smaa_edge_detect_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"deferred_indirect_frag") ) { deferred_indirect_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"deferred_indirect_vert") ) { deferred_indirect_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"pass_viewray_vertData0") ) { pass_viewray_vertData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"smaa_blend_weight_frag") ) { smaa_blend_weight_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"smaa_blend_weight_vert") ) { smaa_blend_weight_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_text_fragData0") ) { painter_text_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_text_vertData0") ) { painter_text_vertData0=ioValue.Cast< ::String >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"Material_mesh_fragData0") ) { Material_mesh_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"Material_mesh_vertData0") ) { Material_mesh_vertData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"Material_shadowmap_frag") ) { Material_shadowmap_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"Material_shadowmap_vert") ) { Material_shadowmap_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_image_fragData0") ) { painter_image_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_image_vertData0") ) { painter_image_vertData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_fragData0") ) { painter_video_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_video_vertData0") ) { painter_video_vertData0=ioValue.Cast< ::String >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"blur_edge_pass_fragData0") ) { blur_edge_pass_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"deferred_light_fragData0") ) { deferred_light_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"deferred_light_quad_frag") ) { deferred_light_quad_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"compositor_pass_fragData0") ) { compositor_pass_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"compositor_pass_vertData0") ) { compositor_pass_vertData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_vertData0") ) { painter_colored_vertData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"painter_colored_fragData0") ) { painter_colored_fragData0=ioValue.Cast< ::String >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"pass_lamp_volume_vertData0") ) { pass_lamp_volume_vertData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"smaa_edge_detect_fragData0") ) { smaa_edge_detect_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"smaa_edge_detect_vertData0") ) { smaa_edge_detect_vertData0=ioValue.Cast< ::String >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"deferred_indirect_fragData0") ) { deferred_indirect_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"deferred_indirect_vertData0") ) { deferred_indirect_vertData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"smaa_blend_weight_fragData0") ) { smaa_blend_weight_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"smaa_blend_weight_vertData0") ) { smaa_blend_weight_vertData0=ioValue.Cast< ::String >(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"smaa_neighborhood_blend_frag") ) { smaa_neighborhood_blend_frag=ioValue.Cast<  ::kha::graphics4::FragmentShader >(); return true; }
		if (HX_FIELD_EQ(inName,"smaa_neighborhood_blend_vert") ) { smaa_neighborhood_blend_vert=ioValue.Cast<  ::kha::graphics4::VertexShader >(); return true; }
		if (HX_FIELD_EQ(inName,"Material_shadowmap_fragData0") ) { Material_shadowmap_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"Material_shadowmap_vertData0") ) { Material_shadowmap_vertData0=ioValue.Cast< ::String >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"deferred_light_quad_fragData0") ) { deferred_light_quad_fragData0=ioValue.Cast< ::String >(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"smaa_neighborhood_blend_fragData0") ) { smaa_neighborhood_blend_fragData0=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"smaa_neighborhood_blend_vertData0") ) { smaa_neighborhood_blend_vertData0=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Shaders_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Shaders_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Shaders_obj::blur_edge_pass_fragData0,HX_HCSTRING("blur_edge_pass_fragData0","\x30","\xc4","\xea","\x55")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::blur_edge_pass_frag,HX_HCSTRING("blur_edge_pass_frag","\xb6","\xa6","\x24","\xd2")},
	{hx::fsString,(void *) &Shaders_obj::compositor_pass_fragData0,HX_HCSTRING("compositor_pass_fragData0","\x84","\xda","\xd7","\x97")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::compositor_pass_frag,HX_HCSTRING("compositor_pass_frag","\xe2","\x30","\x77","\x7e")},
	{hx::fsString,(void *) &Shaders_obj::compositor_pass_vertData0,HX_HCSTRING("compositor_pass_vertData0","\xa5","\x32","\xef","\xd4")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::compositor_pass_vert,HX_HCSTRING("compositor_pass_vert","\x61","\xcc","\x00","\x89")},
	{hx::fsString,(void *) &Shaders_obj::deferred_indirect_fragData0,HX_HCSTRING("deferred_indirect_fragData0","\xa3","\x0e","\x62","\xfa")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::deferred_indirect_frag,HX_HCSTRING("deferred_indirect_frag","\x23","\x71","\x37","\x98")},
	{hx::fsString,(void *) &Shaders_obj::deferred_indirect_vertData0,HX_HCSTRING("deferred_indirect_vertData0","\xc4","\x66","\x79","\x37")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::deferred_indirect_vert,HX_HCSTRING("deferred_indirect_vert","\xa2","\x0c","\xc1","\xa2")},
	{hx::fsString,(void *) &Shaders_obj::deferred_light_fragData0,HX_HCSTRING("deferred_light_fragData0","\xeb","\xb3","\x71","\xee")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::deferred_light_frag,HX_HCSTRING("deferred_light_frag","\xdb","\xd0","\xd9","\xf1")},
	{hx::fsString,(void *) &Shaders_obj::deferred_light_quad_fragData0,HX_HCSTRING("deferred_light_quad_fragData0","\x65","\x28","\xff","\xf4")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::deferred_light_quad_frag,HX_HCSTRING("deferred_light_quad_frag","\xa1","\xae","\x74","\x06")},
	{hx::fsString,(void *) &Shaders_obj::pass_vertData0,HX_HCSTRING("pass_vertData0","\x27","\x98","\x26","\x7c")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::pass_vert,HX_HCSTRING("pass_vert","\x1f","\x56","\x47","\xa0")},
	{hx::fsString,(void *) &Shaders_obj::pass_lamp_volume_vertData0,HX_HCSTRING("pass_lamp_volume_vertData0","\x89","\xf3","\xb8","\xce")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::pass_lamp_volume_vert,HX_HCSTRING("pass_lamp_volume_vert","\xfd","\xb5","\xd6","\xf1")},
	{hx::fsString,(void *) &Shaders_obj::pass_viewray_vertData0,HX_HCSTRING("pass_viewray_vertData0","\xcd","\xc6","\x34","\x78")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::pass_viewray_vert,HX_HCSTRING("pass_viewray_vert","\x39","\xa9","\xf3","\xb8")},
	{hx::fsString,(void *) &Shaders_obj::smaa_blend_weight_fragData0,HX_HCSTRING("smaa_blend_weight_fragData0","\x40","\x89","\xa9","\x47")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::smaa_blend_weight_frag,HX_HCSTRING("smaa_blend_weight_frag","\xa6","\xfb","\xfb","\x24")},
	{hx::fsString,(void *) &Shaders_obj::smaa_blend_weight_vertData0,HX_HCSTRING("smaa_blend_weight_vertData0","\x61","\xe1","\xc0","\x84")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::smaa_blend_weight_vert,HX_HCSTRING("smaa_blend_weight_vert","\x25","\x97","\x85","\x2f")},
	{hx::fsString,(void *) &Shaders_obj::smaa_edge_detect_fragData0,HX_HCSTRING("smaa_edge_detect_fragData0","\x55","\xb6","\xa1","\x46")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::smaa_edge_detect_frag,HX_HCSTRING("smaa_edge_detect_frag","\xb1","\xe6","\xbc","\x31")},
	{hx::fsString,(void *) &Shaders_obj::smaa_edge_detect_vertData0,HX_HCSTRING("smaa_edge_detect_vertData0","\x76","\x0e","\xb9","\x83")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::smaa_edge_detect_vert,HX_HCSTRING("smaa_edge_detect_vert","\x30","\x82","\x46","\x3c")},
	{hx::fsString,(void *) &Shaders_obj::smaa_neighborhood_blend_fragData0,HX_HCSTRING("smaa_neighborhood_blend_fragData0","\x7a","\x68","\xa5","\x32")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::smaa_neighborhood_blend_frag,HX_HCSTRING("smaa_neighborhood_blend_frag","\xac","\x66","\x40","\xd9")},
	{hx::fsString,(void *) &Shaders_obj::smaa_neighborhood_blend_vertData0,HX_HCSTRING("smaa_neighborhood_blend_vertData0","\x9b","\xc0","\xbc","\x6f")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::smaa_neighborhood_blend_vert,HX_HCSTRING("smaa_neighborhood_blend_vert","\x2b","\x02","\xca","\xe3")},
	{hx::fsString,(void *) &Shaders_obj::ssao_pass_fragData0,HX_HCSTRING("ssao_pass_fragData0","\xd7","\x56","\x78","\x0c")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::ssao_pass_frag,HX_HCSTRING("ssao_pass_frag","\x6f","\x15","\xae","\x84")},
	{hx::fsString,(void *) &Shaders_obj::world_pass_fragData0,HX_HCSTRING("world_pass_fragData0","\x93","\xde","\x10","\x90")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::world_pass_frag,HX_HCSTRING("world_pass_frag","\x33","\xa7","\xda","\xbe")},
	{hx::fsString,(void *) &Shaders_obj::world_pass_vertData0,HX_HCSTRING("world_pass_vertData0","\xb4","\x36","\x28","\xcd")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::world_pass_vert,HX_HCSTRING("world_pass_vert","\xb2","\x42","\x64","\xc9")},
	{hx::fsString,(void *) &Shaders_obj::Material_mesh_fragData0,HX_HCSTRING("Material_mesh_fragData0","\xda","\xc7","\xae","\x97")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::Material_mesh_frag,HX_HCSTRING("Material_mesh_frag","\x4c","\x43","\x73","\xbb")},
	{hx::fsString,(void *) &Shaders_obj::Material_mesh_vertData0,HX_HCSTRING("Material_mesh_vertData0","\xfb","\x1f","\xc6","\xd4")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::Material_mesh_vert,HX_HCSTRING("Material_mesh_vert","\xcb","\xde","\xfc","\xc5")},
	{hx::fsString,(void *) &Shaders_obj::Material_shadowmap_fragData0,HX_HCSTRING("Material_shadowmap_fragData0","\xf9","\x5a","\x90","\xc5")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::Material_shadowmap_frag,HX_HCSTRING("Material_shadowmap_frag","\x8d","\x84","\x18","\x67")},
	{hx::fsString,(void *) &Shaders_obj::Material_shadowmap_vertData0,HX_HCSTRING("Material_shadowmap_vertData0","\x1a","\xb3","\xa7","\x02")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::Material_shadowmap_vert,HX_HCSTRING("Material_shadowmap_vert","\x0c","\x20","\xa2","\x71")},
	{hx::fsString,(void *) &Shaders_obj::painter_colored_vertData0,HX_HCSTRING("painter_colored_vertData0","\x24","\xda","\x0f","\x31")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::painter_colored_vert,HX_HCSTRING("painter_colored_vert","\x42","\x55","\x7f","\xe3")},
	{hx::fsString,(void *) &Shaders_obj::painter_colored_fragData0,HX_HCSTRING("painter_colored_fragData0","\x03","\x82","\xf8","\xf3")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::painter_colored_frag,HX_HCSTRING("painter_colored_frag","\xc3","\xb9","\xf5","\xd8")},
	{hx::fsString,(void *) &Shaders_obj::painter_image_fragData0,HX_HCSTRING("painter_image_fragData0","\x1c","\xc7","\x53","\x0e")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::painter_image_frag,HX_HCSTRING("painter_image_frag","\x4a","\x8b","\xb2","\xa5")},
	{hx::fsString,(void *) &Shaders_obj::painter_image_vertData0,HX_HCSTRING("painter_image_vertData0","\x3d","\x1f","\x6b","\x4b")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::painter_image_vert,HX_HCSTRING("painter_image_vert","\xc9","\x26","\x3c","\xb0")},
	{hx::fsString,(void *) &Shaders_obj::painter_text_fragData0,HX_HCSTRING("painter_text_fragData0","\x56","\x5c","\xc7","\x05")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::painter_text_frag,HX_HCSTRING("painter_text_frag","\x50","\x00","\x9b","\xcc")},
	{hx::fsString,(void *) &Shaders_obj::painter_text_vertData0,HX_HCSTRING("painter_text_vertData0","\x77","\xb4","\xde","\x42")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::painter_text_vert,HX_HCSTRING("painter_text_vert","\xcf","\x9b","\x24","\xd7")},
	{hx::fsString,(void *) &Shaders_obj::painter_video_fragData0,HX_HCSTRING("painter_video_fragData0","\x3c","\x64","\xd8","\xea")},
	{hx::fsObject /*::kha::graphics4::FragmentShader*/ ,(void *) &Shaders_obj::painter_video_frag,HX_HCSTRING("painter_video_frag","\x2a","\x02","\xb3","\x75")},
	{hx::fsString,(void *) &Shaders_obj::painter_video_vertData0,HX_HCSTRING("painter_video_vertData0","\x5d","\xbc","\xef","\x27")},
	{hx::fsObject /*::kha::graphics4::VertexShader*/ ,(void *) &Shaders_obj::painter_video_vert,HX_HCSTRING("painter_video_vert","\xa9","\x9d","\x3c","\x80")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Shaders_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shaders_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Shaders_obj::blur_edge_pass_fragData0,"blur_edge_pass_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::blur_edge_pass_frag,"blur_edge_pass_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::compositor_pass_fragData0,"compositor_pass_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::compositor_pass_frag,"compositor_pass_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::compositor_pass_vertData0,"compositor_pass_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::compositor_pass_vert,"compositor_pass_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::deferred_indirect_fragData0,"deferred_indirect_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::deferred_indirect_frag,"deferred_indirect_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::deferred_indirect_vertData0,"deferred_indirect_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::deferred_indirect_vert,"deferred_indirect_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::deferred_light_fragData0,"deferred_light_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::deferred_light_frag,"deferred_light_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::deferred_light_quad_fragData0,"deferred_light_quad_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::deferred_light_quad_frag,"deferred_light_quad_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::pass_vertData0,"pass_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::pass_vert,"pass_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::pass_lamp_volume_vertData0,"pass_lamp_volume_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::pass_lamp_volume_vert,"pass_lamp_volume_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::pass_viewray_vertData0,"pass_viewray_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::pass_viewray_vert,"pass_viewray_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_blend_weight_fragData0,"smaa_blend_weight_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_blend_weight_frag,"smaa_blend_weight_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_blend_weight_vertData0,"smaa_blend_weight_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_blend_weight_vert,"smaa_blend_weight_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_edge_detect_fragData0,"smaa_edge_detect_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_edge_detect_frag,"smaa_edge_detect_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_edge_detect_vertData0,"smaa_edge_detect_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_edge_detect_vert,"smaa_edge_detect_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_neighborhood_blend_fragData0,"smaa_neighborhood_blend_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_neighborhood_blend_frag,"smaa_neighborhood_blend_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_neighborhood_blend_vertData0,"smaa_neighborhood_blend_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::smaa_neighborhood_blend_vert,"smaa_neighborhood_blend_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::ssao_pass_fragData0,"ssao_pass_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::ssao_pass_frag,"ssao_pass_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::world_pass_fragData0,"world_pass_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::world_pass_frag,"world_pass_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::world_pass_vertData0,"world_pass_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::world_pass_vert,"world_pass_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::Material_mesh_fragData0,"Material_mesh_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::Material_mesh_frag,"Material_mesh_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::Material_mesh_vertData0,"Material_mesh_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::Material_mesh_vert,"Material_mesh_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::Material_shadowmap_fragData0,"Material_shadowmap_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::Material_shadowmap_frag,"Material_shadowmap_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::Material_shadowmap_vertData0,"Material_shadowmap_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::Material_shadowmap_vert,"Material_shadowmap_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_colored_vertData0,"painter_colored_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_colored_vert,"painter_colored_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_colored_fragData0,"painter_colored_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_colored_frag,"painter_colored_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_image_fragData0,"painter_image_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_image_frag,"painter_image_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_image_vertData0,"painter_image_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_image_vert,"painter_image_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_text_fragData0,"painter_text_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_text_frag,"painter_text_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_text_vertData0,"painter_text_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_text_vert,"painter_text_vert");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_video_fragData0,"painter_video_fragData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_video_frag,"painter_video_frag");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_video_vertData0,"painter_video_vertData0");
	HX_MARK_MEMBER_NAME(Shaders_obj::painter_video_vert,"painter_video_vert");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shaders_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shaders_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Shaders_obj::blur_edge_pass_fragData0,"blur_edge_pass_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::blur_edge_pass_frag,"blur_edge_pass_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::compositor_pass_fragData0,"compositor_pass_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::compositor_pass_frag,"compositor_pass_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::compositor_pass_vertData0,"compositor_pass_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::compositor_pass_vert,"compositor_pass_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::deferred_indirect_fragData0,"deferred_indirect_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::deferred_indirect_frag,"deferred_indirect_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::deferred_indirect_vertData0,"deferred_indirect_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::deferred_indirect_vert,"deferred_indirect_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::deferred_light_fragData0,"deferred_light_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::deferred_light_frag,"deferred_light_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::deferred_light_quad_fragData0,"deferred_light_quad_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::deferred_light_quad_frag,"deferred_light_quad_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::pass_vertData0,"pass_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::pass_vert,"pass_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::pass_lamp_volume_vertData0,"pass_lamp_volume_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::pass_lamp_volume_vert,"pass_lamp_volume_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::pass_viewray_vertData0,"pass_viewray_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::pass_viewray_vert,"pass_viewray_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_blend_weight_fragData0,"smaa_blend_weight_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_blend_weight_frag,"smaa_blend_weight_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_blend_weight_vertData0,"smaa_blend_weight_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_blend_weight_vert,"smaa_blend_weight_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_edge_detect_fragData0,"smaa_edge_detect_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_edge_detect_frag,"smaa_edge_detect_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_edge_detect_vertData0,"smaa_edge_detect_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_edge_detect_vert,"smaa_edge_detect_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_neighborhood_blend_fragData0,"smaa_neighborhood_blend_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_neighborhood_blend_frag,"smaa_neighborhood_blend_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_neighborhood_blend_vertData0,"smaa_neighborhood_blend_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::smaa_neighborhood_blend_vert,"smaa_neighborhood_blend_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::ssao_pass_fragData0,"ssao_pass_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::ssao_pass_frag,"ssao_pass_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::world_pass_fragData0,"world_pass_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::world_pass_frag,"world_pass_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::world_pass_vertData0,"world_pass_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::world_pass_vert,"world_pass_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::Material_mesh_fragData0,"Material_mesh_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::Material_mesh_frag,"Material_mesh_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::Material_mesh_vertData0,"Material_mesh_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::Material_mesh_vert,"Material_mesh_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::Material_shadowmap_fragData0,"Material_shadowmap_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::Material_shadowmap_frag,"Material_shadowmap_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::Material_shadowmap_vertData0,"Material_shadowmap_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::Material_shadowmap_vert,"Material_shadowmap_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_colored_vertData0,"painter_colored_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_colored_vert,"painter_colored_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_colored_fragData0,"painter_colored_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_colored_frag,"painter_colored_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_image_fragData0,"painter_image_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_image_frag,"painter_image_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_image_vertData0,"painter_image_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_image_vert,"painter_image_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_text_fragData0,"painter_text_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_text_frag,"painter_text_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_text_vertData0,"painter_text_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_text_vert,"painter_text_vert");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_video_fragData0,"painter_video_fragData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_video_frag,"painter_video_frag");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_video_vertData0,"painter_video_vertData0");
	HX_VISIT_MEMBER_NAME(Shaders_obj::painter_video_vert,"painter_video_vert");
};

#endif

hx::Class Shaders_obj::__mClass;

static ::String Shaders_obj_sStaticFields[] = {
	HX_HCSTRING("blur_edge_pass_fragData0","\x30","\xc4","\xea","\x55"),
	HX_HCSTRING("blur_edge_pass_frag","\xb6","\xa6","\x24","\xd2"),
	HX_HCSTRING("compositor_pass_fragData0","\x84","\xda","\xd7","\x97"),
	HX_HCSTRING("compositor_pass_frag","\xe2","\x30","\x77","\x7e"),
	HX_HCSTRING("compositor_pass_vertData0","\xa5","\x32","\xef","\xd4"),
	HX_HCSTRING("compositor_pass_vert","\x61","\xcc","\x00","\x89"),
	HX_HCSTRING("deferred_indirect_fragData0","\xa3","\x0e","\x62","\xfa"),
	HX_HCSTRING("deferred_indirect_frag","\x23","\x71","\x37","\x98"),
	HX_HCSTRING("deferred_indirect_vertData0","\xc4","\x66","\x79","\x37"),
	HX_HCSTRING("deferred_indirect_vert","\xa2","\x0c","\xc1","\xa2"),
	HX_HCSTRING("deferred_light_fragData0","\xeb","\xb3","\x71","\xee"),
	HX_HCSTRING("deferred_light_frag","\xdb","\xd0","\xd9","\xf1"),
	HX_HCSTRING("deferred_light_quad_fragData0","\x65","\x28","\xff","\xf4"),
	HX_HCSTRING("deferred_light_quad_frag","\xa1","\xae","\x74","\x06"),
	HX_HCSTRING("pass_vertData0","\x27","\x98","\x26","\x7c"),
	HX_HCSTRING("pass_vert","\x1f","\x56","\x47","\xa0"),
	HX_HCSTRING("pass_lamp_volume_vertData0","\x89","\xf3","\xb8","\xce"),
	HX_HCSTRING("pass_lamp_volume_vert","\xfd","\xb5","\xd6","\xf1"),
	HX_HCSTRING("pass_viewray_vertData0","\xcd","\xc6","\x34","\x78"),
	HX_HCSTRING("pass_viewray_vert","\x39","\xa9","\xf3","\xb8"),
	HX_HCSTRING("smaa_blend_weight_fragData0","\x40","\x89","\xa9","\x47"),
	HX_HCSTRING("smaa_blend_weight_frag","\xa6","\xfb","\xfb","\x24"),
	HX_HCSTRING("smaa_blend_weight_vertData0","\x61","\xe1","\xc0","\x84"),
	HX_HCSTRING("smaa_blend_weight_vert","\x25","\x97","\x85","\x2f"),
	HX_HCSTRING("smaa_edge_detect_fragData0","\x55","\xb6","\xa1","\x46"),
	HX_HCSTRING("smaa_edge_detect_frag","\xb1","\xe6","\xbc","\x31"),
	HX_HCSTRING("smaa_edge_detect_vertData0","\x76","\x0e","\xb9","\x83"),
	HX_HCSTRING("smaa_edge_detect_vert","\x30","\x82","\x46","\x3c"),
	HX_HCSTRING("smaa_neighborhood_blend_fragData0","\x7a","\x68","\xa5","\x32"),
	HX_HCSTRING("smaa_neighborhood_blend_frag","\xac","\x66","\x40","\xd9"),
	HX_HCSTRING("smaa_neighborhood_blend_vertData0","\x9b","\xc0","\xbc","\x6f"),
	HX_HCSTRING("smaa_neighborhood_blend_vert","\x2b","\x02","\xca","\xe3"),
	HX_HCSTRING("ssao_pass_fragData0","\xd7","\x56","\x78","\x0c"),
	HX_HCSTRING("ssao_pass_frag","\x6f","\x15","\xae","\x84"),
	HX_HCSTRING("world_pass_fragData0","\x93","\xde","\x10","\x90"),
	HX_HCSTRING("world_pass_frag","\x33","\xa7","\xda","\xbe"),
	HX_HCSTRING("world_pass_vertData0","\xb4","\x36","\x28","\xcd"),
	HX_HCSTRING("world_pass_vert","\xb2","\x42","\x64","\xc9"),
	HX_HCSTRING("Material_mesh_fragData0","\xda","\xc7","\xae","\x97"),
	HX_HCSTRING("Material_mesh_frag","\x4c","\x43","\x73","\xbb"),
	HX_HCSTRING("Material_mesh_vertData0","\xfb","\x1f","\xc6","\xd4"),
	HX_HCSTRING("Material_mesh_vert","\xcb","\xde","\xfc","\xc5"),
	HX_HCSTRING("Material_shadowmap_fragData0","\xf9","\x5a","\x90","\xc5"),
	HX_HCSTRING("Material_shadowmap_frag","\x8d","\x84","\x18","\x67"),
	HX_HCSTRING("Material_shadowmap_vertData0","\x1a","\xb3","\xa7","\x02"),
	HX_HCSTRING("Material_shadowmap_vert","\x0c","\x20","\xa2","\x71"),
	HX_HCSTRING("painter_colored_vertData0","\x24","\xda","\x0f","\x31"),
	HX_HCSTRING("painter_colored_vert","\x42","\x55","\x7f","\xe3"),
	HX_HCSTRING("painter_colored_fragData0","\x03","\x82","\xf8","\xf3"),
	HX_HCSTRING("painter_colored_frag","\xc3","\xb9","\xf5","\xd8"),
	HX_HCSTRING("painter_image_fragData0","\x1c","\xc7","\x53","\x0e"),
	HX_HCSTRING("painter_image_frag","\x4a","\x8b","\xb2","\xa5"),
	HX_HCSTRING("painter_image_vertData0","\x3d","\x1f","\x6b","\x4b"),
	HX_HCSTRING("painter_image_vert","\xc9","\x26","\x3c","\xb0"),
	HX_HCSTRING("painter_text_fragData0","\x56","\x5c","\xc7","\x05"),
	HX_HCSTRING("painter_text_frag","\x50","\x00","\x9b","\xcc"),
	HX_HCSTRING("painter_text_vertData0","\x77","\xb4","\xde","\x42"),
	HX_HCSTRING("painter_text_vert","\xcf","\x9b","\x24","\xd7"),
	HX_HCSTRING("painter_video_fragData0","\x3c","\x64","\xd8","\xea"),
	HX_HCSTRING("painter_video_frag","\x2a","\x02","\xb3","\x75"),
	HX_HCSTRING("painter_video_vertData0","\x5d","\xbc","\xef","\x27"),
	HX_HCSTRING("painter_video_vert","\xa9","\x9d","\x3c","\x80"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null())
};

void Shaders_obj::__register()
{
	hx::Object *dummy = new Shaders_obj;
	Shaders_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.Shaders","\x44","\x7b","\x98","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Shaders_obj::__GetStatic;
	__mClass->mSetStaticField = &Shaders_obj::__SetStatic;
	__mClass->mMarkFunc = Shaders_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Shaders_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Shaders_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shaders_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shaders_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shaders_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Shaders_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		blur_edge_pass_fragData0 = HX_("s2688:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCBnYnVmZmVyMDsKdW5pZm9ybSB2ZWMyIGRpckludjsKdW5pZm9ybSBzYW1wbGVyMkQgdGV4OwoKb3V0IHZlYzQgZnJhZ0NvbG9yOwppbiB2ZWMyIHRleENvb3JkOwoKdmVjMiBvY3RhaGVkcm9uV3JhcCh2ZWMyIHYpCnsKICAgIHJldHVybiAodmVjMigxLjApIC0gYWJzKHYueXgpKSAqIHZlYzIoKHYueCA%PSAwLjApID8gMS4wIDogKC0xLjApLCAodi55ID49IDAuMCkgPyAxLjAgOiAoLTEuMCkpOwp9Cgp2ZWMzIGdldE5vcih2ZWMyIGVuYykKewogICAgdmVjMyBuOwogICAgbi56ID0gKDEuMCAtIGFicyhlbmMueCkpIC0gYWJzKGVuYy55KTsKICAgIHZlYzIgXzYxOwogICAgaWYgKG4ueiA%PSAwLjApCiAgICB7CiAgICAgICAgXzYxID0gZW5jOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF82MSA9IG9jdGFoZWRyb25XcmFwKGVuYyk7CiAgICB9CiAgICBuID0gdmVjMyhfNjEueCwgXzYxLnksIG4ueik7CiAgICBuID0gbm9ybWFsaXplKG4pOwogICAgcmV0dXJuIG47Cn0KCmZsb2F0IGRvQmx1cihmbG9hdCBibHVyV2VpZ2h0LCBpbnQgcG9zLCB2ZWMzIG5vciwgdmVjMiB0ZXhDb29yZF8xKQp7CiAgICBmbG9hdCBwb3NhZGQgPSBmbG9hdChwb3MpICsgMC41OwogICAgdmVjMyBub3IyID0gZ2V0Tm9yKHRleHR1cmUoZ2J1ZmZlcjAsIHRleENvb3JkXzEgKyAoZGlySW52ICogZmxvYXQocG9zKSkpLnh5KTsKICAgIGZsb2F0IGluZmx1ZW5jZUZhY3RvciA9IHN0ZXAoMC45NDk5OTk5ODgwNzkwNzEwNDQ5MjE4NzUsIGRvdChub3IyLCBub3IpKTsKICAgIGZsb2F0IGNvbCA9IHRleHR1cmUodGV4LCB0ZXhDb29yZF8xICsgKGRpckludiAqIHBvc2FkZCkpLng7CiAgICBmcmFnQ29sb3IueCArPSAoKGNvbCAqIGJsdXJXZWlnaHQpICogaW5mbHVlbmNlRmFjdG9yKTsKICAgIGZsb2F0IHdlaWdodCA9IGJsdXJXZWlnaHQgKiBpbmZsdWVuY2VGYWN0b3I7CiAgICBub3IyID0gZ2V0Tm9yKHRleHR1cmUoZ2J1ZmZlcjAsIHRleENvb3JkXzEgLSAoZGlySW52ICogZmxvYXQocG9zKSkpLnh5KTsKICAgIGluZmx1ZW5jZUZhY3RvciA9IHN0ZXAoMC45NDk5OTk5ODgwNzkwNzEwNDQ5MjE4NzUsIGRvdChub3IyLCBub3IpKTsKICAgIGNvbCA9IHRleHR1cmUodGV4LCB0ZXhDb29yZF8xIC0gKGRpckludiAqIHBvc2FkZCkpLng7CiAgICBmcmFnQ29sb3IueCArPSAoKGNvbCAqIGJsdXJXZWlnaHQpICogaW5mbHVlbmNlRmFjdG9yKTsKICAgIHdlaWdodCArPSAoYmx1cldlaWdodCAqIGluZmx1ZW5jZUZhY3Rvcik7CiAgICByZXR1cm4gd2VpZ2h0Owp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWMyIHRjID0gdGV4Q29vcmQgKiAxLjA7CiAgICB2ZWMzIG5vciA9IGdldE5vcih0ZXh0dXJlKGdidWZmZXIwLCB0ZXhDb29yZCkueHkpOwogICAgZnJhZ0NvbG9yLnggPSB0ZXh0dXJlKHRleCwgdGMpLnggKiAwLjIyNzAyNjk5ODk5NjczNDYxOTE0MDYyNTsKICAgIGZsb2F0IHdlaWdodCA9IDAuMjI3MDI2OTk4OTk2NzM0NjE5MTQwNjI1OwogICAgZmxvYXQgXzE3OCA9IGRvQmx1cigwLjE5NDU5NDYwNjc1NzE2NDAwMTQ2NDg0Mzc1LCAxLCBub3IsIHRjKTsKICAgIHdlaWdodCArPSBfMTc4OwogICAgZmxvYXQgXzE4NSA9IGRvQmx1cigwLjEyMTYyMTYwMTI4MzU1MDI2MjQ1MTE3MTg3NSwgMiwgbm9yLCB0Yyk7CiAgICB3ZWlnaHQgKz0gXzE4NTsKICAgIGZsb2F0IF8xOTIgPSBkb0JsdXIoMC4wNTQwNTM5OTk0ODM1ODUzNTc2NjYwMTU2MjUsIDMsIG5vciwgdGMpOwogICAgd2VpZ2h0ICs9IF8xOTI7CiAgICBmbG9hdCBfMTk5ID0gZG9CbHVyKDAuMDE2MjE2MDAwNTQyMDQ0NjM5NTg3NDAyMzQzNzUsIDQsIG5vciwgdGMpOwogICAgd2VpZ2h0ICs9IF8xOTk7CiAgICBmcmFnQ29sb3IgPSB2ZWM0KGZyYWdDb2xvci54IC8gd2VpZ2h0KTsKfQoK",2b,de,e3,9f);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		blur_edge_pass_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		compositor_pass_fragData0 = HX_("s978:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCB0ZXg7CnVuaWZvcm0gc2FtcGxlcjJEIGdidWZmZXJEOwoKaW4gdmVjMiB0ZXhDb29yZDsKb3V0IHZlYzQgZnJhZ0NvbG9yOwoKdmVjMyB0b25lbWFwRmlsbWljKHZlYzMgY29sb3IpCnsKICAgIHZlYzMgeCA9IG1heCh2ZWMzKDAuMCksIGNvbG9yIC0gdmVjMygwLjAwNDAwMDAwMDE4OTk4OTgwNTIyMTU1NzYxNzE4NzUpKTsKICAgIHJldHVybiAoeCAqICgoeCAqIDYuMTk5OTk5ODA5MjY1MTM2NzE4NzUpICsgdmVjMygwLjUpKSkgLyAoKHggKiAoKHggKiA2LjE5OTk5OTgwOTI2NTEzNjcxODc1KSArIHZlYzMoMS43MDAwMDAwNDc2ODM3MTU4MjAzMTI1KSkpICsgdmVjMygwLjA1OTk5OTk5ODY1ODg5NTQ5MjU1MzcxMDkzNzUpKTsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjMiB0ZXhDbyA9IHRleENvb3JkOwogICAgdmVjMyBfNTcgPSB0ZXh0dXJlKHRleCwgdGV4Q28pLnh5ejsKICAgIGZyYWdDb2xvciA9IHZlYzQoXzU3LngsIF81Ny55LCBfNTcueiwgZnJhZ0NvbG9yLncpOwogICAgdmVjMyBfNjIgPSB0b25lbWFwRmlsbWljKGZyYWdDb2xvci54eXopOwogICAgZnJhZ0NvbG9yID0gdmVjNChfNjIueCwgXzYyLnksIF82Mi56LCBmcmFnQ29sb3Iudyk7Cn0KCg",cb,de,e1,6a);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		compositor_pass_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		compositor_pass_vertData0 = HX_("s331:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgpvdXQgdmVjMiB0ZXhDb29yZDsKaW4gdmVjMiBwb3M7Cgp2b2lkIG1haW4oKQp7CiAgICB0ZXhDb29yZCA9IChwb3MgKiB2ZWMyKDAuNSkpICsgdmVjMigwLjUpOwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwp9Cgo",2c,6d,f9,e3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		compositor_pass_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		deferred_indirect_fragData0 = HX_("s3712:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHZlYzQgc2hpcnJbN107CnVuaWZvcm0gc2FtcGxlcjJEIGdidWZmZXIwOwp1bmlmb3JtIHNhbXBsZXIyRCBnYnVmZmVyMTsKdW5pZm9ybSB2ZWMzIGJhY2tncm91bmRDb2w7CnVuaWZvcm0gZmxvYXQgZW52bWFwU3RyZW5ndGg7CnVuaWZvcm0gc2FtcGxlcjJEIHNzYW90ZXg7CgppbiB2ZWMyIHRleENvb3JkOwpvdXQgdmVjNCBmcmFnQ29sb3I7Cgp2ZWMyIG9jdGFoZWRyb25XcmFwKHZlYzIgdikKewogICAgcmV0dXJuICh2ZWMyKDEuMCkgLSBhYnModi55eCkpICogdmVjMigodi54ID49IDAuMCkgPyAxLjAgOiAoLTEuMCksICh2LnkgPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSk7Cn0KCnZlYzIgdW5wYWNrRmxvYXQoZmxvYXQgZikKewogICAgcmV0dXJuIHZlYzIoZmxvb3IoZikgLyAxMDAuMCwgZnJhY3QoZikpOwp9Cgp2ZWMyIHVucGFja0Zsb2F0MihmbG9hdCBmKQp7CiAgICByZXR1cm4gdmVjMihmbG9vcihmKSAvIDI1NS4wLCBmcmFjdChmKSk7Cn0KCnZlYzMgc3VyZmFjZUFsYmVkbyh2ZWMzIGJhc2VDb2xvciwgZmxvYXQgbWV0YWxuZXNzKQp7CiAgICByZXR1cm4gbWl4KGJhc2VDb2xvciwgdmVjMygwLjApLCB2ZWMzKG1ldGFsbmVzcykpOwp9Cgp2ZWMzIHNoSXJyYWRpYW5jZSh2ZWMzIG5vcikKewogICAgdmVjMyBjbDAwID0gdmVjMyhzaGlyclswXS54LCBzaGlyclswXS55LCBzaGlyclswXS56KTsKICAgIHZlYzMgY2wxbTEgPSB2ZWMzKHNoaXJyWzBdLncsIHNoaXJyWzFdLngsIHNoaXJyWzFdLnkpOwogICAgdmVjMyBjbDEwID0gdmVjMyhzaGlyclsxXS56LCBzaGlyclsxXS53LCBzaGlyclsyXS54KTsKICAgIHZlYzMgY2wxMSA9IHZlYzMoc2hpcnJbMl0ueSwgc2hpcnJbMl0ueiwgc2hpcnJbMl0udyk7CiAgICB2ZWMzIGNsMm0yID0gdmVjMyhzaGlyclszXS54LCBzaGlyclszXS55LCBzaGlyclszXS56KTsKICAgIHZlYzMgY2wybTEgPSB2ZWMzKHNoaXJyWzNdLncsIHNoaXJyWzRdLngsIHNoaXJyWzRdLnkpOwogICAgdmVjMyBjbDIwID0gdmVjMyhzaGlycls0XS56LCBzaGlycls0XS53LCBzaGlycls1XS54KTsKICAgIHZlYzMgY2wyMSA9IHZlYzMoc2hpcnJbNV0ueSwgc2hpcnJbNV0ueiwgc2hpcnJbNV0udyk7CiAgICB2ZWMzIGNsMjIgPSB2ZWMzKHNoaXJyWzZdLngsIHNoaXJyWzZdLnksIHNoaXJyWzZdLnopOwogICAgcmV0dXJuICgoKCgoKCgoKChjbDIyICogMC40MjkwNDI5OTQ5NzYwNDM3MDExNzE4NzUpICogKChub3IueSAqIG5vci55KSAtICgoLW5vci56KSAqICgtbm9yLnopKSkpICsgKCgoY2wyMCAqIDAuNzQzMTI1MDIxNDU3NjcyMTE5MTQwNjI1KSAqIG5vci54KSAqIG5vci54KSkgKyAoY2wwMCAqIDAuODg2MjI3MDExNjgwNjAzMDI3MzQzNzUpKSAtIChjbDIwICogMC4yNDc3MDc5OTI3OTIxMjk1MTY2MDE1NjI1KSkgKyAoKChjbDJtMiAqIDAuODU4MDg1OTg5OTUyMDg3NDAyMzQzNzUpICogbm9yLnkpICogKC1ub3IueikpKSArICgoKGNsMjEgKiAwLjg1ODA4NTk4OTk1MjA4NzQwMjM0Mzc1KSAqIG5vci55KSAqIG5vci54KSkgKyAoKChjbDJtMSAqIDAuODU4MDg1OTg5OTUyMDg3NDAyMzQzNzUpICogKC1ub3IueikpICogbm9yLngpKSArICgoY2wxMSAqIDEuMDIzMzI3OTQ2NjYyOTAyODMyMDMxMjUpICogbm9yLnkpKSArICgoY2wxbTEgKiAxLjAyMzMyNzk0NjY2MjkwMjgzMjAzMTI1KSAqICgtbm9yLnopKSkgKyAoKGNsMTAgKiAxLjAyMzMyNzk0NjY2MjkwMjgzMjAzMTI1KSAqIG5vci54KTsKfQoKdmVjMyBzdXJmYWNlRjAodmVjMyBiYXNlQ29sb3IsIGZsb2F0IG1ldGFsbmVzcykKewogICAgcmV0dXJuIG1peCh2ZWMzKDAuMDM5OTk5OTk5MTA1OTMwMzI4MzY5MTQwNjI1KSwgYmFzZUNvbG9yLCB2ZWMzKG1ldGFsbmVzcykpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IGcwID0gdGV4dHVyZShnYnVmZmVyMCwgdGV4Q29vcmQpOwogICAgdmVjMyBuOwogICAgbi56ID0gKDEuMCAtIGFicyhnMC54KSkgLSBhYnMoZzAueSk7CiAgICB2ZWMyIF8yNjY7CiAgICBpZiAobi56ID49IDAuMCkKICAgIHsKICAgICAgICBfMjY2ID0gZzAueHk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzI2NiA9IG9jdGFoZWRyb25XcmFwKGcwLnh5KTsKICAgIH0KICAgIG4gPSB2ZWMzKF8yNjYueCwgXzI2Ni55LCBuLnopOwogICAgbiA9IG5vcm1hbGl6ZShuKTsKICAgIHZlYzIgbWV0cm91Z2ggPSB1bnBhY2tGbG9hdChnMC56KTsKICAgIHZlYzQgZzEgPSB0ZXh0dXJlKGdidWZmZXIxLCB0ZXhDb29yZCk7CiAgICB2ZWMyIG9jY3NwZWMgPSB1bnBhY2tGbG9hdDIoZzEudyk7CiAgICB2ZWMzIGFsYmVkbyA9IHN1cmZhY2VBbGJlZG8oZzEueHl6LCBtZXRyb3VnaC54KTsKICAgIHZlYzMgZW52bCA9IHNoSXJyYWRpYW5jZShuKTsKICAgIGVudmwgKj0gYWxiZWRvOwogICAgZW52bCArPSAoYmFja2dyb3VuZENvbCAqIHN1cmZhY2VGMChnMS54eXosIG1ldHJvdWdoLngpKTsKICAgIGVudmwgKj0gKGVudm1hcFN0cmVuZ3RoICogb2Njc3BlYy54KTsKICAgIGZyYWdDb2xvciA9IHZlYzQoZW52bC54LCBlbnZsLnksIGVudmwueiwgZnJhZ0NvbG9yLncpOwogICAgdmVjMyBfMzM1ID0gZnJhZ0NvbG9yLnh5eiAqIHRleHR1cmUoc3Nhb3RleCwgdGV4Q29vcmQpLng7CiAgICBmcmFnQ29sb3IgPSB2ZWM0KF8zMzUueCwgXzMzNS55LCBfMzM1LnosIGZyYWdDb2xvci53KTsKfQoK",e9,e8,ad,26);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		deferred_indirect_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		deferred_indirect_vertData0 = HX_("s331:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgpvdXQgdmVjMiB0ZXhDb29yZDsKaW4gdmVjMiBwb3M7Cgp2b2lkIG1haW4oKQp7CiAgICB0ZXhDb29yZCA9IChwb3MgKiB2ZWMyKDAuNSkpICsgdmVjMigwLjUpOwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwp9Cgo",2c,6d,f9,e3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		deferred_indirect_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		deferred_light_fragData0 = HX_("s11303:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCBnYnVmZmVyMDsKdW5pZm9ybSBzYW1wbGVyMkQgZ2J1ZmZlcjE7CnVuaWZvcm0gbWF0NCBpbnZWUDsKdW5pZm9ybSB2ZWMzIGV5ZTsKdW5pZm9ybSB2ZWMzIGxpZ2h0UG9zOwp1bmlmb3JtIGludCBsaWdodFNoYWRvdzsKdW5pZm9ybSBtYXQ0IExXVlA7CnVuaWZvcm0gZmxvYXQgc2hhZG93c0JpYXM7CnVuaWZvcm0gc2FtcGxlcjJEIHNoYWRvd01hcDsKdW5pZm9ybSBzYW1wbGVyQ3ViZSBzaGFkb3dNYXBDdWJlOwp1bmlmb3JtIHZlYzIgbGlnaHRQcm9qOwp1bmlmb3JtIGludCBsaWdodFR5cGU7CnVuaWZvcm0gdmVjMyBsaWdodERpcjsKdW5pZm9ybSB2ZWMyIHNwb3RsaWdodERhdGE7CnVuaWZvcm0gdmVjMyBsaWdodENvbG9yOwp1bmlmb3JtIHZlYzQgY2FzRGF0YVsyMF07CgppbiB2ZWM0IHd2cHBvc2l0aW9uOwpvdXQgdmVjNCBmcmFnQ29sb3I7Cgp2ZWMyIHVucGFja0Zsb2F0MihmbG9hdCBmKQp7CiAgICByZXR1cm4gdmVjMihmbG9vcihmKSAvIDI1NS4wLCBmcmFjdChmKSk7Cn0KCnZlYzIgb2N0YWhlZHJvbldyYXAodmVjMiB2KQp7CiAgICByZXR1cm4gKHZlYzIoMS4wKSAtIGFicyh2Lnl4KSkgKiB2ZWMyKCh2LnggPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSwgKHYueSA%PSAwLjApID8gMS4wIDogKC0xLjApKTsKfQoKdmVjMyBnZXRQb3MyKG1hdDQgaW52VlBfMSwgZmxvYXQgZGVwdGgsIHZlYzIgY29vcmQpCnsKICAgIHZlYzQgcG9zID0gdmVjNCgoY29vcmQgKiAyLjApIC0gdmVjMigxLjApLCBkZXB0aCwgMS4wKTsKICAgIHBvcyA9IGludlZQXzEgKiBwb3M7CiAgICB2ZWMzIF81MDMgPSBwb3MueHl6IC8gdmVjMyhwb3Mudyk7CiAgICBwb3MgPSB2ZWM0KF81MDMueCwgXzUwMy55LCBfNTAzLnosIHBvcy53KTsKICAgIHJldHVybiBwb3MueHl6Owp9Cgp2ZWMyIHVucGFja0Zsb2F0KGZsb2F0IGYpCnsKICAgIHJldHVybiB2ZWMyKGZsb29yKGYpIC8gMTAwLjAsIGZyYWN0KGYpKTsKfQoKdmVjMyBzdXJmYWNlQWxiZWRvKHZlYzMgYmFzZUNvbG9yLCBmbG9hdCBtZXRhbG5lc3MpCnsKICAgIHJldHVybiBtaXgoYmFzZUNvbG9yLCB2ZWMzKDAuMCksIHZlYzMobWV0YWxuZXNzKSk7Cn0KCnZlYzMgc3VyZmFjZUYwKHZlYzMgYmFzZUNvbG9yLCBmbG9hdCBtZXRhbG5lc3MpCnsKICAgIHJldHVybiBtaXgodmVjMygwLjAzOTk5OTk5OTEwNTkzMDMyODM2OTE0MDYyNSksIGJhc2VDb2xvciwgdmVjMyhtZXRhbG5lc3MpKTsKfQoKZmxvYXQgc2hhZG93Q29tcGFyZShzYW1wbGVyMkQgc2hhZG93TWFwXzEsIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUpCnsKICAgIGZsb2F0IGRlcHRoID0gdGV4dHVyZShzaGFkb3dNYXBfMSwgdXYpLng7CiAgICByZXR1cm4gc3RlcChjb21wYXJlLCBkZXB0aCk7Cn0KCmZsb2F0IHNoYWRvd0xlcnAoc2FtcGxlcjJEIHNoYWRvd01hcF8xLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlLCB2ZWMyIHNtU2l6ZSkKewogICAgdmVjMiB0ZXhlbFNpemUgPSB2ZWMyKDEuMCkgLyBzbVNpemU7CiAgICB2ZWMyIGYgPSBmcmFjdCgodXYgKiBzbVNpemUpICsgdmVjMigwLjUpKTsKICAgIHZlYzIgY2VudHJvaWRVViA9IGZsb29yKCh1diAqIHNtU2l6ZSkgKyB2ZWMyKDAuNSkpIC8gc21TaXplOwogICAgZmxvYXQgbGIgPSBzaGFkb3dDb21wYXJlKHNoYWRvd01hcF8xLCBjZW50cm9pZFVWLCBjb21wYXJlKTsKICAgIGZsb2F0IGx0ID0gc2hhZG93Q29tcGFyZShzaGFkb3dNYXBfMSwgY2VudHJvaWRVViArICh0ZXhlbFNpemUgKiB2ZWMyKDAuMCwgMS4wKSksIGNvbXBhcmUpOwogICAgZmxvYXQgcmIgPSBzaGFkb3dDb21wYXJlKHNoYWRvd01hcF8xLCBjZW50cm9pZFVWICsgKHRleGVsU2l6ZSAqIHZlYzIoMS4wLCAwLjApKSwgY29tcGFyZSk7CiAgICBmbG9hdCBydCA9IHNoYWRvd0NvbXBhcmUoc2hhZG93TWFwXzEsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUsIGNvbXBhcmUpOwogICAgZmxvYXQgYSA9IG1peChsYiwgbHQsIGYueSk7CiAgICBmbG9hdCBiID0gbWl4KHJiLCBydCwgZi55KTsKICAgIGZsb2F0IGMgPSBtaXgoYSwgYiwgZi54KTsKICAgIHJldHVybiBjOwp9CgpmbG9hdCBQQ0Yoc2FtcGxlcjJEIHNoYWRvd01hcF8xLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlLCB2ZWMyIHNtU2l6ZSkKewogICAgZmxvYXQgcmVzdWx0ID0gc2hhZG93TGVycChzaGFkb3dNYXBfMSwgdXYgKyAodmVjMigtMS4wKSAvIHNtU2l6ZSksIGNvbXBhcmUsIHNtU2l6ZSk7CiAgICByZXN1bHQgKz0gc2hhZG93TGVycChzaGFkb3dNYXBfMSwgdXYgKyAodmVjMigtMS4wLCAwLjApIC8gc21TaXplKSwgY29tcGFyZSwgc21TaXplKTsKICAgIHJlc3VsdCArPSBzaGFkb3dMZXJwKHNoYWRvd01hcF8xLCB1diArICh2ZWMyKC0xLjAsIDEuMCkgLyBzbVNpemUpLCBjb21wYXJlLCBzbVNpemUpOwogICAgcmVzdWx0ICs9IHNoYWRvd0xlcnAoc2hhZG93TWFwXzEsIHV2ICsgKHZlYzIoMC4wLCAtMS4wKSAvIHNtU2l6ZSksIGNvbXBhcmUsIHNtU2l6ZSk7CiAgICByZXN1bHQgKz0gc2hhZG93TGVycChzaGFkb3dNYXBfMSwgdXYsIGNvbXBhcmUsIHNtU2l6ZSk7CiAgICByZXN1bHQgKz0gc2hhZG93TGVycChzaGFkb3dNYXBfMSwgdXYgKyAodmVjMigwLjAsIDEuMCkgLyBzbVNpemUpLCBjb21wYXJlLCBzbVNpemUpOwogICAgcmVzdWx0ICs9IHNoYWRvd0xlcnAoc2hhZG93TWFwXzEsIHV2ICsgKHZlYzIoMS4wLCAtMS4wKSAvIHNtU2l6ZSksIGNvbXBhcmUsIHNtU2l6ZSk7CiAgICByZXN1bHQgKz0gc2hhZG93TGVycChzaGFkb3dNYXBfMSwgdXYgKyAodmVjMigxLjAsIDAuMCkgLyBzbVNpemUpLCBjb21wYXJlLCBzbVNpemUpOwogICAgcmVzdWx0ICs9IHNoYWRvd0xlcnAoc2hhZG93TWFwXzEsIHV2ICsgKHZlYzIoMS4wKSAvIHNtU2l6ZSksIGNvbXBhcmUsIHNtU2l6ZSk7CiAgICByZXR1cm4gcmVzdWx0IC8gOS4wOwp9CgpmbG9hdCBzaGFkb3dUZXN0KHNhbXBsZXIyRCBzaGFkb3dNYXBfMSwgdmVjMyBsUG9zLCBmbG9hdCBzaGFkb3dzQmlhc18xLCB2ZWMyIHNtU2l6ZSkKewogICAgYm9vbCBfNDQ1ID0gbFBvcy54IDwgMC4wOwogICAgYm9vbCBfNDUxOwogICAgaWYgKCFfNDQ1KQogICAgewogICAgICAgIF80NTEgPSBsUG9zLnkgPCAwLjA7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzQ1MSA9IF80NDU7CiAgICB9CiAgICBib29sIF80NTc7CiAgICBpZiAoIV80NTEpCiAgICB7CiAgICAgICAgXzQ1NyA9IGxQb3MueCA%IDEuMDsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBfNDU3ID0gXzQ1MTsKICAgIH0KICAgIGJvb2wgXzQ2MzsKICAgIGlmICghXzQ1NykKICAgIHsKICAgICAgICBfNDYzID0gbFBvcy55ID4gMS4wOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF80NjMgPSBfNDU3OwogICAgfQogICAgaWYgKF80NjMpCiAgICB7CiAgICAgICAgcmV0dXJuIDEuMDsKICAgIH0KICAgIHJldHVybiBQQ0Yoc2hhZG93TWFwXzEsIGxQb3MueHksIGxQb3MueiAtIHNoYWRvd3NCaWFzXzEsIHNtU2l6ZSk7Cn0KCmZsb2F0IGxwVG9EZXB0aChpbm91dCB2ZWMzIGxwLCB2ZWMyIGxpZ2h0UHJval8xKQp7CiAgICBscCA9IGFicyhscCk7CiAgICBmbG9hdCB6Y29tcCA9IG1heChscC54LCBtYXgobHAueSwgbHAueikpOwogICAgemNvbXAgPSBsaWdodFByb2pfMS54IC0gKGxpZ2h0UHJval8xLnkgLyB6Y29tcCk7CiAgICByZXR1cm4gKHpjb21wICogMC41KSArIDAuNTsKfQoKZmxvYXQgUENGQ3ViZShzYW1wbGVyQ3ViZSBzaGFkb3dNYXBDdWJlXzEsIHZlYzMgbHAsIGlub3V0IHZlYzMgbWwsIGZsb2F0IGJpYXMsIHZlYzIgbGlnaHRQcm9qXzEsIHZlYzMgbikKewogICAgdmVjMyBwYXJhbSA9IGxwIC0gKG4gKiAwLjAwMzAwMDAwMDAyNjA3NzAzMjA4OTIzMzM5ODQzNzUpOwogICAgZmxvYXQgXzM0MiA9IGxwVG9EZXB0aChwYXJhbSwgbGlnaHRQcm9qXzEpOwogICAgZmxvYXQgY29tcGFyZSA9IF8zNDIgLSAoYmlhcyAqIDAuNDAwMDAwMDA1OTYwNDY0NDc3NTM5MDYyNSk7CiAgICBtbCArPSAobiAqIDAuMDAzMDAwMDAwMDI2MDc3MDMyMDg5MjMzMzk4NDM3NSk7CiAgICBmbG9hdCByZXN1bHQgPSBzdGVwKGNvbXBhcmUsIHRleHR1cmUoc2hhZG93TWFwQ3ViZV8xLCBtbCkueCk7CiAgICByZXN1bHQgKz0gc3RlcChjb21wYXJlLCB0ZXh0dXJlKHNoYWRvd01hcEN1YmVfMSwgbWwgKyB2ZWMzKDAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1KSkueCk7CiAgICByZXN1bHQgKz0gc3RlcChjb21wYXJlLCB0ZXh0dXJlKHNoYWRvd01hcEN1YmVfMSwgbWwgKyB2ZWMzKC0wLjAwMTAwMDAwMDA0NzQ5NzQ1MTMwNTM4OTQwNDI5Njg3NSwgMC4wMDEwMDAwMDAwNDc0OTc0NTEzMDUzODk0MDQyOTY4NzUsIDAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1KSkueCk7CiAgICByZXN1bHQgKz0gc3RlcChjb21wYXJlLCB0ZXh0dXJlKHNoYWRvd01hcEN1YmVfMSwgbWwgKyB2ZWMzKDAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1LCAtMC4wMDEwMDAwMDAwNDc0OTc0NTEzMDUzODk0MDQyOTY4NzUsIDAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1KSkueCk7CiAgICByZXN1bHQgKz0gc3RlcChjb21wYXJlLCB0ZXh0dXJlKHNoYWRvd01hcEN1YmVfMSwgbWwgKyB2ZWMzKDAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1LCAwLjAwMTAwMDAwMDA0NzQ5NzQ1MTMwNTM4OTQwNDI5Njg3NSwgLTAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1KSkueCk7CiAgICByZXN1bHQgKz0gc3RlcChjb21wYXJlLCB0ZXh0dXJlKHNoYWRvd01hcEN1YmVfMSwgbWwgKyB2ZWMzKC0wLjAwMTAwMDAwMDA0NzQ5NzQ1MTMwNTM4OTQwNDI5Njg3NSwgLTAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1LCAwLjAwMTAwMDAwMDA0NzQ5NzQ1MTMwNTM4OTQwNDI5Njg3NSkpLngpOwogICAgcmVzdWx0ICs9IHN0ZXAoY29tcGFyZSwgdGV4dHVyZShzaGFkb3dNYXBDdWJlXzEsIG1sICsgdmVjMygwLjAwMTAwMDAwMDA0NzQ5NzQ1MTMwNTM4OTQwNDI5Njg3NSwgLTAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1LCAtMC4wMDEwMDAwMDAwNDc0OTc0NTEzMDUzODk0MDQyOTY4NzUpKS54KTsKICAgIHJlc3VsdCArPSBzdGVwKGNvbXBhcmUsIHRleHR1cmUoc2hhZG93TWFwQ3ViZV8xLCBtbCArIHZlYzMoLTAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1LCAwLjAwMTAwMDAwMDA0NzQ5NzQ1MTMwNTM4OTQwNDI5Njg3NSwgLTAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1KSkueCk7CiAgICByZXN1bHQgKz0gc3RlcChjb21wYXJlLCB0ZXh0dXJlKHNoYWRvd01hcEN1YmVfMSwgbWwgKyB2ZWMzKC0wLjAwMTAwMDAwMDA0NzQ5NzQ1MTMwNTM4OTQwNDI5Njg3NSkpLngpOwogICAgcmVzdWx0IC89IDkuMDsKICAgIHJldHVybiByZXN1bHQ7Cn0KCmZsb2F0IGF0dGVudWF0ZShmbG9hdCBkaXN0KQp7CiAgICByZXR1cm4gMS4wIC8gKGRpc3QgKiBkaXN0KTsKfQoKdmVjMyBsYW1iZXJ0RGlmZnVzZUJSREYodmVjMyBhbGJlZG8sIGZsb2F0IG5sKQp7CiAgICByZXR1cm4gYWxiZWRvICogbWF4KDAuMCwgbmwpOwp9CgpmbG9hdCBkX2dneChmbG9hdCBuaCwgZmxvYXQgYSkKewogICAgZmxvYXQgYTIgPSBhICogYTsKICAgIGZsb2F0IGRlbm9tID0gcG93KCgobmggKiBuaCkgKiAoYTIgLSAxLjApKSArIDEuMCwgMi4wKTsKICAgIHJldHVybiAoYTIgKiAwLjMxODMwOTg3MzM0MjUxNDAzODA4NTkzNzUpIC8gZGVub207Cn0KCmZsb2F0IHZfc21pdGhzY2hsaWNrKGZsb2F0IG5sLCBmbG9hdCBudiwgZmxvYXQgYSkKewogICAgcmV0dXJuIDEuMCAvICgoKG5sICogKDEuMCAtIGEpKSArIGEpICogKChudiAqICgxLjAgLSBhKSkgKyBhKSk7Cn0KCnZlYzMgZl9zY2hsaWNrKHZlYzMgZjAsIGZsb2F0IHZoKQp7CiAgICByZXR1cm4gZjAgKyAoKHZlYzMoMS4wKSAtIGYwKSAqIGV4cDIoKCgoLTUuNTU0NzI5OTM4NTA3MDgwMDc4MTI1KSAqIHZoKSAtIDYuOTgzMTYwMDE4OTIwODk4NDM3NSkgKiB2aCkpOwp9Cgp2ZWMzIHNwZWN1bGFyQlJERih2ZWMzIGYwLCBmbG9hdCByb3VnaG5lc3MsIGZsb2F0IG5sLCBmbG9hdCBuaCwgZmxvYXQgbnYsIGZsb2F0IHZoKQp7CiAgICBmbG9hdCBhID0gcm91Z2huZXNzICogcm91Z2huZXNzOwogICAgcmV0dXJuIChmX3NjaGxpY2soZjAsIHZoKSAqIChkX2dneChuaCwgYSkgKiBjbGFtcCh2X3NtaXRoc2NobGljayhubCwgbnYsIGEpLCAwLjAsIDEuMCkpKSAvIHZlYzMoNC4wKTsKfQoKdm9pZCBtYWluKCkKewogICAgdmVjMiB0ZXhDb29yZCA9IHd2cHBvc2l0aW9uLnh5IC8gdmVjMih3dnBwb3NpdGlvbi53KTsKICAgIHRleENvb3JkID0gKHRleENvb3JkICogMC41KSArIHZlYzIoMC41KTsKICAgIHZlYzQgZzAgPSB0ZXh0dXJlKGdidWZmZXIwLCB0ZXhDb29yZCk7CiAgICB2ZWM0IGcxID0gdGV4dHVyZShnYnVmZmVyMSwgdGV4Q29vcmQpOwogICAgZmxvYXQgc3BlYyA9IHVucGFja0Zsb2F0MihnMS53KS55OwogICAgZmxvYXQgZGVwdGggPSAoKDEuMCAtIGcwLncpICogMi4wKSAtIDEuMDsKICAgIHZlYzMgbjsKICAgIG4ueiA9ICgxLjAgLSBhYnMoZzAueCkpIC0gYWJzKGcwLnkpOwogICAgdmVjMiBfNTcyOwogICAgaWYgKG4ueiA%PSAwLjApCiAgICB7CiAgICAgICAgXzU3MiA9IGcwLnh5OwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF81NzIgPSBvY3RhaGVkcm9uV3JhcChnMC54eSk7CiAgICB9CiAgICBuID0gdmVjMyhfNTcyLngsIF81NzIueSwgbi56KTsKICAgIG4gPSBub3JtYWxpemUobik7CiAgICB2ZWMzIHAgPSBnZXRQb3MyKGludlZQLCBkZXB0aCwgdGV4Q29vcmQpOwogICAgdmVjMiBtZXRyb3VnaCA9IHVucGFja0Zsb2F0KGcwLnopOwogICAgdmVjMyB2ID0gbm9ybWFsaXplKGV5ZSAtIHApOwogICAgZmxvYXQgZG90TlYgPSBkb3Qobiwgdik7CiAgICB2ZWMzIGFsYmVkbyA9IHN1cmZhY2VBbGJlZG8oZzEueHl6LCBtZXRyb3VnaC54KTsKICAgIHZlYzMgZjAgPSBzdXJmYWNlRjAoZzEueHl6LCBtZXRyb3VnaC54KTsKICAgIHZlYzMgbHAgPSBsaWdodFBvcyAtIHA7CiAgICB2ZWMzIGwgPSBub3JtYWxpemUobHApOwogICAgdmVjMyBoID0gbm9ybWFsaXplKHYgKyBsKTsKICAgIGZsb2F0IGRvdE5IID0gZG90KG4sIGgpOwogICAgZmxvYXQgZG90VkggPSBkb3QodiwgaCk7CiAgICBmbG9hdCBkb3ROTCA9IGRvdChuLCBsKTsKICAgIGZsb2F0IHZpc2liaWxpdHkgPSAxLjA7CiAgICBpZiAobGlnaHRTaGFkb3cgPT0gMSkKICAgIHsKICAgICAgICB2ZWM0IGxQb3MgPSBMV1ZQICogdmVjNChwICsgKChuICogc2hhZG93c0JpYXMpICogMTAuMCksIDEuMCk7CiAgICAgICAgaWYgKGxQb3MudyA%IDAuMCkKICAgICAgICB7CiAgICAgICAgICAgIHZpc2liaWxpdHkgPSBzaGFkb3dUZXN0KHNoYWRvd01hcCwgbFBvcy54eXogLyB2ZWMzKGxQb3MudyksIHNoYWRvd3NCaWFzLCB2ZWMyKDEwMjQuMCkpOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBpZiAobGlnaHRTaGFkb3cgPT0gMikKICAgICAgICB7CiAgICAgICAgICAgIHZlYzMgcGFyYW0gPSAtbDsKICAgICAgICAgICAgZmxvYXQgXzcwMyA9IFBDRkN1YmUoc2hhZG93TWFwQ3ViZSwgbHAsIHBhcmFtLCBzaGFkb3dzQmlhcywgbGlnaHRQcm9qLCBuKTsKICAgICAgICAgICAgdmlzaWJpbGl0eSA9IF83MDM7CiAgICAgICAgfQogICAgfQogICAgdmlzaWJpbGl0eSAqPSBhdHRlbnVhdGUoZGlzdGFuY2UocCwgbGlnaHRQb3MpKTsKICAgIGlmIChsaWdodFR5cGUgPT0gMikKICAgIHsKICAgICAgICBmbG9hdCBzcG90RWZmZWN0ID0gZG90KGxpZ2h0RGlyLCBsKTsKICAgICAgICBpZiAoc3BvdEVmZmVjdCA8IHNwb3RsaWdodERhdGEueCkKICAgICAgICB7CiAgICAgICAgICAgIHZpc2liaWxpdHkgKj0gc21vb3Roc3RlcChzcG90bGlnaHREYXRhLnksIHNwb3RsaWdodERhdGEueCwgc3BvdEVmZmVjdCk7CiAgICAgICAgfQogICAgfQogICAgdmVjMyBfNzUwID0gbGFtYmVydERpZmZ1c2VCUkRGKGFsYmVkbywgZG90TkwpICsgKHNwZWN1bGFyQlJERihmMCwgbWV0cm91Z2gueSwgZG90TkwsIGRvdE5ILCBkb3ROViwgZG90VkgpICogc3BlYyk7CiAgICBmcmFnQ29sb3IgPSB2ZWM0KF83NTAueCwgXzc1MC55LCBfNzUwLnosIGZyYWdDb2xvci53KTsKICAgIHZlYzMgXzc1NyA9IGZyYWdDb2xvci54eXogKiBsaWdodENvbG9yOwogICAgZnJhZ0NvbG9yID0gdmVjNChfNzU3LngsIF83NTcueSwgXzc1Ny56LCBmcmFnQ29sb3Iudyk7CiAgICB2ZWMzIF83NjMgPSBmcmFnQ29sb3IueHl6ICogdmlzaWJpbGl0eTsKICAgIGZyYWdDb2xvciA9IHZlYzQoXzc2My54LCBfNzYzLnksIF83NjMueiwgZnJhZ0NvbG9yLncpOwp9Cgo",11,4f,b1,e4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		deferred_light_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		deferred_light_quad_fragData0 = HX_("s10028:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHZlYzQgY2FzRGF0YVsyMF07CnVuaWZvcm0gc2FtcGxlcjJEIGdidWZmZXIwOwp1bmlmb3JtIHNhbXBsZXIyRCBnYnVmZmVyMTsKdW5pZm9ybSB2ZWMzIGV5ZTsKdW5pZm9ybSB2ZWMzIGV5ZUxvb2s7CnVuaWZvcm0gdmVjMiBjYW1lcmFQcm9qOwp1bmlmb3JtIHZlYzMgbDsKdW5pZm9ybSBpbnQgbGlnaHRTaGFkb3c7CnVuaWZvcm0gc2FtcGxlcjJEIHNoYWRvd01hcDsKdW5pZm9ybSBmbG9hdCBzaGFkb3dzQmlhczsKdW5pZm9ybSB2ZWMzIGxpZ2h0Q29sb3I7CgppbiB2ZWMyIHRleENvb3JkOwppbiB2ZWMzIHZpZXdSYXk7Cm91dCB2ZWM0IGZyYWdDb2xvcjsKCnZlYzIgdW5wYWNrRmxvYXQyKGZsb2F0IGYpCnsKICAgIHJldHVybiB2ZWMyKGZsb29yKGYpIC8gMjU1LjAsIGZyYWN0KGYpKTsKfQoKdmVjMiBvY3RhaGVkcm9uV3JhcCh2ZWMyIHYpCnsKICAgIHJldHVybiAodmVjMigxLjApIC0gYWJzKHYueXgpKSAqIHZlYzIoKHYueCA%PSAwLjApID8gMS4wIDogKC0xLjApLCAodi55ID49IDAuMCkgPyAxLjAgOiAoLTEuMCkpOwp9Cgp2ZWMzIGdldFBvcyh2ZWMzIGV5ZV8xLCB2ZWMzIGV5ZUxvb2tfMSwgdmVjMyB2aWV3UmF5XzEsIGZsb2F0IGRlcHRoLCB2ZWMyIGNhbWVyYVByb2pfMSkKewogICAgdmVjMyB2cmF5ID0gbm9ybWFsaXplKHZpZXdSYXlfMSk7CiAgICBmbG9hdCBsaW5lYXJEZXB0aCA9IGNhbWVyYVByb2pfMS55IC8gKCgoZGVwdGggKiAwLjUpICsgMC41KSAtIGNhbWVyYVByb2pfMS54KTsKICAgIGZsb2F0IHZpZXdaRGlzdCA9IGRvdChleWVMb29rXzEsIHZyYXkpOwogICAgdmVjMyB3cG9zaXRpb24gPSBleWVfMSArICh2cmF5ICogKGxpbmVhckRlcHRoIC8gdmlld1pEaXN0KSk7CiAgICByZXR1cm4gd3Bvc2l0aW9uOwp9Cgp2ZWMyIHVucGFja0Zsb2F0KGZsb2F0IGYpCnsKICAgIHJldHVybiB2ZWMyKGZsb29yKGYpIC8gMTAwLjAsIGZyYWN0KGYpKTsKfQoKdmVjMyBzdXJmYWNlQWxiZWRvKHZlYzMgYmFzZUNvbG9yLCBmbG9hdCBtZXRhbG5lc3MpCnsKICAgIHJldHVybiBtaXgoYmFzZUNvbG9yLCB2ZWMzKDAuMCksIHZlYzMobWV0YWxuZXNzKSk7Cn0KCnZlYzMgc3VyZmFjZUYwKHZlYzMgYmFzZUNvbG9yLCBmbG9hdCBtZXRhbG5lc3MpCnsKICAgIHJldHVybiBtaXgodmVjMygwLjAzOTk5OTk5OTEwNTkzMDMyODM2OTE0MDYyNSksIGJhc2VDb2xvciwgdmVjMyhtZXRhbG5lc3MpKTsKfQoKbWF0NCBnZXRDYXNjYWRlTWF0KGZsb2F0IGQsIGlub3V0IGludCBjYXNpLCBpbm91dCBpbnQgY2FzSW5kZXgpCnsKICAgIHZlYzQgY29tcCA9IHZlYzQoZmxvYXQoZCA%IGNhc0RhdGFbMTZdLngpLCBmbG9hdChkID4gY2FzRGF0YVsxNl0ueSksIGZsb2F0KGQgPiBjYXNEYXRhWzE2XS56KSwgZmxvYXQoZCA%IGNhc0RhdGFbMTZdLncpKTsKICAgIGNhc2kgPSBpbnQobWluKGRvdCh2ZWM0KDEuMCksIGNvbXApLCA0LjApKTsKICAgIGNhc0luZGV4ID0gY2FzaSAqIDQ7CiAgICByZXR1cm4gbWF0NCh2ZWM0KGNhc0RhdGFbY2FzSW5kZXggKyAwXSksIHZlYzQoY2FzRGF0YVtjYXNJbmRleCArIDFdKSwgdmVjNChjYXNEYXRhW2Nhc0luZGV4ICsgMl0pLCB2ZWM0KGNhc0RhdGFbY2FzSW5kZXggKyAzXSkpOwp9CgpmbG9hdCBzaGFkb3dDb21wYXJlKHNhbXBsZXIyRCBzaGFkb3dNYXBfMSwgdmVjMiB1diwgZmxvYXQgY29tcGFyZSkKewogICAgZmxvYXQgZGVwdGggPSB0ZXh0dXJlKHNoYWRvd01hcF8xLCB1dikueDsKICAgIHJldHVybiBzdGVwKGNvbXBhcmUsIGRlcHRoKTsKfQoKZmxvYXQgc2hhZG93TGVycChzYW1wbGVyMkQgc2hhZG93TWFwXzEsIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUsIHZlYzIgc21TaXplKQp7CiAgICB2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoMS4wKSAvIHNtU2l6ZTsKICAgIHZlYzIgZiA9IGZyYWN0KCh1diAqIHNtU2l6ZSkgKyB2ZWMyKDAuNSkpOwogICAgdmVjMiBjZW50cm9pZFVWID0gZmxvb3IoKHV2ICogc21TaXplKSArIHZlYzIoMC41KSkgLyBzbVNpemU7CiAgICBmbG9hdCBsYiA9IHNoYWRvd0NvbXBhcmUoc2hhZG93TWFwXzEsIGNlbnRyb2lkVVYsIGNvbXBhcmUpOwogICAgZmxvYXQgbHQgPSBzaGFkb3dDb21wYXJlKHNoYWRvd01hcF8xLCBjZW50cm9pZFVWICsgKHRleGVsU2l6ZSAqIHZlYzIoMC4wLCAxLjApKSwgY29tcGFyZSk7CiAgICBmbG9hdCByYiA9IHNoYWRvd0NvbXBhcmUoc2hhZG93TWFwXzEsIGNlbnRyb2lkVVYgKyAodGV4ZWxTaXplICogdmVjMigxLjAsIDAuMCkpLCBjb21wYXJlKTsKICAgIGZsb2F0IHJ0ID0gc2hhZG93Q29tcGFyZShzaGFkb3dNYXBfMSwgY2VudHJvaWRVViArIHRleGVsU2l6ZSwgY29tcGFyZSk7CiAgICBmbG9hdCBhID0gbWl4KGxiLCBsdCwgZi55KTsKICAgIGZsb2F0IGIgPSBtaXgocmIsIHJ0LCBmLnkpOwogICAgZmxvYXQgYyA9IG1peChhLCBiLCBmLngpOwogICAgcmV0dXJuIGM7Cn0KCmZsb2F0IFBDRihzYW1wbGVyMkQgc2hhZG93TWFwXzEsIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUsIHZlYzIgc21TaXplKQp7CiAgICBmbG9hdCByZXN1bHQgPSBzaGFkb3dMZXJwKHNoYWRvd01hcF8xLCB1diArICh2ZWMyKC0xLjApIC8gc21TaXplKSwgY29tcGFyZSwgc21TaXplKTsKICAgIHJlc3VsdCArPSBzaGFkb3dMZXJwKHNoYWRvd01hcF8xLCB1diArICh2ZWMyKC0xLjAsIDAuMCkgLyBzbVNpemUpLCBjb21wYXJlLCBzbVNpemUpOwogICAgcmVzdWx0ICs9IHNoYWRvd0xlcnAoc2hhZG93TWFwXzEsIHV2ICsgKHZlYzIoLTEuMCwgMS4wKSAvIHNtU2l6ZSksIGNvbXBhcmUsIHNtU2l6ZSk7CiAgICByZXN1bHQgKz0gc2hhZG93TGVycChzaGFkb3dNYXBfMSwgdXYgKyAodmVjMigwLjAsIC0xLjApIC8gc21TaXplKSwgY29tcGFyZSwgc21TaXplKTsKICAgIHJlc3VsdCArPSBzaGFkb3dMZXJwKHNoYWRvd01hcF8xLCB1diwgY29tcGFyZSwgc21TaXplKTsKICAgIHJlc3VsdCArPSBzaGFkb3dMZXJwKHNoYWRvd01hcF8xLCB1diArICh2ZWMyKDAuMCwgMS4wKSAvIHNtU2l6ZSksIGNvbXBhcmUsIHNtU2l6ZSk7CiAgICByZXN1bHQgKz0gc2hhZG93TGVycChzaGFkb3dNYXBfMSwgdXYgKyAodmVjMigxLjAsIC0xLjApIC8gc21TaXplKSwgY29tcGFyZSwgc21TaXplKTsKICAgIHJlc3VsdCArPSBzaGFkb3dMZXJwKHNoYWRvd01hcF8xLCB1diArICh2ZWMyKDEuMCwgMC4wKSAvIHNtU2l6ZSksIGNvbXBhcmUsIHNtU2l6ZSk7CiAgICByZXN1bHQgKz0gc2hhZG93TGVycChzaGFkb3dNYXBfMSwgdXYgKyAodmVjMigxLjApIC8gc21TaXplKSwgY29tcGFyZSwgc21TaXplKTsKICAgIHJldHVybiByZXN1bHQgLyA5LjA7Cn0KCmZsb2F0IHNoYWRvd1Rlc3Qoc2FtcGxlcjJEIHNoYWRvd01hcF8xLCB2ZWMzIGxQb3MsIGZsb2F0IHNoYWRvd3NCaWFzXzEsIHZlYzIgc21TaXplKQp7CiAgICBib29sIF8zMDkgPSBsUG9zLnggPCAwLjA7CiAgICBib29sIF8zMTU7CiAgICBpZiAoIV8zMDkpCiAgICB7CiAgICAgICAgXzMxNSA9IGxQb3MueSA8IDAuMDsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBfMzE1ID0gXzMwOTsKICAgIH0KICAgIGJvb2wgXzMyMTsKICAgIGlmICghXzMxNSkKICAgIHsKICAgICAgICBfMzIxID0gbFBvcy54ID4gMS4wOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF8zMjEgPSBfMzE1OwogICAgfQogICAgYm9vbCBfMzI3OwogICAgaWYgKCFfMzIxKQogICAgewogICAgICAgIF8zMjcgPSBsUG9zLnkgPiAxLjA7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzMyNyA9IF8zMjE7CiAgICB9CiAgICBpZiAoXzMyNykKICAgIHsKICAgICAgICByZXR1cm4gMS4wOwogICAgfQogICAgcmV0dXJuIFBDRihzaGFkb3dNYXBfMSwgbFBvcy54eSwgbFBvcy56IC0gc2hhZG93c0JpYXNfMSwgc21TaXplKTsKfQoKZmxvYXQgc2hhZG93VGVzdENhc2NhZGUoc2FtcGxlcjJEIHNoYWRvd01hcF8xLCB2ZWMzIGV5ZV8xLCB2ZWMzIHAsIGZsb2F0IHNoYWRvd3NCaWFzXzEsIHZlYzIgc21TaXplKQp7CiAgICBmbG9hdCBkID0gZGlzdGFuY2UoZXllXzEsIHApOwogICAgaW50IHBhcmFtOwogICAgaW50IHBhcmFtXzE7CiAgICBtYXQ0IF80MjUgPSBnZXRDYXNjYWRlTWF0KGQsIHBhcmFtLCBwYXJhbV8xKTsKICAgIGludCBjYXNpID0gcGFyYW07CiAgICBpbnQgY2FzSW5kZXggPSBwYXJhbV8xOwogICAgbWF0NCBMV1ZQID0gXzQyNTsKICAgIHZlYzQgbFBvcyA9IExXVlAgKiB2ZWM0KHAsIDEuMCk7CiAgICBmbG9hdCB2aXNpYmlsaXR5ID0gMS4wOwogICAgaWYgKGxQb3MudyA%IDAuMCkKICAgIHsKICAgICAgICB2aXNpYmlsaXR5ID0gc2hhZG93VGVzdChzaGFkb3dNYXBfMSwgbFBvcy54eXogLyB2ZWMzKGxQb3MudyksIHNoYWRvd3NCaWFzXzEsIHNtU2l6ZSk7CiAgICB9CiAgICBmbG9hdCBuZXh0U3BsaXQgPSBjYXNEYXRhWzE2XVtjYXNpXTsKICAgIGZsb2F0IF80NTU7CiAgICBpZiAoY2FzaSA9PSAwKQogICAgewogICAgICAgIF80NTUgPSBuZXh0U3BsaXQ7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgXzQ1NSA9IG5leHRTcGxpdCAtIChjYXNEYXRhWzE2XVtjYXNpIC0gMV0pOwogICAgfQogICAgZmxvYXQgc3BsaXRTaXplID0gXzQ1NTsKICAgIGZsb2F0IHNwbGl0RGlzdCA9IChuZXh0U3BsaXQgLSBkKSAvIHNwbGl0U2l6ZTsKICAgIGlmICgoc3BsaXREaXN0IDw9IDAuMTUwMDAwMDA1OTYwNDY0NDc3NTM5MDYyNSkgJiYgKGNhc2kgIT0gMykpCiAgICB7CiAgICAgICAgaW50IGNhc0luZGV4MiA9IGNhc0luZGV4ICsgNDsKICAgICAgICBtYXQ0IExXVlAyID0gbWF0NCh2ZWM0KGNhc0RhdGFbY2FzSW5kZXgyICsgMF0pLCB2ZWM0KGNhc0RhdGFbY2FzSW5kZXgyICsgMV0pLCB2ZWM0KGNhc0RhdGFbY2FzSW5kZXgyICsgMl0pLCB2ZWM0KGNhc0RhdGFbY2FzSW5kZXgyICsgM10pKTsKICAgICAgICB2ZWM0IGxQb3MyID0gTFdWUDIgKiB2ZWM0KHAsIDEuMCk7CiAgICAgICAgZmxvYXQgdmlzaWJpbGl0eTIgPSAxLjA7CiAgICAgICAgaWYgKGxQb3MyLncgPiAwLjApCiAgICAgICAgewogICAgICAgICAgICB2aXNpYmlsaXR5MiA9IHNoYWRvd1Rlc3Qoc2hhZG93TWFwXzEsIGxQb3MyLnh5eiAvIHZlYzMobFBvczIudyksIHNoYWRvd3NCaWFzXzEsIHNtU2l6ZSk7CiAgICAgICAgfQogICAgICAgIGZsb2F0IGxlcnBBbXQgPSBzbW9vdGhzdGVwKDAuMCwgMC4xNTAwMDAwMDU5NjA0NjQ0Nzc1MzkwNjI1LCBzcGxpdERpc3QpOwogICAgICAgIHJldHVybiBtaXgodmlzaWJpbGl0eTIsIHZpc2liaWxpdHksIGxlcnBBbXQpOwogICAgfQogICAgcmV0dXJuIHZpc2liaWxpdHk7Cn0KCnZlYzMgbGFtYmVydERpZmZ1c2VCUkRGKHZlYzMgYWxiZWRvLCBmbG9hdCBubCkKewogICAgcmV0dXJuIGFsYmVkbyAqIG1heCgwLjAsIG5sKTsKfQoKZmxvYXQgZF9nZ3goZmxvYXQgbmgsIGZsb2F0IGEpCnsKICAgIGZsb2F0IGEyID0gYSAqIGE7CiAgICBmbG9hdCBkZW5vbSA9IHBvdygoKG5oICogbmgpICogKGEyIC0gMS4wKSkgKyAxLjAsIDIuMCk7CiAgICByZXR1cm4gKGEyICogMC4zMTgzMDk4NzMzNDI1MTQwMzgwODU5Mzc1KSAvIGRlbm9tOwp9CgpmbG9hdCB2X3NtaXRoc2NobGljayhmbG9hdCBubCwgZmxvYXQgbnYsIGZsb2F0IGEpCnsKICAgIHJldHVybiAxLjAgLyAoKChubCAqICgxLjAgLSBhKSkgKyBhKSAqICgobnYgKiAoMS4wIC0gYSkpICsgYSkpOwp9Cgp2ZWMzIGZfc2NobGljayh2ZWMzIGYwLCBmbG9hdCB2aCkKewogICAgcmV0dXJuIGYwICsgKCh2ZWMzKDEuMCkgLSBmMCkgKiBleHAyKCgoKC01LjU1NDcyOTkzODUwNzA4MDA3ODEyNSkgKiB2aCkgLSA2Ljk4MzE2MDAxODkyMDg5ODQzNzUpICogdmgpKTsKfQoKdmVjMyBzcGVjdWxhckJSREYodmVjMyBmMCwgZmxvYXQgcm91Z2huZXNzLCBmbG9hdCBubCwgZmxvYXQgbmgsIGZsb2F0IG52LCBmbG9hdCB2aCkKewogICAgZmxvYXQgYSA9IHJvdWdobmVzcyAqIHJvdWdobmVzczsKICAgIHJldHVybiAoZl9zY2hsaWNrKGYwLCB2aCkgKiAoZF9nZ3gobmgsIGEpICogY2xhbXAodl9zbWl0aHNjaGxpY2sobmwsIG52LCBhKSwgMC4wLCAxLjApKSkgLyB2ZWMzKDQuMCk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgZzAgPSB0ZXh0dXJlKGdidWZmZXIwLCB0ZXhDb29yZCk7CiAgICB2ZWM0IGcxID0gdGV4dHVyZShnYnVmZmVyMSwgdGV4Q29vcmQpOwogICAgZmxvYXQgc3BlYyA9IHVucGFja0Zsb2F0MihnMS53KS55OwogICAgZmxvYXQgZGVwdGggPSAoKDEuMCAtIGcwLncpICogMi4wKSAtIDEuMDsKICAgIHZlYzMgbjsKICAgIG4ueiA9ICgxLjAgLSBhYnMoZzAueCkpIC0gYWJzKGcwLnkpOwogICAgdmVjMiBfNjQwOwogICAgaWYgKG4ueiA%PSAwLjApCiAgICB7CiAgICAgICAgXzY0MCA9IGcwLnh5OwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF82NDAgPSBvY3RhaGVkcm9uV3JhcChnMC54eSk7CiAgICB9CiAgICBuID0gdmVjMyhfNjQwLngsIF82NDAueSwgbi56KTsKICAgIG4gPSBub3JtYWxpemUobik7CiAgICB2ZWMzIHAgPSBnZXRQb3MoZXllLCBleWVMb29rLCB2aWV3UmF5LCBkZXB0aCwgY2FtZXJhUHJvaik7CiAgICB2ZWMyIG1ldHJvdWdoID0gdW5wYWNrRmxvYXQoZzAueik7CiAgICB2ZWMzIHYgPSBub3JtYWxpemUoZXllIC0gcCk7CiAgICBmbG9hdCBkb3ROViA9IGRvdChuLCB2KTsKICAgIHZlYzMgYWxiZWRvID0gc3VyZmFjZUFsYmVkbyhnMS54eXosIG1ldHJvdWdoLngpOwogICAgdmVjMyBmMCA9IHN1cmZhY2VGMChnMS54eXosIG1ldHJvdWdoLngpOwogICAgZmxvYXQgZG90TkwgPSBkb3QobiwgbCk7CiAgICBmbG9hdCB2aXNpYmlsaXR5ID0gMS4wOwogICAgaWYgKGxpZ2h0U2hhZG93ID09IDEpCiAgICB7CiAgICAgICAgdmlzaWJpbGl0eSA9IHNoYWRvd1Rlc3RDYXNjYWRlKHNoYWRvd01hcCwgZXllLCBwICsgKChuICogc2hhZG93c0JpYXMpICogMTAuMCksIHNoYWRvd3NCaWFzLCB2ZWMyKDQwOTYuMCwgMTAyNC4wKSk7CiAgICB9CiAgICB2ZWMzIGggPSBub3JtYWxpemUodiArIGwpOwogICAgZmxvYXQgZG90TkggPSBkb3QobiwgaCk7CiAgICBmbG9hdCBkb3RWSCA9IGRvdCh2LCBoKTsKICAgIHZlYzMgXzc0OCA9IGxhbWJlcnREaWZmdXNlQlJERihhbGJlZG8sIGRvdE5MKSArIChzcGVjdWxhckJSREYoZjAsIG1ldHJvdWdoLnksIGRvdE5MLCBkb3ROSCwgZG90TlYsIGRvdFZIKSAqIHNwZWMpOwogICAgZnJhZ0NvbG9yID0gdmVjNChfNzQ4LngsIF83NDgueSwgXzc0OC56LCBmcmFnQ29sb3Iudyk7CiAgICB2ZWMzIF83NTUgPSBmcmFnQ29sb3IueHl6ICogbGlnaHRDb2xvcjsKICAgIGZyYWdDb2xvciA9IHZlYzQoXzc1NS54LCBfNzU1LnksIF83NTUueiwgZnJhZ0NvbG9yLncpOwogICAgdmVjMyBfNzYxID0gZnJhZ0NvbG9yLnh5eiAqIHZpc2liaWxpdHk7CiAgICBmcmFnQ29sb3IgPSB2ZWM0KF83NjEueCwgXzc2MS55LCBfNzYxLnosIGZyYWdDb2xvci53KTsKfQoK",84,5d,5d,14);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		deferred_light_quad_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		pass_vertData0 = HX_("s331:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgpvdXQgdmVjMiB0ZXhDb29yZDsKaW4gdmVjMiBwb3M7Cgp2b2lkIG1haW4oKQp7CiAgICB0ZXhDb29yZCA9IChwb3MgKiB2ZWMyKDAuNSkpICsgdmVjMigwLjUpOwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwp9Cgo",2c,6d,f9,e3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		pass_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		pass_lamp_volume_vertData0 = HX_("s347:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgTFZXVlA7CgpvdXQgdmVjNCB3dnBwb3NpdGlvbjsKaW4gdmVjMyBwb3M7Cgp2b2lkIG1haW4oKQp7CiAgICB3dnBwb3NpdGlvbiA9IExWV1ZQICogdmVjNChwb3MsIDEuMCk7CiAgICBnbF9Qb3NpdGlvbiA9IHd2cHBvc2l0aW9uOwp9Cgo",4e,9f,14,8e);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		pass_lamp_volume_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		pass_viewray_vertData0 = HX_("s632:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgaW52VlA7CnVuaWZvcm0gdmVjMyBleWU7CgpvdXQgdmVjMiB0ZXhDb29yZDsKaW4gdmVjMiBwb3M7Cm91dCB2ZWMzIHZpZXdSYXk7Cgp2b2lkIG1haW4oKQp7CiAgICB0ZXhDb29yZCA9IChwb3MgKiB2ZWMyKDAuNSkpICsgdmVjMigwLjUpOwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwogICAgdmVjNCB2ID0gdmVjNChwb3MueCwgcG9zLnksIDEuMCwgMS4wKTsKICAgIHYgPSB2ZWM0KGludlZQICogdik7CiAgICB2ZWMzIF82MiA9IHYueHl6IC8gdmVjMyh2LncpOwogICAgdiA9IHZlYzQoXzYyLngsIF82Mi55LCBfNjIueiwgdi53KTsKICAgIHZpZXdSYXkgPSB2Lnh5eiAtIGV5ZTsKfQoK",ae,71,94,27);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		pass_viewray_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		smaa_blend_weight_fragData0 = ( HX_CSTRING("s46943:%IDAuMCkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8xID0gdmVjMigtMS4wLCAxLjApOwogICAgICAgIHZlYzIgXzY1OCA9IFNNQUFTZWFyY2hEaWFnMShwYXJhbSwgcGFyYW1fMSk7CiAgICAgICAgZCA9IHZlYzQoXzY1OC54LCBkLnksIF82NTgueSwgZC53KTsKICAgICAgICBmbG9hdCBkYWRkID0gZmxvYXQoY2R3X2VuZC55ID4gMC44OTk5OTk5NzYxNTgxNDIwODk4NDM3NSk7CiAgICAgICAgZC54ICs9IGRhZGQ7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgZCA9IHZlYzQodmVjMigwLjApLngsIGQueSwgdmVjMigwLjApLnksIGQudyk7CiAgICB9CiAgICB2ZWMyIHBhcmFtXzIgPSB0ZXhjb29yZDsKICAgIHZlYzIgcGFyYW1fMyA9IHZlYzIoMS4wLCAtMS4wKTsKICAgIHZlYzIgXzY3OSA9IFNNQUFTZWFyY2hEaWFnMShwYXJhbV8yLCBwYXJhbV8zKTsKICAgIGQgPSB2ZWM0KGQueCwgXzY3OS54LCBkLnosIF82NzkueSk7CiAgICBpZiAoKGQueCArIGQueSkgPiAyLjApCiAgICB7CiAgICAgICAgdmVjNCBjb29yZHMgPSAodmVjNCgoLWQueCkgKyAwLjI1LCBkLngsIGQueSwgKC1kLnkpIC0gMC4yNSkgKiBzY3JlZW5TaXplSW52Lnh5eHkpICsgdGV4Y29vcmQueHl4eTsKICAgICAgICB2ZWMyIF83MjAgPSB0ZXh0dXJlTG9kKGVkZ2VzVGV4LCBjb29yZHMueHkgKyAodmVjMigtMS4wLCAwLjApICogc2NyZWVuU2l6ZUludiksIDAuMCkueHk7CiAgICAgICAgdmVjNCBjOwogICAgICAgIGMgPSB2ZWM0KF83MjAueCwgXzcyMC55LCBjLnosIGMudyk7CiAgICAgICAgdmVjMiBfNzMxID0gdGV4dHVyZUxvZChlZGdlc1RleCwgY29vcmRzLnp3ICsgKHZlYzIoMS4wLCAwLjApICogc2NyZWVuU2l6ZUludiksIDAuMCkueHk7CiAgICAgICAgYyA9IHZlYzQoYy54LCBjLnksIF83MzEueCwgXzczMS55KTsKICAgICAgICB2ZWM0IHBhcmFtXzQgPSBjOwogICAgICAgIHZlYzQgXzczNiA9IFNNQUFEZWNvZGVEaWFnQmlsaW5lYXJBY2Nlc3MocGFyYW1fNCk7CiAgICAgICAgYyA9IHZlYzQoXzczNi55LCBfNzM2LngsIF83MzYudywgXzczNi56KTsKICAgICAgICB2ZWMyIGNjID0gKHZlYzIoMi4wKSAqIGMueHopICsgYy55dzsKICAgICAgICBmbG9hdCBhMWNvbmR4ID0gc3RlcCgwLjg5OTk5OTk3NjE1ODE0MjA4OTg0Mzc1LCBkLnopOwogICAgICAgIGZsb2F0IGExY29uZHkgPSBzdGVwKDAuODk5OTk5OTc2MTU4MTQyMDg5ODQzNzUsIGQudyk7CiAgICAgICAgaWYgKGExY29uZHggPT0gMS4wKQogICAgICAgIHsKICAgICAgICAgICAgY2MueCA9IDAuMDsKICAgICAgICB9CiAgICAgICAgaWYgKGExY29uZHkgPT0gMS4wKQogICAgICAgIHsKICAgICAgICAgICAgY2MueSA9IDAuMDsKICAgICAgICB9CiAgICAgICAgdmVjMiBwYXJhbV81ID0gZC54eTsKICAgICAgICB2ZWMyIHBhcmFtXzYgPSBjYzsKICAgICAgICBmbG9hdCBwYXJhbV83ID0gc3Vic2FtcGxlSW5kaWNlcy56OwogICAgICAgIHdlaWdodHMgKz0gU01BQUFyZWFEaWFnKHBhcmFtXzUsIHBhcmFtXzYsIHBhcmFtXzcpOwogICAgfQogICAgdmVjMiBwYXJhbV84ID0gdGV4Y29vcmQ7CiAgICB2ZWMyIHBhcmFtXzkgPSB2ZWMyKC0xLjApOwogICAgdmVjMiBfNzgwID0gU01BQVNlYXJjaERpYWcyKHBhcmFtXzgsIHBhcmFtXzkpOwogICAgZCA9IHZlYzQoXzc4MC54LCBkLnksIF83ODAueSwgZC53KTsKICAgIGlmICh0ZXh0dXJlTG9kKGVkZ2VzVGV4LCB0ZXhjb29yZCArICh2ZWMyKDEuMCwgMC4wKSAqIHNjcmVlblNpemVJbnYpLCAwLjApLnggPiAwLjApCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV8xMCA9IHRleGNvb3JkOwogICAgICAgIHZlYzIgcGFyYW1fMTEgPSB2ZWMyKDEuMCk7CiAgICAgICAgdmVjMiBfNzk3ID0gU01BQVNlYXJjaERpYWcyKHBhcmFtXzEwLCBwYXJhbV8xMSk7CiAgICAgICAgZCA9IHZlYzQoZC54LCBfNzk3LngsIGQueiwgXzc5Ny55KTsKICAgICAgICBmbG9hdCBkYWRkXzEgPSBmbG9hdChjZHdfZW5kLnkgPiAwLjg5OTk5OTk3NjE1ODE0MjA4OTg0Mzc1KTsKICAgICAgICBkLnkgKz0gZGFkZF8xOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGQgPSB2ZWM0KGQueCwgdmVjMigwLjApLngsIGQueiwgdmVjMigwLjApLnkpOwogICAgfQogICAgaWYgKChkLnggKyBkLnkpID4gMi4wKQogICAgewogICAgICAgIHZlYzQgY29vcmRzXzEgPSAodmVjNCgtZC54LCAtZC54LCBkLnksIGQueSkgKiBzY3JlZW5TaXplSW52Lnh5eHkpICsgdGV4Y29vcmQueHl4eTsKICAgICAgICB2ZWM0IGNfMTsKICAgICAgICBjXzEueCA9IHRleHR1cmVMb2QoZWRnZXNUZXgsIGNvb3Jkc18xLnh5ICsgKHZlYzIoLTEuMCwgMC4wKSAqIHNjcmVlblNpemVJbnYpLCAwLjApLnk7CiAgICAgICAgY18xLnkgPSB0ZXh0dXJlTG9kKGVkZ2VzVGV4LCBjb29yZHNfMS54eSArICh2ZWMyKDAuMCwgLTEuMCkgKiBzY3JlZW5TaXplSW52KSwgMC4wKS54OwogICAgICAgIHZlYzIgXzg2NiA9IHRleHR1cm")+ HX_CSTRING("%PSBlbmQpCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV82ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV83ID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFhSaWdodChwYXJhbV82LCBwYXJhbV83KTsKICAgIH0KICAgIGlmIChlLnkgPD0gMC44MjgxMDAwMjU2NTM4MzkxMTEzMjgxMjUpCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV84ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV85ID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFhSaWdodChwYXJhbV84LCBwYXJhbV85KTsKICAgIH0KICAgIGlmIChlLnggIT0gMC4wKQogICAgewogICAgICAgIHZlYzIgcGFyYW1fMTAgPSB0ZXhjb29yZDsKICAgICAgICB2ZWMyIHBhcmFtXzExID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFhSaWdodChwYXJhbV8xMCwgcGFyYW1fMTEpOwogICAgfQogICAgZSA9IHRleHR1cmVMb2QoZWRnZXNUZXgsIHRleGNvb3JkLCAwLjApLnh5OwogICAgdGV4Y29vcmQgPSAodmVjMigyLjAsIDAuMCkgKiBzY3JlZW5TaXplSW52KSArIHRleGNvb3JkOwogICAgaWYgKHRleGNvb3JkLnggPj0gZW5kKQogICAgewogICAgICAgIHZlYzIgcGFyYW1fMTIgPSB0ZXhjb29yZDsKICAgICAgICB2ZWMyIHBhcmFtXzEzID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFhSaWdodChwYXJhbV8xMiwgcGFyYW1fMTMpOwogICAgfQogICAgaWYgKGUueSA8PSAwLjgyODEwMDAyNTY1MzgzOTExMTMyODEyNSkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzE0ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8xNSA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BYUmlnaHQocGFyYW1fMTQsIHBhcmFtXzE1KTsKICAgIH0KICAgIGlmIChlLnggIT0gMC4wKQogICAgewogICAgICAgIHZlYzIgcGFyYW1fMTYgPSB0ZXhjb29yZDsKICAgICAgICB2ZWMyIHBhcmFtXzE3ID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFhSaWdodChwYXJhbV8xNiwgcGFyYW1fMTcpOwogICAgfQogICAgZSA9IHRleHR1cmVMb2QoZWRnZXNUZXgsIHRleGNvb3JkLCAwLjApLnh5OwogICAgdGV4Y29vcmQgPSAodmVjMigyLjAsIDAuMCkgKiBzY3JlZW5TaXplSW52KSArIHRleGNvb3JkOwogICAgaWYgKHRleGNvb3JkLnggPj0gZW5kKQogICAgewogICAgICAgIHZlYzIgcGFyYW1fMTggPSB0ZXhjb29yZDsKICAgICAgICB2ZWMyIHBhcmFtXzE5ID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFhSaWdodChwYXJhbV8xOCwgcGFyYW1fMTkpOwogICAgfQogICAgaWYgKGUueSA8PSAwLjgyODEwMDAyNTY1MzgzOTExMTMyODEyNSkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzIwID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8yMSA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BYUmlnaHQocGFyYW1fMjAsIHBhcmFtXzIxKTsKICAgIH0KICAgIGlmIChlLnggIT0gMC4wKQogICAgewogICAgICAgIHZlYzIgcGFyYW1fMjIgPSB0ZXhjb29yZDsKICAgICAgICB2ZWMyIHBhcmFtXzIzID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFhSaWdodChwYXJhbV8yMiwgcGFyYW1fMjMpOwogICAgfQogICAgZSA9IHRleHR1cmVMb2QoZWRnZXNUZXgsIHRleGNvb3JkLCAwLjApLnh5OwogICAgdGV4Y29vcmQgPSAodmVjMigyLjAsIDAuMCkgKiBzY3JlZW5TaXplSW52KSArIHRleGNvb3JkOwogICAgaWYgKHRleGNvb3JkLnggPj0gZW5kKQogICAgewogICAgICAgIHZlYzIgcGFyYW1fMjQgPSB0ZXhjb29yZDsKICAgICAgICB2ZWMyIHBhcmFtXzI1ID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFhSaWdodChwYXJhbV8yNCwgcGFyYW1fMjUpOwogICAgfQogICAgaWYgKGUueSA8PSAwLjgyODEwMDAyNTY1MzgzOTExMTMyODEyNSkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzI2ID0gdGV4")+ HX_CSTRING("")+ HX_CSTRING("mQ7CiAgICAgICAgdmVjMiBwYXJhbV8xID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFlEb3duKHBhcmFtLCBwYXJhbV8xKTsKICAgIH0KICAgIGlmIChlLnggPD0gMC44MjgxMDAwMjU2NTM4MzkxMTEzMjgxMjUpCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV8yID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8zID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFlEb3duKHBhcmFtXzIsIHBhcmFtXzMpOwogICAgfQogICAgaWYgKGUueSAhPSAwLjApCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV80ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV81ID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFlEb3duKHBhcmFtXzQsIHBhcmFtXzUpOwogICAgfQogICAgZSA9IHRleHR1cmVMb2QoZWRnZXNUZXgsIHRleGNvb3JkLCAwLjApLnh5OwogICAgdGV4Y29vcmQgPSAodmVjMigwLjAsIDIuMCkgKiBzY3JlZW5TaXplSW52KSArIHRleGNvb3JkOwogICAgaWYgKHRleGNvb3JkLnkgPj0gZW5kKQogICAgewogICAgICAgIHZlYzIgcGFyYW1fNiA9IHRleGNvb3JkOwogICAgICAgIHZlYzIgcGFyYW1fNyA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV82LCBwYXJhbV83KTsKICAgIH0KICAgIGlmIChlLnggPD0gMC44MjgxMDAwMjU2NTM4MzkxMTEzMjgxMjUpCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV84ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV85ID0gZTsKICAgICAgICByZXR1cm4gZW5kTG9vcFlEb3duKHBhcmFtXzgsIHBhcmFtXzkpOwogICAgfQogICAgaWYgKGUueSAhPSAwLjApCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV8xMCA9IHRleGNvb3JkOwogICAgICAgIHZlYzIgcGFyYW1fMTEgPSBlOwogICAgICAgIHJldHVybiBlbmRMb29wWURvd24ocGFyYW1fMTAsIHBhcmFtXzExKTsKICAgIH0KICAgIGUgPSB0ZXh0dXJlTG9kKGVkZ2VzVGV4LCB0ZXhjb29yZCwgMC4wKS54eTsKICAgIHRleGNvb3JkID0gKHZlYzIoMC4wLCAyLjApICogc2NyZWVuU2l6ZUludikgKyB0ZXhjb29yZDsKICAgIGlmICh0ZXhjb29yZC55ID49IGVuZCkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzEyID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8xMyA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV8xMiwgcGFyYW1fMTMpOwogICAgfQogICAgaWYgKGUueCA8PSAwLjgyODEwMDAyNTY1MzgzOTExMTMyODEyNSkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzE0ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8xNSA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV8xNCwgcGFyYW1fMTUpOwogICAgfQogICAgaWYgKGUueSAhPSAwLjApCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV8xNiA9IHRleGNvb3JkOwogICAgICAgIHZlYzIgcGFyYW1fMTcgPSBlOwogICAgICAgIHJldHVybiBlbmRMb29wWURvd24ocGFyYW1fMTYsIHBhcmFtXzE3KTsKICAgIH0KICAgIGUgPSB0ZXh0dXJlTG9kKGVkZ2VzVGV4LCB0ZXhjb29yZCwgMC4wKS54eTsKICAgIHRleGNvb3JkID0gKHZlYzIoMC4wLCAyLjApICogc2NyZWVuU2l6ZUludikgKyB0ZXhjb29yZDsKICAgIGlmICh0ZXhjb29yZC55ID49IGVuZCkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzE4ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8xOSA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV8xOCwgcGFyYW1fMTkpOwogICAgfQogICAgaWYgKGUueCA8PSAwLjgyODEwMDAyNTY1MzgzOTExMTMyODEyNSkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzIwID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8yMSA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV8yMCwgcGFyYW1fMjEpOwogICAgfQogICAgaWYgKGUueSAhPSAwLjApCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV8yMiA9IHRleGNvb3JkOwogICAgICAgIHZlYzIgcGFyYW1fMjMgPSBlOwogICAgICAgIHJldHVybiBlbmRMb29wWURvd24ocGFyYW1fMjIsIHBhcmFtXzIzKTsKICAgIH0KICAgIGUgPSB0ZXh0dXJlTG9kKGVkZ2VzVGV4LCB0ZXhjb29yZCwgMC4wKS54eTsKICAgIHRleGNvb3JkID0gKHZlYzIoMC4wLCAyLjApICogc2NyZWVuU2l6ZUludikgKyB0ZXhjb29yZDsKICAgIGlmICh0ZXhjb29yZC55ID49IGVuZCkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzI0ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8yNSA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV8yNCwgcGFyYW1fMjUpOwogICAgfQogICAgaWYgKGUueCA8PSAwLjgyODEwMDAyNTY1MzgzOTExMTMyODEyNSkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzI2ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8yNyA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV8yNiwgcGFyYW1fMjcpOwogICAgfQogICAgaWYgKGUueSAhPSAwLjApCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV8yOCA9IHRleGNvb3JkOwogICAgICAgIHZlYzIgcGFyYW1fMjkgPSBlOwogICAgICAgIHJldHVybiBlbmRMb29wWURvd24ocGFyYW1fMjgsIHBhcmFtXzI5KTsKICAgIH0KICAgIGUgPSB0ZXh0dXJlTG9kKGVkZ2VzVGV4LCB0ZXhjb29yZCwgMC4wKS54eTsKICAgIHRleGNvb3JkID0gKHZlYzIoMC4wLCAyLjApICogc2NyZWVuU2l6ZUludikgKyB0ZXhjb29yZDsKICAgIGlmICh0ZXhjb29yZC55ID49IGVuZCkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzMwID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8zMSA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV8zMCwgcGFyYW1fMzEpOwogICAgfQogICAgaWYgKGUueCA8PSAwLjgyODEwMDAyNTY1MzgzOTExMTMyODEyNSkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzMyID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8zMyA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV8zMiwgcGFyYW1fMzMpOwogICAgfQogICAgaWYgKGUueSAhPSAwLjApCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV8zNCA9IHRleGNvb3JkOwogICAgICAgIHZlYzIgcGFyYW1fMzUgPSBlOwogICAgICAgIHJldHVybiBlbmRMb29wWURvd24ocGFyYW1fMzQsIHBhcmFtXzM1KTsKICAgIH0KICAgIGUgPSB0ZXh0dXJlTG9kKGVkZ2VzVGV4LCB0ZXhjb29yZCwgMC4wKS54eTsKICAgIHRleGNvb3JkID0gKHZlYzIoMC4wLCAyLjApICogc2NyZWVuU2l6ZUludikgKyB0ZXhjb29yZDsKICAgIGlmICh0ZXhjb29yZC55ID49IGVuZCkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzM2ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8zNyA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV8zNiwgcGFyYW1fMzcpOwogICAgfQogICAgaWYgKGUueCA8PSAwLjgyODEwMDAyNTY1MzgzOTExMTMyODEyNSkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzM4ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8zOSA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV8zOCwgcGFyYW1fMzkpOwogICAgfQogICAgaWYgKGUueSAhPSAwLjApCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV80MCA9IHRleGNvb3JkOwogICAgICAgIHZlYzIgcGFyYW1fNDEgPSBlOwogICAgICAgIHJldHVybiBlbmRMb29wWURvd24ocGFyYW1fNDAsIHBhcmFtXzQxKTsKICAgIH0KICAgIGUgPSB0ZXh0dXJlTG9kKGVkZ2VzVGV4LCB0ZXhjb29yZCwgMC4wKS54eTsKICAgIHRleGNvb3JkID0gKHZlYzIoMC4wLCAyLjApICogc2NyZWVuU2l6ZUludikgKyB0ZXhjb29yZDsKICAgIGlmICh0ZXhjb29yZC55ID49IGVuZCkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzQyID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV80MyA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV80MiwgcGFyYW1fNDMpOwogICAgfQogICAgaWYgKGUueCA8PSAwLjgyODEwMDAyNTY1MzgzOTExMTMyODEyNSkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzQ0ID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV80NSA9IGU7CiAgICAgICAgcmV0dXJuIGVuZExvb3BZRG93bihwYXJhbV80NCwgcGFyYW1fNDUpOwogICAgfQogICAgaWYgKGUueSAhPSAwLjApCiAgICB7CiAgICAgICAgdmVjMiBwYXJhbV80NiA9IHRleGNvb3JkOwogICAgICAgIHZlYzIgcGFyYW1fNDcgPSBlOwogICAgICAgIHJldHVybiBlbmRMb29wWURvd24ocGFyYW1fNDYsIHBhcmFtXzQ3KTsKICAgIH0KICAgIGUgPSB0ZXh0dXJlTG9kKGVkZ2VzVGV4LCB0ZXhjb29yZCwgMC4wKS54eTsKICAgIHRleGNvb3JkID0gKHZlYzIoMC4wLCAyLjApICogc2NyZWVuU2l6ZUludikgKyB0ZXhjb29yZDsKICAgIHZlYzIgcGFyYW1fNDggPSBlLnl4OwogICAgZmxvYXQgcGFyYW1fNDkgPSAwLjU7CiAgICBmbG9hdCBvZmZzZXQgPSAoKC0yLjAwNzg3NDAxMTk5MzQwODIwMzEyNSkgKiBTTUFBU2VhcmNoTGVuZ3RoKHBhcmFtXzQ4LCBwYXJhbV80OSkpICsgMy4yNTsKICAgIHJldHVybiAoKC1zY3JlZW5TaXplSW52LnkpICogb2Zmc2V0KSArIHRleGNvb3JkLnk7Cn0KCnZlYzIgU01BQURldGVjdFZlcnRpY2FsQ29ybmVyUGF0dGVybihpbm91dCB2ZWMyIHdlaWdodHMsIHZlYzQgdGV4Y29vcmQsIHZlYzIgZCkKewogICAgdmVjMiBsZWZ0UmlnaHQgPSBzdGVwKGQsIGQueXgpOwogICAgdmVjMiByb3VuZGluZyA9IGxlZnRSaWdodCAqIDAuNzU7CiAgICByb3VuZGluZyAvPSB2ZWMyKGxlZnRSaWdodC54ICsgbGVmdFJpZ2h0LnkpOwogICAgdmVjMiBmYWN0b3IgPSB2ZWMyKDEuMCk7CiAgICBmYWN0b3IueCAtPSAocm91bmRpbmcueCAqIHRleHR1cmVMb2QoZWRnZXNUZXgsIHRleGNvb3JkLnh5ICsgKHZlYzIoMS4wLCAwLjApICogc2NyZWVuU2l6ZUludiksIDAuMCkueSk7CiAgICBmYWN0b3IueCAtPSAocm91bmRpbmcueSAqIHRleHR1cmVMb2QoZWRnZXNUZXgsIHRleGNvb3JkLnp3ICsgKHZlYzIoMS4wKSAqIHNjcmVlblNpemVJbnYpLCAwLjApLnkpOwogICAgZmFjdG9yLnkgLT0gKHJvdW5kaW5nLnggKiB0ZXh0dXJlTG9kKGVkZ2VzVGV4LCB0ZXhjb29yZC54eSArICh2ZWMyKC0yLjAsIDAuMCkgKiBzY3JlZW5TaXplSW52KSwgMC4wKS55KTsKICAgIGZhY3Rvci55IC09IChyb3VuZGluZy55ICogdGV4dHVyZUxvZChlZGdlc1RleCwgdGV4Y29vcmQuencgKyAodmVjMigtMi4wLCAxLjApICogc2NyZWVuU2l6ZUludiksIDAuMCkueSk7CiAgICB3ZWlnaHRzICo9IGNsYW1wKGZhY3RvciwgdmVjMigwLjApLCB2ZWMyKDEuMCkpOwogICAgcmV0dXJuIHdlaWdodHM7Cn0KCnZlYzQgU01BQUJsZW5kaW5nV2VpZ2h0Q2FsY3VsYXRpb25QUyh2ZWMyIHRleGNvb3JkLCB2ZWMyIHBpeGNvb3JkXzEsIHZlYzQgc3Vic2FtcGxlSW5kaWNlcykKewogICAgdmVjNCB3ZWlnaHRzID0gdmVjNCgwLjApOwogICAgdmVjMiBlID0gdGV4dHVyZShlZGdlc1RleCwgdGV4Y29vcmQpLnh5OwogICAgaWYgKGUueSA%IDAuMCkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtID0gdGV4Y29vcmQ7CiAgICAgICAgdmVjMiBwYXJhbV8xID0gZTsKICAgICAgICB2ZWM0IHBhcmFtXzIgPSBzdWJzYW1wbGVJbmRpY2VzOwogICAgICAgIHZlYzIgXzI2NjEgPSBTTUFBQ2FsY3VsYXRlRGlhZ1dlaWdodHMocGFyYW0sIHBhcmFtXzEsIHBhcmFtXzIpOwogICAgICAgIHdlaWdodHMgPSB2ZWM0KF8yNjYxLngsIF8yNjYxLnksIHdlaWdodHMueiwgd2VpZ2h0cy53KTsKICAgICAgICBpZiAod2VpZ2h0cy54ID09ICgtd2VpZ2h0cy55KSkKICAgICAgICB7CiAgICAgICAgICAgIHZlYzIgcGFyYW1fMyA9IG9mZnNldDAueHk7CiAgICAgICAgICAgIGZsb2F0IHBhcmFtXzQgPSBvZmZzZXQyLng7CiAgICAgICAgICAgIGZsb2F0IF8yNjgzID0gU01BQVNlYXJjaFhMZWZ0KHBhcmFtXzMsIHBhcmFtXzQpOwogICAgICAgICAgICB2ZWMzIGNvb3JkczsKICAgICAgICAgICAgY29vcmRzLnggPSBfMjY4MzsKICAgICAgICAgICAgY29vcmRzLnkgPSBvZmZzZXQxLnk7CiAgICAgICAgICAgIHZlYzIgZDsKICAgICAgICAgICAgZC54ID0gY29vcmRzLng7CiAgICAgICAgICAgIGZsb2F0IGUxID0gdGV4dHVyZUxvZChlZGdlc1RleCwgY29vcmRzLnh5LCAwLjApLng7CiAgICAgICAgICAgIHZlYzIgcGFyYW1fNSA9IG9mZnNldDAuenc7CiAgICAgICAgICAgIGZsb2F0IHBhcmFtXzYgPSBvZmZzZXQyLnk7CiAgICAgICAgICAgIGZsb2F0IF8yNzA1ID0gU01BQVNlYXJjaFhSaWdodChwYXJhbV81LCBwYXJhbV82KTsKICAgICAgICAgICAgY29vcmRzLnogPSBfMjcwNTsKICAgICAgICAgICAgZC55ID0gY29vcmRzLno7CiAgICAgICAgICAgIGQgPSBhYnMoZmxvb3IoKChzY3JlZW5TaXplLnh4ICogZCkgKyAoLXBpeGNvb3JkXzEueHgpKSArIHZlYzIoMC41KSkpOwogICAgICAgICAgICB2ZWMyIHNxcnRfZCA9IHNxcnQoZCk7CiAgICAgICAgICAgIGZsb2F0IGUyID0gdGV4dHVyZUxvZChlZGdlc1RleCwgY29vcmRzLnp5ICsgKHZlYzIoMS4wLCAwLjApICogc2NyZWVuU2l6ZUludiksIDAuMCkueDsKICAgICAgICAgICAgdmVjMiBwYXJhbV83ID0gc3FydF9kOwogICAgICAgICAgICBmbG9hdCBwYXJhbV84ID0gZTE7CiAgICAgICAgICAgIGZsb2F0IHBhcmFtXzkgPSBlMjsKICAgICAgICAgICAgZmxvYXQgcGFyYW1fMTAgPSBzdWJzYW1wbGVJbmRpY2VzLnk7CiAgICAgICAgICAgIHZlYzIgXzI3NDQgPSBTTUFBQXJlYShwYXJhbV83LCBwYXJhbV84LCBwYXJhbV85LCBwYXJhbV8xMCk7CiAgICAgICAgICAgIHdlaWdodHMgPSB2ZWM0KF8yNzQ0LngsIF8yNzQ0LnksIHdlaWdodHMueiwgd2VpZ2h0cy53KTsKICAgICAgICAgICAgY29vcmRzLnkgPSB0ZXhjb29yZC55OwogICAgICAgICAgICB2ZWMyIHBhcmFtXzExID0gd2VpZ2h0cy54eTsKICAgICAgICAgICAgdmVjNCBwYXJhbV8xMiA9IGNvb3Jkcy54eXp5OwogICAgICAgICAgICB2ZWMyIHBhcmFtXzEzID0gZDsKICAgICAgICAgICAgdmVjMiBfMjc1OCA9IFNNQUFEZXRlY3RIb3Jpem9udGFsQ29ybmVyUGF0dGVybihwYXJhbV8xMSwgcGFyYW1fMTIsIHBhcmFtXzEzKTsKICAgICAgICAgICAgd2VpZ2h0cyA9IHZlYzQoXzI3NTgueCwgXzI3NTgueSwgd2VpZ2h0cy56LCB3ZWlnaHRzLncpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBlLnggPSAwLjA7CiAgICAgICAgfQogICAgfQogICAgaWYgKGUueCA%IDAuMCkKICAgIHsKICAgICAgICB2ZWMyIHBhcmFtXzE0ID0gb2Zmc2V0MS54eTsKICAgICAgICBmbG9hdCBwYXJhbV8xNSA9IG9mZnNldDIuejsKICAgICAgICBmbG9hdCBfMjc3NSA9IFNNQUFTZWFyY2hZVXAocGFyYW1fMTQsIHBhcmFtXzE1KTsKICAgICAgICB2ZWMzIGNvb3Jkc18xOwogICAgICAgIGNvb3Jkc18xLnkgPSBfMjc3NTsKICAgICAgICBjb29yZHNfMS54ID0gb2Zmc2V0MC54OwogICAgICAgIHZlYzIgZF8xOwogICAgICAgIGRfMS54ID0gY29vcmRzXzEueTsKICAgICAgICBmbG9hdCBlMV8xID0gdGV4dHVyZUxvZChlZGdlc1RleCwgY29vcmRzXzEueHksIDAuMCkueTsKICAgICAgICB2ZWMyIHBhcmFtXzE2ID0gb2Zmc2V0MS56dzsKICAgICAgICBmbG9hdCBwYXJhbV8xNyA9IG9mZnNldDIudzsKICAgICAgICBmbG9hdCBfMjc5NiA9IFNNQUFTZWFyY2hZRG93bihwYXJhbV8xNiwgcGFyYW1fMTcpOwogICAgICAgIGNvb3Jkc18xLnogPSBfMjc5NjsKICAgICAgICBkXzEueSA9IGNvb3Jkc18xLno7CiAgICAgICAgZF8xID0gYWJzKGZsb29yKCgoc2NyZWVuU2l6ZS55eSAqIGRfMSkgKyAoLXBpeGNvb3JkXzEueXkpKSArIHZlYzIoMC41KSkpOwogICAgICAgIHZlYzIgc3FydF9kXzEgPSBzcXJ0KGRfMSk7CiAgICAgICAgZmxvYXQgZTJfMSA9IHRleHR1cmVMb2QoZWRnZXNUZXgsIGNvb3Jkc18xLnh6ICsgKHZlYzIoMC4wLCAxLjApICogc2NyZWVuU2l6ZUludiksIDAuMCkueTsKICAgICAgICB2ZWMyIHBhcmFtXzE4ID0gc3FydF9kXzE7CiAgICAgICAgZmxvYXQgcGFyYW1fMTkgPSBlMV8xOwogICAgICAgIGZsb2F0IHBhcmFtXzIwID0gZTJfMTsKICAgICAgICBmbG9hdCBwYXJhbV8yMSA9IHN1YnNhbXBsZUluZGljZXMueDsKICAgICAgICB2ZWMyIF8yODM0ID0gU01BQUFyZWEocGFyYW1fMTgsIHBhcmFtXzE5LCBwYXJhbV8yMCwgcGFyYW1fMjEpOwogICAgICAgIHdlaWdodHMgPSB2ZWM0KHdlaWdodHMueCwgd2VpZ2h0cy55LCBfMjgzNC54LCBfMjgzNC55KTsKICAgICAgICBjb29yZHNfMS54ID0gdGV4Y29vcmQueDsKICAgICAgICB2ZWMyIHBhcmFtXzIyID0gd2VpZ2h0cy56dzsKICAgICAgICB2ZWM0IHBhcmFtXzIzID0gY29vcmRzXzEueHl4ejsKICAgICAgICB2ZWMyIHBhcmFtXzI0ID0gZF8xOwogICAgICAgIHZlYzIgXzI4NDggPSBTTUFBRGV0ZWN0VmVydGljYWxDb3JuZXJQYXR0ZXJuKHBhcmFtXzIyLCBwYXJhbV8yMywgcGFyYW1fMjQpOwogICAgICAgIHdlaWdodHMgPSB2ZWM0KHdlaWdodHMueCwgd2VpZ2h0cy55LCBfMjg0OC54LCBfMjg0OC55KTsKICAgIH0KICAgIHJldHVybiB3ZWlnaHRzOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWMyIHBhcmFtID0gdGV4Q29vcmQ7CiAgICB2ZWMyIHBhcmFtXzEgPSBwaXhjb29yZDsKICAgIHZlYzQgcGFyYW1fMiA9IHZlYzQoMC4wKTsKICAgIHZlYzQgXzI4NjQgPSBTTUFBQmxlbmRpbmdXZWlnaHRDYWxjdWxhdGlvblBTKHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yKTsKICAgIGZyYWdDb2xvciA9IF8yODY0Owp9Cgo"));
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		smaa_blend_weight_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		smaa_blend_weight_vertData0 = HX_("s919:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZTsKdW5pZm9ybSB2ZWMyIHNjcmVlblNpemVJbnY7CgpvdXQgdmVjMiB0ZXhDb29yZDsKaW4gdmVjMiBwb3M7Cm91dCB2ZWMyIHBpeGNvb3JkOwpvdXQgdmVjNCBvZmZzZXQwOwpvdXQgdmVjNCBvZmZzZXQxOwpvdXQgdmVjNCBvZmZzZXQyOwoKdm9pZCBtYWluKCkKewogICAgdGV4Q29vcmQgPSAocG9zICogdmVjMigwLjUpKSArIHZlYzIoMC41KTsKICAgIHBpeGNvb3JkID0gdGV4Q29vcmQgKiBzY3JlZW5TaXplOwogICAgb2Zmc2V0MCA9IChzY3JlZW5TaXplSW52Lnh5eHkgKiB2ZWM0KC0wLjI1LCAtMC4xMjUsIDEuMjUsIC0wLjEyNSkpICsgdGV4Q29vcmQueHl4eTsKICAgIG9mZnNldDEgPSAoc2NyZWVuU2l6ZUludi54eXh5ICogdmVjNCgtMC4xMjUsIC0wLjI1LCAtMC4xMjUsIDEuMjUpKSArIHRleENvb3JkLnh5eHk7CiAgICBvZmZzZXQyID0gKHNjcmVlblNpemVJbnYueHh5eSAqIHZlYzQoLTMyLjAsIDMyLjAsIC0zMi4wLCAzMi4wKSkgKyB2ZWM0KG9mZnNldDAueHosIG9mZnNldDEueXcpOwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwp9Cgo",39,f1,40,08);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		smaa_blend_weight_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		smaa_edge_detect_fragData0 = HX_("s2119:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCBjb2xvclRleDsKCmluIHZlYzQgb2Zmc2V0MDsKaW4gdmVjNCBvZmZzZXQxOwppbiB2ZWM0IG9mZnNldDI7Cm91dCB2ZWM0IGZyYWdDb2xvcjsKaW4gdmVjMiB0ZXhDb29yZDsKCnZlYzIgU01BQUNvbG9yRWRnZURldGVjdGlvblBTKHZlYzIgdGV4Y29vcmQpCnsKICAgIHZlYzIgdGhyZXNob2xkID0gdmVjMigwLjEwMDAwMDAwMTQ5MDExNjExOTM4NDc2NTYyNSk7CiAgICB2ZWMzIEMgPSB0ZXh0dXJlKGNvbG9yVGV4LCB0ZXhjb29yZCkueHl6OwogICAgdmVjMyBDbGVmdCA9IHRleHR1cmUoY29sb3JUZXgsIG9mZnNldDAueHkpLnh5ejsKICAgIHZlYzMgdCA9IGFicyhDIC0gQ2xlZnQpOwogICAgdmVjNCBkZWx0YTsKICAgIGRlbHRhLnggPSBtYXgobWF4KHQueCwgdC55KSwgdC56KTsKICAgIHZlYzMgQ3RvcCA9IHRleHR1cmUoY29sb3JUZXgsIG9mZnNldDAuencpLnh5ejsKICAgIHQgPSBhYnMoQyAtIEN0b3ApOwogICAgZGVsdGEueSA9IG1heChtYXgodC54LCB0LnkpLCB0LnopOwogICAgdmVjMiBlZGdlcyA9IHN0ZXAodGhyZXNob2xkLCBkZWx0YS54eSk7CiAgICBpZiAoZG90KGVkZ2VzLCB2ZWMyKDEuMCkpID09IDAuMCkKICAgIHsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgdmVjMyBDcmlnaHQgPSB0ZXh0dXJlKGNvbG9yVGV4LCBvZmZzZXQxLnh5KS54eXo7CiAgICB0ID0gYWJzKEMgLSBDcmlnaHQpOwogICAgZGVsdGEueiA9IG1heChtYXgodC54LCB0LnkpLCB0LnopOwogICAgdmVjMyBDYm90dG9tID0gdGV4dHVyZShjb2xvclRleCwgb2Zmc2V0MS56dykueHl6OwogICAgdCA9IGFicyhDIC0gQ2JvdHRvbSk7CiAgICBkZWx0YS53ID0gbWF4KG1heCh0LngsIHQueSksIHQueik7CiAgICB2ZWMyIG1heERlbHRhID0gbWF4KGRlbHRhLnh5LCBkZWx0YS56dyk7CiAgICB2ZWMzIENsZWZ0bGVmdCA9IHRleHR1cmUoY29sb3JUZXgsIG9mZnNldDIueHkpLnh5ejsKICAgIHQgPSBhYnMoQyAtIENsZWZ0bGVmdCk7CiAgICBkZWx0YS56ID0gbWF4KG1heCh0LngsIHQueSksIHQueik7CiAgICB2ZWMzIEN0b3B0b3AgPSB0ZXh0dXJlKGNvbG9yVGV4LCBvZmZzZXQyLnp3KS54eXo7CiAgICB0ID0gYWJzKEMgLSBDdG9wdG9wKTsKICAgIGRlbHRhLncgPSBtYXgobWF4KHQueCwgdC55KSwgdC56KTsKICAgIG1heERlbHRhID0gbWF4KG1heERlbHRhLCBkZWx0YS56dyk7CiAgICBmbG9hdCBmaW5hbERlbHRhID0gbWF4KG1heERlbHRhLngsIG1heERlbHRhLnkpOwogICAgZWRnZXMgKj0gc3RlcCh2ZWMyKGZpbmFsRGVsdGEpLCBkZWx0YS54eSAqIDIuMCk7CiAgICByZXR1cm4gZWRnZXM7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzIgcGFyYW0gPSB0ZXhDb29yZDsKICAgIHZlYzIgXzIwNCA9IFNNQUFDb2xvckVkZ2VEZXRlY3Rpb25QUyhwYXJhbSk7CiAgICBmcmFnQ29sb3IgPSB2ZWM0KF8yMDQueCwgXzIwNC55LCBmcmFnQ29sb3IueiwgZnJhZ0NvbG9yLncpOwp9Cgo",3b,9f,57,09);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		smaa_edge_detect_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		smaa_edge_detect_vertData0 = HX_("s763:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZUludjsKCm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHBvczsKb3V0IHZlYzQgb2Zmc2V0MDsKb3V0IHZlYzQgb2Zmc2V0MTsKb3V0IHZlYzQgb2Zmc2V0MjsKCnZvaWQgbWFpbigpCnsKICAgIHRleENvb3JkID0gKHBvcyAqIHZlYzIoMC41KSkgKyB2ZWMyKDAuNSk7CiAgICBvZmZzZXQwID0gKHNjcmVlblNpemVJbnYueHl4eSAqIHZlYzQoLTEuMCwgMC4wLCAwLjAsIC0xLjApKSArIHRleENvb3JkLnh5eHk7CiAgICBvZmZzZXQxID0gKHNjcmVlblNpemVJbnYueHl4eSAqIHZlYzQoMS4wLCAwLjAsIDAuMCwgMS4wKSkgKyB0ZXhDb29yZC54eXh5OwogICAgb2Zmc2V0MiA9IChzY3JlZW5TaXplSW52Lnh5eHkgKiB2ZWM0KC0yLjAsIDAuMCwgMC4wLCAtMi4wKSkgKyB0ZXhDb29yZC54eXh5OwogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvcywgMC4wLCAxLjApOwp9Cgo",be,54,ca,40);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		smaa_edge_detect_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		smaa_neighborhood_blend_fragData0 = HX_("s2354:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCBibGVuZFRleDsKdW5pZm9ybSBzYW1wbGVyMkQgY29sb3JUZXg7CnVuaWZvcm0gdmVjMiBzY3JlZW5TaXplSW52OwoKb3V0IHZlYzQgZnJhZ0NvbG9yOwppbiB2ZWMyIHRleENvb3JkOwppbiB2ZWM0IG9mZnNldDsKCnZlYzQgU01BQU5laWdoYm9yaG9vZEJsZW5kaW5nUFModmVjMiB0ZXhjb29yZCwgdmVjNCBvZmZzZXRfMSkKewogICAgdmVjNCBhOwogICAgYS54ID0gdGV4dHVyZShibGVuZFRleCwgb2Zmc2V0XzEueHkpLnc7CiAgICBhLnkgPSB0ZXh0dXJlKGJsZW5kVGV4LCBvZmZzZXRfMS56dykueTsKICAgIHZlYzIgXzQxID0gdGV4dHVyZShibGVuZFRleCwgdGV4Y29vcmQpLnh6OwogICAgYSA9IHZlYzQoYS54LCBhLnksIF80MS55LCBfNDEueCk7CiAgICBpZiAoZG90KGEsIHZlYzQoMS4wKSkgPCA5Ljk5OTk5OTc0NzM3ODc1MTYzNTU1MTQ1MjYzNjcxODhlLTA2KQogICAgewogICAgICAgIHZlYzQgY29sb3IgPSB0ZXh0dXJlTG9kKGNvbG9yVGV4LCB0ZXhjb29yZCwgMC4wKTsKICAgICAgICByZXR1cm4gY29sb3I7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgYm9vbCBoID0gbWF4KGEueCwgYS56KSA%IG1heChhLnksIGEudyk7CiAgICAgICAgdmVjNCBibGVuZGluZ09mZnNldCA9IHZlYzQoMC4wLCBhLnksIDAuMCwgYS53KTsKICAgICAgICB2ZWMyIGJsZW5kaW5nV2VpZ2h0ID0gYS55dzsKICAgICAgICBpZiAoaCkKICAgICAgICB7CiAgICAgICAgICAgIGJsZW5kaW5nT2Zmc2V0LnggPSBhLng7CiAgICAgICAgfQogICAgICAgIGlmIChoKQogICAgICAgIHsKICAgICAgICAgICAgYmxlbmRpbmdPZmZzZXQueSA9IDAuMDsKICAgICAgICB9CiAgICAgICAgaWYgKGgpCiAgICAgICAgewogICAgICAgICAgICBibGVuZGluZ09mZnNldC56ID0gYS56OwogICAgICAgIH0KICAgICAgICBpZiAoaCkKICAgICAgICB7CiAgICAgICAgICAgIGJsZW5kaW5nT2Zmc2V0LncgPSAwLjA7CiAgICAgICAgfQogICAgICAgIGlmIChoKQogICAgICAgIHsKICAgICAgICAgICAgYmxlbmRpbmdXZWlnaHQueCA9IGEueDsKICAgICAgICB9CiAgICAgICAgaWYgKGgpCiAgICAgICAgewogICAgICAgICAgICBibGVuZGluZ1dlaWdodC55ID0gYS56OwogICAgICAgIH0KICAgICAgICBibGVuZGluZ1dlaWdodCAvPSB2ZWMyKGRvdChibGVuZGluZ1dlaWdodCwgdmVjMigxLjApKSk7CiAgICAgICAgdmVjNCBibGVuZGluZ0Nvb3JkID0gKGJsZW5kaW5nT2Zmc2V0ICogdmVjNChzY3JlZW5TaXplSW52LCAtc2NyZWVuU2l6ZUludikpICsgdGV4Y29vcmQueHl4eTsKICAgICAgICB2ZWM0IGNvbG9yXzEgPSB0ZXh0dXJlTG9kKGNvbG9yVGV4LCBibGVuZGluZ0Nvb3JkLnh5LCAwLjApICogYmxlbmRpbmdXZWlnaHQueDsKICAgICAgICBjb2xvcl8xICs9ICh0ZXh0dXJlTG9kKGNvbG9yVGV4LCBibGVuZGluZ0Nvb3JkLnp3LCAwLjApICogYmxlbmRpbmdXZWlnaHQueSk7CiAgICAgICAgcmV0dXJuIGNvbG9yXzE7CiAgICB9CiAgICByZXR1cm4gdmVjNCgwLjApOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWMyIHBhcmFtID0gdGV4Q29vcmQ7CiAgICB2ZWM0IHBhcmFtXzEgPSBvZmZzZXQ7CiAgICBmcmFnQ29sb3IgPSBTTUFBTmVpZ2hib3Job29kQmxlbmRpbmdQUyhwYXJhbSwgcGFyYW1fMSk7Cn0KCg",8a,54,45,5a);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		smaa_neighborhood_blend_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		smaa_neighborhood_blend_vertData0 = HX_("s496:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHZlYzIgc2NyZWVuU2l6ZUludjsKCm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHBvczsKb3V0IHZlYzQgb2Zmc2V0OwoKdm9pZCBtYWluKCkKewogICAgdGV4Q29vcmQgPSAocG9zICogdmVjMigwLjUpKSArIHZlYzIoMC41KTsKICAgIG9mZnNldCA9IChzY3JlZW5TaXplSW52Lnh5eHkgKiB2ZWM0KDEuMCwgMC4wLCAwLjAsIDEuMCkpICsgdGV4Q29vcmQueHl4eTsKICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3MsIDAuMCwgMS4wKTsKfQoK",ca,c3,b2,f7);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		smaa_neighborhood_blend_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		ssao_pass_fragData0 = HX_("s8432:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHZlYzIgYXNwZWN0UmF0aW87CnVuaWZvcm0gc2FtcGxlcjJEIGdidWZmZXJEOwp1bmlmb3JtIHZlYzMgZXllOwp1bmlmb3JtIG1hdDQgaW52VlA7CnVuaWZvcm0gc2FtcGxlcjJEIGdidWZmZXIwOwp1bmlmb3JtIHNhbXBsZXIyRCBzbm9pc2U7CnVuaWZvcm0gdmVjMiBzY3JlZW5TaXplOwoKaW4gdmVjMiB0ZXhDb29yZDsKb3V0IHZlYzQgZnJhZ0NvbG9yOwoKdmVjMiBvY3RhaGVkcm9uV3JhcCh2ZWMyIHYpCnsKICAgIHJldHVybiAodmVjMigxLjApIC0gYWJzKHYueXgpKSAqIHZlYzIoKHYueCA%PSAwLjApID8gMS4wIDogKC0xLjApLCAodi55ID49IDAuMCkgPyAxLjAgOiAoLTEuMCkpOwp9Cgp2ZWMzIGdldFBvczJOb0V5ZSh2ZWMzIGV5ZV8xLCBtYXQ0IGludlZQXzEsIGZsb2F0IGRlcHRoLCB2ZWMyIGNvb3JkKQp7CiAgICB2ZWM0IHBvcyA9IHZlYzQoKGNvb3JkICogMi4wKSAtIHZlYzIoMS4wKSwgZGVwdGgsIDEuMCk7CiAgICBwb3MgPSBpbnZWUF8xICogcG9zOwogICAgdmVjMyBfNzQgPSBwb3MueHl6IC8gdmVjMyhwb3Mudyk7CiAgICBwb3MgPSB2ZWM0KF83NC54LCBfNzQueSwgXzc0LnosIHBvcy53KTsKICAgIHJldHVybiBwb3MueHl6IC0gZXllXzE7Cn0KCmZsb2F0IGRvQU8oaW5vdXQgdmVjMiBrZXJuZWxWZWMsIHZlYzIgcmFuZG9tVmVjLCBtYXQyIHJvdE1hdCwgdmVjMyBjdXJyZW50UG9zLCB2ZWMzIG4sIGZsb2F0IGN1cnJlbnREaXN0YW5jZSkKewogICAga2VybmVsVmVjICo9IGFzcGVjdFJhdGlvOwogICAgZmxvYXQgcmFkaXVzID0gMC4xMTk5OTk5OTczMTc3OTA5ODUxMDc0MjE4NzUgKiByYW5kb21WZWMueTsKICAgIGtlcm5lbFZlYyA9ICgocm90TWF0ICoga2VybmVsVmVjKSAvIHZlYzIoY3VycmVudERpc3RhbmNlKSkgKiByYWRpdXM7CiAgICB2ZWMyIGNvb3JkID0gdGV4Q29vcmQgKyBrZXJuZWxWZWM7CiAgICBmbG9hdCBkZXB0aCA9ICh0ZXh0dXJlKGdidWZmZXJELCBjb29yZCkueCAqIDIuMCkgLSAxLjA7CiAgICB2ZWMzIHBvcyA9IGdldFBvczJOb0V5ZShleWUsIGludlZQLCBkZXB0aCwgY29vcmQpIC0gY3VycmVudFBvczsKICAgIGZsb2F0IGFuZ2xlID0gZG90KHBvcywgbik7CiAgICBhbmdsZSAqPSBzdGVwKDAuMTAwMDAwMDAxNDkwMTE2MTE5Mzg0NzY1NjI1LCBhbmdsZSAvIGxlbmd0aChwb3MpKTsKICAgIGFuZ2xlIC09IChjdXJyZW50RGlzdGFuY2UgKiAwLjAwMTAwMDAwMDA0NzQ5NzQ1MTMwNTM4OTQwNDI5Njg3NSk7CiAgICBhbmdsZSA9IG1heCgwLjAsIGFuZ2xlKTsKICAgIGFuZ2xlIC89ICgoZG90KHBvcywgcG9zKSAvIG1pbihjdXJyZW50RGlzdGFuY2UgKiAwLjI1LCAxLjApKSArIDAuMDAxMDAwMDAwMDQ3NDk3NDUxMzA1Mzg5NDA0Mjk2ODc1KTsKICAgIHJldHVybiBhbmdsZTsKfQoKdm9pZCBtYWluKCkKewogICAgZmxvYXQgZGVwdGggPSAodGV4dHVyZShnYnVmZmVyRCwgdGV4Q29vcmQpLnggKiAyLjApIC0gMS4wOwogICAgaWYgKGRlcHRoID09IDEuMCkKICAgIHsKICAgICAgICBmcmFnQ29sb3IueCA9IDEuMDsKICAgICAgICByZXR1cm47CiAgICB9CiAgICB2ZWMyIGVuYyA9IHRleHR1cmUoZ2J1ZmZlcjAsIHRleENvb3JkKS54eTsKICAgIHZlYzMgbjsKICAgIG4ueiA9ICgxLjAgLSBhYnMoZW5jLngpKSAtIGFicyhlbmMueSk7CiAgICB2ZWMyIF8xOTg7CiAgICBpZiAobi56ID49IDAuMCkKICAgIHsKICAgICAgICBfMTk4ID0gZW5jOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF8xOTggPSBvY3RhaGVkcm9uV3JhcChlbmMpOwogICAgfQogICAgbiA9IHZlYzMoXzE5OC54LCBfMTk4LnksIG4ueik7CiAgICBuID0gbm9ybWFsaXplKG4pOwogICAgdmVjMyBjdXJyZW50UG9zID0gZ2V0UG9zMk5vRXllKGV5ZSwgaW52VlAsIGRlcHRoLCB0ZXhDb29yZCk7CiAgICBmbG9hdCBjdXJyZW50RGlzdGFuY2UgPSBsZW5ndGgoY3VycmVudFBvcyk7CiAgICB2ZWMyIHJhbmRvbVZlYyA9IHRleHR1cmUoc25vaXNlLCAodGV4Q29vcmQgKiBzY3JlZW5TaXplKSAvIHZlYzIoOC4wKSkueHk7CiAgICByYW5kb21WZWMgPSAocmFuZG9tVmVjICogMi4wKSAtIHZlYzIoMS4wKTsKICAgIG1hdDIgcm90TWF0ID0gbWF0Mih2ZWMyKHZlYzIoY29zKHJhbmRvbVZlYy54ICogMy4xNDE1OTI3NDEwMTI1NzMyNDIxODc1KSwgLXNpbihyYW5kb21WZWMueCAqIDMuMTQxNTkyNzQxMDEyNTczMjQyMTg3NSkpKSwgdmVjMih2ZWMyKHNpbihyYW5kb21WZWMueCAqIDMuMTQxNTkyNzQxMDEyNTczMjQyMTg3NSksIGNvcyhyYW5kb21WZWMueCAqIDMuMTQxNTkyNzQxMDEyNTczMjQyMTg3NSkpKSk7CiAgICB2ZWMyIHBhcmFtID0gdmVjMigxLjAsIDAuMCk7CiAgICB2ZWMyIHBhcmFtXzEgPSByYW5kb21WZWM7CiAgICBtYXQyIHBhcmFtXzIgPSByb3RNYXQ7CiAgICB2ZWMzIHBhcmFtXzMgPSBjdXJyZW50UG9zOwogICAgdmVjMyBwYXJhbV80ID0gbjsKICAgIGZsb2F0IHBhcmFtXzUgPSBjdXJyZW50RGlzdGFuY2U7CiAgICBmbG9hdCBfMjc1ID0gZG9BTyhwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSk7CiAgICBmcmFnQ29sb3IueCA9IF8yNzU7CiAgICB2ZWMyIHBhcmFtXzYgPSB2ZWMyKDAuODY2MDI1Mzg4MjQwODE0MjA4OTg0Mzc1LCAwLjQ5OTk5OTkxMDU5MzAzMjgzNjkxNDA2MjUpOwogICAgdmVjMiBwYXJhbV83ID0gcmFuZG9tVmVjOwogICAgbWF0MiBwYXJhbV84ID0gcm90TWF0OwogICAgdmVjMyBwYXJhbV85ID0gY3VycmVudFBvczsKICAgIHZlYzMgcGFyYW1fMTAgPSBuOwogICAgZmxvYXQgcGFyYW1fMTEgPSBjdXJyZW50RGlzdGFuY2U7CiAgICBmbG9hdCBfMjkxID0gZG9BTyhwYXJhbV82LCBwYXJhbV83LCBwYXJhbV84LCBwYXJhbV85LCBwYXJhbV8xMCwgcGFyYW1fMTEpOwogICAgZnJhZ0NvbG9yLnggKz0gXzI5MTsKICAgIHZlYzIgcGFyYW1fMTIgPSB2ZWMyKDAuNSwgMC44NjYwMjUzODgyNDA4MTQyMDg5ODQzNzUpOwogICAgdmVjMiBwYXJhbV8xMyA9IHJhbmRvbVZlYzsKICAgIG1hdDIgcGFyYW1fMTQgPSByb3RNYXQ7CiAgICB2ZWMzIHBhcmFtXzE1ID0gY3VycmVudFBvczsKICAgIHZlYzMgcGFyYW1fMTYgPSBuOwogICAgZmxvYXQgcGFyYW1fMTcgPSBjdXJyZW50RGlzdGFuY2U7CiAgICBmbG9hdCBfMzA5ID0gZG9BTyhwYXJhbV8xMiwgcGFyYW1fMTMsIHBhcmFtXzE0LCBwYXJhbV8xNSwgcGFyYW1fMTYsIHBhcmFtXzE3KTsKICAgIGZyYWdDb2xvci54ICs9IF8zMDk7CiAgICB2ZWMyIHBhcmFtXzE4ID0gdmVjMigwLjAsIDEuMCk7CiAgICB2ZWMyIHBhcmFtXzE5ID0gcmFuZG9tVmVjOwogICAgbWF0MiBwYXJhbV8yMCA9IHJvdE1hdDsKICAgIHZlYzMgcGFyYW1fMjEgPSBjdXJyZW50UG9zOwogICAgdmVjMyBwYXJhbV8yMiA9IG47CiAgICBmbG9hdCBwYXJhbV8yMyA9IGN1cnJlbnREaXN0YW5jZTsKICAgIGZsb2F0IF8zMjYgPSBkb0FPKHBhcmFtXzE4LCBwYXJhbV8xOSwgcGFyYW1fMjAsIHBhcmFtXzIxLCBwYXJhbV8yMiwgcGFyYW1fMjMpOwogICAgZnJhZ0NvbG9yLnggKz0gXzMyNjsKICAgIHZlYzIgcGFyYW1fMjQgPSB2ZWMyKC0wLjQ5OTk5OTkxMDU5MzAzMjgzNjkxNDA2MjUsIDAuODY2MDI1Mzg4MjQwODE0MjA4OTg0Mzc1KTsKICAgIHZlYzIgcGFyYW1fMjUgPSByYW5kb21WZWM7CiAgICBtYXQyIHBhcmFtXzI2ID0gcm90TWF0OwogICAgdmVjMyBwYXJhbV8yNyA9IGN1cnJlbnRQb3M7CiAgICB2ZWMzIHBhcmFtXzI4ID0gbjsKICAgIGZsb2F0IHBhcmFtXzI5ID0gY3VycmVudERpc3RhbmNlOwogICAgZmxvYXQgXzM0NCA9IGRvQU8ocGFyYW1fMjQsIHBhcmFtXzI1LCBwYXJhbV8yNiwgcGFyYW1fMjcsIHBhcmFtXzI4LCBwYXJhbV8yOSk7CiAgICBmcmFnQ29sb3IueCArPSBfMzQ0OwogICAgdmVjMiBwYXJhbV8zMCA9IHZlYzIoLTAuODY2MDI1Mzg4MjQwODE0MjA4OTg0Mzc1LCAwLjUpOwogICAgdmVjMiBwYXJhbV8zMSA9IHJhbmRvbVZlYzsKICAgIG1hdDIgcGFyYW1fMzIgPSByb3RNYXQ7CiAgICB2ZWMzIHBhcmFtXzMzID0gY3VycmVudFBvczsKICAgIHZlYzMgcGFyYW1fMzQgPSBuOwogICAgZmxvYXQgcGFyYW1fMzUgPSBjdXJyZW50RGlzdGFuY2U7CiAgICBmbG9hdCBfMzYyID0gZG9BTyhwYXJhbV8zMCwgcGFyYW1fMzEsIHBhcmFtXzMyLCBwYXJhbV8zMywgcGFyYW1fMzQsIHBhcmFtXzM1KTsKICAgIGZyYWdDb2xvci54ICs9IF8zNjI7CiAgICB2ZWMyIHBhcmFtXzM2ID0gdmVjMigtMS4wLCAwLjApOwogICAgdmVjMiBwYXJhbV8zNyA9IHJhbmRvbVZlYzsKICAgIG1hdDIgcGFyYW1fMzggPSByb3RNYXQ7CiAgICB2ZWMzIHBhcmFtXzM5ID0gY3VycmVudFBvczsKICAgIHZlYzMgcGFyYW1fNDAgPSBuOwogICAgZmxvYXQgcGFyYW1fNDEgPSBjdXJyZW50RGlzdGFuY2U7CiAgICBmbG9hdCBfMzc5ID0gZG9BTyhwYXJhbV8zNiwgcGFyYW1fMzcsIHBhcmFtXzM4LCBwYXJhbV8zOSwgcGFyYW1fNDAsIHBhcmFtXzQxKTsKICAgIGZyYWdDb2xvci54ICs9IF8zNzk7CiAgICB2ZWMyIHBhcmFtXzQyID0gdmVjMigtMC44NjYwMjUzODgyNDA4MTQyMDg5ODQzNzUsIC0wLjQ5OTk5OTkxMDU5MzAzMjgzNjkxNDA2MjUpOwogICAgdmVjMiBwYXJhbV80MyA9IHJhbmRvbVZlYzsKICAgIG1hdDIgcGFyYW1fNDQgPSByb3RNYXQ7CiAgICB2ZWMzIHBhcmFtXzQ1ID0gY3VycmVudFBvczsKICAgIHZlYzMgcGFyYW1fNDYgPSBuOwogICAgZmxvYXQgcGFyYW1fNDcgPSBjdXJyZW50RGlzdGFuY2U7CiAgICBmbG9hdCBfMzk2ID0gZG9BTyhwYXJhbV80MiwgcGFyYW1fNDMsIHBhcmFtXzQ0LCBwYXJhbV80NSwgcGFyYW1fNDYsIHBhcmFtXzQ3KTsKICAgIGZyYWdDb2xvci54ICs9IF8zOTY7CiAgICB2ZWMyIHBhcmFtXzQ4ID0gdmVjMigtMC41LCAtMC44NjYwMjUzODgyNDA4MTQyMDg5ODQzNzUpOwogICAgdmVjMiBwYXJhbV80OSA9IHJhbmRvbVZlYzsKICAgIG1hdDIgcGFyYW1fNTAgPSByb3RNYXQ7CiAgICB2ZWMzIHBhcmFtXzUxID0gY3VycmVudFBvczsKICAgIHZlYzMgcGFyYW1fNTIgPSBuOwogICAgZmxvYXQgcGFyYW1fNTMgPSBjdXJyZW50RGlzdGFuY2U7CiAgICBmbG9hdCBfNDE0ID0gZG9BTyhwYXJhbV80OCwgcGFyYW1fNDksIHBhcmFtXzUwLCBwYXJhbV81MSwgcGFyYW1fNTIsIHBhcmFtXzUzKTsKICAgIGZyYWdDb2xvci54ICs9IF80MTQ7CiAgICB2ZWMyIHBhcmFtXzU0ID0gdmVjMigwLjAsIC0xLjApOwogICAgdmVjMiBwYXJhbV81NSA9IHJhbmRvbVZlYzsKICAgIG1hdDIgcGFyYW1fNTYgPSByb3RNYXQ7CiAgICB2ZWMzIHBhcmFtXzU3ID0gY3VycmVudFBvczsKICAgIHZlYzMgcGFyYW1fNTggPSBuOwogICAgZmxvYXQgcGFyYW1fNTkgPSBjdXJyZW50RGlzdGFuY2U7CiAgICBmbG9hdCBfNDMxID0gZG9BTyhwYXJhbV81NCwgcGFyYW1fNTUsIHBhcmFtXzU2LCBwYXJhbV81NywgcGFyYW1fNTgsIHBhcmFtXzU5KTsKICAgIGZyYWdDb2xvci54ICs9IF80MzE7CiAgICB2ZWMyIHBhcmFtXzYwID0gdmVjMigwLjQ5OTk5OTkxMDU5MzAzMjgzNjkxNDA2MjUsIC0wLjg2NjAyNTM4ODI0MDgxNDIwODk4NDM3NSk7CiAgICB2ZWMyIHBhcmFtXzYxID0gcmFuZG9tVmVjOwogICAgbWF0MiBwYXJhbV82MiA9IHJvdE1hdDsKICAgIHZlYzMgcGFyYW1fNjMgPSBjdXJyZW50UG9zOwogICAgdmVjMyBwYXJhbV82NCA9IG47CiAgICBmbG9hdCBwYXJhbV82NSA9IGN1cnJlbnREaXN0YW5jZTsKICAgIGZsb2F0IF80NDggPSBkb0FPKHBhcmFtXzYwLCBwYXJhbV82MSwgcGFyYW1fNjIsIHBhcmFtXzYzLCBwYXJhbV82NCwgcGFyYW1fNjUpOwogICAgZnJhZ0NvbG9yLnggKz0gXzQ0ODsKICAgIHZlYzIgcGFyYW1fNjYgPSB2ZWMyKDAuODY2MDI1Mzg4MjQwODE0MjA4OTg0Mzc1LCAtMC41KTsKICAgIHZlYzIgcGFyYW1fNjcgPSByYW5kb21WZWM7CiAgICBtYXQyIHBhcmFtXzY4ID0gcm90TWF0OwogICAgdmVjMyBwYXJhbV82OSA9IGN1cnJlbnRQb3M7CiAgICB2ZWMzIHBhcmFtXzcwID0gbjsKICAgIGZsb2F0IHBhcmFtXzcxID0gY3VycmVudERpc3RhbmNlOwogICAgZmxvYXQgXzQ2NSA9IGRvQU8ocGFyYW1fNjYsIHBhcmFtXzY3LCBwYXJhbV82OCwgcGFyYW1fNjksIHBhcmFtXzcwLCBwYXJhbV83MSk7CiAgICBmcmFnQ29sb3IueCArPSBfNDY1OwogICAgZnJhZ0NvbG9yLnggKj0gMC4wMDgzMzMzMzM3Njc5NTA1MzQ4MjA1NTY2NDA2MjU7CiAgICBmcmFnQ29sb3IueCA9IG1heCgwLjAsIDEuMCAtIGZyYWdDb2xvci54KTsKfQoK",e5,fb,c6,5a);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		ssao_pass_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		world_pass_fragData0 = HX_("s376:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHZlYzMgYmFja2dyb3VuZENvbDsKCm91dCB2ZWM0IGZyYWdDb2xvcjsKaW4gdmVjMyBub3JtYWw7Cgp2b2lkIG1haW4oKQp7CiAgICBmcmFnQ29sb3IgPSB2ZWM0KGJhY2tncm91bmRDb2wueCwgYmFja2dyb3VuZENvbC55LCBiYWNrZ3JvdW5kQ29sLnosIGZyYWdDb2xvci53KTsKfQoK",ac,62,8d,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		world_pass_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		world_pass_vertData0 = HX_("s386:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgU01WUDsKCm91dCB2ZWMzIG5vcm1hbDsKaW4gdmVjMyBub3I7CmluIHZlYzMgcG9zOwoKdm9pZCBtYWluKCkKewogICAgbm9ybWFsID0gbm9yOwogICAgdmVjNCBwb3NpdGlvbiA9IFNNVlAgKiB2ZWM0KHBvcywgMS4wKTsKICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbik7Cn0KCg",d8,b9,89,b4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		world_pass_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		Material_mesh_fragData0 = HX_("s1426:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgppbiB2ZWMzIHdub3JtYWw7Cm91dCB2ZWM0IGZyYWdDb2xvclsyXTsKCnZlYzIgb2N0YWhlZHJvbldyYXAodmVjMiB2KQp7CiAgICByZXR1cm4gKHZlYzIoMS4wKSAtIGFicyh2Lnl4KSkgKiB2ZWMyKCh2LnggPj0gMC4wKSA:IDEuMCA6ICgtMS4wKSwgKHYueSA%PSAwLjApID8gMS4wIDogKC0xLjApKTsKfQoKZmxvYXQgcGFja0Zsb2F0KGZsb2F0IGYxLCBmbG9hdCBmMikKewogICAgcmV0dXJuIGZsb29yKGYxICogMTAwLjApICsgbWluKGYyLCAwLjk5MDAwMDAwOTUzNjc0MzE2NDA2MjUpOwp9CgpmbG9hdCBwYWNrRmxvYXQyKGZsb2F0IGYxLCBmbG9hdCBmMikKewogICAgcmV0dXJuIGZsb29yKGYxICogMjU1LjApICsgbWluKGYyLCAwLjk5MDAwMDAwOTUzNjc0MzE2NDA2MjUpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWMzIG4gPSBub3JtYWxpemUod25vcm1hbCk7CiAgICB2ZWMzIGJhc2Vjb2wgPSB2ZWMzKDAuODAwMDAwMDExOTIwOTI4OTU1MDc4MTI1KTsKICAgIGZsb2F0IHJvdWdobmVzcyA9IDAuNTsKICAgIGZsb2F0IG1ldGFsbGljID0gMC4wOwogICAgZmxvYXQgb2NjbHVzaW9uID0gMS4wOwogICAgZmxvYXQgc3BlY3VsYXIgPSAwLjU7CiAgICBuIC89IHZlYzMoKGFicyhuLngpICsgYWJzKG4ueSkpICsgYWJzKG4ueikpOwogICAgdmVjMiBfOTI7CiAgICBpZiAobi56ID49IDAuMCkKICAgIHsKICAgICAgICBfOTIgPSBuLnh5OwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIF85MiA9IG9jdGFoZWRyb25XcmFwKG4ueHkpOwogICAgfQogICAgbiA9IHZlYzMoXzkyLngsIF85Mi55LCBuLnopOwogICAgZnJhZ0NvbG9yWzBdID0gdmVjNChuLnh5LCBwYWNrRmxvYXQobWV0YWxsaWMsIHJvdWdobmVzcyksIDEuMCAtIGdsX0ZyYWdDb29yZC56KTsKICAgIGZyYWdDb2xvclsxXSA9IHZlYzQoYmFzZWNvbCwgcGFja0Zsb2F0MihvY2NsdXNpb24sIHNwZWN1bGFyKSk7Cn0KCg",5b,b0,cf,69);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		Material_mesh_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		Material_mesh_vertData0 = HX_("s408:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDMgTjsKdW5pZm9ybSBtYXQ0IFdWUDsKCmluIHZlYzMgcG9zOwpvdXQgdmVjMyB3bm9ybWFsOwppbiB2ZWMzIG5vcjsKCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgc3BvcyA9IHZlYzQocG9zLCAxLjApOwogICAgd25vcm1hbCA9IG5vcm1hbGl6ZShOICogbm9yKTsKICAgIGdsX1Bvc2l0aW9uID0gV1ZQICogc3BvczsKfQoK",e2,b0,67,ce);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		Material_mesh_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		Material_shadowmap_fragData0 = HX_("s174:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp2b2lkIG1haW4oKQp7Cn0KCg",42,b3,b9,3e);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		Material_shadowmap_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		Material_shadowmap_vertData0 = HX_("s303:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgTFdWUDsKCmluIHZlYzMgcG9zOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCBzcG9zID0gdmVjNChwb3MsIDEuMCk7CiAgICBnbF9Qb3NpdGlvbiA9IExXVlAgKiBzcG9zOwp9Cgo",1d,b4,32,60);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		Material_shadowmap_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		painter_colored_vertData0 = HX_("s439:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo",0b,6c,f4,54);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		painter_colored_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		painter_colored_fragData0 = HX_("s274:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgpvdXQgdmVjNCBGcmFnQ29sb3I7CmluIHZlYzQgZnJhZ21lbnRDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIEZyYWdDb2xvciA9IGZyYWdtZW50Q29sb3I7Cn0KCg",e2,14,fa,61);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		painter_colored_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		painter_image_fragData0 = HX_("s506:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCB0ZXg7CgppbiB2ZWMyIHRleENvb3JkOwppbiB2ZWM0IGNvbG9yOwpvdXQgdmVjNCBGcmFnQ29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZSh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgRnJhZ0NvbG9yID0gdGV4Y29sb3I7Cn0KCg",1d,1f,1c,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		painter_image_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		painter_image_vertData0 = HX_("s508:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK",01,6c,21,ae);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		painter_image_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		painter_text_fragData0 = HX_("s402:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCB0ZXg7CgpvdXQgdmVjNCBGcmFnQ29sb3I7CmluIHZlYzQgZnJhZ21lbnRDb2xvcjsKaW4gdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIEZyYWdDb2xvciA9IHZlYzQoZnJhZ21lbnRDb2xvci54eXosIHRleHR1cmUodGV4LCB0ZXhDb29yZCkueCAqIGZyYWdtZW50Q29sb3Iudyk7Cn0KCg",4a,dd,c9,0d);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		painter_text_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		painter_text_vertData0 = HX_("s530:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBmcmFnbWVudENvbG9yOwppbiB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg",c2,9e,ee,3e);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		painter_text_vert = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		painter_video_fragData0 = HX_("s506:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIHNhbXBsZXIyRCB0ZXg7CgppbiB2ZWMyIHRleENvb3JkOwppbiB2ZWM0IGNvbG9yOwpvdXQgdmVjNCBGcmFnQ29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZSh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgRnJhZ0NvbG9yID0gdGV4Y29sb3I7Cn0KCg",1d,1f,1c,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_163_boot)
HXDLIN( 163)		painter_video_frag = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_37_boot)
HXDLIN(  37)		painter_video_vertData0 = HX_("s508:I3ZlcnNpb24gMzMwCiNpZmRlZiBHTF9BUkJfc2hhZGluZ19sYW5ndWFnZV80MjBwYWNrCiNleHRlbnNpb24gR0xfQVJCX3NoYWRpbmdfbGFuZ3VhZ2VfNDIwcGFjayA6IHJlcXVpcmUKI2VuZGlmCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK",01,6c,21,ae);
            	}
{
            	HX_STACKFRAME(&_hx_pos_6dc83ef3f0d80db1_140_boot)
HXDLIN( 140)		painter_video_vert = null();
            	}
}

} // end namespace kha
