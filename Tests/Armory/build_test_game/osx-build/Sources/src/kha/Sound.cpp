// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <kha/Sound.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_Reader
#include <kha/audio2/ogg/vorbis/Reader.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <kha/audio2/ogg/vorbis/data/Header.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2b0e8ec76089fe14_14_new,"kha.Sound","new",0x1f644c57,"kha.Sound.new","kha/Sound.hx",14,0x5f2333fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2b0e8ec76089fe14_18_uncompress,"kha.Sound","uncompress",0x58f42fe4,"kha.Sound.uncompress","kha/Sound.hx",18,0x5f2333fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2b0e8ec76089fe14_45_unload,"kha.Sound","unload",0x00feb968,"kha.Sound.unload","kha/Sound.hx",45,0x5f2333fa)
namespace kha{

void Sound_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2b0e8ec76089fe14_14_new)
            	}

Dynamic Sound_obj::__CreateEmpty() { return new Sound_obj; }

void *Sound_obj::_hx_vtable = 0;

Dynamic Sound_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Sound_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6dd9d24b;
}

static ::kha::Resource_obj _hx_kha_Sound__hx_kha_Resource= {
	( void (hx::Object::*)())&::kha::Sound_obj::unload,
};

void *Sound_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf962acd2: return &_hx_kha_Sound__hx_kha_Resource;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Sound_obj::uncompress( ::Dynamic done){
            	HX_GC_STACKFRAME(&_hx_pos_2b0e8ec76089fe14_18_uncompress)
HXLINE(  19)		if (hx::IsNotNull( this->uncompressedData )) {
HXLINE(  20)			done();
HXLINE(  21)			return;
            		}
HXLINE(  24)		 ::haxe::io::BytesOutput output =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE(  25)		 ::kha::audio2::ogg::vorbis::data::Header header = ::kha::audio2::ogg::vorbis::Reader_obj::readAll(this->compressedData,output,true);
HXLINE(  26)		 ::haxe::io::Bytes soundBytes = output->getBytes();
HXLINE(  27)		int count = ::Std_obj::_hx_int(((Float)soundBytes->length / (Float)(int)4));
HXLINE(  28)		if ((header->channel == (int)1)) {
HXLINE(  29)			 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,(count * (int)2));
HXDLIN(  29)			this->uncompressedData = this1;
HXLINE(  30)			{
HXLINE(  30)				int _g1 = (int)0;
HXDLIN(  30)				int _g = count;
HXDLIN(  30)				while((_g1 < _g)){
HXLINE(  30)					_g1 = (_g1 + (int)1);
HXDLIN(  30)					int i = (_g1 - (int)1);
HXLINE(  31)					{
HXLINE(  31)						 ::kha::arrays::Float32ArrayPrivate this2 = this->uncompressedData;
HXDLIN(  31)						int pos = (i * (int)4);
HXDLIN(  31)						bool _hx_tmp;
HXDLIN(  31)						if ((pos >= (int)0)) {
HXLINE(  31)							_hx_tmp = ((pos + (int)4) > soundBytes->length);
            						}
            						else {
HXLINE(  31)							_hx_tmp = true;
            						}
HXDLIN(  31)						if (_hx_tmp) {
HXLINE(  31)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  31)						float value = ::__hxcpp_memory_get_float(soundBytes->b,pos);
HXDLIN(  31)						 float32array this3 = this2->self;
HXDLIN(  31)						this3.set((i * (int)2),value);
            					}
HXLINE(  32)					{
HXLINE(  32)						 ::kha::arrays::Float32ArrayPrivate this4 = this->uncompressedData;
HXDLIN(  32)						int pos1 = (i * (int)4);
HXDLIN(  32)						bool _hx_tmp1;
HXDLIN(  32)						if ((pos1 >= (int)0)) {
HXLINE(  32)							_hx_tmp1 = ((pos1 + (int)4) > soundBytes->length);
            						}
            						else {
HXLINE(  32)							_hx_tmp1 = true;
            						}
HXDLIN(  32)						if (_hx_tmp1) {
HXLINE(  32)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  32)						float value1 = ::__hxcpp_memory_get_float(soundBytes->b,pos1);
HXDLIN(  32)						 float32array this5 = this4->self;
HXDLIN(  32)						this5.set(((i * (int)2) + (int)1),value1);
            					}
            				}
            			}
            		}
            		else {
HXLINE(  36)			 ::kha::arrays::Float32ArrayPrivate this6 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,count);
HXDLIN(  36)			this->uncompressedData = this6;
HXLINE(  37)			{
HXLINE(  37)				int _g11 = (int)0;
HXDLIN(  37)				int _g2 = count;
HXDLIN(  37)				while((_g11 < _g2)){
HXLINE(  37)					_g11 = (_g11 + (int)1);
HXDLIN(  37)					int i1 = (_g11 - (int)1);
HXLINE(  38)					{
HXLINE(  38)						 ::kha::arrays::Float32ArrayPrivate this7 = this->uncompressedData;
HXDLIN(  38)						int pos2 = (i1 * (int)4);
HXDLIN(  38)						bool _hx_tmp2;
HXDLIN(  38)						if ((pos2 >= (int)0)) {
HXLINE(  38)							_hx_tmp2 = ((pos2 + (int)4) > soundBytes->length);
            						}
            						else {
HXLINE(  38)							_hx_tmp2 = true;
            						}
HXDLIN(  38)						if (_hx_tmp2) {
HXLINE(  38)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  38)						float value2 = ::__hxcpp_memory_get_float(soundBytes->b,pos2);
HXDLIN(  38)						this7->self.set(i1,value2);
            					}
            				}
            			}
            		}
HXLINE(  41)		this->compressedData = null();
HXLINE(  42)		done();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,uncompress,(void))

void Sound_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_2b0e8ec76089fe14_45_unload)
HXLINE(  46)		this->compressedData = null();
HXLINE(  47)		this->uncompressedData = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,unload,(void))


hx::ObjectPtr< Sound_obj > Sound_obj::__new() {
	hx::ObjectPtr< Sound_obj > __this = new Sound_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Sound_obj > Sound_obj::__alloc(hx::Ctx *_hx_ctx) {
	Sound_obj *__this = (Sound_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Sound_obj), true, "kha.Sound"));
	*(void **)__this = Sound_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Sound_obj::Sound_obj()
{
}

void Sound_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sound);
	HX_MARK_MEMBER_NAME(compressedData,"compressedData");
	HX_MARK_MEMBER_NAME(uncompressedData,"uncompressedData");
	HX_MARK_END_CLASS();
}

void Sound_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(compressedData,"compressedData");
	HX_VISIT_MEMBER_NAME(uncompressedData,"uncompressedData");
}

hx::Val Sound_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uncompress") ) { return hx::Val( uncompress_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"compressedData") ) { return hx::Val( compressedData ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uncompressedData") ) { return hx::Val( uncompressedData ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Sound_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"compressedData") ) { compressedData=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uncompressedData") ) { uncompressedData=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Sound_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("compressedData","\x4b","\xa3","\xdd","\x44"));
	outFields->push(HX_HCSTRING("uncompressedData","\x64","\x13","\xff","\x51"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Sound_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(Sound_obj,compressedData),HX_HCSTRING("compressedData","\x4b","\xa3","\xdd","\x44")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(Sound_obj,uncompressedData),HX_HCSTRING("uncompressedData","\x64","\x13","\xff","\x51")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Sound_obj_sStaticStorageInfo = 0;
#endif

static ::String Sound_obj_sMemberFields[] = {
	HX_HCSTRING("compressedData","\x4b","\xa3","\xdd","\x44"),
	HX_HCSTRING("uncompressedData","\x64","\x13","\xff","\x51"),
	HX_HCSTRING("uncompress","\xfb","\x2e","\x83","\x09"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	::String(null()) };

static void Sound_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sound_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sound_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sound_obj::__mClass,"__mClass");
};

#endif

hx::Class Sound_obj::__mClass;

void Sound_obj::__register()
{
	hx::Object *dummy = new Sound_obj;
	Sound_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.Sound","\xe5","\xd4","\x6b","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Sound_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Sound_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Sound_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Sound_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sound_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
