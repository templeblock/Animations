// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_kha_Kravur
#include <kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_KravurImage
#include <kha/KravurImage.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_GraphicsExtension
#include <kha/graphics2/GraphicsExtension.h>
#endif
#ifndef INCLUDED_kha_graphics2_HorTextAlignment
#include <kha/graphics2/HorTextAlignment.h>
#endif
#ifndef INCLUDED_kha_graphics2_VerTextAlignment
#include <kha/graphics2/VerTextAlignment.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <kha/math/Vector2.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_18_drawArc,"kha.graphics2.GraphicsExtension","drawArc",0x28ba2de3,"kha.graphics2.GraphicsExtension.drawArc","kha/graphics2/GraphicsExtension.hx",18,0xb3e4f63d)
HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_62_fillArc,"kha.graphics2.GraphicsExtension","fillArc",0x30d1e4c4,"kha.graphics2.GraphicsExtension.fillArc","kha/graphics2/GraphicsExtension.hx",62,0xb3e4f63d)
HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_106_drawCircle,"kha.graphics2.GraphicsExtension","drawCircle",0x847c931f,"kha.graphics2.GraphicsExtension.drawCircle","kha/graphics2/GraphicsExtension.hx",106,0xb3e4f63d)
HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_142_fillCircle,"kha.graphics2.GraphicsExtension","fillCircle",0x46539ede,"kha.graphics2.GraphicsExtension.fillCircle","kha/graphics2/GraphicsExtension.hx",142,0xb3e4f63d)
HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_177_drawPolygon,"kha.graphics2.GraphicsExtension","drawPolygon",0x855ece8b,"kha.graphics2.GraphicsExtension.drawPolygon","kha/graphics2/GraphicsExtension.hx",177,0xb3e4f63d)
HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_193_fillPolygon,"kha.graphics2.GraphicsExtension","fillPolygon",0x5fb209ec,"kha.graphics2.GraphicsExtension.fillPolygon","kha/graphics2/GraphicsExtension.hx",193,0xb3e4f63d)
HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_216_drawCubicBezier,"kha.graphics2.GraphicsExtension","drawCubicBezier",0xc4624d9a,"kha.graphics2.GraphicsExtension.drawCubicBezier","kha/graphics2/GraphicsExtension.hx",216,0xb3e4f63d)
HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_233_drawCubicBezierPath,"kha.graphics2.GraphicsExtension","drawCubicBezierPath",0x58ed345f,"kha.graphics2.GraphicsExtension.drawCubicBezierPath","kha/graphics2/GraphicsExtension.hx",233,0xb3e4f63d)
HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_254_calculateCubicBezierPoint,"kha.graphics2.GraphicsExtension","calculateCubicBezierPoint",0x30ff7682,"kha.graphics2.GraphicsExtension.calculateCubicBezierPoint","kha/graphics2/GraphicsExtension.hx",254,0xb3e4f63d)
HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_279_drawAlignedString,"kha.graphics2.GraphicsExtension","drawAlignedString",0x04c6d926,"kha.graphics2.GraphicsExtension.drawAlignedString","kha/graphics2/GraphicsExtension.hx",279,0xb3e4f63d)
HX_LOCAL_STACK_FRAME(_hx_pos_4b15397845e057ac_305_drawAlignedCharacters,"kha.graphics2.GraphicsExtension","drawAlignedCharacters",0x438c577f,"kha.graphics2.GraphicsExtension.drawAlignedCharacters","kha/graphics2/GraphicsExtension.hx",305,0xb3e4f63d)
namespace kha{
namespace graphics2{

void GraphicsExtension_obj::__construct() { }

Dynamic GraphicsExtension_obj::__CreateEmpty() { return new GraphicsExtension_obj; }

void *GraphicsExtension_obj::_hx_vtable = 0;

Dynamic GraphicsExtension_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GraphicsExtension_obj > _hx_result = new GraphicsExtension_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GraphicsExtension_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b43c391;
}

void GraphicsExtension_obj::drawArc( ::kha::graphics2::Graphics g2,Float cx,Float cy,Float radius,Float sAngle,Float eAngle,hx::Null< Float >  __o_strength,hx::Null< bool >  __o_ccw,hx::Null< int >  __o_segments){
Float strength = __o_strength.Default(1);
bool ccw = __o_ccw.Default(false);
int segments = __o_segments.Default(0);
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_18_drawArc)
HXLINE(  28)		sAngle = hx::Mod(sAngle,(::Math_obj::PI * (int)2));
HXLINE(  29)		eAngle = hx::Mod(eAngle,(::Math_obj::PI * (int)2));
HXLINE(  31)		if (ccw) {
HXLINE(  32)			if ((eAngle > sAngle)) {
HXLINE(  32)				eAngle = (eAngle - (::Math_obj::PI * (int)2));
            			}
            		}
            		else {
HXLINE(  33)			if ((eAngle < sAngle)) {
HXLINE(  33)				eAngle = (eAngle + (::Math_obj::PI * (int)2));
            			}
            		}
HXLINE(  35)		if ((segments <= (int)0)) {
HXLINE(  36)			segments = ::Math_obj::floor(((int)10 * ::Math_obj::sqrt(radius)));
            		}
HXLINE(  38)		Float theta = ((Float)(eAngle - sAngle) / (Float)segments);
HXLINE(  39)		Float c = ::Math_obj::cos(theta);
HXLINE(  40)		Float s = ::Math_obj::sin(theta);
HXLINE(  42)		Float x = (::Math_obj::cos(sAngle) * radius);
HXLINE(  43)		Float y = (::Math_obj::sin(sAngle) * radius);
HXLINE(  45)		{
HXLINE(  45)			int _g1 = (int)0;
HXDLIN(  45)			int _g = segments;
HXDLIN(  45)			while((_g1 < _g)){
HXLINE(  45)				_g1 = (_g1 + (int)1);
HXDLIN(  45)				int n = (_g1 - (int)1);
HXLINE(  46)				Float px = (x + cx);
HXLINE(  47)				Float py = (y + cy);
HXLINE(  49)				Float t = x;
HXLINE(  50)				x = ((c * x) - (s * y));
HXLINE(  51)				y = ((c * y) + (s * t));
HXLINE(  53)				g2->drawLine(px,py,(x + cx),(y + cy),strength);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(GraphicsExtension_obj,drawArc,(void))

void GraphicsExtension_obj::fillArc( ::kha::graphics2::Graphics g2,Float cx,Float cy,Float radius,Float sAngle,Float eAngle,hx::Null< bool >  __o_ccw,hx::Null< int >  __o_segments){
bool ccw = __o_ccw.Default(false);
int segments = __o_segments.Default(0);
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_62_fillArc)
HXLINE(  71)		sAngle = hx::Mod(sAngle,(::Math_obj::PI * (int)2));
HXLINE(  72)		eAngle = hx::Mod(eAngle,(::Math_obj::PI * (int)2));
HXLINE(  74)		if (ccw) {
HXLINE(  75)			if ((eAngle > sAngle)) {
HXLINE(  75)				eAngle = (eAngle - (::Math_obj::PI * (int)2));
            			}
            		}
            		else {
HXLINE(  76)			if ((eAngle < sAngle)) {
HXLINE(  76)				eAngle = (eAngle + (::Math_obj::PI * (int)2));
            			}
            		}
HXLINE(  78)		if ((segments <= (int)0)) {
HXLINE(  79)			segments = ::Math_obj::floor(((int)10 * ::Math_obj::sqrt(radius)));
            		}
HXLINE(  81)		Float theta = ((Float)(eAngle - sAngle) / (Float)segments);
HXLINE(  82)		Float c = ::Math_obj::cos(theta);
HXLINE(  83)		Float s = ::Math_obj::sin(theta);
HXLINE(  85)		Float x = (::Math_obj::cos(sAngle) * radius);
HXLINE(  86)		Float y = (::Math_obj::sin(sAngle) * radius);
HXLINE(  87)		Float sx = (x + cx);
HXLINE(  88)		Float sy = (y + cy);
HXLINE(  90)		{
HXLINE(  90)			int _g1 = (int)0;
HXDLIN(  90)			int _g = segments;
HXDLIN(  90)			while((_g1 < _g)){
HXLINE(  90)				_g1 = (_g1 + (int)1);
HXDLIN(  90)				int n = (_g1 - (int)1);
HXLINE(  91)				Float px = (x + cx);
HXLINE(  92)				Float py = (y + cy);
HXLINE(  94)				Float t = x;
HXLINE(  95)				x = ((c * x) - (s * y));
HXLINE(  96)				y = ((c * y) + (s * t));
HXLINE(  98)				g2->fillTriangle(px,py,(x + cx),(y + cy),sx,sy);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(GraphicsExtension_obj,fillArc,(void))

void GraphicsExtension_obj::drawCircle( ::kha::graphics2::Graphics g2,Float cx,Float cy,Float radius,hx::Null< Float >  __o_strength,hx::Null< int >  __o_segments){
Float strength = __o_strength.Default(1);
int segments = __o_segments.Default(0);
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_106_drawCircle)
HXLINE( 116)		if ((segments <= (int)0)) {
HXLINE( 117)			segments = ::Math_obj::floor(((int)10 * ::Math_obj::sqrt(radius)));
            		}
HXLINE( 119)		Float theta = ((Float)((int)2 * ::Math_obj::PI) / (Float)segments);
HXLINE( 120)		Float c = ::Math_obj::cos(theta);
HXLINE( 121)		Float s = ::Math_obj::sin(theta);
HXLINE( 123)		Float x = radius;
HXLINE( 124)		Float y = ((Float)0.0);
HXLINE( 126)		{
HXLINE( 126)			int _g1 = (int)0;
HXDLIN( 126)			int _g = segments;
HXDLIN( 126)			while((_g1 < _g)){
HXLINE( 126)				_g1 = (_g1 + (int)1);
HXDLIN( 126)				int n = (_g1 - (int)1);
HXLINE( 127)				Float px = (x + cx);
HXLINE( 128)				Float py = (y + cy);
HXLINE( 130)				Float t = x;
HXLINE( 131)				x = ((c * x) - (s * y));
HXLINE( 132)				y = ((c * y) + (s * t));
HXLINE( 134)				g2->drawLine(px,py,(x + cx),(y + cy),strength);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GraphicsExtension_obj,drawCircle,(void))

void GraphicsExtension_obj::fillCircle( ::kha::graphics2::Graphics g2,Float cx,Float cy,Float radius,hx::Null< int >  __o_segments){
int segments = __o_segments.Default(0);
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_142_fillCircle)
HXLINE( 151)		if ((segments <= (int)0)) {
HXLINE( 152)			segments = ::Math_obj::floor(((int)10 * ::Math_obj::sqrt(radius)));
            		}
HXLINE( 155)		Float theta = ((Float)((int)2 * ::Math_obj::PI) / (Float)segments);
HXLINE( 156)		Float c = ::Math_obj::cos(theta);
HXLINE( 157)		Float s = ::Math_obj::sin(theta);
HXLINE( 159)		Float x = radius;
HXLINE( 160)		Float y = ((Float)0.0);
HXLINE( 162)		{
HXLINE( 162)			int _g1 = (int)0;
HXDLIN( 162)			int _g = segments;
HXDLIN( 162)			while((_g1 < _g)){
HXLINE( 162)				_g1 = (_g1 + (int)1);
HXDLIN( 162)				int n = (_g1 - (int)1);
HXLINE( 163)				Float px = (x + cx);
HXLINE( 164)				Float py = (y + cy);
HXLINE( 166)				Float t = x;
HXLINE( 167)				x = ((c * x) - (s * y));
HXLINE( 168)				y = ((c * y) + (s * t));
HXLINE( 170)				g2->fillTriangle(px,py,(x + cx),(y + cy),cx,cy);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GraphicsExtension_obj,fillCircle,(void))

void GraphicsExtension_obj::drawPolygon( ::kha::graphics2::Graphics g2,Float x,Float y,::Array< ::Dynamic> vertices,hx::Null< Float >  __o_strength){
Float strength = __o_strength.Default(1);
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_177_drawPolygon)
HXLINE( 178)		 ::Dynamic iterator = vertices->iterator();
HXLINE( 179)		 ::kha::math::Vector2 v0 = ( ( ::kha::math::Vector2)(iterator->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 180)		 ::kha::math::Vector2 v1 = v0;
HXLINE( 182)		while(( (bool)(iterator->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 183)			 ::kha::math::Vector2 v2 = ( ( ::kha::math::Vector2)(iterator->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 184)			Float _hx_tmp = (v1->x + x);
HXDLIN( 184)			Float _hx_tmp1 = (v1->y + y);
HXDLIN( 184)			Float _hx_tmp2 = (v2->x + x);
HXDLIN( 184)			g2->drawLine(_hx_tmp,_hx_tmp1,_hx_tmp2,(v2->y + y),strength);
HXLINE( 185)			v1 = v2;
            		}
HXLINE( 187)		Float _hx_tmp3 = (v1->x + x);
HXDLIN( 187)		Float _hx_tmp4 = (v1->y + y);
HXDLIN( 187)		Float _hx_tmp5 = (v0->x + x);
HXDLIN( 187)		g2->drawLine(_hx_tmp3,_hx_tmp4,_hx_tmp5,(v0->y + y),strength);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GraphicsExtension_obj,drawPolygon,(void))

void GraphicsExtension_obj::fillPolygon( ::kha::graphics2::Graphics g2,Float x,Float y,::Array< ::Dynamic> vertices){
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_193_fillPolygon)
HXLINE( 195)		 ::Dynamic iterator = vertices->iterator();
HXLINE( 197)		if (!(( (bool)(iterator->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) ))) {
HXLINE( 197)			return;
            		}
HXLINE( 198)		 ::kha::math::Vector2 v0 = ( ( ::kha::math::Vector2)(iterator->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 200)		if (!(( (bool)(iterator->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) ))) {
HXLINE( 200)			return;
            		}
HXLINE( 201)		 ::kha::math::Vector2 v1 = ( ( ::kha::math::Vector2)(iterator->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 203)		while(( (bool)(iterator->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 204)			 ::kha::math::Vector2 v2 = ( ( ::kha::math::Vector2)(iterator->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 205)			Float _hx_tmp = (v0->x + x);
HXDLIN( 205)			Float _hx_tmp1 = (v0->y + y);
HXDLIN( 205)			Float _hx_tmp2 = (v1->x + x);
HXDLIN( 205)			Float _hx_tmp3 = (v1->y + y);
HXDLIN( 205)			Float _hx_tmp4 = (v2->x + x);
HXDLIN( 205)			g2->fillTriangle(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,(v2->y + y));
HXLINE( 206)			v1 = v2;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GraphicsExtension_obj,fillPolygon,(void))

void GraphicsExtension_obj::drawCubicBezier( ::kha::graphics2::Graphics g2,::Array< Float > x,::Array< Float > y,hx::Null< int >  __o_segments,hx::Null< Float >  __o_strength){
int segments = __o_segments.Default(20);
Float strength = __o_strength.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_216_drawCubicBezier)
HXLINE( 217)		Float t;
HXLINE( 219)		::Array< Float > q0 = ::kha::graphics2::GraphicsExtension_obj::calculateCubicBezierPoint((int)0,x,y);
HXLINE( 220)		::Array< Float > q1;
HXLINE( 222)		{
HXLINE( 222)			int _g1 = (int)1;
HXDLIN( 222)			int _g = (segments + (int)1);
HXDLIN( 222)			while((_g1 < _g)){
HXLINE( 222)				_g1 = (_g1 + (int)1);
HXDLIN( 222)				int i = (_g1 - (int)1);
HXLINE( 223)				t = ((Float)i / (Float)segments);
HXLINE( 224)				q1 = ::kha::graphics2::GraphicsExtension_obj::calculateCubicBezierPoint(t,x,y);
HXLINE( 225)				g2->drawLine(q0->__get((int)0),q0->__get((int)1),q1->__get((int)0),q1->__get((int)1),strength);
HXLINE( 226)				q0 = q1;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GraphicsExtension_obj,drawCubicBezier,(void))

void GraphicsExtension_obj::drawCubicBezierPath( ::kha::graphics2::Graphics g2,::Array< Float > x,::Array< Float > y,hx::Null< int >  __o_segments,hx::Null< Float >  __o_strength){
int segments = __o_segments.Default(20);
Float strength = __o_strength.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_233_drawCubicBezierPath)
HXLINE( 234)		int i = (int)0;
HXLINE( 235)		Float t;
HXLINE( 236)		::Array< Float > q0 = null();
HXLINE( 237)		::Array< Float > q1 = null();
HXLINE( 239)		while((i < (x->length - (int)3))){
HXLINE( 240)			if ((i == (int)0)) {
HXLINE( 241)				q0 = ::kha::graphics2::GraphicsExtension_obj::calculateCubicBezierPoint((int)0,::Array_obj< Float >::__new(4)->init(0,x->__get(i))->init(1,x->__get((i + (int)1)))->init(2,x->__get((i + (int)2)))->init(3,x->__get((i + (int)3))),::Array_obj< Float >::__new(4)->init(0,y->__get(i))->init(1,y->__get((i + (int)1)))->init(2,y->__get((i + (int)2)))->init(3,y->__get((i + (int)3))));
            			}
HXLINE( 243)			{
HXLINE( 243)				int _g1 = (int)1;
HXDLIN( 243)				int _g = (segments + (int)1);
HXDLIN( 243)				while((_g1 < _g)){
HXLINE( 243)					_g1 = (_g1 + (int)1);
HXDLIN( 243)					int j = (_g1 - (int)1);
HXLINE( 244)					t = ((Float)j / (Float)segments);
HXLINE( 245)					q1 = ::kha::graphics2::GraphicsExtension_obj::calculateCubicBezierPoint(t,::Array_obj< Float >::__new(4)->init(0,x->__get(i))->init(1,x->__get((i + (int)1)))->init(2,x->__get((i + (int)2)))->init(3,x->__get((i + (int)3))),::Array_obj< Float >::__new(4)->init(0,y->__get(i))->init(1,y->__get((i + (int)1)))->init(2,y->__get((i + (int)2)))->init(3,y->__get((i + (int)3))));
HXLINE( 246)					g2->drawLine(q0->__get((int)0),q0->__get((int)1),q1->__get((int)0),q1->__get((int)1),strength);
HXLINE( 247)					q0 = q1;
            				}
            			}
HXLINE( 250)			i = (i + (int)3);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GraphicsExtension_obj,drawCubicBezierPath,(void))

::Array< Float > GraphicsExtension_obj::calculateCubicBezierPoint(Float t,::Array< Float > x,::Array< Float > y){
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_254_calculateCubicBezierPoint)
HXLINE( 255)		Float u = ((int)1 - t);
HXLINE( 256)		Float tt = (t * t);
HXLINE( 257)		Float uu = (u * u);
HXLINE( 258)		Float uuu = (uu * u);
HXLINE( 259)		Float ttt = (tt * t);
HXLINE( 262)		::Array< Float > p = ::Array_obj< Float >::__new(2)->init(0,(uuu * x->__get((int)0)))->init(1,(uuu * y->__get((int)0)));
HXLINE( 265)		::Array< Float > p1 = p;
HXDLIN( 265)		int _hx_tmp = (int)0;
HXDLIN( 265)		p1[_hx_tmp] = (p1->__get(_hx_tmp) + ((((int)3 * uu) * t) * x->__get((int)1)));
HXLINE( 266)		::Array< Float > p2 = p;
HXDLIN( 266)		int _hx_tmp1 = (int)1;
HXDLIN( 266)		p2[_hx_tmp1] = (p2->__get(_hx_tmp1) + ((((int)3 * uu) * t) * y->__get((int)1)));
HXLINE( 269)		::Array< Float > p3 = p;
HXDLIN( 269)		int _hx_tmp2 = (int)0;
HXDLIN( 269)		p3[_hx_tmp2] = (p3->__get(_hx_tmp2) + ((((int)3 * u) * tt) * x->__get((int)2)));
HXLINE( 270)		::Array< Float > p4 = p;
HXDLIN( 270)		int _hx_tmp3 = (int)1;
HXDLIN( 270)		p4[_hx_tmp3] = (p4->__get(_hx_tmp3) + ((((int)3 * u) * tt) * y->__get((int)2)));
HXLINE( 273)		::Array< Float > p5 = p;
HXDLIN( 273)		int _hx_tmp4 = (int)0;
HXDLIN( 273)		p5[_hx_tmp4] = (p5->__get(_hx_tmp4) + (ttt * x->__get((int)3)));
HXLINE( 274)		::Array< Float > p6 = p;
HXDLIN( 274)		int _hx_tmp5 = (int)1;
HXDLIN( 274)		p6[_hx_tmp5] = (p6->__get(_hx_tmp5) + (ttt * y->__get((int)3)));
HXLINE( 276)		return p;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GraphicsExtension_obj,calculateCubicBezierPoint,return )

void GraphicsExtension_obj::drawAlignedString( ::kha::graphics2::Graphics g2,::String text,Float x,Float y, ::kha::graphics2::HorTextAlignment horAlign, ::kha::graphics2::VerTextAlignment verAlign){
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_279_drawAlignedString)
HXLINE( 280)		 ::kha::Kravur kravur = g2->get_font();
HXLINE( 281)		int font = g2->get_fontSize();
HXDLIN( 281)		 ::kha::KravurImage font1 = kravur->_get(font,g2->get_fontGlyphs());
HXLINE( 282)		Float xoffset = ((Float)0.0);
HXLINE( 283)		bool _hx_tmp;
HXDLIN( 283)		if (hx::IsNotEq( horAlign,::kha::graphics2::HorTextAlignment_obj::TextCenter_dyn() )) {
HXLINE( 283)			_hx_tmp = hx::IsEq( horAlign,::kha::graphics2::HorTextAlignment_obj::TextRight_dyn() );
            		}
            		else {
HXLINE( 283)			_hx_tmp = true;
            		}
HXDLIN( 283)		if (_hx_tmp) {
HXLINE( 284)			Float width = font1->stringWidth(text);
HXLINE( 285)			if (hx::IsEq( horAlign,::kha::graphics2::HorTextAlignment_obj::TextCenter_dyn() )) {
HXLINE( 286)				xoffset = (-(width) * ((Float)0.5));
            			}
            			else {
HXLINE( 289)				xoffset = -(width);
            			}
            		}
HXLINE( 292)		Float yoffset = ((Float)0.0);
HXLINE( 293)		bool _hx_tmp1;
HXDLIN( 293)		if (hx::IsNotEq( verAlign,::kha::graphics2::VerTextAlignment_obj::TextMiddle_dyn() )) {
HXLINE( 293)			_hx_tmp1 = hx::IsEq( verAlign,::kha::graphics2::VerTextAlignment_obj::TextBottom_dyn() );
            		}
            		else {
HXLINE( 293)			_hx_tmp1 = true;
            		}
HXDLIN( 293)		if (_hx_tmp1) {
HXLINE( 294)			Float height = font1->getHeight();
HXLINE( 295)			if (hx::IsEq( verAlign,::kha::graphics2::VerTextAlignment_obj::TextMiddle_dyn() )) {
HXLINE( 296)				yoffset = (-(height) * ((Float)0.5));
            			}
            			else {
HXLINE( 299)				yoffset = -(height);
            			}
            		}
HXLINE( 302)		g2->drawString(text,(x + xoffset),(y + yoffset));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GraphicsExtension_obj,drawAlignedString,(void))

void GraphicsExtension_obj::drawAlignedCharacters( ::kha::graphics2::Graphics g2,::Array< int > text,int start,int length,Float x,Float y, ::kha::graphics2::HorTextAlignment horAlign, ::kha::graphics2::VerTextAlignment verAlign){
            	HX_STACKFRAME(&_hx_pos_4b15397845e057ac_305_drawAlignedCharacters)
HXLINE( 306)		 ::kha::Kravur kravur = g2->get_font();
HXLINE( 307)		int font = g2->get_fontSize();
HXDLIN( 307)		 ::kha::KravurImage font1 = kravur->_get(font,g2->get_fontGlyphs());
HXLINE( 308)		Float xoffset = ((Float)0.0);
HXLINE( 309)		bool _hx_tmp;
HXDLIN( 309)		if (hx::IsNotEq( horAlign,::kha::graphics2::HorTextAlignment_obj::TextCenter_dyn() )) {
HXLINE( 309)			_hx_tmp = hx::IsEq( horAlign,::kha::graphics2::HorTextAlignment_obj::TextRight_dyn() );
            		}
            		else {
HXLINE( 309)			_hx_tmp = true;
            		}
HXDLIN( 309)		if (_hx_tmp) {
HXLINE( 310)			Float width = font1->charactersWidth(text,start,length);
HXLINE( 311)			if (hx::IsEq( horAlign,::kha::graphics2::HorTextAlignment_obj::TextCenter_dyn() )) {
HXLINE( 312)				xoffset = (-(width) * ((Float)0.5));
            			}
            			else {
HXLINE( 315)				xoffset = -(width);
            			}
            		}
HXLINE( 318)		Float yoffset = ((Float)0.0);
HXLINE( 319)		bool _hx_tmp1;
HXDLIN( 319)		if (hx::IsNotEq( verAlign,::kha::graphics2::VerTextAlignment_obj::TextMiddle_dyn() )) {
HXLINE( 319)			_hx_tmp1 = hx::IsEq( verAlign,::kha::graphics2::VerTextAlignment_obj::TextBottom_dyn() );
            		}
            		else {
HXLINE( 319)			_hx_tmp1 = true;
            		}
HXDLIN( 319)		if (_hx_tmp1) {
HXLINE( 320)			Float height = font1->getHeight();
HXLINE( 321)			if (hx::IsEq( verAlign,::kha::graphics2::VerTextAlignment_obj::TextMiddle_dyn() )) {
HXLINE( 322)				yoffset = (-(height) * ((Float)0.5));
            			}
            			else {
HXLINE( 325)				yoffset = -(height);
            			}
            		}
HXLINE( 328)		g2->drawCharacters(text,start,length,(x + xoffset),(y + yoffset));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(GraphicsExtension_obj,drawAlignedCharacters,(void))


GraphicsExtension_obj::GraphicsExtension_obj()
{
}

bool GraphicsExtension_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"drawArc") ) { outValue = drawArc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillArc") ) { outValue = fillArc_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawCircle") ) { outValue = drawCircle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillCircle") ) { outValue = fillCircle_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"drawPolygon") ) { outValue = drawPolygon_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillPolygon") ) { outValue = fillPolygon_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"drawCubicBezier") ) { outValue = drawCubicBezier_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"drawAlignedString") ) { outValue = drawAlignedString_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"drawCubicBezierPath") ) { outValue = drawCubicBezierPath_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"drawAlignedCharacters") ) { outValue = drawAlignedCharacters_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"calculateCubicBezierPoint") ) { outValue = calculateCubicBezierPoint_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GraphicsExtension_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GraphicsExtension_obj_sStaticStorageInfo = 0;
#endif

static void GraphicsExtension_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GraphicsExtension_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GraphicsExtension_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GraphicsExtension_obj::__mClass,"__mClass");
};

#endif

hx::Class GraphicsExtension_obj::__mClass;

static ::String GraphicsExtension_obj_sStaticFields[] = {
	HX_HCSTRING("drawArc","\xae","\xe4","\xc9","\xfb"),
	HX_HCSTRING("fillArc","\x8f","\x9b","\xe1","\x03"),
	HX_HCSTRING("drawCircle","\x34","\xed","\xd0","\x97"),
	HX_HCSTRING("fillCircle","\xf3","\xf8","\xa7","\x59"),
	HX_HCSTRING("drawPolygon","\xd6","\x46","\xd9","\x5b"),
	HX_HCSTRING("fillPolygon","\x37","\x82","\x2c","\x36"),
	HX_HCSTRING("drawCubicBezier","\x65","\x47","\x86","\xa4"),
	HX_HCSTRING("drawCubicBezierPath","\xaa","\x6f","\x59","\x2f"),
	HX_HCSTRING("calculateCubicBezierPoint","\x0d","\xbc","\x93","\x41"),
	HX_HCSTRING("drawAlignedString","\xb1","\x1b","\x35","\x31"),
	HX_HCSTRING("drawAlignedCharacters","\x8a","\x3b","\xf6","\xb9"),
	::String(null())
};

void GraphicsExtension_obj::__register()
{
	hx::Object *dummy = new GraphicsExtension_obj;
	GraphicsExtension_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics2.GraphicsExtension","\xa3","\xec","\x5d","\xe4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GraphicsExtension_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GraphicsExtension_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GraphicsExtension_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GraphicsExtension_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GraphicsExtension_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GraphicsExtension_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GraphicsExtension_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics2
