// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_5f5af744d9ff5693
#define INCLUDED_5f5af744d9ff5693
#include "cpp/Pointer.h"
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_kha__SuperString_SuperString_Impl_
#include <kha/_SuperString/SuperString_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_12__new,"kha._SuperString.SuperString_Impl_","_new",0x933e1b5a,"kha._SuperString.SuperString_Impl_._new","kha/SuperString.hx",12,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_19_get_length,"kha._SuperString.SuperString_Impl_","get_length",0xa2a04b68,"kha._SuperString.SuperString_Impl_.get_length","kha/SuperString.hx",19,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_22_charAt,"kha._SuperString.SuperString_Impl_","charAt",0x95dcafa2,"kha._SuperString.SuperString_Impl_.charAt","kha/SuperString.hx",22,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_28_charCodeAt,"kha._SuperString.SuperString_Impl_","charCodeAt",0x48662daf,"kha._SuperString.SuperString_Impl_.charCodeAt","kha/SuperString.hx",28,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_31_toUpperCase,"kha._SuperString.SuperString_Impl_","toUpperCase",0xd509cb5e,"kha._SuperString.SuperString_Impl_.toUpperCase","kha/SuperString.hx",31,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_53_toLowerCase,"kha._SuperString.SuperString_Impl_","toLowerCase",0x5470e77d,"kha._SuperString.SuperString_Impl_.toLowerCase","kha/SuperString.hx",53,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_76_trim,"kha._SuperString.SuperString_Impl_","trim",0xa122a2db,"kha._SuperString.SuperString_Impl_.trim","kha/SuperString.hx",76,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_80_substr,"kha._SuperString.SuperString_Impl_","substr",0x7872256a,"kha._SuperString.SuperString_Impl_.substr","kha/SuperString.hx",80,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_84_substring,"kha._SuperString.SuperString_Impl_","substring",0x9613a5b8,"kha._SuperString.SuperString_Impl_.substring","kha/SuperString.hx",84,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_87_split,"kha._SuperString.SuperString_Impl_","split",0xc8751ec1,"kha._SuperString.SuperString_Impl_.split","kha/SuperString.hx",87,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_96_indexOf,"kha._SuperString.SuperString_Impl_","indexOf",0x9ca78470,"kha._SuperString.SuperString_Impl_.indexOf","kha/SuperString.hx",96,0x5b8dae7d)
HX_LOCAL_STACK_FRAME(_hx_pos_4aece614dc4977a7_109_toString,"kha._SuperString.SuperString_Impl_","toString",0xe7bac725,"kha._SuperString.SuperString_Impl_.toString","kha/SuperString.hx",109,0x5b8dae7d)
namespace kha{
namespace _SuperString{

void SuperString_Impl__obj::__construct() { }

Dynamic SuperString_Impl__obj::__CreateEmpty() { return new SuperString_Impl__obj; }

void *SuperString_Impl__obj::_hx_vtable = 0;

Dynamic SuperString_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SuperString_Impl__obj > _hx_result = new SuperString_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SuperString_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x051dae63;
}

::String SuperString_Impl__obj::_new(::String value){
            	HX_STACKFRAME(&_hx_pos_4aece614dc4977a7_12__new)
HXDLIN(  12)		::String this1 = value;
HXDLIN(  12)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SuperString_Impl__obj,_new,return )

int SuperString_Impl__obj::get_length(::String this1){
            	HX_STACKFRAME(&_hx_pos_4aece614dc4977a7_19_get_length)
HXDLIN(  19)		return ::haxe::Utf8_obj::length(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SuperString_Impl__obj,get_length,return )

::String SuperString_Impl__obj::charAt(::String this1,int index){
            	HX_STACKFRAME(&_hx_pos_4aece614dc4977a7_22_charAt)
HXLINE(  23)		int code = ::haxe::Utf8_obj::charCodeAt(this1,index);
HXLINE(  24)		return ::String::fromCharCode(code);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SuperString_Impl__obj,charAt,return )

int SuperString_Impl__obj::charCodeAt(::String this1,int index){
            	HX_STACKFRAME(&_hx_pos_4aece614dc4977a7_28_charCodeAt)
HXDLIN(  28)		return ::haxe::Utf8_obj::charCodeAt(this1,index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SuperString_Impl__obj,charCodeAt,return )

::String SuperString_Impl__obj::toUpperCase(::String this1){
            	HX_GC_STACKFRAME(&_hx_pos_4aece614dc4977a7_31_toUpperCase)
HXLINE(  32)		 ::StringBuf buffer =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  33)		{
HXLINE(  33)			::cpp::Pointer< char > src = cpp::Pointer_obj::fromPointer(this1.__s);
HXDLIN(  33)			::cpp::Pointer< char > end = src->add(this1.length);
HXDLIN(  33)			while(true){
HXLINE(  33)				::cpp::Pointer< char > tmp = end;
HXDLIN(  33)				if (!(src->lt(tmp))) {
HXLINE(  33)					goto _hx_goto_4;
            				}
HXLINE(  34)				int code = _hx_utf8_decode_advance(src->ptr);
HXDLIN(  34)				bool _hx_tmp;
HXDLIN(  34)				if (hx::IsGreaterEq( code,HX_("a",61,00,00,00).charCodeAt((int)0) )) {
HXLINE(  34)					_hx_tmp = hx::IsLessEq( code,HX_("z",7a,00,00,00).charCodeAt((int)0) );
            				}
            				else {
HXLINE(  34)					_hx_tmp = false;
            				}
HXDLIN(  34)				if (_hx_tmp) {
HXLINE(  35)					int c = (code - HX_("a",61,00,00,00).charCodeAt((int)0));
HXDLIN(  35)					int c1 = (c + HX_("A",41,00,00,00).charCodeAt((int)0));
HXDLIN(  35)					if (hx::IsNull( buffer->charBuf )) {
HXLINE(  35)						buffer->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN(  35)					buffer->charBuf->push(c1);
            				}
            				else {
HXLINE(  37)					if ((code == ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\xa4""",81,aa,00,00),(int)0))) {
HXLINE(  38)						int c2 = ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\x84""",61,aa,00,00),(int)0);
HXDLIN(  38)						if (hx::IsNull( buffer->charBuf )) {
HXLINE(  38)							buffer->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(  38)						buffer->charBuf->push(c2);
            					}
            					else {
HXLINE(  40)						if ((code == ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\xb6""",93,aa,00,00),(int)0))) {
HXLINE(  41)							int c3 = ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\x96""",73,aa,00,00),(int)0);
HXDLIN(  41)							if (hx::IsNull( buffer->charBuf )) {
HXLINE(  41)								buffer->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(  41)							buffer->charBuf->push(c3);
            						}
            						else {
HXLINE(  43)							if ((code == ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\xbc""",99,aa,00,00),(int)0))) {
HXLINE(  44)								int c4 = ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\x9c""",79,aa,00,00),(int)0);
HXDLIN(  44)								if (hx::IsNull( buffer->charBuf )) {
HXLINE(  44)									buffer->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN(  44)								buffer->charBuf->push(c4);
            							}
            							else {
HXLINE(  47)								if (hx::IsNull( buffer->charBuf )) {
HXLINE(  47)									buffer->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN(  47)								buffer->charBuf->push(code);
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_4:;
            		}
HXLINE(  50)		::String this2 = buffer->toString();
HXDLIN(  50)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SuperString_Impl__obj,toUpperCase,return )

::String SuperString_Impl__obj::toLowerCase(::String this1){
            	HX_GC_STACKFRAME(&_hx_pos_4aece614dc4977a7_53_toLowerCase)
HXLINE(  54)		 ::StringBuf buffer =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  55)		{
HXLINE(  55)			::cpp::Pointer< char > src = cpp::Pointer_obj::fromPointer(this1.__s);
HXDLIN(  55)			::cpp::Pointer< char > end = src->add(this1.length);
HXDLIN(  55)			while(true){
HXLINE(  55)				::cpp::Pointer< char > tmp = end;
HXDLIN(  55)				if (!(src->lt(tmp))) {
HXLINE(  55)					goto _hx_goto_6;
            				}
HXLINE(  56)				int code = _hx_utf8_decode_advance(src->ptr);
HXDLIN(  56)				bool _hx_tmp;
HXDLIN(  56)				if (hx::IsGreaterEq( code,HX_("A",41,00,00,00).charCodeAt((int)0) )) {
HXLINE(  56)					_hx_tmp = hx::IsLessEq( code,HX_("Z",5a,00,00,00).charCodeAt((int)0) );
            				}
            				else {
HXLINE(  56)					_hx_tmp = false;
            				}
HXDLIN(  56)				if (_hx_tmp) {
HXLINE(  57)					int c = (code - HX_("A",41,00,00,00).charCodeAt((int)0));
HXDLIN(  57)					int c1 = (c + HX_("a",61,00,00,00).charCodeAt((int)0));
HXDLIN(  57)					if (hx::IsNull( buffer->charBuf )) {
HXLINE(  57)						buffer->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN(  57)					buffer->charBuf->push(c1);
            				}
            				else {
HXLINE(  59)					if ((code == ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\x84""",61,aa,00,00),(int)0))) {
HXLINE(  60)						int c2 = ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\xa4""",81,aa,00,00),(int)0);
HXDLIN(  60)						if (hx::IsNull( buffer->charBuf )) {
HXLINE(  60)							buffer->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(  60)						buffer->charBuf->push(c2);
            					}
            					else {
HXLINE(  62)						if ((code == ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\x96""",73,aa,00,00),(int)0))) {
HXLINE(  63)							int c3 = ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\xb6""",93,aa,00,00),(int)0);
HXDLIN(  63)							if (hx::IsNull( buffer->charBuf )) {
HXLINE(  63)								buffer->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(  63)							buffer->charBuf->push(c3);
            						}
            						else {
HXLINE(  65)							if ((code == ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\x9c""",79,aa,00,00),(int)0))) {
HXLINE(  66)								int c4 = ::haxe::Utf8_obj::charCodeAt(HX_("\xc3""\xbc""",99,aa,00,00),(int)0);
HXDLIN(  66)								if (hx::IsNull( buffer->charBuf )) {
HXLINE(  66)									buffer->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN(  66)								buffer->charBuf->push(c4);
            							}
            							else {
HXLINE(  69)								if (hx::IsNull( buffer->charBuf )) {
HXLINE(  69)									buffer->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN(  69)								buffer->charBuf->push(code);
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_6:;
            		}
HXLINE(  72)		::String this2 = buffer->toString();
HXDLIN(  72)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SuperString_Impl__obj,toLowerCase,return )

::String SuperString_Impl__obj::trim(::String this1){
            	HX_STACKFRAME(&_hx_pos_4aece614dc4977a7_76_trim)
HXDLIN(  76)		::String this2 = ::StringTools_obj::trim(this1);
HXDLIN(  76)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SuperString_Impl__obj,trim,return )

::String SuperString_Impl__obj::substr(::String this1,int pos, ::Dynamic len){
            	HX_STACKFRAME(&_hx_pos_4aece614dc4977a7_80_substr)
HXDLIN(  80)		int value;
HXDLIN(  80)		if (hx::IsNull( len )) {
HXDLIN(  80)			value = (::kha::_SuperString::SuperString_Impl__obj::get_length(this1) - pos);
            		}
            		else {
HXDLIN(  80)			value = len;
            		}
HXDLIN(  80)		::String this2 = ::haxe::Utf8_obj::sub(this1,pos,value);
HXDLIN(  80)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SuperString_Impl__obj,substr,return )

::String SuperString_Impl__obj::substring(::String this1,int start, ::Dynamic end){
            	HX_STACKFRAME(&_hx_pos_4aece614dc4977a7_84_substring)
HXDLIN(  84)		int value;
HXDLIN(  84)		if (hx::IsNull( end )) {
HXDLIN(  84)			value = (::kha::_SuperString::SuperString_Impl__obj::get_length(this1) - start);
            		}
            		else {
HXDLIN(  84)			value = (end - start);
            		}
HXDLIN(  84)		::String this2 = ::haxe::Utf8_obj::sub(this1,start,value);
HXDLIN(  84)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SuperString_Impl__obj,substring,return )

::Array< ::String > SuperString_Impl__obj::split(::String this1,::String splitter){
            	HX_STACKFRAME(&_hx_pos_4aece614dc4977a7_87_split)
HXLINE(  88)		::Array< ::String > array = ::Array_obj< ::String >::__new();
HXLINE(  89)		::Array< ::String > splitted = this1.split(splitter);
HXLINE(  90)		{
HXLINE(  90)			int _g = (int)0;
HXDLIN(  90)			while((_g < splitted->length)){
HXLINE(  90)				::String s = splitted->__get(_g);
HXDLIN(  90)				_g = (_g + (int)1);
HXLINE(  91)				::String this2 = s;
HXDLIN(  91)				array->push(this2);
            			}
            		}
HXLINE(  93)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SuperString_Impl__obj,split,return )

int SuperString_Impl__obj::indexOf(::String this1,::String str, ::Dynamic startIndex){
            	HX_STACKFRAME(&_hx_pos_4aece614dc4977a7_96_indexOf)
HXLINE(  97)		int index = (int)-1;
HXLINE(  98)		int i;
HXDLIN(  98)		if (hx::IsNull( startIndex )) {
HXLINE(  98)			i = (int)0;
            		}
            		else {
HXLINE(  98)			i = startIndex;
            		}
HXLINE(  99)		{
HXLINE(  99)			::cpp::Pointer< char > src = cpp::Pointer_obj::fromPointer(this1.__s);
HXDLIN(  99)			::cpp::Pointer< char > end = src->add(this1.length);
HXDLIN(  99)			while(true){
HXLINE(  99)				::cpp::Pointer< char > tmp = end;
HXDLIN(  99)				if (!(src->lt(tmp))) {
HXLINE(  99)					goto _hx_goto_13;
            				}
HXDLIN(  99)				int _hx_char = _hx_utf8_decode_advance(src->ptr);
HXLINE( 100)				bool _hx_tmp;
HXDLIN( 100)				if ((index < (int)0)) {
HXLINE( 100)					_hx_tmp = hx::IsEq( str.charCodeAt((int)0),_hx_char );
            				}
            				else {
HXLINE( 100)					_hx_tmp = false;
            				}
HXDLIN( 100)				if (_hx_tmp) {
HXLINE( 101)					index = i;
            				}
HXLINE( 103)				i = (i + (int)1);
            			}
            			_hx_goto_13:;
            		}
HXLINE( 105)		return index;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SuperString_Impl__obj,indexOf,return )

::String SuperString_Impl__obj::toString(::String this1){
            	HX_STACKFRAME(&_hx_pos_4aece614dc4977a7_109_toString)
HXDLIN( 109)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SuperString_Impl__obj,toString,return )


SuperString_Impl__obj::SuperString_Impl__obj()
{
}

bool SuperString_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trim") ) { outValue = trim_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { outValue = split_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"charAt") ) { outValue = charAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substr") ) { outValue = substr_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indexOf") ) { outValue = indexOf_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"substring") ) { outValue = substring_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"charCodeAt") ) { outValue = charCodeAt_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toUpperCase") ) { outValue = toUpperCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLowerCase") ) { outValue = toLowerCase_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SuperString_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SuperString_Impl__obj_sStaticStorageInfo = 0;
#endif

static void SuperString_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SuperString_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SuperString_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SuperString_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class SuperString_Impl__obj::__mClass;

static ::String SuperString_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("charAt","\x69","\x79","\x75","\xb7"),
	HX_HCSTRING("charCodeAt","\xf6","\xe6","\x54","\x35"),
	HX_HCSTRING("toUpperCase","\x37","\x30","\xfd","\x38"),
	HX_HCSTRING("toLowerCase","\x56","\x4c","\x64","\xb8"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	HX_HCSTRING("substr","\x31","\xef","\x0a","\x9a"),
	HX_HCSTRING("substring","\x51","\xf2","\xe7","\xe2"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	HX_HCSTRING("indexOf","\xc9","\x48","\xbf","\xe0"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null())
};

void SuperString_Impl__obj::__register()
{
	hx::Object *dummy = new SuperString_Impl__obj;
	SuperString_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha._SuperString.SuperString_Impl_","\x15","\x1d","\x25","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SuperString_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SuperString_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SuperString_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SuperString_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SuperString_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SuperString_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SuperString_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace _SuperString
