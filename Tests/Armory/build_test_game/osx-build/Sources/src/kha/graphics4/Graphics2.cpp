// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_6136fc9686b3876e
#define INCLUDED_6136fc9686b3876e
#include "Kore/Simd/float32x4.h"
#endif
#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Framebuffer
#include <kha/Framebuffer.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_Video
#include <kha/Video.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_ImageScaleQuality
#include <kha/graphics2/ImageScaleQuality.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_ColoredShaderPainter
#include <kha/graphics4/ColoredShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_ImageShaderPainter
#include <kha/graphics4/ImageShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextShaderPainter
#include <kha/graphics4/TextShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix3
#include <kha/math/FastMatrix3.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif
#ifndef INCLUDED_kha_math_FastVector2
#include <kha/math/FastVector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_97689b4ae489993c_793_new,"kha.graphics4.Graphics2","new",0x1f2768ea,"kha.graphics4.Graphics2.new","kha/graphics4/Graphics2.hx",793,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_834_setProjection,"kha.graphics4.Graphics2","setProjection",0xf22b2fdb,"kha.graphics4.Graphics2.setProjection","kha/graphics4/Graphics2.hx",834,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_858_drawImage,"kha.graphics4.Graphics2","drawImage",0x2d9bf0c1,"kha.graphics4.Graphics2.drawImage","kha/graphics4/Graphics2.hx",858,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_899_drawScaledSubImage,"kha.graphics4.Graphics2","drawScaledSubImage",0x67aa184f,"kha.graphics4.Graphics2.drawScaledSubImage","kha/graphics4/Graphics2.hx",899,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_910_get_color,"kha.graphics4.Graphics2","get_color",0x362d69c4,"kha.graphics4.Graphics2.get_color","kha/graphics4/Graphics2.hx",910,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_914_set_color,"kha.graphics4.Graphics2","set_color",0x197e55d0,"kha.graphics4.Graphics2.set_color","kha/graphics4/Graphics2.hx",914,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_917_drawRect,"kha.graphics4.Graphics2","drawRect",0x10762a7e,"kha.graphics4.Graphics2.drawRect","kha/graphics4/Graphics2.hx",917,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_944_fillRect,"kha.graphics4.Graphics2","fillRect",0x1d1e787d,"kha.graphics4.Graphics2.fillRect","kha/graphics4/Graphics2.hx",944,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_955_drawString,"kha.graphics4.Graphics2","drawString",0xcd7490ab,"kha.graphics4.Graphics2.drawString","kha/graphics4/Graphics2.hx",955,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_962_drawCharacters,"kha.graphics4.Graphics2","drawCharacters",0x4f2cb584,"kha.graphics4.Graphics2.drawCharacters","kha/graphics4/Graphics2.hx",962,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_970_get_font,"kha.graphics4.Graphics2","get_font",0x73e04c8e,"kha.graphics4.Graphics2.get_font","kha/graphics4/Graphics2.hx",970,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_973_set_font,"kha.graphics4.Graphics2","set_font",0x223da602,"kha.graphics4.Graphics2.set_font","kha/graphics4/Graphics2.hx",973,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_979_set_fontSize,"kha.graphics4.Graphics2","set_fontSize",0x67029be3,"kha.graphics4.Graphics2.set_fontSize","kha/graphics4/Graphics2.hx",979,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_982_drawLine,"kha.graphics4.Graphics2","drawLine",0x0c81f54e,"kha.graphics4.Graphics2.drawLine","kha/graphics4/Graphics2.hx",982,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1004_fillTriangle,"kha.graphics4.Graphics2","fillTriangle",0x60580aa1,"kha.graphics4.Graphics2.fillTriangle","kha/graphics4/Graphics2.hx",1004,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1017_get_imageScaleQuality,"kha.graphics4.Graphics2","get_imageScaleQuality",0xc084b131,"kha.graphics4.Graphics2.get_imageScaleQuality","kha/graphics4/Graphics2.hx",1017,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1020_set_imageScaleQuality,"kha.graphics4.Graphics2","set_imageScaleQuality",0x148d7f3d,"kha.graphics4.Graphics2.set_imageScaleQuality","kha/graphics4/Graphics2.hx",1020,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1029_get_mipmapScaleQuality,"kha.graphics4.Graphics2","get_mipmapScaleQuality",0xa8eee7fc,"kha.graphics4.Graphics2.get_mipmapScaleQuality","kha/graphics4/Graphics2.hx",1029,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1032_set_mipmapScaleQuality,"kha.graphics4.Graphics2","set_mipmapScaleQuality",0xdc9a6470,"kha.graphics4.Graphics2.set_mipmapScaleQuality","kha/graphics4/Graphics2.hx",1032,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1038_setPipeline,"kha.graphics4.Graphics2","setPipeline",0x3232b76e,"kha.graphics4.Graphics2.setPipeline","kha/graphics4/Graphics2.hx",1038,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1046_scissor,"kha.graphics4.Graphics2","scissor",0xe6b2cda6,"kha.graphics4.Graphics2.scissor","kha/graphics4/Graphics2.hx",1046,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1051_disableScissor,"kha.graphics4.Graphics2","disableScissor",0x18baf2ca,"kha.graphics4.Graphics2.disableScissor","kha/graphics4/Graphics2.hx",1051,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1056_begin,"kha.graphics4.Graphics2","begin",0xdda83933,"kha.graphics4.Graphics2.begin","kha/graphics4/Graphics2.hx",1056,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1062_clear,"kha.graphics4.Graphics2","clear",0x75adc097,"kha.graphics4.Graphics2.clear","kha/graphics4/Graphics2.hx",1062,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1067_flush,"kha.graphics4.Graphics2","flush",0x2fedb1ce,"kha.graphics4.Graphics2.flush","kha/graphics4/Graphics2.hx",1067,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1073_end,"kha.graphics4.Graphics2","end",0x1f209c65,"kha.graphics4.Graphics2.end","kha/graphics4/Graphics2.hx",1073,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1078_drawVideoInternal,"kha.graphics4.Graphics2","drawVideoInternal",0xe071523e,"kha.graphics4.Graphics2.drawVideoInternal","kha/graphics4/Graphics2.hx",1078,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1082_drawVideo,"kha.graphics4.Graphics2","drawVideo",0xa72ee5e1,"kha.graphics4.Graphics2.drawVideo","kha/graphics4/Graphics2.hx",1082,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_823_upperPowerOfTwo,"kha.graphics4.Graphics2","upperPowerOfTwo",0x6f9869fc,"kha.graphics4.Graphics2.upperPowerOfTwo","kha/graphics4/Graphics2.hx",823,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1088_createImageVertexStructure,"kha.graphics4.Graphics2","createImageVertexStructure",0x36f524e6,"kha.graphics4.Graphics2.createImageVertexStructure","kha/graphics4/Graphics2.hx",1088,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1096_createImagePipeline,"kha.graphics4.Graphics2","createImagePipeline",0x9c6ff18b,"kha.graphics4.Graphics2.createImagePipeline","kha/graphics4/Graphics2.hx",1096,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1108_createColoredVertexStructure,"kha.graphics4.Graphics2","createColoredVertexStructure",0x7d5e181f,"kha.graphics4.Graphics2.createColoredVertexStructure","kha/graphics4/Graphics2.hx",1108,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1115_createColoredPipeline,"kha.graphics4.Graphics2","createColoredPipeline",0x9f695132,"kha.graphics4.Graphics2.createColoredPipeline","kha/graphics4/Graphics2.hx",1115,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1127_createTextVertexStructure,"kha.graphics4.Graphics2","createTextVertexStructure",0x0c9f0070,"kha.graphics4.Graphics2.createTextVertexStructure","kha/graphics4/Graphics2.hx",1127,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1135_createTextPipeline,"kha.graphics4.Graphics2","createTextPipeline",0xf90b08c1,"kha.graphics4.Graphics2.createTextPipeline","kha/graphics4/Graphics2.hx",1135,0x0c1de808)
namespace kha{
namespace graphics4{

void Graphics2_obj::__construct(::Dynamic canvas){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_793_new)
HXLINE(1026)		this->myMipmapScaleQuality = ::kha::graphics2::ImageScaleQuality_obj::High_dyn();
HXLINE(1014)		this->myImageScaleQuality = ::kha::graphics2::ImageScaleQuality_obj::High_dyn();
HXLINE( 805)		super::__construct();
HXLINE( 806)		this->set_color((int)-1);
HXLINE( 807)		this->canvas = canvas;
HXLINE( 808)		this->g = ::kha::Canvas_obj::get_g4(canvas);
HXLINE( 809)		this->imagePainter =  ::kha::graphics4::ImageShaderPainter_obj::__alloc( HX_CTX ,this->g);
HXLINE( 810)		this->coloredPainter =  ::kha::graphics4::ColoredShaderPainter_obj::__alloc( HX_CTX ,this->g);
HXLINE( 811)		this->textPainter =  ::kha::graphics4::TextShaderPainter_obj::__alloc( HX_CTX ,this->g);
HXLINE( 812)		this->textPainter->fontSize = this->get_fontSize();
HXLINE( 813)		this->setProjection();
HXLINE( 815)		if (hx::IsNull( ::kha::graphics4::Graphics2_obj::videoPipeline )) {
HXLINE( 816)			::kha::graphics4::Graphics2_obj::videoPipeline = ::kha::graphics4::Graphics2_obj::createImagePipeline(::kha::graphics4::Graphics2_obj::createImageVertexStructure());
HXLINE( 817)			::kha::graphics4::Graphics2_obj::videoPipeline->fragmentShader = ::kha::Shaders_obj::painter_video_frag;
HXLINE( 818)			::kha::graphics4::Graphics2_obj::videoPipeline->vertexShader = ::kha::Shaders_obj::painter_video_vert;
HXLINE( 819)			::kha::graphics4::Graphics2_obj::videoPipeline->compile();
            		}
            	}

Dynamic Graphics2_obj::__CreateEmpty() { return new Graphics2_obj; }

void *Graphics2_obj::_hx_vtable = 0;

Dynamic Graphics2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Graphics2_obj > _hx_result = new Graphics2_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Graphics2_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f3aa9a2) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2f3aa9a2;
	} else {
		return inClassId==(int)0x3f458a72;
	}
}

void Graphics2_obj::setProjection(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_834_setProjection)
HXLINE( 835)		int width = ::kha::Canvas_obj::get_width(this->canvas);
HXLINE( 836)		int height = ::kha::Canvas_obj::get_height(this->canvas);
HXLINE( 837)		if (::Std_obj::is(this->canvas,hx::ClassOf< ::kha::Framebuffer >())) {
HXLINE( 838)			this->projectionMatrix = ::kha::math::FastMatrix4_obj::orthogonalProjection((int)0,width,height,(int)0,((Float)0.1),(int)1000);
            		}
            		else {
HXLINE( 841)			if (!(::kha::Image_obj::get_nonPow2Supported())) {
HXLINE( 842)				width = ::kha::graphics4::Graphics2_obj::upperPowerOfTwo(width);
HXLINE( 843)				height = ::kha::graphics4::Graphics2_obj::upperPowerOfTwo(height);
            			}
HXLINE( 845)			if (::kha::graphics4::Graphics_obj::renderTargetsInvertedY(this->g)) {
HXLINE( 846)				this->projectionMatrix = ::kha::math::FastMatrix4_obj::orthogonalProjection((int)0,width,(int)0,height,((Float)0.1),(int)1000);
            			}
            			else {
HXLINE( 849)				this->projectionMatrix = ::kha::math::FastMatrix4_obj::orthogonalProjection((int)0,width,height,(int)0,((Float)0.1),(int)1000);
            			}
            		}
HXLINE( 852)		this->imagePainter->setProjection(this->projectionMatrix);
HXLINE( 853)		this->coloredPainter->setProjection(this->projectionMatrix);
HXLINE( 854)		this->textPainter->setProjection(this->projectionMatrix);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,setProjection,(void))

void Graphics2_obj::drawImage( ::kha::Image img,float x,float y){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_858_drawImage)
HXLINE( 859)		{
HXLINE( 859)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 859)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > (int)0)) {
HXLINE( 859)				_this->drawTriBuffer(false);
            			}
HXDLIN( 859)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > (int)0)) {
HXLINE( 859)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 860)		this->textPainter->end();
HXLINE( 861)		float xw = (x + img->get_width());
HXLINE( 862)		float yh = (y + img->get_height());
HXLINE( 864)		 Kore::float32x4 xx = Kore::load(x,x,xw,xw);
HXLINE( 865)		 Kore::float32x4 yy = Kore::load(yh,y,y,yh);
HXLINE( 867)		::Array< ::Dynamic> _00 = this->transformations;
HXDLIN( 867)		 Kore::float32x4 _001 = Kore::loadAll(_00->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >()->_00);
HXLINE( 868)		::Array< ::Dynamic> _01 = this->transformations;
HXDLIN( 868)		 Kore::float32x4 _011 = Kore::loadAll(_01->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >()->_01);
HXLINE( 869)		::Array< ::Dynamic> _02 = this->transformations;
HXDLIN( 869)		 Kore::float32x4 _021 = Kore::loadAll(_02->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >()->_02);
HXLINE( 870)		::Array< ::Dynamic> _10 = this->transformations;
HXDLIN( 870)		 Kore::float32x4 _101 = Kore::loadAll(_10->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >()->_10);
HXLINE( 871)		::Array< ::Dynamic> _11 = this->transformations;
HXDLIN( 871)		 Kore::float32x4 _111 = Kore::loadAll(_11->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >()->_11);
HXLINE( 872)		::Array< ::Dynamic> _12 = this->transformations;
HXDLIN( 872)		 Kore::float32x4 _121 = Kore::loadAll(_12->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >()->_12);
HXLINE( 873)		::Array< ::Dynamic> _20 = this->transformations;
HXDLIN( 873)		 Kore::float32x4 _201 = Kore::loadAll(_20->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >()->_20);
HXLINE( 874)		::Array< ::Dynamic> _21 = this->transformations;
HXDLIN( 874)		 Kore::float32x4 _211 = Kore::loadAll(_21->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >()->_21);
HXLINE( 875)		::Array< ::Dynamic> _22 = this->transformations;
HXDLIN( 875)		 Kore::float32x4 _221 = Kore::loadAll(_22->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >()->_22);
HXLINE( 878)		 Kore::float32x4 w = Kore::mul(_021,xx);
HXDLIN( 878)		 Kore::float32x4 w1 = Kore::add(Kore::add(w,Kore::mul(_121,yy)),_221);
HXLINE( 879)		 Kore::float32x4 px = Kore::mul(_001,xx);
HXDLIN( 879)		 Kore::float32x4 px1 = Kore::div(Kore::add(Kore::add(px,Kore::mul(_101,yy)),_201),w1);
HXLINE( 880)		 Kore::float32x4 py = Kore::mul(_011,xx);
HXDLIN( 880)		 Kore::float32x4 py1 = Kore::div(Kore::add(Kore::add(py,Kore::mul(_111,yy)),_211),w1);
HXLINE( 882)		{
HXLINE( 882)			 ::kha::graphics4::ImageShaderPainter _this1 = this->imagePainter;
HXDLIN( 882)			float bottomleftx = Kore::get(px1,(int)0);
HXDLIN( 882)			float bottomlefty = Kore::get(py1,(int)0);
HXDLIN( 882)			float topleftx = Kore::get(px1,(int)1);
HXDLIN( 882)			float toplefty = Kore::get(py1,(int)1);
HXDLIN( 882)			float toprightx = Kore::get(px1,(int)2);
HXDLIN( 882)			float toprighty = Kore::get(py1,(int)2);
HXDLIN( 882)			float bottomrightx = Kore::get(px1,(int)3);
HXDLIN( 882)			float bottomrighty = Kore::get(py1,(int)3);
HXDLIN( 882)			float opacity = this->get_opacity();
HXDLIN( 882)			int color = this->get_color();
HXDLIN( 882)			 ::kha::Image tex = img;
HXDLIN( 882)			bool _hx_tmp;
HXDLIN( 882)			if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex + (int)1) < (int)1500)) {
HXLINE( 882)				if (hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 882)					_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            				}
            				else {
HXLINE( 882)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 882)				_hx_tmp = true;
            			}
HXDLIN( 882)			if (_hx_tmp) {
HXLINE( 882)				_this1->drawBuffer();
            			}
HXDLIN( 882)			{
HXLINE( 882)				float r = (hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098));
HXDLIN( 882)				float g = (hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098));
HXDLIN( 882)				float b = (((int)color & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 882)				float a = ((hx::UShr(color,(int)24) * ((Float)0.00392156862745098)) * opacity);
HXDLIN( 882)				int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 882)				{
HXLINE( 882)					 float32array this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this1.set((baseIndex + (int)5),r);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this2.set((baseIndex + (int)6),g);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this3.set((baseIndex + (int)7),b);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this4.set((baseIndex + (int)8),a);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this5.set((baseIndex + (int)14),r);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this6.set((baseIndex + (int)15),g);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this7.set((baseIndex + (int)16),b);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this8.set((baseIndex + (int)17),a);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this9.set((baseIndex + (int)23),r);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this10.set((baseIndex + (int)24),g);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this11.set((baseIndex + (int)25),b);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this12.set((baseIndex + (int)26),a);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this13.set((baseIndex + (int)32),r);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this14.set((baseIndex + (int)33),g);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this15.set((baseIndex + (int)34),b);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this16.set((baseIndex + (int)35),a);
            				}
            			}
HXDLIN( 882)			{
HXLINE( 882)				int right = tex->get_width();
HXDLIN( 882)				float right1 = ((Float)right / (Float)tex->get_realWidth());
HXDLIN( 882)				int bottom = tex->get_height();
HXDLIN( 882)				float bottom1 = ((Float)bottom / (Float)tex->get_realHeight());
HXDLIN( 882)				int baseIndex1 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 882)				{
HXLINE( 882)					 float32array this17 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this17.set((baseIndex1 + (int)3),(int)0);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this18 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this18.set((baseIndex1 + (int)4),bottom1);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this19 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this19.set((baseIndex1 + (int)12),(int)0);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this20 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this20.set((baseIndex1 + (int)13),(int)0);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this21 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this21.set((baseIndex1 + (int)21),right1);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this22 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this22.set((baseIndex1 + (int)22),(int)0);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this23 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this23.set((baseIndex1 + (int)30),right1);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this24 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this24.set((baseIndex1 + (int)31),bottom1);
            				}
            			}
HXDLIN( 882)			{
HXLINE( 882)				int baseIndex2 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 882)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,bottomleftx);
HXDLIN( 882)				{
HXLINE( 882)					 float32array this25 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this25.set((baseIndex2 + (int)1),bottomlefty);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this26 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this26.set((baseIndex2 + (int)2),((Float)-5.0));
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this27 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this27.set((baseIndex2 + (int)9),topleftx);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this28 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this28.set((baseIndex2 + (int)10),toplefty);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this29 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this29.set((baseIndex2 + (int)11),((Float)-5.0));
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this30 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this30.set((baseIndex2 + (int)18),toprightx);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this31 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this31.set((baseIndex2 + (int)19),toprighty);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this32 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this32.set((baseIndex2 + (int)20),((Float)-5.0));
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this33 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this33.set((baseIndex2 + (int)27),bottomrightx);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this34 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this34.set((baseIndex2 + (int)28),bottomrighty);
            				}
HXDLIN( 882)				{
HXLINE( 882)					 float32array this35 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 882)					this35.set((baseIndex2 + (int)29),((Float)-5.0));
            				}
            			}
HXDLIN( 882)			++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXDLIN( 882)			::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            		}
            	}


void Graphics2_obj::drawScaledSubImage( ::kha::Image img,float sx,float sy,float sw,float sh,float dx,float dy,float dw,float dh){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_899_drawScaledSubImage)
HXLINE( 900)		{
HXLINE( 900)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 900)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > (int)0)) {
HXLINE( 900)				_this->drawTriBuffer(false);
            			}
HXDLIN( 900)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > (int)0)) {
HXLINE( 900)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 901)		this->textPainter->end();
HXLINE( 902)		float p1_y;
HXDLIN( 902)		float p1_x;
HXDLIN( 902)		::Array< ::Dynamic> _this1 = this->transformations;
HXDLIN( 902)		 ::kha::math::FastMatrix3 _this2 = _this1->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 902)		float value_y;
HXDLIN( 902)		float value_x = dx;
HXDLIN( 902)		value_y = (dy + dh);
HXDLIN( 902)		float w = (_this2->_02 * value_x);
HXDLIN( 902)		float w1 = ((w + (_this2->_12 * value_y)) + _this2->_22);
HXDLIN( 902)		float x = (_this2->_00 * value_x);
HXDLIN( 902)		Float x1 = ((Float)((x + (_this2->_10 * value_y)) + _this2->_20) / (Float)w1);
HXDLIN( 902)		float y = (_this2->_01 * value_x);
HXDLIN( 902)		Float y1 = ((Float)((y + (_this2->_11 * value_y)) + _this2->_21) / (Float)w1);
HXDLIN( 902)		p1_x = x1;
HXDLIN( 902)		p1_y = y1;
HXLINE( 903)		float p2_y;
HXDLIN( 903)		float p2_x;
HXDLIN( 903)		::Array< ::Dynamic> _this3 = this->transformations;
HXDLIN( 903)		 ::kha::math::FastMatrix3 _this4 = _this3->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 903)		float value_y1;
HXDLIN( 903)		float value_x1 = dx;
HXDLIN( 903)		value_y1 = dy;
HXDLIN( 903)		float w2 = (_this4->_02 * value_x1);
HXDLIN( 903)		float w3 = ((w2 + (_this4->_12 * value_y1)) + _this4->_22);
HXDLIN( 903)		float x2 = (_this4->_00 * value_x1);
HXDLIN( 903)		Float x3 = ((Float)((x2 + (_this4->_10 * value_y1)) + _this4->_20) / (Float)w3);
HXDLIN( 903)		float y2 = (_this4->_01 * value_x1);
HXDLIN( 903)		Float y3 = ((Float)((y2 + (_this4->_11 * value_y1)) + _this4->_21) / (Float)w3);
HXDLIN( 903)		p2_x = x3;
HXDLIN( 903)		p2_y = y3;
HXLINE( 904)		float p3_y;
HXDLIN( 904)		float p3_x;
HXDLIN( 904)		::Array< ::Dynamic> _this5 = this->transformations;
HXDLIN( 904)		 ::kha::math::FastMatrix3 _this6 = _this5->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 904)		float value_y2;
HXDLIN( 904)		float value_x2 = (dx + dw);
HXDLIN( 904)		value_y2 = dy;
HXDLIN( 904)		float w4 = (_this6->_02 * value_x2);
HXDLIN( 904)		float w5 = ((w4 + (_this6->_12 * value_y2)) + _this6->_22);
HXDLIN( 904)		float x4 = (_this6->_00 * value_x2);
HXDLIN( 904)		Float x5 = ((Float)((x4 + (_this6->_10 * value_y2)) + _this6->_20) / (Float)w5);
HXDLIN( 904)		float y4 = (_this6->_01 * value_x2);
HXDLIN( 904)		Float y5 = ((Float)((y4 + (_this6->_11 * value_y2)) + _this6->_21) / (Float)w5);
HXDLIN( 904)		p3_x = x5;
HXDLIN( 904)		p3_y = y5;
HXLINE( 905)		float p4_y;
HXDLIN( 905)		float p4_x;
HXDLIN( 905)		::Array< ::Dynamic> _this7 = this->transformations;
HXDLIN( 905)		 ::kha::math::FastMatrix3 _this8 = _this7->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 905)		float value_y3;
HXDLIN( 905)		float value_x3 = (dx + dw);
HXDLIN( 905)		value_y3 = (dy + dh);
HXDLIN( 905)		float w6 = (_this8->_02 * value_x3);
HXDLIN( 905)		float w7 = ((w6 + (_this8->_12 * value_y3)) + _this8->_22);
HXDLIN( 905)		float x6 = (_this8->_00 * value_x3);
HXDLIN( 905)		Float x7 = ((Float)((x6 + (_this8->_10 * value_y3)) + _this8->_20) / (Float)w7);
HXDLIN( 905)		float y6 = (_this8->_01 * value_x3);
HXDLIN( 905)		Float y7 = ((Float)((y6 + (_this8->_11 * value_y3)) + _this8->_21) / (Float)w7);
HXDLIN( 905)		p4_x = x7;
HXDLIN( 905)		p4_y = y7;
HXLINE( 906)		{
HXLINE( 906)			 ::kha::graphics4::ImageShaderPainter _this9 = this->imagePainter;
HXDLIN( 906)			float opacity = this->get_opacity();
HXDLIN( 906)			int color = this->get_color();
HXDLIN( 906)			 ::kha::Image tex = img;
HXDLIN( 906)			bool _hx_tmp;
HXDLIN( 906)			if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex + (int)1) < (int)1500)) {
HXLINE( 906)				if (hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 906)					_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            				}
            				else {
HXLINE( 906)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 906)				_hx_tmp = true;
            			}
HXDLIN( 906)			if (_hx_tmp) {
HXLINE( 906)				_this9->drawBuffer();
            			}
HXDLIN( 906)			{
HXLINE( 906)				float left = ((Float)sx / (Float)tex->get_realWidth());
HXDLIN( 906)				float top = ((Float)sy / (Float)tex->get_realHeight());
HXDLIN( 906)				float right = ((Float)(sx + sw) / (Float)tex->get_realWidth());
HXDLIN( 906)				float bottom = ((Float)(sy + sh) / (Float)tex->get_realHeight());
HXDLIN( 906)				int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 906)				{
HXLINE( 906)					 float32array this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this1.set((baseIndex + (int)3),left);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this2.set((baseIndex + (int)4),bottom);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this3.set((baseIndex + (int)12),left);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this4.set((baseIndex + (int)13),top);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this5.set((baseIndex + (int)21),right);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this6.set((baseIndex + (int)22),top);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this7.set((baseIndex + (int)30),right);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this8.set((baseIndex + (int)31),bottom);
            				}
            			}
HXDLIN( 906)			{
HXLINE( 906)				float r = (hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098));
HXDLIN( 906)				float g = (hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098));
HXDLIN( 906)				float b = (((int)color & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 906)				float a = ((hx::UShr(color,(int)24) * ((Float)0.00392156862745098)) * opacity);
HXDLIN( 906)				int baseIndex1 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 906)				{
HXLINE( 906)					 float32array this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this9.set((baseIndex1 + (int)5),r);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this10.set((baseIndex1 + (int)6),g);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this11.set((baseIndex1 + (int)7),b);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this12.set((baseIndex1 + (int)8),a);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this13.set((baseIndex1 + (int)14),r);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this14.set((baseIndex1 + (int)15),g);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this15.set((baseIndex1 + (int)16),b);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this16.set((baseIndex1 + (int)17),a);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this17 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this17.set((baseIndex1 + (int)23),r);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this18 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this18.set((baseIndex1 + (int)24),g);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this19 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this19.set((baseIndex1 + (int)25),b);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this20 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this20.set((baseIndex1 + (int)26),a);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this21 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this21.set((baseIndex1 + (int)32),r);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this22 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this22.set((baseIndex1 + (int)33),g);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this23 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this23.set((baseIndex1 + (int)34),b);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this24 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this24.set((baseIndex1 + (int)35),a);
            				}
            			}
HXDLIN( 906)			{
HXLINE( 906)				int baseIndex2 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 906)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,p1_x);
HXDLIN( 906)				{
HXLINE( 906)					 float32array this25 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this25.set((baseIndex2 + (int)1),p1_y);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this26 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this26.set((baseIndex2 + (int)2),((Float)-5.0));
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this27 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this27.set((baseIndex2 + (int)9),p2_x);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this28 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this28.set((baseIndex2 + (int)10),p2_y);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this29 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this29.set((baseIndex2 + (int)11),((Float)-5.0));
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this30 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this30.set((baseIndex2 + (int)18),p3_x);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this31 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this31.set((baseIndex2 + (int)19),p3_y);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this32 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this32.set((baseIndex2 + (int)20),((Float)-5.0));
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this33 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this33.set((baseIndex2 + (int)27),p4_x);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this34 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this34.set((baseIndex2 + (int)28),p4_y);
            				}
HXDLIN( 906)				{
HXLINE( 906)					 float32array this35 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 906)					this35.set((baseIndex2 + (int)29),((Float)-5.0));
            				}
            			}
HXDLIN( 906)			++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXDLIN( 906)			::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            		}
            	}


int Graphics2_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_910_get_color)
HXDLIN( 910)		return this->myColor;
            	}


int Graphics2_obj::set_color(int color){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_914_set_color)
HXDLIN( 914)		return (this->myColor = color);
            	}


void Graphics2_obj::drawRect(Float x,Float y,Float width,Float height,hx::Null< Float >  __o_strength){
Float strength = __o_strength.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_917_drawRect)
HXLINE( 918)		this->imagePainter->end();
HXLINE( 919)		this->textPainter->end();
HXLINE( 921)		::Array< ::Dynamic> _this = this->transformations;
HXDLIN( 921)		 ::kha::math::FastMatrix3 _this1 = _this->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 921)		float value_y;
HXDLIN( 921)		float value_x = (x - ((Float)strength / (Float)(int)2));
HXDLIN( 921)		value_y = (y + ((Float)strength / (Float)(int)2));
HXDLIN( 921)		float w = (_this1->_02 * value_x);
HXDLIN( 921)		float w1 = ((w + (_this1->_12 * value_y)) + _this1->_22);
HXDLIN( 921)		float x1 = (_this1->_00 * value_x);
HXDLIN( 921)		Float x2 = ((Float)((x1 + (_this1->_10 * value_y)) + _this1->_20) / (Float)w1);
HXDLIN( 921)		float y1 = (_this1->_01 * value_x);
HXDLIN( 921)		Float y2 = ((Float)((y1 + (_this1->_11 * value_y)) + _this1->_21) / (Float)w1);
HXDLIN( 921)		 ::kha::math::FastVector2 p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x2,y2);
HXLINE( 922)		::Array< ::Dynamic> _this2 = this->transformations;
HXDLIN( 922)		 ::kha::math::FastMatrix3 _this3 = _this2->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 922)		float value_y1;
HXDLIN( 922)		float value_x1 = (x - ((Float)strength / (Float)(int)2));
HXDLIN( 922)		value_y1 = (y - ((Float)strength / (Float)(int)2));
HXDLIN( 922)		float w2 = (_this3->_02 * value_x1);
HXDLIN( 922)		float w3 = ((w2 + (_this3->_12 * value_y1)) + _this3->_22);
HXDLIN( 922)		float x3 = (_this3->_00 * value_x1);
HXDLIN( 922)		Float x4 = ((Float)((x3 + (_this3->_10 * value_y1)) + _this3->_20) / (Float)w3);
HXDLIN( 922)		float y3 = (_this3->_01 * value_x1);
HXDLIN( 922)		Float y4 = ((Float)((y3 + (_this3->_11 * value_y1)) + _this3->_21) / (Float)w3);
HXDLIN( 922)		 ::kha::math::FastVector2 p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x4,y4);
HXLINE( 923)		::Array< ::Dynamic> _this4 = this->transformations;
HXDLIN( 923)		 ::kha::math::FastMatrix3 _this5 = _this4->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 923)		float value_y2;
HXDLIN( 923)		float value_x2 = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 923)		value_y2 = (y - ((Float)strength / (Float)(int)2));
HXDLIN( 923)		float w4 = (_this5->_02 * value_x2);
HXDLIN( 923)		float w5 = ((w4 + (_this5->_12 * value_y2)) + _this5->_22);
HXDLIN( 923)		float x5 = (_this5->_00 * value_x2);
HXDLIN( 923)		Float x6 = ((Float)((x5 + (_this5->_10 * value_y2)) + _this5->_20) / (Float)w5);
HXDLIN( 923)		float y5 = (_this5->_01 * value_x2);
HXDLIN( 923)		Float y6 = ((Float)((y5 + (_this5->_11 * value_y2)) + _this5->_21) / (Float)w5);
HXDLIN( 923)		 ::kha::math::FastVector2 p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x6,y6);
HXLINE( 924)		::Array< ::Dynamic> _this6 = this->transformations;
HXDLIN( 924)		 ::kha::math::FastMatrix3 _this7 = _this6->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 924)		float value_y3;
HXDLIN( 924)		float value_x3 = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 924)		value_y3 = (y + ((Float)strength / (Float)(int)2));
HXDLIN( 924)		float w6 = (_this7->_02 * value_x3);
HXDLIN( 924)		float w7 = ((w6 + (_this7->_12 * value_y3)) + _this7->_22);
HXDLIN( 924)		float x7 = (_this7->_00 * value_x3);
HXDLIN( 924)		Float x8 = ((Float)((x7 + (_this7->_10 * value_y3)) + _this7->_20) / (Float)w7);
HXDLIN( 924)		float y7 = (_this7->_01 * value_x3);
HXDLIN( 924)		Float y8 = ((Float)((y7 + (_this7->_11 * value_y3)) + _this7->_21) / (Float)w7);
HXDLIN( 924)		 ::kha::math::FastVector2 p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x8,y8);
HXLINE( 925)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN( 925)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 925)		int _hx_tmp2 = this->get_color();
HXDLIN( 925)		_hx_tmp->fillRect(_hx_tmp1,_hx_tmp2,p1->x,p1->y,p2->x,p2->y,p3->x,p3->y,p4->x,p4->y);
HXLINE( 927)		::Array< ::Dynamic> _this8 = this->transformations;
HXDLIN( 927)		 ::kha::math::FastMatrix3 _this9 = _this8->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 927)		float value_y4;
HXDLIN( 927)		float value_x4 = (x - ((Float)strength / (Float)(int)2));
HXDLIN( 927)		value_y4 = ((y + height) + ((Float)strength / (Float)(int)2));
HXDLIN( 927)		float w8 = (_this9->_02 * value_x4);
HXDLIN( 927)		float w9 = ((w8 + (_this9->_12 * value_y4)) + _this9->_22);
HXDLIN( 927)		float x9 = (_this9->_00 * value_x4);
HXDLIN( 927)		Float x10 = ((Float)((x9 + (_this9->_10 * value_y4)) + _this9->_20) / (Float)w9);
HXDLIN( 927)		float y9 = (_this9->_01 * value_x4);
HXDLIN( 927)		Float y10 = ((Float)((y9 + (_this9->_11 * value_y4)) + _this9->_21) / (Float)w9);
HXDLIN( 927)		p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x10,y10);
HXLINE( 928)		::Array< ::Dynamic> _this10 = this->transformations;
HXDLIN( 928)		 ::kha::math::FastMatrix3 _this11 = _this10->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 928)		float value_y5;
HXDLIN( 928)		float value_x5 = (x + ((Float)strength / (Float)(int)2));
HXDLIN( 928)		value_y5 = (y - ((Float)strength / (Float)(int)2));
HXDLIN( 928)		float w10 = (_this11->_02 * value_x5);
HXDLIN( 928)		float w11 = ((w10 + (_this11->_12 * value_y5)) + _this11->_22);
HXDLIN( 928)		float x11 = (_this11->_00 * value_x5);
HXDLIN( 928)		Float x12 = ((Float)((x11 + (_this11->_10 * value_y5)) + _this11->_20) / (Float)w11);
HXDLIN( 928)		float y11 = (_this11->_01 * value_x5);
HXDLIN( 928)		Float y12 = ((Float)((y11 + (_this11->_11 * value_y5)) + _this11->_21) / (Float)w11);
HXDLIN( 928)		p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x12,y12);
HXLINE( 929)		::Array< ::Dynamic> _this12 = this->transformations;
HXDLIN( 929)		 ::kha::math::FastMatrix3 _this13 = _this12->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 929)		float value_y6;
HXDLIN( 929)		float value_x6 = (x + ((Float)strength / (Float)(int)2));
HXDLIN( 929)		value_y6 = ((y + height) + ((Float)strength / (Float)(int)2));
HXDLIN( 929)		float w12 = (_this13->_02 * value_x6);
HXDLIN( 929)		float w13 = ((w12 + (_this13->_12 * value_y6)) + _this13->_22);
HXDLIN( 929)		float x13 = (_this13->_00 * value_x6);
HXDLIN( 929)		Float x14 = ((Float)((x13 + (_this13->_10 * value_y6)) + _this13->_20) / (Float)w13);
HXDLIN( 929)		float y13 = (_this13->_01 * value_x6);
HXDLIN( 929)		Float y14 = ((Float)((y13 + (_this13->_11 * value_y6)) + _this13->_21) / (Float)w13);
HXDLIN( 929)		p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x14,y14);
HXLINE( 930)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp3 = this->coloredPainter;
HXDLIN( 930)		Float _hx_tmp4 = this->get_opacity();
HXDLIN( 930)		int _hx_tmp5 = this->get_color();
HXDLIN( 930)		_hx_tmp3->fillRect(_hx_tmp4,_hx_tmp5,p1->x,p1->y,p2->x,p2->y,p3->x,p3->y,p4->x,p4->y);
HXLINE( 932)		::Array< ::Dynamic> _this14 = this->transformations;
HXDLIN( 932)		 ::kha::math::FastMatrix3 _this15 = _this14->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 932)		float value_y7;
HXDLIN( 932)		float value_x7 = (x - ((Float)strength / (Float)(int)2));
HXDLIN( 932)		value_y7 = ((y + height) - ((Float)strength / (Float)(int)2));
HXDLIN( 932)		float w14 = (_this15->_02 * value_x7);
HXDLIN( 932)		float w15 = ((w14 + (_this15->_12 * value_y7)) + _this15->_22);
HXDLIN( 932)		float x15 = (_this15->_00 * value_x7);
HXDLIN( 932)		Float x16 = ((Float)((x15 + (_this15->_10 * value_y7)) + _this15->_20) / (Float)w15);
HXDLIN( 932)		float y15 = (_this15->_01 * value_x7);
HXDLIN( 932)		Float y16 = ((Float)((y15 + (_this15->_11 * value_y7)) + _this15->_21) / (Float)w15);
HXDLIN( 932)		p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x16,y16);
HXLINE( 933)		::Array< ::Dynamic> _this16 = this->transformations;
HXDLIN( 933)		 ::kha::math::FastMatrix3 _this17 = _this16->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 933)		float value_y8;
HXDLIN( 933)		float value_x8 = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 933)		value_y8 = ((y + height) - ((Float)strength / (Float)(int)2));
HXDLIN( 933)		float w16 = (_this17->_02 * value_x8);
HXDLIN( 933)		float w17 = ((w16 + (_this17->_12 * value_y8)) + _this17->_22);
HXDLIN( 933)		float x17 = (_this17->_00 * value_x8);
HXDLIN( 933)		Float x18 = ((Float)((x17 + (_this17->_10 * value_y8)) + _this17->_20) / (Float)w17);
HXDLIN( 933)		float y17 = (_this17->_01 * value_x8);
HXDLIN( 933)		Float y18 = ((Float)((y17 + (_this17->_11 * value_y8)) + _this17->_21) / (Float)w17);
HXDLIN( 933)		p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x18,y18);
HXLINE( 934)		::Array< ::Dynamic> _this18 = this->transformations;
HXDLIN( 934)		 ::kha::math::FastMatrix3 _this19 = _this18->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 934)		float value_y9;
HXDLIN( 934)		float value_x9 = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 934)		value_y9 = ((y + height) + ((Float)strength / (Float)(int)2));
HXDLIN( 934)		float w18 = (_this19->_02 * value_x9);
HXDLIN( 934)		float w19 = ((w18 + (_this19->_12 * value_y9)) + _this19->_22);
HXDLIN( 934)		float x19 = (_this19->_00 * value_x9);
HXDLIN( 934)		Float x20 = ((Float)((x19 + (_this19->_10 * value_y9)) + _this19->_20) / (Float)w19);
HXDLIN( 934)		float y19 = (_this19->_01 * value_x9);
HXDLIN( 934)		Float y20 = ((Float)((y19 + (_this19->_11 * value_y9)) + _this19->_21) / (Float)w19);
HXDLIN( 934)		p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x20,y20);
HXLINE( 935)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp6 = this->coloredPainter;
HXDLIN( 935)		Float _hx_tmp7 = this->get_opacity();
HXDLIN( 935)		int _hx_tmp8 = this->get_color();
HXDLIN( 935)		_hx_tmp6->fillRect(_hx_tmp7,_hx_tmp8,p1->x,p1->y,p2->x,p2->y,p3->x,p3->y,p4->x,p4->y);
HXLINE( 937)		::Array< ::Dynamic> _this20 = this->transformations;
HXDLIN( 937)		 ::kha::math::FastMatrix3 _this21 = _this20->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 937)		float value_y10;
HXDLIN( 937)		float value_x10 = ((x + width) - ((Float)strength / (Float)(int)2));
HXDLIN( 937)		value_y10 = ((y + height) + ((Float)strength / (Float)(int)2));
HXDLIN( 937)		float w20 = (_this21->_02 * value_x10);
HXDLIN( 937)		float w21 = ((w20 + (_this21->_12 * value_y10)) + _this21->_22);
HXDLIN( 937)		float x21 = (_this21->_00 * value_x10);
HXDLIN( 937)		Float x22 = ((Float)((x21 + (_this21->_10 * value_y10)) + _this21->_20) / (Float)w21);
HXDLIN( 937)		float y21 = (_this21->_01 * value_x10);
HXDLIN( 937)		Float y22 = ((Float)((y21 + (_this21->_11 * value_y10)) + _this21->_21) / (Float)w21);
HXDLIN( 937)		p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x22,y22);
HXLINE( 938)		::Array< ::Dynamic> _this22 = this->transformations;
HXDLIN( 938)		 ::kha::math::FastMatrix3 _this23 = _this22->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 938)		float value_y11;
HXDLIN( 938)		float value_x11 = ((x + width) - ((Float)strength / (Float)(int)2));
HXDLIN( 938)		value_y11 = (y - ((Float)strength / (Float)(int)2));
HXDLIN( 938)		float w22 = (_this23->_02 * value_x11);
HXDLIN( 938)		float w23 = ((w22 + (_this23->_12 * value_y11)) + _this23->_22);
HXDLIN( 938)		float x23 = (_this23->_00 * value_x11);
HXDLIN( 938)		Float x24 = ((Float)((x23 + (_this23->_10 * value_y11)) + _this23->_20) / (Float)w23);
HXDLIN( 938)		float y23 = (_this23->_01 * value_x11);
HXDLIN( 938)		Float y24 = ((Float)((y23 + (_this23->_11 * value_y11)) + _this23->_21) / (Float)w23);
HXDLIN( 938)		p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x24,y24);
HXLINE( 939)		::Array< ::Dynamic> _this24 = this->transformations;
HXDLIN( 939)		 ::kha::math::FastMatrix3 _this25 = _this24->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 939)		float value_y12;
HXDLIN( 939)		float value_x12 = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 939)		value_y12 = (y - ((Float)strength / (Float)(int)2));
HXDLIN( 939)		float w24 = (_this25->_02 * value_x12);
HXDLIN( 939)		float w25 = ((w24 + (_this25->_12 * value_y12)) + _this25->_22);
HXDLIN( 939)		float x25 = (_this25->_00 * value_x12);
HXDLIN( 939)		Float x26 = ((Float)((x25 + (_this25->_10 * value_y12)) + _this25->_20) / (Float)w25);
HXDLIN( 939)		float y25 = (_this25->_01 * value_x12);
HXDLIN( 939)		Float y26 = ((Float)((y25 + (_this25->_11 * value_y12)) + _this25->_21) / (Float)w25);
HXDLIN( 939)		p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x26,y26);
HXLINE( 940)		::Array< ::Dynamic> _this26 = this->transformations;
HXDLIN( 940)		 ::kha::math::FastMatrix3 _this27 = _this26->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 940)		float value_y13;
HXDLIN( 940)		float value_x13 = ((x + width) + ((Float)strength / (Float)(int)2));
HXDLIN( 940)		value_y13 = ((y + height) + ((Float)strength / (Float)(int)2));
HXDLIN( 940)		float w26 = (_this27->_02 * value_x13);
HXDLIN( 940)		float w27 = ((w26 + (_this27->_12 * value_y13)) + _this27->_22);
HXDLIN( 940)		float x27 = (_this27->_00 * value_x13);
HXDLIN( 940)		Float x28 = ((Float)((x27 + (_this27->_10 * value_y13)) + _this27->_20) / (Float)w27);
HXDLIN( 940)		float y27 = (_this27->_01 * value_x13);
HXDLIN( 940)		Float y28 = ((Float)((y27 + (_this27->_11 * value_y13)) + _this27->_21) / (Float)w27);
HXDLIN( 940)		p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x28,y28);
HXLINE( 941)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp9 = this->coloredPainter;
HXDLIN( 941)		Float _hx_tmp10 = this->get_opacity();
HXDLIN( 941)		int _hx_tmp11 = this->get_color();
HXDLIN( 941)		_hx_tmp9->fillRect(_hx_tmp10,_hx_tmp11,p1->x,p1->y,p2->x,p2->y,p3->x,p3->y,p4->x,p4->y);
            	}


void Graphics2_obj::fillRect(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_944_fillRect)
HXLINE( 945)		this->imagePainter->end();
HXLINE( 946)		this->textPainter->end();
HXLINE( 948)		float p1_y;
HXDLIN( 948)		float p1_x;
HXDLIN( 948)		::Array< ::Dynamic> _this = this->transformations;
HXDLIN( 948)		 ::kha::math::FastMatrix3 _this1 = _this->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 948)		float value_y;
HXDLIN( 948)		float value_x = x;
HXDLIN( 948)		value_y = (y + height);
HXDLIN( 948)		float w = (_this1->_02 * value_x);
HXDLIN( 948)		float w1 = ((w + (_this1->_12 * value_y)) + _this1->_22);
HXDLIN( 948)		float x1 = (_this1->_00 * value_x);
HXDLIN( 948)		Float x2 = ((Float)((x1 + (_this1->_10 * value_y)) + _this1->_20) / (Float)w1);
HXDLIN( 948)		float y1 = (_this1->_01 * value_x);
HXDLIN( 948)		Float y2 = ((Float)((y1 + (_this1->_11 * value_y)) + _this1->_21) / (Float)w1);
HXDLIN( 948)		p1_x = x2;
HXDLIN( 948)		p1_y = y2;
HXLINE( 949)		float p2_y;
HXDLIN( 949)		float p2_x;
HXDLIN( 949)		::Array< ::Dynamic> _this2 = this->transformations;
HXDLIN( 949)		 ::kha::math::FastMatrix3 _this3 = _this2->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 949)		float value_y1;
HXDLIN( 949)		float value_x1 = x;
HXDLIN( 949)		value_y1 = y;
HXDLIN( 949)		float w2 = (_this3->_02 * value_x1);
HXDLIN( 949)		float w3 = ((w2 + (_this3->_12 * value_y1)) + _this3->_22);
HXDLIN( 949)		float x3 = (_this3->_00 * value_x1);
HXDLIN( 949)		Float x4 = ((Float)((x3 + (_this3->_10 * value_y1)) + _this3->_20) / (Float)w3);
HXDLIN( 949)		float y3 = (_this3->_01 * value_x1);
HXDLIN( 949)		Float y4 = ((Float)((y3 + (_this3->_11 * value_y1)) + _this3->_21) / (Float)w3);
HXDLIN( 949)		p2_x = x4;
HXDLIN( 949)		p2_y = y4;
HXLINE( 950)		float p3_y;
HXDLIN( 950)		float p3_x;
HXDLIN( 950)		::Array< ::Dynamic> _this4 = this->transformations;
HXDLIN( 950)		 ::kha::math::FastMatrix3 _this5 = _this4->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 950)		float value_y2;
HXDLIN( 950)		float value_x2 = (x + width);
HXDLIN( 950)		value_y2 = y;
HXDLIN( 950)		float w4 = (_this5->_02 * value_x2);
HXDLIN( 950)		float w5 = ((w4 + (_this5->_12 * value_y2)) + _this5->_22);
HXDLIN( 950)		float x5 = (_this5->_00 * value_x2);
HXDLIN( 950)		Float x6 = ((Float)((x5 + (_this5->_10 * value_y2)) + _this5->_20) / (Float)w5);
HXDLIN( 950)		float y5 = (_this5->_01 * value_x2);
HXDLIN( 950)		Float y6 = ((Float)((y5 + (_this5->_11 * value_y2)) + _this5->_21) / (Float)w5);
HXDLIN( 950)		p3_x = x6;
HXDLIN( 950)		p3_y = y6;
HXLINE( 951)		float p4_y;
HXDLIN( 951)		float p4_x;
HXDLIN( 951)		::Array< ::Dynamic> _this6 = this->transformations;
HXDLIN( 951)		 ::kha::math::FastMatrix3 _this7 = _this6->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 951)		float value_y3;
HXDLIN( 951)		float value_x3 = (x + width);
HXDLIN( 951)		value_y3 = (y + height);
HXDLIN( 951)		float w6 = (_this7->_02 * value_x3);
HXDLIN( 951)		float w7 = ((w6 + (_this7->_12 * value_y3)) + _this7->_22);
HXDLIN( 951)		float x7 = (_this7->_00 * value_x3);
HXDLIN( 951)		Float x8 = ((Float)((x7 + (_this7->_10 * value_y3)) + _this7->_20) / (Float)w7);
HXDLIN( 951)		float y7 = (_this7->_01 * value_x3);
HXDLIN( 951)		Float y8 = ((Float)((y7 + (_this7->_11 * value_y3)) + _this7->_21) / (Float)w7);
HXDLIN( 951)		p4_x = x8;
HXDLIN( 951)		p4_y = y8;
HXLINE( 952)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN( 952)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 952)		_hx_tmp->fillRect(_hx_tmp1,this->get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
            	}


void Graphics2_obj::drawString(::String text,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_955_drawString)
HXLINE( 956)		this->imagePainter->end();
HXLINE( 957)		{
HXLINE( 957)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 957)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > (int)0)) {
HXLINE( 957)				_this->drawTriBuffer(false);
            			}
HXDLIN( 957)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > (int)0)) {
HXLINE( 957)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 959)		 ::kha::graphics4::TextShaderPainter _hx_tmp = this->textPainter;
HXDLIN( 959)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 959)		int _hx_tmp2 = this->get_color();
HXDLIN( 959)		::Array< ::Dynamic> _hx_tmp3 = this->transformations;
HXDLIN( 959)		 ::kha::math::FastMatrix3 _hx_tmp4 = _hx_tmp3->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 959)		_hx_tmp->drawString(text,_hx_tmp1,_hx_tmp2,x,y,_hx_tmp4,this->get_fontGlyphs());
            	}


void Graphics2_obj::drawCharacters(::Array< int > text,int start,int length,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_962_drawCharacters)
HXLINE( 963)		this->imagePainter->end();
HXLINE( 964)		{
HXLINE( 964)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 964)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > (int)0)) {
HXLINE( 964)				_this->drawTriBuffer(false);
            			}
HXDLIN( 964)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > (int)0)) {
HXLINE( 964)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 966)		 ::kha::graphics4::TextShaderPainter _hx_tmp = this->textPainter;
HXDLIN( 966)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 966)		int _hx_tmp2 = this->get_color();
HXDLIN( 966)		::Array< ::Dynamic> _hx_tmp3 = this->transformations;
HXDLIN( 966)		 ::kha::math::FastMatrix3 _hx_tmp4 = _hx_tmp3->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 966)		_hx_tmp->drawCharacters(text,start,length,_hx_tmp1,_hx_tmp2,x,y,_hx_tmp4,this->get_fontGlyphs());
            	}


 ::kha::Kravur Graphics2_obj::get_font(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_970_get_font)
HXDLIN( 970)		return this->myFont;
            	}


 ::kha::Kravur Graphics2_obj::set_font( ::kha::Kravur font){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_973_set_font)
HXLINE( 974)		this->textPainter->setFont(font);
HXLINE( 975)		return (this->myFont = font);
            	}


int Graphics2_obj::set_fontSize(int value){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_979_set_fontSize)
HXDLIN( 979)		return this->super::set_fontSize((this->textPainter->fontSize = value));
            	}


void Graphics2_obj::drawLine(Float x1,Float y1,Float x2,Float y2,hx::Null< Float >  __o_strength){
Float strength = __o_strength.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_982_drawLine)
HXLINE( 983)		this->imagePainter->end();
HXLINE( 984)		this->textPainter->end();
HXLINE( 986)		 ::kha::math::FastVector2 vec;
HXLINE( 987)		if ((y2 == y1)) {
HXLINE( 987)			vec =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,(int)0,(int)-1);
            		}
            		else {
HXLINE( 988)			vec =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,(int)1,((Float)-((x2 - x1)) / (Float)(y2 - y1)));
            		}
HXLINE( 989)		vec->set_length(strength);
HXLINE( 990)		Float p1 = (x1 + (((Float)0.5) * vec->x));
HXDLIN( 990)		 ::kha::math::FastVector2 p11 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,p1,(y1 + (((Float)0.5) * vec->y)));
HXLINE( 991)		Float p2 = (x2 + (((Float)0.5) * vec->x));
HXDLIN( 991)		 ::kha::math::FastVector2 p21 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,p2,(y2 + (((Float)0.5) * vec->y)));
HXLINE( 992)		float p3 = (p11->x - vec->x);
HXDLIN( 992)		 ::kha::math::FastVector2 p31 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,p3,(p11->y - vec->y));
HXLINE( 993)		float p4 = (p21->x - vec->x);
HXDLIN( 993)		 ::kha::math::FastVector2 p41 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,p4,(p21->y - vec->y));
HXLINE( 995)		::Array< ::Dynamic> _this = this->transformations;
HXDLIN( 995)		 ::kha::math::FastMatrix3 _this1 = _this->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 995)		float w = (_this1->_02 * p11->x);
HXDLIN( 995)		float w1 = ((w + (_this1->_12 * p11->y)) + _this1->_22);
HXDLIN( 995)		float x = (_this1->_00 * p11->x);
HXDLIN( 995)		Float x3 = ((Float)((x + (_this1->_10 * p11->y)) + _this1->_20) / (Float)w1);
HXDLIN( 995)		float y = (_this1->_01 * p11->x);
HXDLIN( 995)		Float y3 = ((Float)((y + (_this1->_11 * p11->y)) + _this1->_21) / (Float)w1);
HXDLIN( 995)		p11 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x3,y3);
HXLINE( 996)		::Array< ::Dynamic> _this2 = this->transformations;
HXDLIN( 996)		 ::kha::math::FastMatrix3 _this3 = _this2->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 996)		float w2 = (_this3->_02 * p21->x);
HXDLIN( 996)		float w3 = ((w2 + (_this3->_12 * p21->y)) + _this3->_22);
HXDLIN( 996)		float x4 = (_this3->_00 * p21->x);
HXDLIN( 996)		Float x5 = ((Float)((x4 + (_this3->_10 * p21->y)) + _this3->_20) / (Float)w3);
HXDLIN( 996)		float y4 = (_this3->_01 * p21->x);
HXDLIN( 996)		Float y5 = ((Float)((y4 + (_this3->_11 * p21->y)) + _this3->_21) / (Float)w3);
HXDLIN( 996)		p21 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x5,y5);
HXLINE( 997)		::Array< ::Dynamic> _this4 = this->transformations;
HXDLIN( 997)		 ::kha::math::FastMatrix3 _this5 = _this4->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 997)		float w4 = (_this5->_02 * p31->x);
HXDLIN( 997)		float w5 = ((w4 + (_this5->_12 * p31->y)) + _this5->_22);
HXDLIN( 997)		float x6 = (_this5->_00 * p31->x);
HXDLIN( 997)		Float x7 = ((Float)((x6 + (_this5->_10 * p31->y)) + _this5->_20) / (Float)w5);
HXDLIN( 997)		float y6 = (_this5->_01 * p31->x);
HXDLIN( 997)		Float y7 = ((Float)((y6 + (_this5->_11 * p31->y)) + _this5->_21) / (Float)w5);
HXDLIN( 997)		p31 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x7,y7);
HXLINE( 998)		::Array< ::Dynamic> _this6 = this->transformations;
HXDLIN( 998)		 ::kha::math::FastMatrix3 _this7 = _this6->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 998)		float w6 = (_this7->_02 * p41->x);
HXDLIN( 998)		float w7 = ((w6 + (_this7->_12 * p41->y)) + _this7->_22);
HXDLIN( 998)		float x8 = (_this7->_00 * p41->x);
HXDLIN( 998)		Float x9 = ((Float)((x8 + (_this7->_10 * p41->y)) + _this7->_20) / (Float)w7);
HXDLIN( 998)		float y8 = (_this7->_01 * p41->x);
HXDLIN( 998)		Float y9 = ((Float)((y8 + (_this7->_11 * p41->y)) + _this7->_21) / (Float)w7);
HXDLIN( 998)		p41 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x9,y9);
HXLINE(1000)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN(1000)		Float _hx_tmp1 = this->get_opacity();
HXDLIN(1000)		int _hx_tmp2 = this->get_color();
HXDLIN(1000)		_hx_tmp->fillTriangle(_hx_tmp1,_hx_tmp2,p11->x,p11->y,p21->x,p21->y,p31->x,p31->y);
HXLINE(1001)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp3 = this->coloredPainter;
HXDLIN(1001)		Float _hx_tmp4 = this->get_opacity();
HXDLIN(1001)		int _hx_tmp5 = this->get_color();
HXDLIN(1001)		_hx_tmp3->fillTriangle(_hx_tmp4,_hx_tmp5,p31->x,p31->y,p21->x,p21->y,p41->x,p41->y);
            	}


void Graphics2_obj::fillTriangle(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1004_fillTriangle)
HXLINE(1005)		this->imagePainter->end();
HXLINE(1006)		this->textPainter->end();
HXLINE(1008)		float p1_y;
HXDLIN(1008)		float p1_x;
HXDLIN(1008)		::Array< ::Dynamic> _this = this->transformations;
HXDLIN(1008)		 ::kha::math::FastMatrix3 _this1 = _this->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1008)		float value_y;
HXDLIN(1008)		float value_x = x1;
HXDLIN(1008)		value_y = y1;
HXDLIN(1008)		float w = (_this1->_02 * value_x);
HXDLIN(1008)		float w1 = ((w + (_this1->_12 * value_y)) + _this1->_22);
HXDLIN(1008)		float x = (_this1->_00 * value_x);
HXDLIN(1008)		Float x4 = ((Float)((x + (_this1->_10 * value_y)) + _this1->_20) / (Float)w1);
HXDLIN(1008)		float y = (_this1->_01 * value_x);
HXDLIN(1008)		Float y4 = ((Float)((y + (_this1->_11 * value_y)) + _this1->_21) / (Float)w1);
HXDLIN(1008)		p1_x = x4;
HXDLIN(1008)		p1_y = y4;
HXLINE(1009)		float p2_y;
HXDLIN(1009)		float p2_x;
HXDLIN(1009)		::Array< ::Dynamic> _this2 = this->transformations;
HXDLIN(1009)		 ::kha::math::FastMatrix3 _this3 = _this2->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1009)		float value_y1;
HXDLIN(1009)		float value_x1 = x2;
HXDLIN(1009)		value_y1 = y2;
HXDLIN(1009)		float w2 = (_this3->_02 * value_x1);
HXDLIN(1009)		float w3 = ((w2 + (_this3->_12 * value_y1)) + _this3->_22);
HXDLIN(1009)		float x5 = (_this3->_00 * value_x1);
HXDLIN(1009)		Float x6 = ((Float)((x5 + (_this3->_10 * value_y1)) + _this3->_20) / (Float)w3);
HXDLIN(1009)		float y5 = (_this3->_01 * value_x1);
HXDLIN(1009)		Float y6 = ((Float)((y5 + (_this3->_11 * value_y1)) + _this3->_21) / (Float)w3);
HXDLIN(1009)		p2_x = x6;
HXDLIN(1009)		p2_y = y6;
HXLINE(1010)		float p3_y;
HXDLIN(1010)		float p3_x;
HXDLIN(1010)		::Array< ::Dynamic> _this4 = this->transformations;
HXDLIN(1010)		 ::kha::math::FastMatrix3 _this5 = _this4->__get((this->transformations->length - (int)1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1010)		float value_y2;
HXDLIN(1010)		float value_x2 = x3;
HXDLIN(1010)		value_y2 = y3;
HXDLIN(1010)		float w4 = (_this5->_02 * value_x2);
HXDLIN(1010)		float w5 = ((w4 + (_this5->_12 * value_y2)) + _this5->_22);
HXDLIN(1010)		float x7 = (_this5->_00 * value_x2);
HXDLIN(1010)		Float x8 = ((Float)((x7 + (_this5->_10 * value_y2)) + _this5->_20) / (Float)w5);
HXDLIN(1010)		float y7 = (_this5->_01 * value_x2);
HXDLIN(1010)		Float y8 = ((Float)((y7 + (_this5->_11 * value_y2)) + _this5->_21) / (Float)w5);
HXDLIN(1010)		p3_x = x8;
HXDLIN(1010)		p3_y = y8;
HXLINE(1011)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN(1011)		Float _hx_tmp1 = this->get_opacity();
HXDLIN(1011)		_hx_tmp->fillTriangle(_hx_tmp1,this->get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::get_imageScaleQuality(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1017_get_imageScaleQuality)
HXDLIN(1017)		return this->myImageScaleQuality;
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::set_imageScaleQuality( ::kha::graphics2::ImageScaleQuality value){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1020_set_imageScaleQuality)
HXLINE(1021)		 ::kha::graphics4::ImageShaderPainter _hx_tmp = this->imagePainter;
HXDLIN(1021)		_hx_tmp->setBilinearFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1022)		 ::kha::graphics4::TextShaderPainter _hx_tmp1 = this->textPainter;
HXDLIN(1022)		_hx_tmp1->setBilinearFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1023)		return (this->myImageScaleQuality = value);
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::get_mipmapScaleQuality(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1029_get_mipmapScaleQuality)
HXDLIN(1029)		return this->myMipmapScaleQuality;
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::set_mipmapScaleQuality( ::kha::graphics2::ImageScaleQuality value){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1032_set_mipmapScaleQuality)
HXLINE(1033)		 ::kha::graphics4::ImageShaderPainter _hx_tmp = this->imagePainter;
HXDLIN(1033)		_hx_tmp->setBilinearMipmapFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1035)		return (this->myMipmapScaleQuality = value);
            	}


void Graphics2_obj::setPipeline( ::kha::graphics4::PipelineState pipeline){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1038_setPipeline)
HXLINE(1039)		this->flush();
HXLINE(1040)		this->imagePainter->set_pipeline(pipeline);
HXLINE(1041)		this->coloredPainter->set_pipeline(pipeline);
HXLINE(1042)		this->textPainter->set_pipeline(pipeline);
HXLINE(1043)		if (hx::IsNotNull( pipeline )) {
HXLINE(1043)			::kha::graphics4::Graphics_obj::setPipeline(this->g,pipeline);
            		}
            	}


void Graphics2_obj::scissor(int x,int y,int width,int height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1046_scissor)
HXLINE(1047)		this->flush();
HXLINE(1048)		::kha::graphics4::Graphics_obj::scissor(this->g,x,y,width,height);
            	}


void Graphics2_obj::disableScissor(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1051_disableScissor)
HXLINE(1052)		this->flush();
HXLINE(1053)		::kha::graphics4::Graphics_obj::disableScissor(this->g);
            	}


void Graphics2_obj::begin(hx::Null< bool >  __o_clear, ::Dynamic clearColor){
bool clear = __o_clear.Default(true);
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1056_begin)
HXLINE(1057)		::kha::graphics4::Graphics_obj::begin(this->g,null());
HXLINE(1058)		if (clear) {
HXLINE(1058)			this->clear(clearColor);
            		}
HXLINE(1059)		this->setProjection();
            	}


void Graphics2_obj::clear( ::Dynamic color){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1062_clear)
HXLINE(1063)		this->flush();
HXLINE(1064)		 ::Dynamic _hx_tmp;
HXDLIN(1064)		if (hx::IsNull( color )) {
HXLINE(1064)			_hx_tmp = (int)-16777216;
            		}
            		else {
HXLINE(1064)			_hx_tmp = color;
            		}
HXDLIN(1064)		::kha::graphics4::Graphics_obj::clear(this->g,_hx_tmp,null(),null());
            	}


void Graphics2_obj::flush(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1067_flush)
HXLINE(1068)		this->imagePainter->end();
HXLINE(1069)		this->textPainter->end();
HXLINE(1070)		{
HXLINE(1070)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN(1070)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > (int)0)) {
HXLINE(1070)				_this->drawTriBuffer(false);
            			}
HXDLIN(1070)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > (int)0)) {
HXLINE(1070)				_this->drawBuffer(false);
            			}
            		}
            	}


void Graphics2_obj::end(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1073_end)
HXLINE(1074)		this->flush();
HXLINE(1075)		::kha::graphics4::Graphics_obj::end(this->g);
            	}


void Graphics2_obj::drawVideoInternal( ::kha::Video video,Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1078_drawVideoInternal)
            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics2_obj,drawVideoInternal,(void))

void Graphics2_obj::drawVideo( ::kha::Video video,Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1082_drawVideo)
HXLINE(1083)		this->setPipeline(::kha::graphics4::Graphics2_obj::videoPipeline);
HXLINE(1084)		this->drawVideoInternal(video,x,y,width,height);
HXLINE(1085)		this->setPipeline(null());
            	}


 ::kha::graphics4::PipelineState Graphics2_obj::videoPipeline;

int Graphics2_obj::upperPowerOfTwo(int v){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_823_upperPowerOfTwo)
HXLINE( 824)		v = (v - (int)1);
HXLINE( 825)		v = ((int)v | (int)hx::UShr(v,(int)1));
HXLINE( 826)		v = ((int)v | (int)hx::UShr(v,(int)2));
HXLINE( 827)		v = ((int)v | (int)hx::UShr(v,(int)4));
HXLINE( 828)		v = ((int)v | (int)hx::UShr(v,(int)8));
HXLINE( 829)		v = ((int)v | (int)hx::UShr(v,(int)16));
HXLINE( 830)		v = (v + (int)1);
HXLINE( 831)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,upperPowerOfTwo,return )

 ::kha::graphics4::VertexStructure Graphics2_obj::createImageVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1088_createImageVertexStructure)
HXLINE(1089)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE(1090)		structure->add(HX_("vertexPosition",2d,3c,14,50),::kha::graphics4::VertexData_obj::Float3_dyn());
HXLINE(1091)		structure->add(HX_("texPosition",b0,79,ff,c7),::kha::graphics4::VertexData_obj::Float2_dyn());
HXLINE(1092)		structure->add(HX_("vertexColor",5f,3b,98,5e),::kha::graphics4::VertexData_obj::Float4_dyn());
HXLINE(1093)		return structure;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,createImageVertexStructure,return )

 ::kha::graphics4::PipelineState Graphics2_obj::createImagePipeline( ::kha::graphics4::VertexStructure structure){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1096_createImagePipeline)
HXLINE(1097)		 ::kha::graphics4::PipelineState shaderPipeline =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(1098)		shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_image_frag;
HXLINE(1099)		shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_image_vert;
HXLINE(1100)		shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,structure);
HXLINE(1101)		shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::BlendOne_dyn();
HXLINE(1102)		shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1103)		shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::BlendOne_dyn();
HXLINE(1104)		shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1105)		return shaderPipeline;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,createImagePipeline,return )

 ::kha::graphics4::VertexStructure Graphics2_obj::createColoredVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1108_createColoredVertexStructure)
HXLINE(1109)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE(1110)		structure->add(HX_("vertexPosition",2d,3c,14,50),::kha::graphics4::VertexData_obj::Float3_dyn());
HXLINE(1111)		structure->add(HX_("vertexColor",5f,3b,98,5e),::kha::graphics4::VertexData_obj::Float4_dyn());
HXLINE(1112)		return structure;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,createColoredVertexStructure,return )

 ::kha::graphics4::PipelineState Graphics2_obj::createColoredPipeline( ::kha::graphics4::VertexStructure structure){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1115_createColoredPipeline)
HXLINE(1116)		 ::kha::graphics4::PipelineState shaderPipeline =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(1117)		shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_colored_frag;
HXLINE(1118)		shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_colored_vert;
HXLINE(1119)		shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,structure);
HXLINE(1120)		shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1121)		shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1122)		shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1123)		shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1124)		return shaderPipeline;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,createColoredPipeline,return )

 ::kha::graphics4::VertexStructure Graphics2_obj::createTextVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1127_createTextVertexStructure)
HXLINE(1128)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE(1129)		structure->add(HX_("vertexPosition",2d,3c,14,50),::kha::graphics4::VertexData_obj::Float3_dyn());
HXLINE(1130)		structure->add(HX_("texPosition",b0,79,ff,c7),::kha::graphics4::VertexData_obj::Float2_dyn());
HXLINE(1131)		structure->add(HX_("vertexColor",5f,3b,98,5e),::kha::graphics4::VertexData_obj::Float4_dyn());
HXLINE(1132)		return structure;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,createTextVertexStructure,return )

 ::kha::graphics4::PipelineState Graphics2_obj::createTextPipeline( ::kha::graphics4::VertexStructure structure){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1135_createTextPipeline)
HXLINE(1136)		 ::kha::graphics4::PipelineState shaderPipeline =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(1137)		shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_text_frag;
HXLINE(1138)		shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_text_vert;
HXLINE(1139)		shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,structure);
HXLINE(1140)		shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1141)		shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1142)		shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1143)		shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1144)		return shaderPipeline;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,createTextPipeline,return )


hx::ObjectPtr< Graphics2_obj > Graphics2_obj::__new(::Dynamic canvas) {
	hx::ObjectPtr< Graphics2_obj > __this = new Graphics2_obj();
	__this->__construct(canvas);
	return __this;
}

hx::ObjectPtr< Graphics2_obj > Graphics2_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic canvas) {
	Graphics2_obj *__this = (Graphics2_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Graphics2_obj), true, "kha.graphics4.Graphics2"));
	*(void **)__this = Graphics2_obj::_hx_vtable;
	__this->__construct(canvas);
	return __this;
}

Graphics2_obj::Graphics2_obj()
{
}

void Graphics2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Graphics2);
	HX_MARK_MEMBER_NAME(myColor,"myColor");
	HX_MARK_MEMBER_NAME(myFont,"myFont");
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(imagePainter,"imagePainter");
	HX_MARK_MEMBER_NAME(coloredPainter,"coloredPainter");
	HX_MARK_MEMBER_NAME(textPainter,"textPainter");
	HX_MARK_MEMBER_NAME(canvas,"canvas");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myImageScaleQuality,"myImageScaleQuality");
	HX_MARK_MEMBER_NAME(myMipmapScaleQuality,"myMipmapScaleQuality");
	 ::kha::graphics2::Graphics_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Graphics2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(myColor,"myColor");
	HX_VISIT_MEMBER_NAME(myFont,"myFont");
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(imagePainter,"imagePainter");
	HX_VISIT_MEMBER_NAME(coloredPainter,"coloredPainter");
	HX_VISIT_MEMBER_NAME(textPainter,"textPainter");
	HX_VISIT_MEMBER_NAME(canvas,"canvas");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myImageScaleQuality,"myImageScaleQuality");
	HX_VISIT_MEMBER_NAME(myMipmapScaleQuality,"myMipmapScaleQuality");
	 ::kha::graphics2::Graphics_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Graphics2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"myFont") ) { return hx::Val( myFont ); }
		if (HX_FIELD_EQ(inName,"canvas") ) { return hx::Val( canvas ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myColor") ) { return hx::Val( myColor ); }
		if (HX_FIELD_EQ(inName,"scissor") ) { return hx::Val( scissor_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_font") ) { return hx::Val( get_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawLine") ) { return hx::Val( drawLine_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawImage") ) { return hx::Val( drawImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawVideo") ) { return hx::Val( drawVideo_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawString") ) { return hx::Val( drawString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textPainter") ) { return hx::Val( textPainter ); }
		if (HX_FIELD_EQ(inName,"setPipeline") ) { return hx::Val( setPipeline_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imagePainter") ) { return hx::Val( imagePainter ); }
		if (HX_FIELD_EQ(inName,"set_fontSize") ) { return hx::Val( set_fontSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillTriangle") ) { return hx::Val( fillTriangle_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"coloredPainter") ) { return hx::Val( coloredPainter ); }
		if (HX_FIELD_EQ(inName,"drawCharacters") ) { return hx::Val( drawCharacters_dyn() ); }
		if (HX_FIELD_EQ(inName,"disableScissor") ) { return hx::Val( disableScissor_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"drawVideoInternal") ) { return hx::Val( drawVideoInternal_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"drawScaledSubImage") ) { return hx::Val( drawScaledSubImage_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"myImageScaleQuality") ) { return hx::Val( myImageScaleQuality ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"myMipmapScaleQuality") ) { return hx::Val( myMipmapScaleQuality ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_imageScaleQuality") ) { return hx::Val( get_imageScaleQuality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_imageScaleQuality") ) { return hx::Val( set_imageScaleQuality_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_mipmapScaleQuality") ) { return hx::Val( get_mipmapScaleQuality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mipmapScaleQuality") ) { return hx::Val( set_mipmapScaleQuality_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Graphics2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"videoPipeline") ) { outValue = ( videoPipeline ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"upperPowerOfTwo") ) { outValue = upperPowerOfTwo_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createTextPipeline") ) { outValue = createTextPipeline_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createImagePipeline") ) { outValue = createImagePipeline_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createColoredPipeline") ) { outValue = createColoredPipeline_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"createTextVertexStructure") ) { outValue = createTextVertexStructure_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"createImageVertexStructure") ) { outValue = createImageVertexStructure_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"createColoredVertexStructure") ) { outValue = createColoredVertexStructure_dyn(); return true; }
	}
	return false;
}

hx::Val Graphics2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"myFont") ) { myFont=inValue.Cast<  ::kha::Kravur >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canvas") ) { canvas=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myColor") ) { myColor=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textPainter") ) { textPainter=inValue.Cast<  ::kha::graphics4::TextShaderPainter >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imagePainter") ) { imagePainter=inValue.Cast<  ::kha::graphics4::ImageShaderPainter >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"coloredPainter") ) { coloredPainter=inValue.Cast<  ::kha::graphics4::ColoredShaderPainter >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { projectionMatrix=inValue.Cast<  ::kha::math::FastMatrix4 >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"myImageScaleQuality") ) { myImageScaleQuality=inValue.Cast<  ::kha::graphics2::ImageScaleQuality >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"myMipmapScaleQuality") ) { myMipmapScaleQuality=inValue.Cast<  ::kha::graphics2::ImageScaleQuality >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Graphics2_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"videoPipeline") ) { videoPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
	}
	return false;
}

void Graphics2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("myColor","\x57","\x1a","\x5c","\xf3"));
	outFields->push(HX_HCSTRING("myFont","\x5b","\x0f","\xfc","\x6e"));
	outFields->push(HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"));
	outFields->push(HX_HCSTRING("imagePainter","\x70","\x2d","\xeb","\xa7"));
	outFields->push(HX_HCSTRING("coloredPainter","\x29","\xa7","\x40","\xdc"));
	outFields->push(HX_HCSTRING("textPainter","\x5e","\xae","\xa2","\x93"));
	outFields->push(HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("myImageScaleQuality","\x44","\x72","\x83","\xee"));
	outFields->push(HX_HCSTRING("myMipmapScaleQuality","\x89","\x17","\xd9","\xb9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Graphics2_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Graphics2_obj,myColor),HX_HCSTRING("myColor","\x57","\x1a","\x5c","\xf3")},
	{hx::fsObject /*::kha::Kravur*/ ,(int)offsetof(Graphics2_obj,myFont),HX_HCSTRING("myFont","\x5b","\x0f","\xfc","\x6e")},
	{hx::fsObject /*::kha::math::FastMatrix4*/ ,(int)offsetof(Graphics2_obj,projectionMatrix),HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0")},
	{hx::fsObject /*::kha::graphics4::ImageShaderPainter*/ ,(int)offsetof(Graphics2_obj,imagePainter),HX_HCSTRING("imagePainter","\x70","\x2d","\xeb","\xa7")},
	{hx::fsObject /*::kha::graphics4::ColoredShaderPainter*/ ,(int)offsetof(Graphics2_obj,coloredPainter),HX_HCSTRING("coloredPainter","\x29","\xa7","\x40","\xdc")},
	{hx::fsObject /*::kha::graphics4::TextShaderPainter*/ ,(int)offsetof(Graphics2_obj,textPainter),HX_HCSTRING("textPainter","\x5e","\xae","\xa2","\x93")},
	{hx::fsObject /*::kha::Canvas*/ ,(int)offsetof(Graphics2_obj,canvas),HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8")},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(Graphics2_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::kha::graphics2::ImageScaleQuality*/ ,(int)offsetof(Graphics2_obj,myImageScaleQuality),HX_HCSTRING("myImageScaleQuality","\x44","\x72","\x83","\xee")},
	{hx::fsObject /*::kha::graphics2::ImageScaleQuality*/ ,(int)offsetof(Graphics2_obj,myMipmapScaleQuality),HX_HCSTRING("myMipmapScaleQuality","\x89","\x17","\xd9","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Graphics2_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(void *) &Graphics2_obj::videoPipeline,HX_HCSTRING("videoPipeline","\xbd","\xfe","\x62","\xee")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Graphics2_obj_sMemberFields[] = {
	HX_HCSTRING("myColor","\x57","\x1a","\x5c","\xf3"),
	HX_HCSTRING("myFont","\x5b","\x0f","\xfc","\x6e"),
	HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"),
	HX_HCSTRING("imagePainter","\x70","\x2d","\xeb","\xa7"),
	HX_HCSTRING("coloredPainter","\x29","\xa7","\x40","\xdc"),
	HX_HCSTRING("textPainter","\x5e","\xae","\xa2","\x93"),
	HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("setProjection","\xd1","\xc6","\x03","\x66"),
	HX_HCSTRING("drawImage","\xb7","\x54","\x74","\x85"),
	HX_HCSTRING("drawScaledSubImage","\x99","\x85","\xbc","\xe8"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("drawString","\xf5","\xa3","\xf3","\x52"),
	HX_HCSTRING("drawCharacters","\xce","\x35","\xd8","\x38"),
	HX_HCSTRING("get_font","\x58","\x19","\x7b","\xc3"),
	HX_HCSTRING("set_font","\xcc","\x72","\xd8","\x71"),
	HX_HCSTRING("set_fontSize","\xad","\x95","\xe4","\x98"),
	HX_HCSTRING("drawLine","\x18","\xc2","\x1c","\x5c"),
	HX_HCSTRING("fillTriangle","\x6b","\x04","\x3a","\x92"),
	HX_HCSTRING("myImageScaleQuality","\x44","\x72","\x83","\xee"),
	HX_HCSTRING("get_imageScaleQuality","\x27","\x2e","\xde","\xf3"),
	HX_HCSTRING("set_imageScaleQuality","\x33","\xfc","\xe6","\x47"),
	HX_HCSTRING("myMipmapScaleQuality","\x89","\x17","\xd9","\xb9"),
	HX_HCSTRING("get_mipmapScaleQuality","\x46","\xc2","\xe2","\x63"),
	HX_HCSTRING("set_mipmapScaleQuality","\xba","\x3e","\x8e","\x97"),
	HX_HCSTRING("setPipeline","\xe4","\x84","\xe4","\x7b"),
	HX_HCSTRING("scissor","\x1c","\x28","\xe7","\x04"),
	HX_HCSTRING("disableScissor","\x14","\x73","\x66","\x02"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("drawVideoInternal","\x34","\x9c","\xdf","\xdf"),
	HX_HCSTRING("drawVideo","\xd7","\x49","\x07","\xff"),
	::String(null()) };

static void Graphics2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Graphics2_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Graphics2_obj::videoPipeline,"videoPipeline");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Graphics2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Graphics2_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Graphics2_obj::videoPipeline,"videoPipeline");
};

#endif

hx::Class Graphics2_obj::__mClass;

static ::String Graphics2_obj_sStaticFields[] = {
	HX_HCSTRING("videoPipeline","\xbd","\xfe","\x62","\xee"),
	HX_HCSTRING("upperPowerOfTwo","\x72","\x2a","\xfd","\xfb"),
	HX_HCSTRING("createImageVertexStructure","\x30","\xec","\x84","\xdd"),
	HX_HCSTRING("createImagePipeline","\x01","\x25","\x7d","\x0b"),
	HX_HCSTRING("createColoredVertexStructure","\xe9","\xc5","\xe5","\xbc"),
	HX_HCSTRING("createColoredPipeline","\x28","\xce","\xc2","\xd2"),
	HX_HCSTRING("createTextVertexStructure","\x66","\x30","\xf9","\xb4"),
	HX_HCSTRING("createTextPipeline","\x0b","\x76","\x1d","\x7a"),
	::String(null())
};

void Graphics2_obj::__register()
{
	hx::Object *dummy = new Graphics2_obj;
	Graphics2_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics4.Graphics2","\xf8","\x6b","\xfa","\xcf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Graphics2_obj::__GetStatic;
	__mClass->mSetStaticField = &Graphics2_obj::__SetStatic;
	__mClass->mMarkFunc = Graphics2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Graphics2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Graphics2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Graphics2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Graphics2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Graphics2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Graphics2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4
