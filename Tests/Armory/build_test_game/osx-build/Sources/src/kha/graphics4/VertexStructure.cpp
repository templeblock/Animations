// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexData
#include <kha/graphics4/VertexData.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexElement
#include <kha/graphics4/VertexElement.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2fb7b29675aad1d3_7_new,"kha.graphics4.VertexStructure","new",0x4962dad2,"kha.graphics4.VertexStructure.new","kha/graphics4/VertexStructure.hx",7,0xec7e48a0)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb7b29675aad1d3_13_add,"kha.graphics4.VertexStructure","add",0x4958fc93,"kha.graphics4.VertexStructure.add","kha/graphics4/VertexStructure.hx",13,0xec7e48a0)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb7b29675aad1d3_18_size,"kha.graphics4.VertexStructure","size",0xf06dba0f,"kha.graphics4.VertexStructure.size","kha/graphics4/VertexStructure.hx",18,0xec7e48a0)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb7b29675aad1d3_21_byteSize,"kha.graphics4.VertexStructure","byteSize",0xf3dbe837,"kha.graphics4.VertexStructure.byteSize","kha/graphics4/VertexStructure.hx",21,0xec7e48a0)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb7b29675aad1d3_32_dataByteSize,"kha.graphics4.VertexStructure","dataByteSize",0xdfdf7381,"kha.graphics4.VertexStructure.dataByteSize","kha/graphics4/VertexStructure.hx",32,0xec7e48a0)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb7b29675aad1d3_49_get,"kha.graphics4.VertexStructure","get",0x495d8b08,"kha.graphics4.VertexStructure.get","kha/graphics4/VertexStructure.hx",49,0xec7e48a0)
namespace kha{
namespace graphics4{

void VertexStructure_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2fb7b29675aad1d3_7_new)
HXLINE(   8)		this->elements = ::Array_obj< ::Dynamic>::__new();
HXLINE(   9)		this->instanced = false;
            	}

Dynamic VertexStructure_obj::__CreateEmpty() { return new VertexStructure_obj; }

void *VertexStructure_obj::_hx_vtable = 0;

Dynamic VertexStructure_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VertexStructure_obj > _hx_result = new VertexStructure_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VertexStructure_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1a19a30a;
}

void VertexStructure_obj::add(::String name, ::kha::graphics4::VertexData data){
            	HX_GC_STACKFRAME(&_hx_pos_2fb7b29675aad1d3_13_add)
HXDLIN(  13)		::Array< ::Dynamic> _hx_tmp = this->elements;
HXDLIN(  13)		_hx_tmp->push( ::kha::graphics4::VertexElement_obj::__alloc( HX_CTX ,name,data));
            	}


HX_DEFINE_DYNAMIC_FUNC2(VertexStructure_obj,add,(void))

int VertexStructure_obj::size(){
            	HX_STACKFRAME(&_hx_pos_2fb7b29675aad1d3_18_size)
HXDLIN(  18)		return this->elements->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexStructure_obj,size,return )

int VertexStructure_obj::byteSize(){
            	HX_STACKFRAME(&_hx_pos_2fb7b29675aad1d3_21_byteSize)
HXLINE(  22)		int byteSize = (int)0;
HXLINE(  24)		{
HXLINE(  24)			int _g1 = (int)0;
HXDLIN(  24)			int _g = this->elements->length;
HXDLIN(  24)			while((_g1 < _g)){
HXLINE(  24)				_g1 = (_g1 + (int)1);
HXDLIN(  24)				int i = (_g1 - (int)1);
HXLINE(  25)				byteSize = (byteSize + this->dataByteSize(this->elements->__get(i).StaticCast<  ::kha::graphics4::VertexElement >()->data));
            			}
            		}
HXLINE(  28)		return byteSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexStructure_obj,byteSize,return )

int VertexStructure_obj::dataByteSize( ::kha::graphics4::VertexData data){
            	HX_STACKFRAME(&_hx_pos_2fb7b29675aad1d3_32_dataByteSize)
HXDLIN(  32)		switch((int)(_hx_getEnumValueIndex(data))){
            			case (int)0: {
HXLINE(  34)				return (int)4;
            			}
            			break;
            			case (int)1: {
HXLINE(  36)				return (int)8;
            			}
            			break;
            			case (int)2: {
HXLINE(  38)				return (int)12;
            			}
            			break;
            			case (int)3: {
HXLINE(  40)				return (int)16;
            			}
            			break;
            			case (int)4: {
HXLINE(  42)				return (int)64;
            			}
            			break;
            		}
HXLINE(  32)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexStructure_obj,dataByteSize,return )

 ::kha::graphics4::VertexElement VertexStructure_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_2fb7b29675aad1d3_49_get)
HXDLIN(  49)		return this->elements->__get(index).StaticCast<  ::kha::graphics4::VertexElement >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexStructure_obj,get,return )


hx::ObjectPtr< VertexStructure_obj > VertexStructure_obj::__new() {
	hx::ObjectPtr< VertexStructure_obj > __this = new VertexStructure_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< VertexStructure_obj > VertexStructure_obj::__alloc(hx::Ctx *_hx_ctx) {
	VertexStructure_obj *__this = (VertexStructure_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VertexStructure_obj), true, "kha.graphics4.VertexStructure"));
	*(void **)__this = VertexStructure_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VertexStructure_obj::VertexStructure_obj()
{
}

void VertexStructure_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VertexStructure);
	HX_MARK_MEMBER_NAME(elements,"elements");
	HX_MARK_MEMBER_NAME(instanced,"instanced");
	HX_MARK_END_CLASS();
}

void VertexStructure_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(elements,"elements");
	HX_VISIT_MEMBER_NAME(instanced,"instanced");
}

hx::Val VertexStructure_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"elements") ) { return hx::Val( elements ); }
		if (HX_FIELD_EQ(inName,"byteSize") ) { return hx::Val( byteSize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"instanced") ) { return hx::Val( instanced ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"dataByteSize") ) { return hx::Val( dataByteSize_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VertexStructure_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"elements") ) { elements=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"instanced") ) { instanced=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VertexStructure_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("elements","\x37","\x36","\xc4","\x83"));
	outFields->push(HX_HCSTRING("instanced","\x2f","\x83","\x1a","\x4b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VertexStructure_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(VertexStructure_obj,elements),HX_HCSTRING("elements","\x37","\x36","\xc4","\x83")},
	{hx::fsBool,(int)offsetof(VertexStructure_obj,instanced),HX_HCSTRING("instanced","\x2f","\x83","\x1a","\x4b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VertexStructure_obj_sStaticStorageInfo = 0;
#endif

static ::String VertexStructure_obj_sMemberFields[] = {
	HX_HCSTRING("elements","\x37","\x36","\xc4","\x83"),
	HX_HCSTRING("instanced","\x2f","\x83","\x1a","\x4b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("byteSize","\xe9","\x0f","\x00","\x4d"),
	HX_HCSTRING("dataByteSize","\x33","\x5c","\xf6","\xb8"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void VertexStructure_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VertexStructure_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VertexStructure_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VertexStructure_obj::__mClass,"__mClass");
};

#endif

hx::Class VertexStructure_obj::__mClass;

void VertexStructure_obj::__register()
{
	hx::Object *dummy = new VertexStructure_obj;
	VertexStructure_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics4.VertexStructure","\xe0","\xc9","\x4c","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VertexStructure_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VertexStructure_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VertexStructure_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VertexStructure_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VertexStructure_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VertexStructure_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4
