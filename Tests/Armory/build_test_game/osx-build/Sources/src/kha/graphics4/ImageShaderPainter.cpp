// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_ImageShaderPainter
#include <kha/graphics4/ImageShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_MipMapFilter
#include <kha/graphics4/MipMapFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureAddressing
#include <kha/graphics4/TextureAddressing.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFilter
#include <kha/graphics4/TextureFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a1398f166f3e074_32_new,"kha.graphics4.ImageShaderPainter","new",0xa318bb6c,"kha.graphics4.ImageShaderPainter.new","kha/graphics4/Graphics2.hx",32,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_64_get_pipeline,"kha.graphics4.ImageShaderPainter","get_pipeline",0x44e0c29f,"kha.graphics4.ImageShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",64,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_67_set_pipeline,"kha.graphics4.ImageShaderPainter","set_pipeline",0x59d9e613,"kha.graphics4.ImageShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",67,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_80_setProjection,"kha.graphics4.ImageShaderPainter","setProjection",0xdca978dd,"kha.graphics4.ImageShaderPainter.setProjection","kha/graphics4/Graphics2.hx",80,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_94_initBuffers,"kha.graphics4.ImageShaderPainter","initBuffers",0xef73e94f,"kha.graphics4.ImageShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",94,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_116_setRectVertices,"kha.graphics4.ImageShaderPainter","setRectVertices",0x24abad0b,"kha.graphics4.ImageShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",116,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_135_setRectTexCoords,"kha.graphics4.ImageShaderPainter","setRectTexCoords",0x2a0ce013,"kha.graphics4.ImageShaderPainter.setRectTexCoords","kha/graphics4/Graphics2.hx",135,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_150_setRectColor,"kha.graphics4.ImageShaderPainter","setRectColor",0x3cb78511,"kha.graphics4.ImageShaderPainter.setRectColor","kha/graphics4/Graphics2.hx",150,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_173_drawBuffer,"kha.graphics4.ImageShaderPainter","drawBuffer",0x0d340698,"kha.graphics4.ImageShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",173,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_195_setBilinearFilter,"kha.graphics4.ImageShaderPainter","setBilinearFilter",0x7d147312,"kha.graphics4.ImageShaderPainter.setBilinearFilter","kha/graphics4/Graphics2.hx",195,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_200_setBilinearMipmapFilter,"kha.graphics4.ImageShaderPainter","setBilinearMipmapFilter",0x1f8fea3a,"kha.graphics4.ImageShaderPainter.setBilinearMipmapFilter","kha/graphics4/Graphics2.hx",200,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_210_drawImage,"kha.graphics4.ImageShaderPainter","drawImage",0xba3d10c3,"kha.graphics4.ImageShaderPainter.drawImage","kha/graphics4/Graphics2.hx",210,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_227_drawImage2,"kha.graphics4.ImageShaderPainter","drawImage2",0x3b319a0f,"kha.graphics4.ImageShaderPainter.drawImage2","kha/graphics4/Graphics2.hx",227,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_239_drawImageScale,"kha.graphics4.ImageShaderPainter","drawImageScale",0xc1fc8ac7,"kha.graphics4.ImageShaderPainter.drawImageScale","kha/graphics4/Graphics2.hx",239,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_251_end,"kha.graphics4.ImageShaderPainter","end",0xa311eee7,"kha.graphics4.ImageShaderPainter.end","kha/graphics4/Graphics2.hx",251,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_83_initShaders,"kha.graphics4.ImageShaderPainter","initShaders",0x9d69c78a,"kha.graphics4.ImageShaderPainter.initShaders","kha/graphics4/Graphics2.hx",83,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_34_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",34,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_35_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",35,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_36_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",36,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_37_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",37,0x0c1de808)
namespace kha{
namespace graphics4{

void ImageShaderPainter_obj::__construct(::Dynamic g4){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_32_new)
HXLINE(  52)		this->destinationBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE(  51)		this->sourceBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE(  46)		this->myPipeline = null();
HXLINE(  44)		this->bilinearMipmaps = false;
HXLINE(  43)		this->bilinear = false;
HXLINE(  55)		this->g = g4;
HXLINE(  56)		::kha::graphics4::ImageShaderPainter_obj::bufferIndex = (int)0;
HXLINE(  57)		::kha::graphics4::ImageShaderPainter_obj::initShaders();
HXLINE(  58)		this->initBuffers();
HXLINE(  59)		this->projectionLocation = ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE(  60)		this->textureLocation = ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->getTextureUnit(HX_("tex",e7,5d,58,00));
            	}

Dynamic ImageShaderPainter_obj::__CreateEmpty() { return new ImageShaderPainter_obj; }

void *ImageShaderPainter_obj::_hx_vtable = 0;

Dynamic ImageShaderPainter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageShaderPainter_obj > _hx_result = new ImageShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ImageShaderPainter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x032f9290;
}

 ::kha::graphics4::PipelineState ImageShaderPainter_obj::get_pipeline(){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_64_get_pipeline)
HXDLIN(  64)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,get_pipeline,return )

 ::kha::graphics4::PipelineState ImageShaderPainter_obj::set_pipeline( ::kha::graphics4::PipelineState pipe){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_67_set_pipeline)
HXLINE(  68)		if (hx::IsNull( pipe )) {
HXLINE(  69)			this->projectionLocation = ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE(  70)			this->textureLocation = ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->getTextureUnit(HX_("tex",e7,5d,58,00));
            		}
            		else {
HXLINE(  73)			this->projectionLocation = pipe->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE(  74)			this->textureLocation = pipe->getTextureUnit(HX_("tex",e7,5d,58,00));
            		}
HXLINE(  76)		return (this->myPipeline = pipe);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,set_pipeline,return )

void ImageShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_80_setProjection)
HXDLIN(  80)		this->projectionMatrix = projectionMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setProjection,(void))

void ImageShaderPainter_obj::initBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_94_initBuffers)
HXDLIN(  94)		if (hx::IsNull( ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer )) {
HXLINE(  95)			::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,(int)6000,::kha::graphics4::ImageShaderPainter_obj::structure,::kha::graphics4::Usage_obj::DynamicUsage_dyn(),null(),null());
HXLINE(  96)			::kha::graphics4::ImageShaderPainter_obj::rectVertices = ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->lock(null(),null());
HXLINE(  98)			::kha::graphics4::ImageShaderPainter_obj::indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,(int)9000,::kha::graphics4::Usage_obj::StaticUsage_dyn(),null());
HXLINE(  99)			 ::kha::arrays::Uint32ArrayPrivate indices = ::kha::graphics4::ImageShaderPainter_obj::indexBuffer->lock(null(),null());
HXLINE( 100)			{
HXLINE( 100)				int _g = (int)0;
HXDLIN( 100)				while((_g < (int)1500)){
HXLINE( 100)					_g = (_g + (int)1);
HXDLIN( 100)					int i = (_g - (int)1);
HXLINE( 101)					 uint32array indices1 = indices->self;
HXDLIN( 101)					indices1.set(((i * (int)3) * (int)2),(i * (int)4));
HXLINE( 102)					 uint32array indices2 = indices->self;
HXDLIN( 102)					indices2.set((((i * (int)3) * (int)2) + (int)1),((i * (int)4) + (int)1));
HXLINE( 103)					 uint32array indices3 = indices->self;
HXDLIN( 103)					indices3.set((((i * (int)3) * (int)2) + (int)2),((i * (int)4) + (int)2));
HXLINE( 104)					 uint32array indices4 = indices->self;
HXDLIN( 104)					indices4.set((((i * (int)3) * (int)2) + (int)3),(i * (int)4));
HXLINE( 105)					 uint32array indices5 = indices->self;
HXDLIN( 105)					indices5.set((((i * (int)3) * (int)2) + (int)4),((i * (int)4) + (int)2));
HXLINE( 106)					 uint32array indices6 = indices->self;
HXDLIN( 106)					indices6.set((((i * (int)3) * (int)2) + (int)5),((i * (int)4) + (int)3));
            				}
            			}
HXLINE( 108)			::kha::graphics4::ImageShaderPainter_obj::indexBuffer->unlock();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,initBuffers,(void))

void ImageShaderPainter_obj::setRectVertices(float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_116_setRectVertices)
HXLINE( 117)		int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXLINE( 118)		::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex,bottomleftx);
HXLINE( 119)		{
HXLINE( 119)			 float32array this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 119)			this1.set((baseIndex + (int)1),bottomlefty);
            		}
HXLINE( 120)		{
HXLINE( 120)			 float32array this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 120)			this2.set((baseIndex + (int)2),((Float)-5.0));
            		}
HXLINE( 122)		{
HXLINE( 122)			 float32array this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 122)			this3.set((baseIndex + (int)9),topleftx);
            		}
HXLINE( 123)		{
HXLINE( 123)			 float32array this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 123)			this4.set((baseIndex + (int)10),toplefty);
            		}
HXLINE( 124)		{
HXLINE( 124)			 float32array this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 124)			this5.set((baseIndex + (int)11),((Float)-5.0));
            		}
HXLINE( 126)		{
HXLINE( 126)			 float32array this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 126)			this6.set((baseIndex + (int)18),toprightx);
            		}
HXLINE( 127)		{
HXLINE( 127)			 float32array this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 127)			this7.set((baseIndex + (int)19),toprighty);
            		}
HXLINE( 128)		{
HXLINE( 128)			 float32array this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 128)			this8.set((baseIndex + (int)20),((Float)-5.0));
            		}
HXLINE( 130)		{
HXLINE( 130)			 float32array this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 130)			this9.set((baseIndex + (int)27),bottomrightx);
            		}
HXLINE( 131)		{
HXLINE( 131)			 float32array this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 131)			this10.set((baseIndex + (int)28),bottomrighty);
            		}
HXLINE( 132)		{
HXLINE( 132)			 float32array this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 132)			this11.set((baseIndex + (int)29),((Float)-5.0));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(ImageShaderPainter_obj,setRectVertices,(void))

void ImageShaderPainter_obj::setRectTexCoords(float left,float top,float right,float bottom){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_135_setRectTexCoords)
HXLINE( 136)		int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXLINE( 137)		{
HXLINE( 137)			 float32array this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 137)			this1.set((baseIndex + (int)3),left);
            		}
HXLINE( 138)		{
HXLINE( 138)			 float32array this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 138)			this2.set((baseIndex + (int)4),bottom);
            		}
HXLINE( 140)		{
HXLINE( 140)			 float32array this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 140)			this3.set((baseIndex + (int)12),left);
            		}
HXLINE( 141)		{
HXLINE( 141)			 float32array this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 141)			this4.set((baseIndex + (int)13),top);
            		}
HXLINE( 143)		{
HXLINE( 143)			 float32array this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 143)			this5.set((baseIndex + (int)21),right);
            		}
HXLINE( 144)		{
HXLINE( 144)			 float32array this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 144)			this6.set((baseIndex + (int)22),top);
            		}
HXLINE( 146)		{
HXLINE( 146)			 float32array this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 146)			this7.set((baseIndex + (int)30),right);
            		}
HXLINE( 147)		{
HXLINE( 147)			 float32array this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 147)			this8.set((baseIndex + (int)31),bottom);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(ImageShaderPainter_obj,setRectTexCoords,(void))

void ImageShaderPainter_obj::setRectColor(float r,float g,float b,float a){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_150_setRectColor)
HXLINE( 151)		int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXLINE( 152)		{
HXLINE( 152)			 float32array this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 152)			this1.set((baseIndex + (int)5),r);
            		}
HXLINE( 153)		{
HXLINE( 153)			 float32array this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 153)			this2.set((baseIndex + (int)6),g);
            		}
HXLINE( 154)		{
HXLINE( 154)			 float32array this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 154)			this3.set((baseIndex + (int)7),b);
            		}
HXLINE( 155)		{
HXLINE( 155)			 float32array this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 155)			this4.set((baseIndex + (int)8),a);
            		}
HXLINE( 157)		{
HXLINE( 157)			 float32array this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 157)			this5.set((baseIndex + (int)14),r);
            		}
HXLINE( 158)		{
HXLINE( 158)			 float32array this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 158)			this6.set((baseIndex + (int)15),g);
            		}
HXLINE( 159)		{
HXLINE( 159)			 float32array this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 159)			this7.set((baseIndex + (int)16),b);
            		}
HXLINE( 160)		{
HXLINE( 160)			 float32array this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 160)			this8.set((baseIndex + (int)17),a);
            		}
HXLINE( 162)		{
HXLINE( 162)			 float32array this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 162)			this9.set((baseIndex + (int)23),r);
            		}
HXLINE( 163)		{
HXLINE( 163)			 float32array this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 163)			this10.set((baseIndex + (int)24),g);
            		}
HXLINE( 164)		{
HXLINE( 164)			 float32array this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 164)			this11.set((baseIndex + (int)25),b);
            		}
HXLINE( 165)		{
HXLINE( 165)			 float32array this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 165)			this12.set((baseIndex + (int)26),a);
            		}
HXLINE( 167)		{
HXLINE( 167)			 float32array this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 167)			this13.set((baseIndex + (int)32),r);
            		}
HXLINE( 168)		{
HXLINE( 168)			 float32array this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 168)			this14.set((baseIndex + (int)33),g);
            		}
HXLINE( 169)		{
HXLINE( 169)			 float32array this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 169)			this15.set((baseIndex + (int)34),b);
            		}
HXLINE( 170)		{
HXLINE( 170)			 float32array this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 170)			this16.set((baseIndex + (int)35),a);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(ImageShaderPainter_obj,setRectColor,(void))

void ImageShaderPainter_obj::drawBuffer(){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_173_drawBuffer)
HXLINE( 174)		::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->unlock();
HXLINE( 175)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer);
HXLINE( 176)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::ImageShaderPainter_obj::indexBuffer);
HXLINE( 177)		::Dynamic _hx_tmp = this->g;
HXDLIN( 177)		 ::kha::graphics4::PipelineState _hx_tmp1;
HXDLIN( 177)		if (hx::IsNull( this->get_pipeline() )) {
HXLINE( 177)			_hx_tmp1 = ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline;
            		}
            		else {
HXLINE( 177)			_hx_tmp1 = this->get_pipeline();
            		}
HXDLIN( 177)		::kha::graphics4::Graphics_obj::setPipeline(_hx_tmp,_hx_tmp1);
HXLINE( 178)		::kha::graphics4::Graphics_obj::setTexture(this->g,this->textureLocation,::kha::graphics4::ImageShaderPainter_obj::lastTexture);
HXLINE( 179)		 ::kha::graphics4::TextureFilter _hx_tmp2;
HXDLIN( 179)		if (this->bilinear) {
HXLINE( 179)			_hx_tmp2 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 179)			_hx_tmp2 = ::kha::graphics4::TextureFilter_obj::PointFilter_dyn();
            		}
HXDLIN( 179)		 ::kha::graphics4::TextureFilter _hx_tmp3;
HXDLIN( 179)		if (this->bilinear) {
HXLINE( 179)			_hx_tmp3 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 179)			_hx_tmp3 = ::kha::graphics4::TextureFilter_obj::PointFilter_dyn();
            		}
HXDLIN( 179)		 ::kha::graphics4::MipMapFilter _hx_tmp4;
HXDLIN( 179)		if (this->bilinearMipmaps) {
HXLINE( 179)			_hx_tmp4 = ::kha::graphics4::MipMapFilter_obj::LinearMipFilter_dyn();
            		}
            		else {
HXLINE( 179)			_hx_tmp4 = ::kha::graphics4::MipMapFilter_obj::NoMipFilter_dyn();
            		}
HXDLIN( 179)		::kha::graphics4::Graphics_obj::setTextureParameters(this->g,this->textureLocation,::kha::graphics4::TextureAddressing_obj::Clamp_dyn(),::kha::graphics4::TextureAddressing_obj::Clamp_dyn(),_hx_tmp2,_hx_tmp3,_hx_tmp4);
HXLINE( 180)		::kha::graphics4::Graphics_obj::setMatrix(this->g,this->projectionLocation,this->projectionMatrix);
HXLINE( 188)		::Dynamic _hx_tmp5 = this->g;
HXDLIN( 188)		::kha::graphics4::Graphics_obj::drawIndexedVertices(_hx_tmp5,(int)0,((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)2) * (int)3));
HXLINE( 190)		::kha::graphics4::Graphics_obj::setTexture(this->g,this->textureLocation,null());
HXLINE( 191)		::kha::graphics4::ImageShaderPainter_obj::bufferIndex = (int)0;
HXLINE( 192)		::kha::graphics4::ImageShaderPainter_obj::rectVertices = ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,drawBuffer,(void))

void ImageShaderPainter_obj::setBilinearFilter(bool bilinear){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_195_setBilinearFilter)
HXLINE( 196)		this->end();
HXLINE( 197)		this->bilinear = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setBilinearFilter,(void))

void ImageShaderPainter_obj::setBilinearMipmapFilter(bool bilinear){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_200_setBilinearMipmapFilter)
HXLINE( 201)		this->end();
HXLINE( 202)		this->bilinearMipmaps = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setBilinearMipmapFilter,(void))

void ImageShaderPainter_obj::drawImage( ::kha::Image img,float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty,float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_210_drawImage)
HXLINE( 211)		 ::kha::Image tex = img;
HXLINE( 212)		bool _hx_tmp;
HXDLIN( 212)		if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex + (int)1) < (int)1500)) {
HXLINE( 212)			if (hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 212)				_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            			}
            			else {
HXLINE( 212)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 212)			_hx_tmp = true;
            		}
HXDLIN( 212)		if (_hx_tmp) {
HXLINE( 212)			this->drawBuffer();
            		}
HXLINE( 214)		{
HXLINE( 214)			float r = (hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098));
HXDLIN( 214)			float g = (hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098));
HXDLIN( 214)			float b = (((int)color & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 214)			float a = ((hx::UShr(color,(int)24) * ((Float)0.00392156862745098)) * opacity);
HXDLIN( 214)			int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 214)			{
HXLINE( 214)				 float32array this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this1.set((baseIndex + (int)5),r);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this2.set((baseIndex + (int)6),g);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this3.set((baseIndex + (int)7),b);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this4.set((baseIndex + (int)8),a);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this5.set((baseIndex + (int)14),r);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this6.set((baseIndex + (int)15),g);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this7.set((baseIndex + (int)16),b);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this8.set((baseIndex + (int)17),a);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this9.set((baseIndex + (int)23),r);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this10.set((baseIndex + (int)24),g);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this11.set((baseIndex + (int)25),b);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this12.set((baseIndex + (int)26),a);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this13.set((baseIndex + (int)32),r);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this14.set((baseIndex + (int)33),g);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this15.set((baseIndex + (int)34),b);
            			}
HXDLIN( 214)			{
HXLINE( 214)				 float32array this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 214)				this16.set((baseIndex + (int)35),a);
            			}
            		}
HXLINE( 215)		{
HXLINE( 215)			int right = tex->get_width();
HXDLIN( 215)			float right1 = ((Float)right / (Float)tex->get_realWidth());
HXDLIN( 215)			int bottom = tex->get_height();
HXDLIN( 215)			float bottom1 = ((Float)bottom / (Float)tex->get_realHeight());
HXDLIN( 215)			int baseIndex1 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 215)			{
HXLINE( 215)				 float32array this17 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 215)				this17.set((baseIndex1 + (int)3),(int)0);
            			}
HXDLIN( 215)			{
HXLINE( 215)				 float32array this18 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 215)				this18.set((baseIndex1 + (int)4),bottom1);
            			}
HXDLIN( 215)			{
HXLINE( 215)				 float32array this19 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 215)				this19.set((baseIndex1 + (int)12),(int)0);
            			}
HXDLIN( 215)			{
HXLINE( 215)				 float32array this20 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 215)				this20.set((baseIndex1 + (int)13),(int)0);
            			}
HXDLIN( 215)			{
HXLINE( 215)				 float32array this21 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 215)				this21.set((baseIndex1 + (int)21),right1);
            			}
HXDLIN( 215)			{
HXLINE( 215)				 float32array this22 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 215)				this22.set((baseIndex1 + (int)22),(int)0);
            			}
HXDLIN( 215)			{
HXLINE( 215)				 float32array this23 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 215)				this23.set((baseIndex1 + (int)30),right1);
            			}
HXDLIN( 215)			{
HXLINE( 215)				 float32array this24 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 215)				this24.set((baseIndex1 + (int)31),bottom1);
            			}
            		}
HXLINE( 216)		{
HXLINE( 216)			int baseIndex2 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 216)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,bottomleftx);
HXDLIN( 216)			{
HXLINE( 216)				 float32array this25 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this25.set((baseIndex2 + (int)1),bottomlefty);
            			}
HXDLIN( 216)			{
HXLINE( 216)				 float32array this26 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this26.set((baseIndex2 + (int)2),((Float)-5.0));
            			}
HXDLIN( 216)			{
HXLINE( 216)				 float32array this27 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this27.set((baseIndex2 + (int)9),topleftx);
            			}
HXDLIN( 216)			{
HXLINE( 216)				 float32array this28 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this28.set((baseIndex2 + (int)10),toplefty);
            			}
HXDLIN( 216)			{
HXLINE( 216)				 float32array this29 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this29.set((baseIndex2 + (int)11),((Float)-5.0));
            			}
HXDLIN( 216)			{
HXLINE( 216)				 float32array this30 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this30.set((baseIndex2 + (int)18),toprightx);
            			}
HXDLIN( 216)			{
HXLINE( 216)				 float32array this31 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this31.set((baseIndex2 + (int)19),toprighty);
            			}
HXDLIN( 216)			{
HXLINE( 216)				 float32array this32 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this32.set((baseIndex2 + (int)20),((Float)-5.0));
            			}
HXDLIN( 216)			{
HXLINE( 216)				 float32array this33 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this33.set((baseIndex2 + (int)27),bottomrightx);
            			}
HXDLIN( 216)			{
HXLINE( 216)				 float32array this34 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this34.set((baseIndex2 + (int)28),bottomrighty);
            			}
HXDLIN( 216)			{
HXLINE( 216)				 float32array this35 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 216)				this35.set((baseIndex2 + (int)29),((Float)-5.0));
            			}
            		}
HXLINE( 218)		++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 219)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            	}


HX_DEFINE_DYNAMIC_FUNC11(ImageShaderPainter_obj,drawImage,(void))

void ImageShaderPainter_obj::drawImage2( ::kha::Image img,float sx,float sy,float sw,float sh,float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty,float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_227_drawImage2)
HXLINE( 228)		 ::kha::Image tex = img;
HXLINE( 229)		bool _hx_tmp;
HXDLIN( 229)		if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex + (int)1) < (int)1500)) {
HXLINE( 229)			if (hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 229)				_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            			}
            			else {
HXLINE( 229)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 229)			_hx_tmp = true;
            		}
HXDLIN( 229)		if (_hx_tmp) {
HXLINE( 229)			this->drawBuffer();
            		}
HXLINE( 231)		{
HXLINE( 231)			float left = ((Float)sx / (Float)tex->get_realWidth());
HXDLIN( 231)			float top = ((Float)sy / (Float)tex->get_realHeight());
HXDLIN( 231)			float right = ((Float)(sx + sw) / (Float)tex->get_realWidth());
HXDLIN( 231)			float bottom = ((Float)(sy + sh) / (Float)tex->get_realHeight());
HXDLIN( 231)			int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 231)			{
HXLINE( 231)				 float32array this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 231)				this1.set((baseIndex + (int)3),left);
            			}
HXDLIN( 231)			{
HXLINE( 231)				 float32array this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 231)				this2.set((baseIndex + (int)4),bottom);
            			}
HXDLIN( 231)			{
HXLINE( 231)				 float32array this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 231)				this3.set((baseIndex + (int)12),left);
            			}
HXDLIN( 231)			{
HXLINE( 231)				 float32array this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 231)				this4.set((baseIndex + (int)13),top);
            			}
HXDLIN( 231)			{
HXLINE( 231)				 float32array this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 231)				this5.set((baseIndex + (int)21),right);
            			}
HXDLIN( 231)			{
HXLINE( 231)				 float32array this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 231)				this6.set((baseIndex + (int)22),top);
            			}
HXDLIN( 231)			{
HXLINE( 231)				 float32array this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 231)				this7.set((baseIndex + (int)30),right);
            			}
HXDLIN( 231)			{
HXLINE( 231)				 float32array this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 231)				this8.set((baseIndex + (int)31),bottom);
            			}
            		}
HXLINE( 232)		{
HXLINE( 232)			float r = (hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098));
HXDLIN( 232)			float g = (hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098));
HXDLIN( 232)			float b = (((int)color & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 232)			float a = ((hx::UShr(color,(int)24) * ((Float)0.00392156862745098)) * opacity);
HXDLIN( 232)			int baseIndex1 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 232)			{
HXLINE( 232)				 float32array this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this9.set((baseIndex1 + (int)5),r);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this10.set((baseIndex1 + (int)6),g);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this11.set((baseIndex1 + (int)7),b);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this12.set((baseIndex1 + (int)8),a);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this13.set((baseIndex1 + (int)14),r);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this14.set((baseIndex1 + (int)15),g);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this15.set((baseIndex1 + (int)16),b);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this16.set((baseIndex1 + (int)17),a);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this17 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this17.set((baseIndex1 + (int)23),r);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this18 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this18.set((baseIndex1 + (int)24),g);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this19 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this19.set((baseIndex1 + (int)25),b);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this20 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this20.set((baseIndex1 + (int)26),a);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this21 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this21.set((baseIndex1 + (int)32),r);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this22 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this22.set((baseIndex1 + (int)33),g);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this23 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this23.set((baseIndex1 + (int)34),b);
            			}
HXDLIN( 232)			{
HXLINE( 232)				 float32array this24 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 232)				this24.set((baseIndex1 + (int)35),a);
            			}
            		}
HXLINE( 233)		{
HXLINE( 233)			int baseIndex2 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 233)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,bottomleftx);
HXDLIN( 233)			{
HXLINE( 233)				 float32array this25 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this25.set((baseIndex2 + (int)1),bottomlefty);
            			}
HXDLIN( 233)			{
HXLINE( 233)				 float32array this26 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this26.set((baseIndex2 + (int)2),((Float)-5.0));
            			}
HXDLIN( 233)			{
HXLINE( 233)				 float32array this27 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this27.set((baseIndex2 + (int)9),topleftx);
            			}
HXDLIN( 233)			{
HXLINE( 233)				 float32array this28 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this28.set((baseIndex2 + (int)10),toplefty);
            			}
HXDLIN( 233)			{
HXLINE( 233)				 float32array this29 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this29.set((baseIndex2 + (int)11),((Float)-5.0));
            			}
HXDLIN( 233)			{
HXLINE( 233)				 float32array this30 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this30.set((baseIndex2 + (int)18),toprightx);
            			}
HXDLIN( 233)			{
HXLINE( 233)				 float32array this31 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this31.set((baseIndex2 + (int)19),toprighty);
            			}
HXDLIN( 233)			{
HXLINE( 233)				 float32array this32 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this32.set((baseIndex2 + (int)20),((Float)-5.0));
            			}
HXDLIN( 233)			{
HXLINE( 233)				 float32array this33 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this33.set((baseIndex2 + (int)27),bottomrightx);
            			}
HXDLIN( 233)			{
HXLINE( 233)				 float32array this34 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this34.set((baseIndex2 + (int)28),bottomrighty);
            			}
HXDLIN( 233)			{
HXLINE( 233)				 float32array this35 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 233)				this35.set((baseIndex2 + (int)29),((Float)-5.0));
            			}
            		}
HXLINE( 235)		++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 236)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            	}


HX_DEFINE_DYNAMIC_FUNC15(ImageShaderPainter_obj,drawImage2,(void))

void ImageShaderPainter_obj::drawImageScale( ::kha::Image img,float sx,float sy,float sw,float sh,float left,float top,float right,float bottom,float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_239_drawImageScale)
HXLINE( 240)		 ::kha::Image tex = img;
HXLINE( 241)		bool _hx_tmp;
HXDLIN( 241)		if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex + (int)1) < (int)1500)) {
HXLINE( 241)			if (hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 241)				_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            			}
            			else {
HXLINE( 241)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 241)			_hx_tmp = true;
            		}
HXDLIN( 241)		if (_hx_tmp) {
HXLINE( 241)			this->drawBuffer();
            		}
HXLINE( 243)		{
HXLINE( 243)			float left1 = ((Float)sx / (Float)tex->get_realWidth());
HXDLIN( 243)			float top1 = ((Float)sy / (Float)tex->get_realHeight());
HXDLIN( 243)			float right1 = ((Float)(sx + sw) / (Float)tex->get_realWidth());
HXDLIN( 243)			float bottom1 = ((Float)(sy + sh) / (Float)tex->get_realHeight());
HXDLIN( 243)			int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 243)			{
HXLINE( 243)				 float32array this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 243)				this1.set((baseIndex + (int)3),left1);
            			}
HXDLIN( 243)			{
HXLINE( 243)				 float32array this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 243)				this2.set((baseIndex + (int)4),bottom1);
            			}
HXDLIN( 243)			{
HXLINE( 243)				 float32array this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 243)				this3.set((baseIndex + (int)12),left1);
            			}
HXDLIN( 243)			{
HXLINE( 243)				 float32array this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 243)				this4.set((baseIndex + (int)13),top1);
            			}
HXDLIN( 243)			{
HXLINE( 243)				 float32array this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 243)				this5.set((baseIndex + (int)21),right1);
            			}
HXDLIN( 243)			{
HXLINE( 243)				 float32array this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 243)				this6.set((baseIndex + (int)22),top1);
            			}
HXDLIN( 243)			{
HXLINE( 243)				 float32array this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 243)				this7.set((baseIndex + (int)30),right1);
            			}
HXDLIN( 243)			{
HXLINE( 243)				 float32array this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 243)				this8.set((baseIndex + (int)31),bottom1);
            			}
            		}
HXLINE( 244)		{
HXLINE( 244)			float r = (hx::UShr(((int)color & (int)(int)16711680),(int)16) * ((Float)0.00392156862745098));
HXDLIN( 244)			float g = (hx::UShr(((int)color & (int)(int)65280),(int)8) * ((Float)0.00392156862745098));
HXDLIN( 244)			float b = (((int)color & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 244)			int baseIndex1 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 244)			{
HXLINE( 244)				 float32array this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this9.set((baseIndex1 + (int)5),r);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this10.set((baseIndex1 + (int)6),g);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this11.set((baseIndex1 + (int)7),b);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this12.set((baseIndex1 + (int)8),opacity);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this13.set((baseIndex1 + (int)14),r);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this14.set((baseIndex1 + (int)15),g);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this15.set((baseIndex1 + (int)16),b);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this16.set((baseIndex1 + (int)17),opacity);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this17 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this17.set((baseIndex1 + (int)23),r);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this18 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this18.set((baseIndex1 + (int)24),g);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this19 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this19.set((baseIndex1 + (int)25),b);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this20 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this20.set((baseIndex1 + (int)26),opacity);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this21 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this21.set((baseIndex1 + (int)32),r);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this22 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this22.set((baseIndex1 + (int)33),g);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this23 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this23.set((baseIndex1 + (int)34),b);
            			}
HXDLIN( 244)			{
HXLINE( 244)				 float32array this24 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 244)				this24.set((baseIndex1 + (int)35),opacity);
            			}
            		}
HXLINE( 245)		{
HXLINE( 245)			int baseIndex2 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * (int)9) * (int)4);
HXDLIN( 245)			::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,left);
HXDLIN( 245)			{
HXLINE( 245)				 float32array this25 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this25.set((baseIndex2 + (int)1),bottom);
            			}
HXDLIN( 245)			{
HXLINE( 245)				 float32array this26 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this26.set((baseIndex2 + (int)2),((Float)-5.0));
            			}
HXDLIN( 245)			{
HXLINE( 245)				 float32array this27 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this27.set((baseIndex2 + (int)9),left);
            			}
HXDLIN( 245)			{
HXLINE( 245)				 float32array this28 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this28.set((baseIndex2 + (int)10),top);
            			}
HXDLIN( 245)			{
HXLINE( 245)				 float32array this29 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this29.set((baseIndex2 + (int)11),((Float)-5.0));
            			}
HXDLIN( 245)			{
HXLINE( 245)				 float32array this30 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this30.set((baseIndex2 + (int)18),right);
            			}
HXDLIN( 245)			{
HXLINE( 245)				 float32array this31 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this31.set((baseIndex2 + (int)19),top);
            			}
HXDLIN( 245)			{
HXLINE( 245)				 float32array this32 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this32.set((baseIndex2 + (int)20),((Float)-5.0));
            			}
HXDLIN( 245)			{
HXLINE( 245)				 float32array this33 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this33.set((baseIndex2 + (int)27),right);
            			}
HXDLIN( 245)			{
HXLINE( 245)				 float32array this34 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this34.set((baseIndex2 + (int)28),bottom);
            			}
HXDLIN( 245)			{
HXLINE( 245)				 float32array this35 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 245)				this35.set((baseIndex2 + (int)29),((Float)-5.0));
            			}
            		}
HXLINE( 247)		++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 248)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            	}


HX_DEFINE_DYNAMIC_FUNC11(ImageShaderPainter_obj,drawImageScale,(void))

void ImageShaderPainter_obj::end(){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_251_end)
HXLINE( 252)		if ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex > (int)0)) {
HXLINE( 252)			this->drawBuffer();
            		}
HXLINE( 253)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,end,(void))

 ::kha::graphics4::PipelineState ImageShaderPainter_obj::shaderPipeline;

 ::kha::graphics4::VertexStructure ImageShaderPainter_obj::structure;

int ImageShaderPainter_obj::bufferSize;

int ImageShaderPainter_obj::vertexSize;

int ImageShaderPainter_obj::bufferIndex;

 ::kha::graphics4::VertexBuffer ImageShaderPainter_obj::rectVertexBuffer;

 ::kha::arrays::Float32ArrayPrivate ImageShaderPainter_obj::rectVertices;

 ::kha::graphics4::IndexBuffer ImageShaderPainter_obj::indexBuffer;

 ::kha::Image ImageShaderPainter_obj::lastTexture;

void ImageShaderPainter_obj::initShaders(){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_83_initShaders)
HXLINE(  84)		if (hx::IsNull( ::kha::graphics4::ImageShaderPainter_obj::structure )) {
HXLINE(  85)			::kha::graphics4::ImageShaderPainter_obj::structure = ::kha::graphics4::Graphics2_obj::createImageVertexStructure();
            		}
HXLINE(  87)		if (hx::IsNull( ::kha::graphics4::ImageShaderPainter_obj::shaderPipeline )) {
HXLINE(  88)			::kha::graphics4::ImageShaderPainter_obj::shaderPipeline = ::kha::graphics4::Graphics2_obj::createImagePipeline(::kha::graphics4::ImageShaderPainter_obj::structure);
HXLINE(  89)			::kha::graphics4::ImageShaderPainter_obj::shaderPipeline->compile();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,initShaders,(void))


hx::ObjectPtr< ImageShaderPainter_obj > ImageShaderPainter_obj::__new(::Dynamic g4) {
	hx::ObjectPtr< ImageShaderPainter_obj > __this = new ImageShaderPainter_obj();
	__this->__construct(g4);
	return __this;
}

hx::ObjectPtr< ImageShaderPainter_obj > ImageShaderPainter_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic g4) {
	ImageShaderPainter_obj *__this = (ImageShaderPainter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ImageShaderPainter_obj), true, "kha.graphics4.ImageShaderPainter"));
	*(void **)__this = ImageShaderPainter_obj::_hx_vtable;
	__this->__construct(g4);
	return __this;
}

ImageShaderPainter_obj::ImageShaderPainter_obj()
{
}

void ImageShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(bilinear,"bilinear");
	HX_MARK_MEMBER_NAME(bilinearMipmaps,"bilinearMipmaps");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_MARK_MEMBER_NAME(textureLocation,"textureLocation");
	HX_MARK_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_MARK_MEMBER_NAME(destinationBlend,"destinationBlend");
	HX_MARK_END_CLASS();
}

void ImageShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(bilinear,"bilinear");
	HX_VISIT_MEMBER_NAME(bilinearMipmaps,"bilinearMipmaps");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
	HX_VISIT_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_VISIT_MEMBER_NAME(textureLocation,"textureLocation");
	HX_VISIT_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_VISIT_MEMBER_NAME(destinationBlend,"destinationBlend");
}

hx::Val ImageShaderPainter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { return hx::Val( bilinear ); }
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pipeline() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawImage") ) { return hx::Val( drawImage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return hx::Val( myPipeline ); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return hx::Val( drawBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawImage2") ) { return hx::Val( drawImage2_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { return hx::Val( sourceBlend ); }
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return hx::Val( initBuffers_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return hx::Val( get_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return hx::Val( set_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRectColor") ) { return hx::Val( setRectColor_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"drawImageScale") ) { return hx::Val( drawImageScale_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bilinearMipmaps") ) { return hx::Val( bilinearMipmaps ); }
		if (HX_FIELD_EQ(inName,"textureLocation") ) { return hx::Val( textureLocation ); }
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return hx::Val( setRectVertices_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix ); }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { return hx::Val( destinationBlend ); }
		if (HX_FIELD_EQ(inName,"setRectTexCoords") ) { return hx::Val( setRectTexCoords_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setBilinearFilter") ) { return hx::Val( setBilinearFilter_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { return hx::Val( projectionLocation ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setBilinearMipmapFilter") ) { return hx::Val( setBilinearMipmapFilter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ImageShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = ( structure ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { outValue = ( bufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { outValue = ( indexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { outValue = ( lastTexture ); return true; }
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { outValue = ( rectVertices ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { outValue = ( shaderPipeline ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { outValue = ( rectVertexBuffer ); return true; }
	}
	return false;
}

hx::Val ImageShaderPainter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { bilinear=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pipeline(inValue.Cast<  ::kha::graphics4::PipelineState >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { myPipeline=inValue.Cast<  ::kha::graphics4::PipelineState >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { sourceBlend=inValue.Cast<  ::kha::graphics4::BlendingFactor >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bilinearMipmaps") ) { bilinearMipmaps=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureLocation") ) { textureLocation=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { projectionMatrix=inValue.Cast<  ::kha::math::FastMatrix4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { destinationBlend=inValue.Cast<  ::kha::graphics4::BlendingFactor >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { projectionLocation=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ImageShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { lastTexture=ioValue.Cast<  ::kha::Image >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=ioValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { shaderPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
	}
	return false;
}

void ImageShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"));
	outFields->push(HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0"));
	outFields->push(HX_HCSTRING("bilinearMipmaps","\x5f","\x10","\xab","\x2b"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9"));
	outFields->push(HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b"));
	outFields->push(HX_HCSTRING("textureLocation","\x30","\xc6","\x65","\x4c"));
	outFields->push(HX_HCSTRING("pipeline","\x22","\xbb","\x83","\x4b"));
	outFields->push(HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3"));
	outFields->push(HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ImageShaderPainter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::math::FastMatrix4*/ ,(int)offsetof(ImageShaderPainter_obj,projectionMatrix),HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0")},
	{hx::fsBool,(int)offsetof(ImageShaderPainter_obj,bilinear),HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0")},
	{hx::fsBool,(int)offsetof(ImageShaderPainter_obj,bilinearMipmaps),HX_HCSTRING("bilinearMipmaps","\x5f","\x10","\xab","\x2b")},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(ImageShaderPainter_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(int)offsetof(ImageShaderPainter_obj,myPipeline),HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9")},
	{hx::fsObject /*::kha::graphics4::ConstantLocation*/ ,(int)offsetof(ImageShaderPainter_obj,projectionLocation),HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b")},
	{hx::fsObject /*::kha::graphics4::TextureUnit*/ ,(int)offsetof(ImageShaderPainter_obj,textureLocation),HX_HCSTRING("textureLocation","\x30","\xc6","\x65","\x4c")},
	{hx::fsObject /*::kha::graphics4::BlendingFactor*/ ,(int)offsetof(ImageShaderPainter_obj,sourceBlend),HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3")},
	{hx::fsObject /*::kha::graphics4::BlendingFactor*/ ,(int)offsetof(ImageShaderPainter_obj,destinationBlend),HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ImageShaderPainter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(void *) &ImageShaderPainter_obj::shaderPipeline,HX_HCSTRING("shaderPipeline","\x67","\x63","\x91","\xfc")},
	{hx::fsObject /*::kha::graphics4::VertexStructure*/ ,(void *) &ImageShaderPainter_obj::structure,HX_HCSTRING("structure","\x33","\x54","\x4f","\x47")},
	{hx::fsInt,(void *) &ImageShaderPainter_obj::bufferSize,HX_HCSTRING("bufferSize","\xe1","\x09","\x64","\x9d")},
	{hx::fsInt,(void *) &ImageShaderPainter_obj::vertexSize,HX_HCSTRING("vertexSize","\x45","\x2a","\x10","\xdd")},
	{hx::fsInt,(void *) &ImageShaderPainter_obj::bufferIndex,HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b")},
	{hx::fsObject /*::kha::graphics4::VertexBuffer*/ ,(void *) &ImageShaderPainter_obj::rectVertexBuffer,HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97")},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(void *) &ImageShaderPainter_obj::rectVertices,HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54")},
	{hx::fsObject /*::kha::graphics4::IndexBuffer*/ ,(void *) &ImageShaderPainter_obj::indexBuffer,HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5")},
	{hx::fsObject /*::kha::Image*/ ,(void *) &ImageShaderPainter_obj::lastTexture,HX_HCSTRING("lastTexture","\x25","\x7d","\x8c","\x53")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ImageShaderPainter_obj_sMemberFields[] = {
	HX_HCSTRING("projectionMatrix","\x30","\x88","\xbb","\xd0"),
	HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0"),
	HX_HCSTRING("bilinearMipmaps","\x5f","\x10","\xab","\x2b"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("myPipeline","\xae","\x22","\x05","\xb9"),
	HX_HCSTRING("projectionLocation","\xe4","\x59","\x25","\x9b"),
	HX_HCSTRING("textureLocation","\x30","\xc6","\x65","\x4c"),
	HX_HCSTRING("sourceBlend","\x76","\xad","\xfa","\xe3"),
	HX_HCSTRING("destinationBlend","\xe3","\xca","\xbf","\x2e"),
	HX_HCSTRING("get_pipeline","\x2b","\x6f","\x9d","\x00"),
	HX_HCSTRING("set_pipeline","\x9f","\x92","\x96","\x15"),
	HX_HCSTRING("setProjection","\xd1","\xc6","\x03","\x66"),
	HX_HCSTRING("initBuffers","\x43","\x12","\xfb","\x69"),
	HX_HCSTRING("setRectVertices","\xff","\x5f","\xac","\x73"),
	HX_HCSTRING("setRectTexCoords","\x9f","\xc2","\xa8","\xfb"),
	HX_HCSTRING("setRectColor","\x9d","\x31","\x74","\xf8"),
	HX_HCSTRING("drawBuffer","\x24","\x38","\x58","\x12"),
	HX_HCSTRING("setBilinearFilter","\x06","\xcb","\xde","\x13"),
	HX_HCSTRING("setBilinearMipmapFilter","\x2e","\xb1","\xaa","\x57"),
	HX_HCSTRING("drawImage","\xb7","\x54","\x74","\x85"),
	HX_HCSTRING("drawImage2","\x9b","\xcb","\x55","\x40"),
	HX_HCSTRING("drawImageScale","\x53","\x72","\xa6","\x67"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	::String(null()) };

static void ImageShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::bufferSize,"bufferSize");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::vertexSize,"vertexSize");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::lastTexture,"lastTexture");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::bufferSize,"bufferSize");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::vertexSize,"vertexSize");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::lastTexture,"lastTexture");
};

#endif

hx::Class ImageShaderPainter_obj::__mClass;

static ::String ImageShaderPainter_obj_sStaticFields[] = {
	HX_HCSTRING("shaderPipeline","\x67","\x63","\x91","\xfc"),
	HX_HCSTRING("structure","\x33","\x54","\x4f","\x47"),
	HX_HCSTRING("bufferSize","\xe1","\x09","\x64","\x9d"),
	HX_HCSTRING("vertexSize","\x45","\x2a","\x10","\xdd"),
	HX_HCSTRING("bufferIndex","\xf2","\x2d","\x60","\x5b"),
	HX_HCSTRING("rectVertexBuffer","\xc8","\x6e","\xb4","\x97"),
	HX_HCSTRING("rectVertices","\x3d","\x8d","\xf6","\x54"),
	HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"),
	HX_HCSTRING("lastTexture","\x25","\x7d","\x8c","\x53"),
	HX_HCSTRING("initShaders","\x7e","\xf0","\xf0","\x17"),
	::String(null())
};

void ImageShaderPainter_obj::__register()
{
	hx::Object *dummy = new ImageShaderPainter_obj;
	ImageShaderPainter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.graphics4.ImageShaderPainter","\x7a","\xd5","\x6b","\xda");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &ImageShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = ImageShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageShaderPainter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ImageShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ImageShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageShaderPainter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ImageShaderPainter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_34_boot)
HXDLIN(  34)		shaderPipeline = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_35_boot)
HXDLIN(  35)		structure = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_36_boot)
HXDLIN(  36)		bufferSize = (int)1500;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_37_boot)
HXDLIN(  37)		vertexSize = (int)9;
            	}
}

} // end namespace kha
} // end namespace graphics4
