// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_vm_Thread
#include <cpp/vm/Thread.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Framebuffer
#include <kha/Framebuffer.h>
#endif
#ifndef INCLUDED_kha_Position
#include <kha/Position.h>
#endif
#ifndef INCLUDED_kha_RendererOptions
#include <kha/RendererOptions.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_ScreenRotation
#include <kha/ScreenRotation.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_System
#include <kha/System.h>
#endif
#ifndef INCLUDED_kha_SystemImpl
#include <kha/SystemImpl.h>
#endif
#ifndef INCLUDED_kha_TargetDisplay
#include <kha/TargetDisplay.h>
#endif
#ifndef INCLUDED_kha_WindowMode
#include <kha/WindowMode.h>
#endif
#ifndef INCLUDED_kha_WindowOptions
#include <kha/WindowOptions.h>
#endif
#ifndef INCLUDED_kha_WindowedModeOptions
#include <kha/WindowedModeOptions.h>
#endif
#ifndef INCLUDED_kha_Worker
#include <kha/Worker.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio
#include <kha/audio2/Audio.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio1
#include <kha/audio2/Audio1.h>
#endif
#ifndef INCLUDED_kha_graphics1_Graphics
#include <kha/graphics1/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics1
#include <kha/graphics2/Graphics1.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <kha/graphics4/TextureFormat.h>
#endif
#ifndef INCLUDED_kha_input_Gamepad
#include <kha/input/Gamepad.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_input_MouseImpl
#include <kha/input/MouseImpl.h>
#endif
#ifndef INCLUDED_kha_input_Pen
#include <kha/input/Pen.h>
#endif
#ifndef INCLUDED_kha_input_Sensor
#include <kha/input/Sensor.h>
#endif
#ifndef INCLUDED_kha_input_SensorType
#include <kha/input/SensorType.h>
#endif
#ifndef INCLUDED_kha_input_Surface
#include <kha/input/Surface.h>
#endif
#ifndef INCLUDED_kha_kore_Keyboard
#include <kha/kore/Keyboard.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics
#include <kha/kore/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics2
#include <kha/kore/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_network_Controller
#include <kha/network/Controller.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_50_getMouse,"kha.SystemImpl","getMouse",0x58b17b24,"kha.SystemImpl.getMouse","kha/SystemImpl.hx",50,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_55_getPen,"kha.SystemImpl","getPen",0xfb4e2c18,"kha.SystemImpl.getPen","kha/SystemImpl.hx",55,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_60_getKeyboard,"kha.SystemImpl","getKeyboard",0x95414108,"kha.SystemImpl.getKeyboard","kha/SystemImpl.hx",60,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_69_getTime,"kha.SystemImpl","getTime",0xebc04bee,"kha.SystemImpl.getTime","kha/SystemImpl.hx",69,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_73_windowWidth,"kha.SystemImpl","windowWidth",0xc2590da1,"kha.SystemImpl.windowWidth","kha/SystemImpl.hx",73,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_77_windowHeight,"kha.SystemImpl","windowHeight",0x01e257ec,"kha.SystemImpl.windowHeight","kha/SystemImpl.hx",77,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_81_screenDpi,"kha.SystemImpl","screenDpi",0x32261c3c,"kha.SystemImpl.screenDpi","kha/SystemImpl.hx",81,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_85_getVsync,"kha.SystemImpl","getVsync",0x89f492d0,"kha.SystemImpl.getVsync","kha/SystemImpl.hx",85,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_89_getRefreshRate,"kha.SystemImpl","getRefreshRate",0x9bd0909a,"kha.SystemImpl.getRefreshRate","kha/SystemImpl.hx",89,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_93_getScreenRotation,"kha.SystemImpl","getScreenRotation",0x5ad503eb,"kha.SystemImpl.getScreenRotation","kha/SystemImpl.hx",93,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_98_getSystemId,"kha.SystemImpl","getSystemId",0x8f01350b,"kha.SystemImpl.getSystemId","kha/SystemImpl.hx",98,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_102_requestShutdown,"kha.SystemImpl","requestShutdown",0xb0567230,"kha.SystemImpl.requestShutdown","kha/SystemImpl.hx",102,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_116_init,"kha.SystemImpl","init",0xcab17205,"kha.SystemImpl.init","kha/SystemImpl.hx",116,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_142_initEx,"kha.SystemImpl","initEx",0xef75f9d8,"kha.SystemImpl.initEx","kha/SystemImpl.hx",142,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_136_initEx,"kha.SystemImpl","initEx",0xef75f9d8,"kha.SystemImpl.initEx","kha/SystemImpl.hx",136,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_164_postInit,"kha.SystemImpl","postInit",0xf06ff105,"kha.SystemImpl.postInit","kha/SystemImpl.hx",164,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_186_loadFinished,"kha.SystemImpl","loadFinished",0x869d33ad,"kha.SystemImpl.loadFinished","kha/SystemImpl.hx",186,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_222_lockMouse,"kha.SystemImpl","lockMouse",0x417c4725,"kha.SystemImpl.lockMouse","kha/SystemImpl.hx",222,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_231_unlockMouse,"kha.SystemImpl","unlockMouse",0xd4111e6c,"kha.SystemImpl.unlockMouse","kha/SystemImpl.hx",231,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_240_canLockMouse,"kha.SystemImpl","canLockMouse",0x028cf3ff,"kha.SystemImpl.canLockMouse","kha/SystemImpl.hx",240,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_244_isMouseLocked,"kha.SystemImpl","isMouseLocked",0x414b4bb0,"kha.SystemImpl.isMouseLocked","kha/SystemImpl.hx",244,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_248_notifyOfMouseLockChange,"kha.SystemImpl","notifyOfMouseLockChange",0x88c3c00b,"kha.SystemImpl.notifyOfMouseLockChange","kha/SystemImpl.hx",248,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_254_removeFromMouseLockChange,"kha.SystemImpl","removeFromMouseLockChange",0x6a1154fd,"kha.SystemImpl.removeFromMouseLockChange","kha/SystemImpl.hx",254,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_260_hideSystemCursor,"kha.SystemImpl","hideSystemCursor",0xfb22e57c,"kha.SystemImpl.hideSystemCursor","kha/SystemImpl.hx",260,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_264_showSystemCursor,"kha.SystemImpl","showSystemCursor",0x3a347237,"kha.SystemImpl.showSystemCursor","kha/SystemImpl.hx",264,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_267_frame,"kha.SystemImpl","frame",0xd8fd5798,"kha.SystemImpl.frame","kha/SystemImpl.hx",267,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_291_keyDown,"kha.SystemImpl","keyDown",0x688839cc,"kha.SystemImpl.keyDown","kha/SystemImpl.hx",291,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_295_keyUp,"kha.SystemImpl","keyUp",0xb1789945,"kha.SystemImpl.keyUp","kha/SystemImpl.hx",295,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_299_keyPress,"kha.SystemImpl","keyPress",0xf9674ed9,"kha.SystemImpl.keyPress","kha/SystemImpl.hx",299,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_305_mouseDown,"kha.SystemImpl","mouseDown",0xe8f82212,"kha.SystemImpl.mouseDown","kha/SystemImpl.hx",305,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_311_mouseUp,"kha.SystemImpl","mouseUp",0x8cb3c40b,"kha.SystemImpl.mouseUp","kha/SystemImpl.hx",311,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_317_mouseMove,"kha.SystemImpl","mouseMove",0xeeeb0cc1,"kha.SystemImpl.mouseMove","kha/SystemImpl.hx",317,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_326_mouseWheel,"kha.SystemImpl","mouseWheel",0xdc1484eb,"kha.SystemImpl.mouseWheel","kha/SystemImpl.hx",326,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_330_mouseLeave,"kha.SystemImpl","mouseLeave",0x84ad8547,"kha.SystemImpl.mouseLeave","kha/SystemImpl.hx",330,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_334_penDown,"kha.SystemImpl","penDown",0xe30b2a06,"kha.SystemImpl.penDown","kha/SystemImpl.hx",334,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_338_penUp,"kha.SystemImpl","penUp",0x927126ff,"kha.SystemImpl.penUp","kha/SystemImpl.hx",338,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_342_penMove,"kha.SystemImpl","penMove",0xe8fe14b5,"kha.SystemImpl.penMove","kha/SystemImpl.hx",342,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_346_gamepad1Axis,"kha.SystemImpl","gamepad1Axis",0xbebda126,"kha.SystemImpl.gamepad1Axis","kha/SystemImpl.hx",346,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_350_gamepad1Button,"kha.SystemImpl","gamepad1Button",0xd5b2d1b7,"kha.SystemImpl.gamepad1Button","kha/SystemImpl.hx",350,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_354_gamepad2Axis,"kha.SystemImpl","gamepad2Axis",0x522435a7,"kha.SystemImpl.gamepad2Axis","kha/SystemImpl.hx",354,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_358_gamepad2Button,"kha.SystemImpl","gamepad2Button",0xff484878,"kha.SystemImpl.gamepad2Button","kha/SystemImpl.hx",358,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_362_gamepad3Axis,"kha.SystemImpl","gamepad3Axis",0xe58aca28,"kha.SystemImpl.gamepad3Axis","kha/SystemImpl.hx",362,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_366_gamepad3Button,"kha.SystemImpl","gamepad3Button",0x28ddbf39,"kha.SystemImpl.gamepad3Button","kha/SystemImpl.hx",366,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_370_gamepad4Axis,"kha.SystemImpl","gamepad4Axis",0x78f15ea9,"kha.SystemImpl.gamepad4Axis","kha/SystemImpl.hx",370,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_374_gamepad4Button,"kha.SystemImpl","gamepad4Button",0x527335fa,"kha.SystemImpl.gamepad4Button","kha/SystemImpl.hx",374,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_378_touchStart,"kha.SystemImpl","touchStart",0x7229b4d8,"kha.SystemImpl.touchStart","kha/SystemImpl.hx",378,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_382_touchEnd,"kha.SystemImpl","touchEnd",0xec7f1ad1,"kha.SystemImpl.touchEnd","kha/SystemImpl.hx",382,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_386_touchMove,"kha.SystemImpl","touchMove",0x0802e35b,"kha.SystemImpl.touchMove","kha/SystemImpl.hx",386,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_390_foreground,"kha.SystemImpl","foreground",0x057c7578,"kha.SystemImpl.foreground","kha/SystemImpl.hx",390,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_394_resume,"kha.SystemImpl","resume",0x60ae07e2,"kha.SystemImpl.resume","kha/SystemImpl.hx",394,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_398_pause,"kha.SystemImpl","pause",0x8fd1b661,"kha.SystemImpl.pause","kha/SystemImpl.hx",398,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_402_background,"kha.SystemImpl","background",0x1aaaf0a3,"kha.SystemImpl.background","kha/SystemImpl.hx",402,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_406_shutdown,"kha.SystemImpl","shutdown",0x5781520b,"kha.SystemImpl.shutdown","kha/SystemImpl.hx",406,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_410_dropFiles,"kha.SystemImpl","dropFiles",0x3c867cb3,"kha.SystemImpl.dropFiles","kha/SystemImpl.hx",410,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_414_copy,"kha.SystemImpl","copy",0xc6baf2aa,"kha.SystemImpl.copy","kha/SystemImpl.hx",414,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_423_cut,"kha.SystemImpl","cut",0xed60242d,"kha.SystemImpl.cut","kha/SystemImpl.hx",423,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_432_paste,"kha.SystemImpl","paste",0x8fd032be,"kha.SystemImpl.paste","kha/SystemImpl.hx",432,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_438_initKore,"kha.SystemImpl","initKore",0x383af6fc,"kha.SystemImpl.initKore","kha/SystemImpl.hx",438,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_442_translatePosition,"kha.SystemImpl","translatePosition",0x02aa0602,"kha.SystemImpl.translatePosition","kha/SystemImpl.hx",442,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_453_translateDisplay,"kha.SystemImpl","translateDisplay",0x41da7309,"kha.SystemImpl.translateDisplay","kha/SystemImpl.hx",453,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_464_translateWindowMode,"kha.SystemImpl","translateWindowMode",0xe18d790c,"kha.SystemImpl.translateWindowMode","kha/SystemImpl.hx",464,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_476_translateDepthBufferFormat,"kha.SystemImpl","translateDepthBufferFormat",0x58265d81,"kha.SystemImpl.translateDepthBufferFormat","kha/SystemImpl.hx",476,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_491_translateStencilBufferFormat,"kha.SystemImpl","translateStencilBufferFormat",0x039a6bba,"kha.SystemImpl.translateStencilBufferFormat","kha/SystemImpl.hx",491,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_506_translateTextureFormat,"kha.SystemImpl","translateTextureFormat",0xbfcbfa79,"kha.SystemImpl.translateTextureFormat","kha/SystemImpl.hx",506,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_550_initWindow2,"kha.SystemImpl","initWindow2",0xa8030ebd,"kha.SystemImpl.initWindow2","kha/SystemImpl.hx",550,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_553_initWindow,"kha.SystemImpl","initWindow",0x4b5f4bd5,"kha.SystemImpl.initWindow","kha/SystemImpl.hx",553,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_586_canSwitchFullscreen,"kha.SystemImpl","canSwitchFullscreen",0x7beb562a,"kha.SystemImpl.canSwitchFullscreen","kha/SystemImpl.hx",586,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_590_isFullscreen,"kha.SystemImpl","isFullscreen",0x03f916ba,"kha.SystemImpl.isFullscreen","kha/SystemImpl.hx",590,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_594_requestFullscreen,"kha.SystemImpl","requestFullscreen",0xfebaca55,"kha.SystemImpl.requestFullscreen","kha/SystemImpl.hx",594,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_606_exitFullscreen,"kha.SystemImpl","exitFullscreen",0xa140e22e,"kha.SystemImpl.exitFullscreen","kha/SystemImpl.hx",606,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_619_notifyOfFullscreenChange,"kha.SystemImpl","notifyOfFullscreenChange",0x59e6ede0,"kha.SystemImpl.notifyOfFullscreenChange","kha/SystemImpl.hx",619,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_625_removeFromFullscreenChange,"kha.SystemImpl","removeFromFullscreenChange",0x9c7bacae,"kha.SystemImpl.removeFromFullscreenChange","kha/SystemImpl.hx",625,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_630_changeResolution,"kha.SystemImpl","changeResolution",0x73a24931,"kha.SystemImpl.changeResolution","kha/SystemImpl.hx",630,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_635_setKeepScreenOn,"kha.SystemImpl","setKeepScreenOn",0xd7fb933d,"kha.SystemImpl.setKeepScreenOn","kha/SystemImpl.hx",635,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_639_loadUrl,"kha.SystemImpl","loadUrl",0xd5247514,"kha.SystemImpl.loadUrl","kha/SystemImpl.hx",639,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_644_getGamepadId,"kha.SystemImpl","getGamepadId",0xa6b49b5b,"kha.SystemImpl.getGamepadId","kha/SystemImpl.hx",644,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_48_boot,"kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",48,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_105_boot,"kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",105,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_581_boot,"kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",581,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_582_boot,"kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",582,0x57d4ce24)
HX_LOCAL_STACK_FRAME(_hx_pos_f30f18a4cd4a5f10_583_boot,"kha.SystemImpl","boot",0xc611bb27,"kha.SystemImpl.boot","kha/SystemImpl.hx",583,0x57d4ce24)
namespace kha{

void SystemImpl_obj::__construct() { }

Dynamic SystemImpl_obj::__CreateEmpty() { return new SystemImpl_obj; }

void *SystemImpl_obj::_hx_vtable = 0;

Dynamic SystemImpl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SystemImpl_obj > _hx_result = new SystemImpl_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SystemImpl_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x69d75eab;
}

bool SystemImpl_obj::needs3d;

 ::kha::input::Mouse SystemImpl_obj::getMouse(int num){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_50_getMouse)
HXLINE(  51)		if ((num != (int)0)) {
HXLINE(  51)			return null();
            		}
HXLINE(  52)		return ::kha::SystemImpl_obj::mouse;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,getMouse,return )

 ::kha::input::Pen SystemImpl_obj::getPen(int num){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_55_getPen)
HXLINE(  56)		if ((num != (int)0)) {
HXLINE(  56)			return null();
            		}
HXLINE(  57)		return ::kha::SystemImpl_obj::pen;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,getPen,return )

 ::kha::input::Keyboard SystemImpl_obj::getKeyboard(int num){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_60_getKeyboard)
HXLINE(  61)		if ((num != (int)0)) {
HXLINE(  61)			return null();
            		}
HXLINE(  62)		return ::kha::SystemImpl_obj::keyboard;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,getKeyboard,return )

Float SystemImpl_obj::getTime(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_69_getTime)
            	
		return Kore::System::time();
	

HXDLIN(  69)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getTime,return )

int SystemImpl_obj::windowWidth(int windowId){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_73_windowWidth)
HXDLIN(  73)		return Kore::System::windowWidth(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,windowWidth,return )

int SystemImpl_obj::windowHeight(int windowId){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_77_windowHeight)
HXDLIN(  77)		return Kore::System::windowHeight(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,windowHeight,return )

int SystemImpl_obj::screenDpi(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_81_screenDpi)
HXDLIN(  81)		return Kore::System::screenDpi();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,screenDpi,return )

bool SystemImpl_obj::getVsync(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_85_getVsync)
HXDLIN(  85)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getVsync,return )

int SystemImpl_obj::getRefreshRate(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_89_getRefreshRate)
HXDLIN(  89)		return (int)60;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getRefreshRate,return )

 ::kha::ScreenRotation SystemImpl_obj::getScreenRotation(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_93_getScreenRotation)
HXDLIN(  93)		return ::kha::ScreenRotation_obj::RotationNone_dyn();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getScreenRotation,return )

::String SystemImpl_obj::getSystemId(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_98_getSystemId)
            	return ::String(Kore::System::systemId());

HXDLIN(  98)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,getSystemId,return )

void SystemImpl_obj::requestShutdown(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_102_requestShutdown)
HXDLIN( 102)		Kore::System::stop();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,requestShutdown,(void))

::Array< ::Dynamic> SystemImpl_obj::framebuffers;

 ::kha::input::Keyboard SystemImpl_obj::keyboard;

 ::kha::input::Mouse SystemImpl_obj::mouse;

 ::kha::input::Pen SystemImpl_obj::pen;

 ::kha::input::Gamepad SystemImpl_obj::gamepad1;

 ::kha::input::Gamepad SystemImpl_obj::gamepad2;

 ::kha::input::Gamepad SystemImpl_obj::gamepad3;

 ::kha::input::Gamepad SystemImpl_obj::gamepad4;

 ::kha::input::Surface SystemImpl_obj::surface;

::Array< ::Dynamic> SystemImpl_obj::mouseLockListeners;

void SystemImpl_obj::init( ::Dynamic options, ::Dynamic callback){
            	HX_GC_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_116_init)
HXLINE( 117)		::String options1 = ( (::String)(options->__Field(HX_("title",98,15,3b,10),hx::paccDynamic)) );
HXDLIN( 117)		 ::Dynamic options2 = options->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXDLIN( 117)		 ::Dynamic options3 = options->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic);
HXDLIN( 117)		 ::Dynamic options4 = options->__Field(HX_("samplesPerPixel",92,52,4f,57),hx::paccDynamic);
HXDLIN( 117)		 ::Dynamic options5 = options->__Field(HX_("vSync",f1,59,81,28),hx::paccDynamic);
HXDLIN( 117)		int _hx_tmp = ::kha::SystemImpl_obj::translateWindowMode(options->__Field(HX_("windowMode",73,4b,37,d3),hx::paccDynamic));
HXDLIN( 117)		::kha::SystemImpl_obj::initKore(options1,options2,options3,options4,options5,_hx_tmp,( (bool)(options->__Field(HX_("resizable",6b,37,50,a9),hx::paccDynamic)) ),( (bool)(options->__Field(HX_("maximizable",93,c3,2c,41),hx::paccDynamic)) ),( (bool)(options->__Field(HX_("minimizable",81,68,12,06),hx::paccDynamic)) ));
HXLINE( 119)		::kha::Worker_obj::_mainThread = ::cpp::vm::Thread_obj::current();
HXLINE( 122)		post_kore_init();
HXLINE( 124)		::kha::Shaders_obj::init();
HXLINE( 127)		 ::kha::kore::graphics4::Graphics g4 =  ::kha::kore::graphics4::Graphics_obj::__alloc( HX_CTX ,null());
HXLINE( 128)		 ::kha::Framebuffer framebuffer =  ::kha::Framebuffer_obj::__alloc( HX_CTX ,(int)0,null(),null(),g4);
HXLINE( 129)		 ::kha::graphics2::Graphics1 _hx_tmp1 =  ::kha::graphics2::Graphics1_obj::__alloc( HX_CTX ,framebuffer);
HXDLIN( 129)		framebuffer->init(_hx_tmp1, ::kha::kore::graphics4::Graphics2_obj::__alloc( HX_CTX ,framebuffer),g4);
HXLINE( 130)		::kha::SystemImpl_obj::framebuffers->push(framebuffer);
HXLINE( 133)		::kha::SystemImpl_obj::postInit(callback);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,init,(void))

void SystemImpl_obj::initEx(::String title,::Array< ::Dynamic> options, ::Dynamic windowCallback, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,windowCallback,::Array< int >,windowIds) HXARGC(1)
            		void _hx_run(int windowId){
            			HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_142_initEx)
HXLINE( 143)			windowIds->push(windowId);
HXLINE( 144)			windowCallback(windowId);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,a2) HXARGC(1)
            		void _hx_run( ::kha::WindowOptions a1){
            			HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_142_initEx)
HXLINE( 142)			::kha::SystemImpl_obj::initWindow(a1,a2);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_136_initEx)
HXLINE( 137)		init_kore_ex(title);
HXLINE( 140)		::Array< int > windowIds = ::Array_obj< int >::__new(0);
HXLINE( 142)		 ::Dynamic a2 =  ::Dynamic(new _hx_Closure_0(windowCallback,windowIds));
HXDLIN( 142)		::Lambda_obj::iter(options, ::Dynamic(new _hx_Closure_1(a2)));
HXLINE( 147)		::kha::Shaders_obj::init();
HXLINE( 150)		{
HXLINE( 150)			int _g1 = (int)0;
HXDLIN( 150)			int _g = windowIds->length;
HXDLIN( 150)			while((_g1 < _g)){
HXLINE( 150)				_g1 = (_g1 + (int)1);
HXDLIN( 150)				int index = (_g1 - (int)1);
HXLINE( 151)				int windowId1 = windowIds->__get(index);
HXLINE( 152)				 ::kha::kore::graphics4::Graphics g4 =  ::kha::kore::graphics4::Graphics_obj::__alloc( HX_CTX ,null());
HXLINE( 153)				 ::kha::Framebuffer framebuffer =  ::kha::Framebuffer_obj::__alloc( HX_CTX ,index,null(),null(),g4);
HXLINE( 154)				 ::kha::graphics2::Graphics1 _hx_tmp =  ::kha::graphics2::Graphics1_obj::__alloc( HX_CTX ,framebuffer);
HXDLIN( 154)				framebuffer->init(_hx_tmp, ::kha::kore::graphics4::Graphics2_obj::__alloc( HX_CTX ,framebuffer),g4);
HXLINE( 155)				::kha::SystemImpl_obj::framebuffers[windowId1] = framebuffer;
            			}
            		}
HXLINE( 159)		post_kore_init();
HXLINE( 161)		::kha::SystemImpl_obj::postInit(callback);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,initEx,(void))

void SystemImpl_obj::postInit( ::Dynamic callback){
            	HX_GC_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_164_postInit)
HXLINE( 165)		::kha::SystemImpl_obj::mouseLockListeners = ::Array_obj< ::Dynamic>::__new();
HXLINE( 166)		::kha::Scheduler_obj::realTime();
HXLINE( 167)		::kha::input::Sensor_obj::get(::kha::input::SensorType_obj::Accelerometer_dyn());
HXLINE( 168)		::kha::SystemImpl_obj::keyboard =  ::kha::kore::Keyboard_obj::__alloc( HX_CTX );
HXLINE( 169)		::kha::SystemImpl_obj::mouse =  ::kha::input::MouseImpl_obj::__alloc( HX_CTX );
HXLINE( 170)		::kha::SystemImpl_obj::pen =  ::kha::input::Pen_obj::__alloc( HX_CTX );
HXLINE( 171)		::kha::SystemImpl_obj::gamepad1 =  ::kha::input::Gamepad_obj::__alloc( HX_CTX ,(int)0,null());
HXLINE( 172)		::kha::SystemImpl_obj::gamepad2 =  ::kha::input::Gamepad_obj::__alloc( HX_CTX ,(int)1,null());
HXLINE( 173)		::kha::SystemImpl_obj::gamepad3 =  ::kha::input::Gamepad_obj::__alloc( HX_CTX ,(int)2,null());
HXLINE( 174)		::kha::SystemImpl_obj::gamepad4 =  ::kha::input::Gamepad_obj::__alloc( HX_CTX ,(int)3,null());
HXLINE( 175)		::kha::SystemImpl_obj::surface =  ::kha::input::Surface_obj::__alloc( HX_CTX );
HXLINE( 176)		::kha::audio2::Audio_obj::_init();
HXLINE( 177)		::kha::audio2::Audio1_obj::_init();
HXLINE( 178)		::kha::Scheduler_obj::init();
HXLINE( 179)		::kha::SystemImpl_obj::loadFinished();
HXLINE( 180)		callback();
HXLINE( 182)		run_kore();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,postInit,(void))

void SystemImpl_obj::loadFinished(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_186_loadFinished)
HXDLIN( 186)		::kha::Scheduler_obj::start(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,loadFinished,(void))

void SystemImpl_obj::lockMouse(hx::Null< int >  __o_windowId){
int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_222_lockMouse)
HXDLIN( 222)		if (!(::kha::SystemImpl_obj::isMouseLocked(null()))) {
HXLINE( 223)			Kore::Mouse::the()->lock(windowId);;
HXLINE( 224)			{
HXLINE( 224)				int _g = (int)0;
HXDLIN( 224)				::Array< ::Dynamic> _g1 = ::kha::SystemImpl_obj::mouseLockListeners;
HXDLIN( 224)				while((_g < _g1->length)){
HXLINE( 224)					 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 224)					_g = (_g + (int)1);
HXLINE( 225)					listener();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,lockMouse,(void))

void SystemImpl_obj::unlockMouse(hx::Null< int >  __o_windowId){
int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_231_unlockMouse)
HXDLIN( 231)		if (::kha::SystemImpl_obj::isMouseLocked(null())) {
HXLINE( 232)			Kore::Mouse::the()->unlock(windowId);;
HXLINE( 233)			{
HXLINE( 233)				int _g = (int)0;
HXDLIN( 233)				::Array< ::Dynamic> _g1 = ::kha::SystemImpl_obj::mouseLockListeners;
HXDLIN( 233)				while((_g < _g1->length)){
HXLINE( 233)					 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 233)					_g = (_g + (int)1);
HXLINE( 234)					listener();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,unlockMouse,(void))

bool SystemImpl_obj::canLockMouse(hx::Null< int >  __o_windowId){
int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_240_canLockMouse)
HXDLIN( 240)		return Kore::Mouse::the()->canLock(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,canLockMouse,return )

bool SystemImpl_obj::isMouseLocked(hx::Null< int >  __o_windowId){
int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_244_isMouseLocked)
HXDLIN( 244)		return Kore::Mouse::the()->isLocked(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,isMouseLocked,return )

void SystemImpl_obj::notifyOfMouseLockChange( ::Dynamic func, ::Dynamic error,hx::Null< int >  __o_windowId){
int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_248_notifyOfMouseLockChange)
HXDLIN( 248)		bool _hx_tmp;
HXDLIN( 248)		if (::kha::SystemImpl_obj::canLockMouse(windowId)) {
HXDLIN( 248)			_hx_tmp = hx::IsNotNull( func );
            		}
            		else {
HXDLIN( 248)			_hx_tmp = false;
            		}
HXDLIN( 248)		if (_hx_tmp) {
HXLINE( 249)			::kha::SystemImpl_obj::mouseLockListeners->push(func);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,notifyOfMouseLockChange,(void))

void SystemImpl_obj::removeFromMouseLockChange( ::Dynamic func, ::Dynamic error,hx::Null< int >  __o_windowId){
int windowId = __o_windowId.Default(0);
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_254_removeFromMouseLockChange)
HXDLIN( 254)		bool _hx_tmp;
HXDLIN( 254)		if (::kha::SystemImpl_obj::canLockMouse(windowId)) {
HXDLIN( 254)			_hx_tmp = hx::IsNotNull( func );
            		}
            		else {
HXDLIN( 254)			_hx_tmp = false;
            		}
HXDLIN( 254)		if (_hx_tmp) {
HXLINE( 255)			::kha::SystemImpl_obj::mouseLockListeners->remove(func);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,removeFromMouseLockChange,(void))

void SystemImpl_obj::hideSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_260_hideSystemCursor)
HXDLIN( 260)		Kore::Mouse::the()->show(false);;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,hideSystemCursor,(void))

void SystemImpl_obj::showSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_264_showSystemCursor)
HXDLIN( 264)		Kore::Mouse::the()->show(true);;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,showSystemCursor,(void))

void SystemImpl_obj::frame(int id){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_267_frame)
HXLINE( 283)		if ((id == (int)0)) {
HXLINE( 284)			::kha::Scheduler_obj::executeFrame();
            		}
HXLINE( 287)		::kha::System_obj::render(id,::kha::SystemImpl_obj::framebuffers->__get(id).StaticCast<  ::kha::Framebuffer >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,frame,(void))

void SystemImpl_obj::keyDown(int code){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_291_keyDown)
HXDLIN( 291)		::kha::SystemImpl_obj::keyboard->sendDownEvent(code);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,keyDown,(void))

void SystemImpl_obj::keyUp(int code){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_295_keyUp)
HXDLIN( 295)		::kha::SystemImpl_obj::keyboard->sendUpEvent(code);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,keyUp,(void))

void SystemImpl_obj::keyPress(int _hx_char){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_299_keyPress)
HXDLIN( 299)		 ::kha::input::Keyboard _hx_tmp = ::kha::SystemImpl_obj::keyboard;
HXDLIN( 299)		_hx_tmp->sendPressEvent(::String::fromCharCode(_hx_char));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,keyPress,(void))

int SystemImpl_obj::mouseX;

int SystemImpl_obj::mouseY;

void SystemImpl_obj::mouseDown(int windowId,int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_305_mouseDown)
HXLINE( 306)		::kha::SystemImpl_obj::mouseX = x;
HXLINE( 307)		::kha::SystemImpl_obj::mouseY = y;
HXLINE( 308)		::kha::SystemImpl_obj::mouse->sendDownEvent(windowId,button,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,mouseDown,(void))

void SystemImpl_obj::mouseUp(int windowId,int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_311_mouseUp)
HXLINE( 312)		::kha::SystemImpl_obj::mouseX = x;
HXLINE( 313)		::kha::SystemImpl_obj::mouseY = y;
HXLINE( 314)		::kha::SystemImpl_obj::mouse->sendUpEvent(windowId,button,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,mouseUp,(void))

void SystemImpl_obj::mouseMove(int windowId,int x,int y,int movementX,int movementY){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_317_mouseMove)
HXLINE( 320)		::kha::SystemImpl_obj::mouseX = x;
HXLINE( 321)		::kha::SystemImpl_obj::mouseY = y;
HXLINE( 322)		::kha::SystemImpl_obj::mouse->sendMoveEvent(windowId,x,y,movementX,movementY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(SystemImpl_obj,mouseMove,(void))

void SystemImpl_obj::mouseWheel(int windowId,int delta){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_326_mouseWheel)
HXDLIN( 326)		::kha::SystemImpl_obj::mouse->sendWheelEvent(windowId,delta);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,mouseWheel,(void))

void SystemImpl_obj::mouseLeave(int windowId){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_330_mouseLeave)
HXDLIN( 330)		::kha::SystemImpl_obj::mouse->sendLeaveEvent(windowId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,mouseLeave,(void))

void SystemImpl_obj::penDown(int windowId,int x,int y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_334_penDown)
HXDLIN( 334)		::kha::SystemImpl_obj::pen->sendDownEvent(windowId,x,y,pressure);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,penDown,(void))

void SystemImpl_obj::penUp(int windowId,int x,int y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_338_penUp)
HXDLIN( 338)		::kha::SystemImpl_obj::pen->sendUpEvent(windowId,x,y,pressure);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,penUp,(void))

void SystemImpl_obj::penMove(int windowId,int x,int y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_342_penMove)
HXDLIN( 342)		::kha::SystemImpl_obj::pen->sendMoveEvent(windowId,x,y,pressure);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemImpl_obj,penMove,(void))

void SystemImpl_obj::gamepad1Axis(int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_346_gamepad1Axis)
HXDLIN( 346)		::kha::SystemImpl_obj::gamepad1->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad1Axis,(void))

void SystemImpl_obj::gamepad1Button(int button,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_350_gamepad1Button)
HXDLIN( 350)		::kha::SystemImpl_obj::gamepad1->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad1Button,(void))

void SystemImpl_obj::gamepad2Axis(int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_354_gamepad2Axis)
HXDLIN( 354)		::kha::SystemImpl_obj::gamepad2->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad2Axis,(void))

void SystemImpl_obj::gamepad2Button(int button,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_358_gamepad2Button)
HXDLIN( 358)		::kha::SystemImpl_obj::gamepad2->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad2Button,(void))

void SystemImpl_obj::gamepad3Axis(int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_362_gamepad3Axis)
HXDLIN( 362)		::kha::SystemImpl_obj::gamepad3->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad3Axis,(void))

void SystemImpl_obj::gamepad3Button(int button,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_366_gamepad3Button)
HXDLIN( 366)		::kha::SystemImpl_obj::gamepad3->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad3Button,(void))

void SystemImpl_obj::gamepad4Axis(int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_370_gamepad4Axis)
HXDLIN( 370)		::kha::SystemImpl_obj::gamepad4->sendAxisEvent(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad4Axis,(void))

void SystemImpl_obj::gamepad4Button(int button,Float value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_374_gamepad4Button)
HXDLIN( 374)		::kha::SystemImpl_obj::gamepad4->sendButtonEvent(button,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,gamepad4Button,(void))

void SystemImpl_obj::touchStart(int index,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_378_touchStart)
HXDLIN( 378)		::kha::SystemImpl_obj::surface->sendTouchStartEvent(index,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,touchStart,(void))

void SystemImpl_obj::touchEnd(int index,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_382_touchEnd)
HXDLIN( 382)		::kha::SystemImpl_obj::surface->sendTouchEndEvent(index,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,touchEnd,(void))

void SystemImpl_obj::touchMove(int index,int x,int y){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_386_touchMove)
HXDLIN( 386)		::kha::SystemImpl_obj::surface->sendMoveEvent(index,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SystemImpl_obj,touchMove,(void))

void SystemImpl_obj::foreground(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_390_foreground)
HXDLIN( 390)		::kha::System_obj::foreground();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,foreground,(void))

void SystemImpl_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_394_resume)
HXDLIN( 394)		::kha::System_obj::resume();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,resume,(void))

void SystemImpl_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_398_pause)
HXDLIN( 398)		::kha::System_obj::pause();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,pause,(void))

void SystemImpl_obj::background(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_402_background)
HXDLIN( 402)		::kha::System_obj::background();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,background,(void))

void SystemImpl_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_406_shutdown)
HXDLIN( 406)		::kha::System_obj::shutdown();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,shutdown,(void))

void SystemImpl_obj::dropFiles(::String filePath){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_410_dropFiles)
HXDLIN( 410)		::kha::System_obj::dropFiles(filePath);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,dropFiles,(void))

::String SystemImpl_obj::copy(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_414_copy)
HXDLIN( 414)		if (hx::IsNotNull( ::kha::System_obj::copyListener )) {
HXLINE( 415)			return ( (::String)(::kha::System_obj::copyListener()) );
            		}
            		else {
HXLINE( 418)			return null();
            		}
HXLINE( 414)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,copy,return )

::String SystemImpl_obj::cut(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_423_cut)
HXDLIN( 423)		if (hx::IsNotNull( ::kha::System_obj::cutListener )) {
HXLINE( 424)			return ( (::String)(::kha::System_obj::cutListener()) );
            		}
            		else {
HXLINE( 427)			return null();
            		}
HXLINE( 423)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,cut,return )

void SystemImpl_obj::paste(::String data){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_432_paste)
HXDLIN( 432)		if (hx::IsNotNull( ::kha::System_obj::pasteListener )) {
HXLINE( 433)			::kha::System_obj::pasteListener(data);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,paste,(void))

void SystemImpl_obj::initKore(::String name,int width,int height,int antialiasing,bool vSync,int windowMode,bool resizable,bool maximizable,bool minimizable){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_438_initKore)
            	init_kore(name, width, height, antialiasing, vSync, windowMode, resizable, maximizable, minimizable);

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(SystemImpl_obj,initKore,(void))

int SystemImpl_obj::translatePosition( ::kha::Position value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_442_translatePosition)
HXLINE( 443)		if (hx::IsNull( value )) {
HXLINE( 444)			return (int)-1;
            		}
HXLINE( 447)		switch((int)(_hx_getEnumValueIndex(value))){
            			case (int)0: {
HXLINE( 448)				return (int)-1;
            			}
            			break;
            			case (int)1: {
HXLINE( 449)				int v = value->_hx_getInt(0);
HXDLIN( 449)				return v;
            			}
            			break;
            		}
HXLINE( 447)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translatePosition,return )

int SystemImpl_obj::translateDisplay( ::kha::TargetDisplay value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_453_translateDisplay)
HXLINE( 454)		if (hx::IsNull( value )) {
HXLINE( 455)			return (int)-1;
            		}
HXLINE( 458)		switch((int)(_hx_getEnumValueIndex(value))){
            			case (int)0: {
HXLINE( 459)				return (int)-1;
            			}
            			break;
            			case (int)1: {
HXLINE( 460)				int id = value->_hx_getInt(0);
HXDLIN( 460)				return id;
            			}
            			break;
            		}
HXLINE( 458)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translateDisplay,return )

int SystemImpl_obj::translateWindowMode( ::kha::WindowMode value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_464_translateWindowMode)
HXLINE( 465)		if (hx::IsNull( value )) {
HXLINE( 466)			return (int)0;
            		}
HXLINE( 469)		switch((int)(_hx_getEnumValueIndex(value))){
            			case (int)0: {
HXLINE( 470)				return (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 471)				return (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 472)				return (int)2;
            			}
            			break;
            		}
HXLINE( 469)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translateWindowMode,return )

int SystemImpl_obj::translateDepthBufferFormat( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_476_translateDepthBufferFormat)
HXLINE( 477)		if (hx::IsNull( value )) {
HXLINE( 478)			return (int)16;
            		}
HXLINE( 481)		 ::Dynamic _hx_switch_0 = value;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 482)			return (int)-1;
HXDLIN( 482)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 483)			return (int)16;
HXDLIN( 483)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 484)			return (int)16;
HXDLIN( 484)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 485)			return (int)24;
HXDLIN( 485)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 486)			return (int)32;
HXDLIN( 486)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE( 487)			return (int)16;
HXDLIN( 487)			goto _hx_goto_65;
            		}
            		_hx_goto_65:;
HXLINE( 481)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translateDepthBufferFormat,return )

int SystemImpl_obj::translateStencilBufferFormat( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_491_translateStencilBufferFormat)
HXLINE( 492)		if (hx::IsNull( value )) {
HXLINE( 493)			return (int)-1;
            		}
HXLINE( 496)		 ::Dynamic _hx_switch_0 = value;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 497)			return (int)-1;
HXDLIN( 497)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 498)			return (int)-1;
HXDLIN( 498)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 499)			return (int)8;
HXDLIN( 499)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 500)			return (int)8;
HXDLIN( 500)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 501)			return (int)8;
HXDLIN( 501)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE( 502)			return (int)0;
HXDLIN( 502)			goto _hx_goto_67;
            		}
            		_hx_goto_67:;
HXLINE( 496)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translateStencilBufferFormat,return )

int SystemImpl_obj::translateTextureFormat( ::kha::graphics4::TextureFormat value){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_506_translateTextureFormat)
HXLINE( 507)		if (hx::IsNull( value )) {
HXLINE( 508)			return (int)0;
            		}
HXLINE( 511)		switch((int)(_hx_getEnumValueIndex(value))){
            			case (int)0: {
HXLINE( 512)				return (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 513)				return (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 514)				return (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE( 515)				return (int)3;
            			}
            			break;
            			case (int)4: {
HXLINE( 516)				return (int)4;
            			}
            			break;
            			case (int)5: {
HXLINE( 517)				return (int)5;
            			}
            			break;
            			case (int)6: {
HXLINE( 518)				return (int)6;
            			}
            			break;
            		}
HXLINE( 511)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,translateTextureFormat,return )

int SystemImpl_obj::initWindow2(::String title,int x,int y,int width,int height,int targetDisplay,int textureFormat,int depthBufferBits,int stencilBufferBits,bool resizable,bool maximizable,bool minimizable,int mode){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_550_initWindow2)
            	
		Kore::WindowOptions wo;
		wo.title = title;
		wo.x = x;
		wo.y = y;
		wo.width = width;
		wo.height = height;
		//wo.mode = mode;
		wo.targetDisplay = targetDisplay;
		wo.rendererOptions.textureFormat = textureFormat;
		wo.rendererOptions.depthBufferBits = depthBufferBits;
		wo.rendererOptions.stencilBufferBits = stencilBufferBits;

		wo.resizable = resizable;
		wo.maximizable = maximizable;
		wo.minimizable = minimizable;

		switch (mode) {
			default: // fall through
			case 0: wo.mode = Kore::WindowModeWindow; break;
			case 1: wo.mode = Kore::WindowModeBorderless; break;
			case 2: wo.mode = Kore::WindowModeFullscreen; break;
		}

		return init_window(wo);
	

HXDLIN( 550)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC13(SystemImpl_obj,initWindow2,return )

void SystemImpl_obj::initWindow( ::kha::WindowOptions options, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_553_initWindow)
HXLINE( 554)		int x = ::kha::SystemImpl_obj::translatePosition(options->x);
HXLINE( 555)		int y = ::kha::SystemImpl_obj::translatePosition(options->y);
HXLINE( 556)		 ::kha::WindowMode mode;
HXDLIN( 556)		if (hx::IsNotNull( options->mode )) {
HXLINE( 556)			mode = options->mode;
            		}
            		else {
HXLINE( 556)			mode = ::kha::WindowMode_obj::Window_dyn();
            		}
HXDLIN( 556)		int mode1 = ::kha::SystemImpl_obj::translateWindowMode(mode);
HXLINE( 557)		 ::kha::TargetDisplay targetDisplay;
HXDLIN( 557)		if (hx::IsNotNull( options->targetDisplay )) {
HXLINE( 557)			targetDisplay = options->targetDisplay;
            		}
            		else {
HXLINE( 557)			targetDisplay = ::kha::TargetDisplay_obj::Primary_dyn();
            		}
HXDLIN( 557)		int targetDisplay1 = ::kha::SystemImpl_obj::translateDisplay(targetDisplay);
HXLINE( 558)		 ::Dynamic depthBufferBits;
HXDLIN( 558)		if (hx::IsNotNull( options->rendererOptions )) {
HXLINE( 558)			depthBufferBits = options->rendererOptions->depthStencilFormat;
            		}
            		else {
HXLINE( 558)			depthBufferBits = (int)1;
            		}
HXDLIN( 558)		int depthBufferBits1 = ::kha::SystemImpl_obj::translateDepthBufferFormat(depthBufferBits);
HXLINE( 559)		 ::Dynamic stencilBufferBits;
HXDLIN( 559)		if (hx::IsNotNull( options->rendererOptions )) {
HXLINE( 559)			stencilBufferBits = options->rendererOptions->depthStencilFormat;
            		}
            		else {
HXLINE( 559)			stencilBufferBits = (int)1;
            		}
HXDLIN( 559)		int stencilBufferBits1 = ::kha::SystemImpl_obj::translateStencilBufferFormat(stencilBufferBits);
HXLINE( 560)		 ::kha::graphics4::TextureFormat textureFormat;
HXDLIN( 560)		if (hx::IsNotNull( options->rendererOptions )) {
HXLINE( 560)			textureFormat = options->rendererOptions->textureFormat;
            		}
            		else {
HXLINE( 560)			textureFormat = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
HXDLIN( 560)		int textureFormat1 = ::kha::SystemImpl_obj::translateTextureFormat(textureFormat);
HXLINE( 561)		::String title = options->title;
HXLINE( 562)		int width = options->width;
HXLINE( 563)		int height = options->height;
HXLINE( 564)		bool resizable;
HXDLIN( 564)		if (hx::IsNotNull( options->windowedModeOptions )) {
HXLINE( 564)			resizable = options->windowedModeOptions->resizable;
            		}
            		else {
HXLINE( 564)			resizable = false;
            		}
HXLINE( 565)		bool maximizable;
HXDLIN( 565)		if (hx::IsNotNull( options->windowedModeOptions )) {
HXLINE( 565)			maximizable = options->windowedModeOptions->maximizable;
            		}
            		else {
HXLINE( 565)			maximizable = false;
            		}
HXLINE( 566)		bool minimizable;
HXDLIN( 566)		if (hx::IsNotNull( options->windowedModeOptions )) {
HXLINE( 566)			minimizable = options->windowedModeOptions->minimizable;
            		}
            		else {
HXLINE( 566)			minimizable = true;
            		}
HXLINE( 568)		int windowId = ::kha::SystemImpl_obj::initWindow2(title,x,y,width,height,targetDisplay1,textureFormat1,depthBufferBits1,stencilBufferBits1,resizable,maximizable,minimizable,mode1);
HXLINE( 576)		if (hx::IsNotNull( callback )) {
HXLINE( 577)			callback(windowId);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,initWindow,(void))

::Array< ::Dynamic> SystemImpl_obj::fullscreenListeners;

int SystemImpl_obj::previousWidth;

int SystemImpl_obj::previousHeight;

bool SystemImpl_obj::canSwitchFullscreen(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_586_canSwitchFullscreen)
HXDLIN( 586)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,canSwitchFullscreen,return )

bool SystemImpl_obj::isFullscreen(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_590_isFullscreen)
HXDLIN( 590)		return Kore::System::isFullscreen();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,isFullscreen,return )

void SystemImpl_obj::requestFullscreen(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_594_requestFullscreen)
HXDLIN( 594)		if (!(::kha::SystemImpl_obj::isFullscreen())) {
HXLINE( 595)			::kha::SystemImpl_obj::previousWidth = Kore::System::windowWidth(0);
HXLINE( 596)			::kha::SystemImpl_obj::previousHeight = Kore::System::windowHeight(0);
HXLINE( 597)			Kore::System::changeResolution(Kore::System::desktopWidth(), Kore::System::desktopHeight(), true);
HXLINE( 598)			{
HXLINE( 598)				int _g = (int)0;
HXDLIN( 598)				::Array< ::Dynamic> _g1 = ::kha::SystemImpl_obj::fullscreenListeners;
HXDLIN( 598)				while((_g < _g1->length)){
HXLINE( 598)					 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 598)					_g = (_g + (int)1);
HXLINE( 599)					listener();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,requestFullscreen,(void))

void SystemImpl_obj::exitFullscreen(){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_606_exitFullscreen)
HXDLIN( 606)		if (::kha::SystemImpl_obj::isFullscreen()) {
HXLINE( 607)			bool _hx_tmp;
HXDLIN( 607)			if ((::kha::SystemImpl_obj::previousWidth != (int)0)) {
HXLINE( 607)				_hx_tmp = (::kha::SystemImpl_obj::previousHeight == (int)0);
            			}
            			else {
HXLINE( 607)				_hx_tmp = true;
            			}
HXDLIN( 607)			if (_hx_tmp) {
HXLINE( 608)				::kha::SystemImpl_obj::previousWidth = Kore::System::windowWidth(0);
HXLINE( 609)				::kha::SystemImpl_obj::previousHeight = Kore::System::windowHeight(0);
            			}
HXLINE( 611)			Kore::System::changeResolution(previousWidth, previousHeight, false);
HXLINE( 612)			{
HXLINE( 612)				int _g = (int)0;
HXDLIN( 612)				::Array< ::Dynamic> _g1 = ::kha::SystemImpl_obj::fullscreenListeners;
HXDLIN( 612)				while((_g < _g1->length)){
HXLINE( 612)					 ::Dynamic listener = _g1->__get(_g);
HXDLIN( 612)					_g = (_g + (int)1);
HXLINE( 613)					listener();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemImpl_obj,exitFullscreen,(void))

void SystemImpl_obj::notifyOfFullscreenChange( ::Dynamic func, ::Dynamic error){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_619_notifyOfFullscreenChange)
HXDLIN( 619)		bool _hx_tmp;
HXDLIN( 619)		if (::kha::SystemImpl_obj::canSwitchFullscreen()) {
HXDLIN( 619)			_hx_tmp = hx::IsNotNull( func );
            		}
            		else {
HXDLIN( 619)			_hx_tmp = false;
            		}
HXDLIN( 619)		if (_hx_tmp) {
HXLINE( 620)			::kha::SystemImpl_obj::fullscreenListeners->push(func);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,notifyOfFullscreenChange,(void))

void SystemImpl_obj::removeFromFullscreenChange( ::Dynamic func, ::Dynamic error){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_625_removeFromFullscreenChange)
HXDLIN( 625)		bool _hx_tmp;
HXDLIN( 625)		if (::kha::SystemImpl_obj::canSwitchFullscreen()) {
HXDLIN( 625)			_hx_tmp = hx::IsNotNull( func );
            		}
            		else {
HXDLIN( 625)			_hx_tmp = false;
            		}
HXDLIN( 625)		if (_hx_tmp) {
HXLINE( 626)			::kha::SystemImpl_obj::fullscreenListeners->remove(func);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,removeFromFullscreenChange,(void))

void SystemImpl_obj::changeResolution(int width,int height){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_630_changeResolution)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemImpl_obj,changeResolution,(void))

void SystemImpl_obj::setKeepScreenOn(bool on){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_635_setKeepScreenOn)
HXDLIN( 635)		Kore::System::setKeepScreenOn(on);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,setKeepScreenOn,(void))

void SystemImpl_obj::loadUrl(::String url){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_639_loadUrl)
HXDLIN( 639)		Kore::System::loadURL(url);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,loadUrl,(void))

::String SystemImpl_obj::getGamepadId(int index){
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_644_getGamepadId)
            	return ::String(::getGamepadId(index));

HXDLIN( 644)		return HX_("unknown",8a,23,7b,e1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemImpl_obj,getGamepadId,return )


SystemImpl_obj::SystemImpl_obj()
{
}

bool SystemImpl_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { outValue = ( pen ); return true; }
		if (HX_FIELD_EQ(inName,"cut") ) { outValue = cut_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { outValue = ( mouse ); return true; }
		if (HX_FIELD_EQ(inName,"frame") ) { outValue = frame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keyUp") ) { outValue = keyUp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"penUp") ) { outValue = penUp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pause") ) { outValue = pause_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"paste") ) { outValue = paste_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"getPen") ) { outValue = getPen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initEx") ) { outValue = initEx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseX") ) { outValue = ( mouseX ); return true; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { outValue = ( mouseY ); return true; }
		if (HX_FIELD_EQ(inName,"resume") ) { outValue = resume_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"needs3d") ) { outValue = ( needs3d ); return true; }
		if (HX_FIELD_EQ(inName,"getTime") ) { outValue = getTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"surface") ) { outValue = ( surface ); return true; }
		if (HX_FIELD_EQ(inName,"keyDown") ) { outValue = keyDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseUp") ) { outValue = mouseUp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"penDown") ) { outValue = penDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"penMove") ) { outValue = penMove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadUrl") ) { outValue = loadUrl_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getMouse") ) { outValue = getMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVsync") ) { outValue = getVsync_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keyboard") ) { outValue = ( keyboard ); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1") ) { outValue = ( gamepad1 ); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2") ) { outValue = ( gamepad2 ); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3") ) { outValue = ( gamepad3 ); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4") ) { outValue = ( gamepad4 ); return true; }
		if (HX_FIELD_EQ(inName,"postInit") ) { outValue = postInit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keyPress") ) { outValue = keyPress_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchEnd") ) { outValue = touchEnd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shutdown") ) { outValue = shutdown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initKore") ) { outValue = initKore_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"screenDpi") ) { outValue = screenDpi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lockMouse") ) { outValue = lockMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseDown") ) { outValue = mouseDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseMove") ) { outValue = mouseMove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchMove") ) { outValue = touchMove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dropFiles") ) { outValue = dropFiles_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mouseWheel") ) { outValue = mouseWheel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseLeave") ) { outValue = mouseLeave_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"touchStart") ) { outValue = touchStart_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"foreground") ) { outValue = foreground_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"background") ) { outValue = background_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initWindow") ) { outValue = initWindow_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getKeyboard") ) { outValue = getKeyboard_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"windowWidth") ) { outValue = windowWidth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSystemId") ) { outValue = getSystemId_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unlockMouse") ) { outValue = unlockMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initWindow2") ) { outValue = initWindow2_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"windowHeight") ) { outValue = windowHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"framebuffers") ) { outValue = ( framebuffers ); return true; }
		if (HX_FIELD_EQ(inName,"loadFinished") ) { outValue = loadFinished_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"canLockMouse") ) { outValue = canLockMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1Axis") ) { outValue = gamepad1Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2Axis") ) { outValue = gamepad2Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3Axis") ) { outValue = gamepad3Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4Axis") ) { outValue = gamepad4Axis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isFullscreen") ) { outValue = isFullscreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getGamepadId") ) { outValue = getGamepadId_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isMouseLocked") ) { outValue = isMouseLocked_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"previousWidth") ) { outValue = ( previousWidth ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getRefreshRate") ) { outValue = getRefreshRate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1Button") ) { outValue = gamepad1Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2Button") ) { outValue = gamepad2Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3Button") ) { outValue = gamepad3Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4Button") ) { outValue = gamepad4Button_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"previousHeight") ) { outValue = ( previousHeight ); return true; }
		if (HX_FIELD_EQ(inName,"exitFullscreen") ) { outValue = exitFullscreen_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"requestShutdown") ) { outValue = requestShutdown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setKeepScreenOn") ) { outValue = setKeepScreenOn_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hideSystemCursor") ) { outValue = hideSystemCursor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"showSystemCursor") ) { outValue = showSystemCursor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"translateDisplay") ) { outValue = translateDisplay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"changeResolution") ) { outValue = changeResolution_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getScreenRotation") ) { outValue = getScreenRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"translatePosition") ) { outValue = translatePosition_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"requestFullscreen") ) { outValue = requestFullscreen_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"mouseLockListeners") ) { outValue = ( mouseLockListeners ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"translateWindowMode") ) { outValue = translateWindowMode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fullscreenListeners") ) { outValue = ( fullscreenListeners ); return true; }
		if (HX_FIELD_EQ(inName,"canSwitchFullscreen") ) { outValue = canSwitchFullscreen_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"translateTextureFormat") ) { outValue = translateTextureFormat_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"notifyOfMouseLockChange") ) { outValue = notifyOfMouseLockChange_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"notifyOfFullscreenChange") ) { outValue = notifyOfFullscreenChange_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"removeFromMouseLockChange") ) { outValue = removeFromMouseLockChange_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"translateDepthBufferFormat") ) { outValue = translateDepthBufferFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeFromFullscreenChange") ) { outValue = removeFromFullscreenChange_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"translateStencilBufferFormat") ) { outValue = translateStencilBufferFormat_dyn(); return true; }
	}
	return false;
}

bool SystemImpl_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pen") ) { pen=ioValue.Cast<  ::kha::input::Pen >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { mouse=ioValue.Cast<  ::kha::input::Mouse >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mouseX") ) { mouseX=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { mouseY=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"needs3d") ) { needs3d=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"surface") ) { surface=ioValue.Cast<  ::kha::input::Surface >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { keyboard=ioValue.Cast<  ::kha::input::Keyboard >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad1") ) { gamepad1=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad2") ) { gamepad2=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad3") ) { gamepad3=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		if (HX_FIELD_EQ(inName,"gamepad4") ) { gamepad4=ioValue.Cast<  ::kha::input::Gamepad >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"framebuffers") ) { framebuffers=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"previousWidth") ) { previousWidth=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"previousHeight") ) { previousHeight=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"mouseLockListeners") ) { mouseLockListeners=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"fullscreenListeners") ) { fullscreenListeners=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SystemImpl_obj_sMemberStorageInfo = 0;
static hx::StaticInfo SystemImpl_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &SystemImpl_obj::needs3d,HX_HCSTRING("needs3d","\x6e","\xd5","\x2d","\xaa")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &SystemImpl_obj::framebuffers,HX_HCSTRING("framebuffers","\xe6","\x3a","\xca","\x84")},
	{hx::fsObject /*::kha::input::Keyboard*/ ,(void *) &SystemImpl_obj::keyboard,HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68")},
	{hx::fsObject /*::kha::input::Mouse*/ ,(void *) &SystemImpl_obj::mouse,HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c")},
	{hx::fsObject /*::kha::input::Pen*/ ,(void *) &SystemImpl_obj::pen,HX_HCSTRING("pen","\xd9","\x54","\x55","\x00")},
	{hx::fsObject /*::kha::input::Gamepad*/ ,(void *) &SystemImpl_obj::gamepad1,HX_HCSTRING("gamepad1","\x70","\xac","\x9e","\xcb")},
	{hx::fsObject /*::kha::input::Gamepad*/ ,(void *) &SystemImpl_obj::gamepad2,HX_HCSTRING("gamepad2","\x71","\xac","\x9e","\xcb")},
	{hx::fsObject /*::kha::input::Gamepad*/ ,(void *) &SystemImpl_obj::gamepad3,HX_HCSTRING("gamepad3","\x72","\xac","\x9e","\xcb")},
	{hx::fsObject /*::kha::input::Gamepad*/ ,(void *) &SystemImpl_obj::gamepad4,HX_HCSTRING("gamepad4","\x73","\xac","\x9e","\xcb")},
	{hx::fsObject /*::kha::input::Surface*/ ,(void *) &SystemImpl_obj::surface,HX_HCSTRING("surface","\x2d","\x66","\x49","\x5d")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &SystemImpl_obj::mouseLockListeners,HX_HCSTRING("mouseLockListeners","\xaf","\xda","\x5c","\x62")},
	{hx::fsInt,(void *) &SystemImpl_obj::mouseX,HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc")},
	{hx::fsInt,(void *) &SystemImpl_obj::mouseY,HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &SystemImpl_obj::fullscreenListeners,HX_HCSTRING("fullscreenListeners","\xc4","\x6b","\x7f","\xf5")},
	{hx::fsInt,(void *) &SystemImpl_obj::previousWidth,HX_HCSTRING("previousWidth","\x4f","\xc2","\x56","\xf1")},
	{hx::fsInt,(void *) &SystemImpl_obj::previousHeight,HX_HCSTRING("previousHeight","\x7e","\xbb","\xe2","\xf0")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void SystemImpl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SystemImpl_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::needs3d,"needs3d");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::framebuffers,"framebuffers");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::keyboard,"keyboard");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouse,"mouse");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::pen,"pen");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad1,"gamepad1");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad2,"gamepad2");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad3,"gamepad3");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::gamepad4,"gamepad4");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::surface,"surface");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouseLockListeners,"mouseLockListeners");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouseX,"mouseX");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::mouseY,"mouseY");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::fullscreenListeners,"fullscreenListeners");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::previousWidth,"previousWidth");
	HX_MARK_MEMBER_NAME(SystemImpl_obj::previousHeight,"previousHeight");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SystemImpl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::needs3d,"needs3d");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::framebuffers,"framebuffers");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::keyboard,"keyboard");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouse,"mouse");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::pen,"pen");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad1,"gamepad1");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad2,"gamepad2");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad3,"gamepad3");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::gamepad4,"gamepad4");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::surface,"surface");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouseLockListeners,"mouseLockListeners");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouseX,"mouseX");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::mouseY,"mouseY");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::fullscreenListeners,"fullscreenListeners");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::previousWidth,"previousWidth");
	HX_VISIT_MEMBER_NAME(SystemImpl_obj::previousHeight,"previousHeight");
};

#endif

hx::Class SystemImpl_obj::__mClass;

static ::String SystemImpl_obj_sStaticFields[] = {
	HX_HCSTRING("needs3d","\x6e","\xd5","\x2d","\xaa"),
	HX_HCSTRING("getMouse","\xaf","\x25","\x3c","\x6c"),
	HX_HCSTRING("getPen","\xe3","\x8d","\x24","\xa3"),
	HX_HCSTRING("getKeyboard","\x5d","\x7f","\x1d","\x8e"),
	HX_HCSTRING("getTime","\xc3","\x7b","\x7f","\x1f"),
	HX_HCSTRING("windowWidth","\xf6","\x4b","\x35","\xbb"),
	HX_HCSTRING("windowHeight","\xf7","\xa3","\xbc","\xc9"),
	HX_HCSTRING("screenDpi","\x51","\xab","\xf0","\x37"),
	HX_HCSTRING("getVsync","\x5b","\x3d","\x7f","\x9d"),
	HX_HCSTRING("getRefreshRate","\x65","\x35","\xde","\xc7"),
	HX_HCSTRING("getScreenRotation","\x00","\x30","\x14","\x62"),
	HX_HCSTRING("getSystemId","\x60","\x73","\xdd","\x87"),
	HX_HCSTRING("requestShutdown","\x05","\xff","\x38","\x10"),
	HX_HCSTRING("framebuffers","\xe6","\x3a","\xca","\x84"),
	HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68"),
	HX_HCSTRING("mouse","\x25","\x16","\x65","\x0c"),
	HX_HCSTRING("pen","\xd9","\x54","\x55","\x00"),
	HX_HCSTRING("gamepad1","\x70","\xac","\x9e","\xcb"),
	HX_HCSTRING("gamepad2","\x71","\xac","\x9e","\xcb"),
	HX_HCSTRING("gamepad3","\x72","\xac","\x9e","\xcb"),
	HX_HCSTRING("gamepad4","\x73","\xac","\x9e","\xcb"),
	HX_HCSTRING("surface","\x2d","\x66","\x49","\x5d"),
	HX_HCSTRING("mouseLockListeners","\xaf","\xda","\x5c","\x62"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("initEx","\xa3","\x5b","\x4c","\x97"),
	HX_HCSTRING("postInit","\x90","\x9b","\xfa","\x03"),
	HX_HCSTRING("loadFinished","\xb8","\x7f","\x77","\x4e"),
	HX_HCSTRING("lockMouse","\x3a","\xd6","\x46","\x47"),
	HX_HCSTRING("unlockMouse","\xc1","\x5c","\xed","\xcc"),
	HX_HCSTRING("canLockMouse","\x0a","\x40","\x67","\xca"),
	HX_HCSTRING("isMouseLocked","\x45","\x89","\x73","\x58"),
	HX_HCSTRING("notifyOfMouseLockChange","\xe0","\xa9","\xee","\x22"),
	HX_HCSTRING("removeFromMouseLockChange","\x12","\x1e","\x2a","\x14"),
	HX_HCSTRING("hideSystemCursor","\x07","\x93","\x7b","\x81"),
	HX_HCSTRING("showSystemCursor","\xc2","\x1f","\x8d","\xc0"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("keyDown","\xa1","\x69","\x47","\x9c"),
	HX_HCSTRING("keyUp","\xda","\xb9","\xfe","\xde"),
	HX_HCSTRING("keyPress","\x64","\xf9","\xf1","\x0c"),
	HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc"),
	HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc"),
	HX_HCSTRING("mouseDown","\x27","\xb1","\xc2","\xee"),
	HX_HCSTRING("mouseUp","\xe0","\xf3","\x72","\xc0"),
	HX_HCSTRING("mouseMove","\xd6","\x9b","\xb5","\xf4"),
	HX_HCSTRING("mouseWheel","\x36","\x28","\x87","\xe7"),
	HX_HCSTRING("mouseLeave","\x92","\x28","\x20","\x90"),
	HX_HCSTRING("penDown","\xdb","\x59","\xca","\x16"),
	HX_HCSTRING("penUp","\x94","\x47","\xf7","\xbf"),
	HX_HCSTRING("penMove","\x8a","\x44","\xbd","\x1c"),
	HX_HCSTRING("gamepad1Axis","\x31","\xed","\x97","\x86"),
	HX_HCSTRING("gamepad1Button","\x82","\x76","\xc0","\x01"),
	HX_HCSTRING("gamepad2Axis","\xb2","\x81","\xfe","\x19"),
	HX_HCSTRING("gamepad2Button","\x43","\xed","\x55","\x2b"),
	HX_HCSTRING("gamepad3Axis","\x33","\x16","\x65","\xad"),
	HX_HCSTRING("gamepad3Button","\x04","\x64","\xeb","\x54"),
	HX_HCSTRING("gamepad4Axis","\xb4","\xaa","\xcb","\x40"),
	HX_HCSTRING("gamepad4Button","\xc5","\xda","\x80","\x7e"),
	HX_HCSTRING("touchStart","\x23","\x58","\x9c","\x7d"),
	HX_HCSTRING("touchEnd","\x5c","\xc5","\x09","\x00"),
	HX_HCSTRING("touchMove","\x70","\x72","\xcd","\x0d"),
	HX_HCSTRING("foreground","\xc3","\x18","\xef","\x10"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("shutdown","\x96","\xfc","\x0b","\x6b"),
	HX_HCSTRING("dropFiles","\xc8","\x0b","\x51","\x42"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("cut","\x82","\x85","\x4b","\x00"),
	HX_HCSTRING("paste","\x53","\x53","\x56","\xbd"),
	HX_HCSTRING("initKore","\x87","\xa1","\xc5","\x4b"),
	HX_HCSTRING("translatePosition","\x17","\x32","\xe9","\x09"),
	HX_HCSTRING("translateDisplay","\x94","\x20","\x33","\xc8"),
	HX_HCSTRING("translateWindowMode","\x61","\x94","\xff","\x97"),
	HX_HCSTRING("translateDepthBufferFormat","\xcc","\x86","\xbd","\x83"),
	HX_HCSTRING("translateStencilBufferFormat","\xc5","\xbd","\x46","\xa2"),
	HX_HCSTRING("translateTextureFormat","\x44","\xe2","\x8b","\x2d"),
	HX_HCSTRING("initWindow2","\x12","\x4d","\xdf","\xa0"),
	HX_HCSTRING("initWindow","\x20","\xef","\xd1","\x56"),
	HX_HCSTRING("fullscreenListeners","\xc4","\x6b","\x7f","\xf5"),
	HX_HCSTRING("previousWidth","\x4f","\xc2","\x56","\xf1"),
	HX_HCSTRING("previousHeight","\x7e","\xbb","\xe2","\xf0"),
	HX_HCSTRING("canSwitchFullscreen","\x7f","\x71","\x5d","\x32"),
	HX_HCSTRING("isFullscreen","\xc5","\x62","\xd3","\xcb"),
	HX_HCSTRING("requestFullscreen","\x6a","\xf6","\xf9","\x05"),
	HX_HCSTRING("exitFullscreen","\xf9","\x86","\x4e","\xcd"),
	HX_HCSTRING("notifyOfFullscreenChange","\x6b","\x9e","\x48","\xa5"),
	HX_HCSTRING("removeFromFullscreenChange","\xf9","\xd5","\x12","\xc8"),
	HX_HCSTRING("changeResolution","\xbc","\xf6","\xfa","\xf9"),
	HX_HCSTRING("setKeepScreenOn","\x12","\x20","\xde","\x37"),
	HX_HCSTRING("loadUrl","\xe9","\xa4","\xe3","\x08"),
	HX_HCSTRING("getGamepadId","\x66","\xe7","\x8e","\x6e"),
	::String(null())
};

void SystemImpl_obj::__register()
{
	hx::Object *dummy = new SystemImpl_obj;
	SystemImpl_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("kha.SystemImpl","\x99","\x8d","\x13","\xb1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SystemImpl_obj::__GetStatic;
	__mClass->mSetStaticField = &SystemImpl_obj::__SetStatic;
	__mClass->mMarkFunc = SystemImpl_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SystemImpl_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SystemImpl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SystemImpl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SystemImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SystemImpl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SystemImpl_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_48_boot)
HXDLIN(  48)		needs3d = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_105_boot)
HXDLIN( 105)		framebuffers = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_581_boot)
HXDLIN( 581)		fullscreenListeners = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_582_boot)
HXDLIN( 582)		previousWidth = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f30f18a4cd4a5f10_583_boot)
HXDLIN( 583)		previousHeight = (int)0;
            	}
}

} // end namespace kha
