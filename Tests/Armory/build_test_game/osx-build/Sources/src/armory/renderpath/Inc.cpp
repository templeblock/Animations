// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_armory_renderpath_Inc
#include <armory/renderpath/Inc.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_RenderPath
#include <iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_RenderTarget
#include <iron/RenderTarget.h>
#endif
#ifndef INCLUDED_iron_RenderTargetRaw
#include <iron/RenderTargetRaw.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_LampData
#include <iron/data/LampData.h>
#endif
#ifndef INCLUDED_iron_object_LampObject
#include <iron/object/LampObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_35_init,"armory.renderpath.Inc","init",0x809f063f,"armory.renderpath.Inc.init","armory/renderpath/Inc.hx",35,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_38_bindShadowMap,"armory.renderpath.Inc","bindShadowMap",0xe9c6c810,"armory.renderpath.Inc.bindShadowMap","armory/renderpath/Inc.hx",38,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_57_shadowMapName,"armory.renderpath.Inc","shadowMapName",0x307d19f8,"armory.renderpath.Inc.shadowMapName","armory/renderpath/Inc.hx",57,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_60_getShadowMap,"armory.renderpath.Inc","getShadowMap",0x826fd555,"armory.renderpath.Inc.getShadowMap","armory/renderpath/Inc.hx",60,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_196_getShadowmapSize,"armory.renderpath.Inc","getShadowmapSize",0x9a6948d6,"armory.renderpath.Inc.getShadowmapSize","armory/renderpath/Inc.hx",196,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_222_getVoxelRes,"armory.renderpath.Inc","getVoxelRes",0xad2ee321,"armory.renderpath.Inc.getVoxelRes","armory/renderpath/Inc.hx",222,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_234_getVoxelResZ,"armory.renderpath.Inc","getVoxelResZ",0xdbd7da19,"armory.renderpath.Inc.getVoxelResZ","armory/renderpath/Inc.hx",234,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_246_getSuperSampling,"armory.renderpath.Inc","getSuperSampling",0x95fdd7bb,"armory.renderpath.Inc.getSuperSampling","armory/renderpath/Inc.hx",246,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_252_getHdrFormat,"armory.renderpath.Inc","getHdrFormat",0x4e48d086,"armory.renderpath.Inc.getHdrFormat","armory/renderpath/Inc.hx",252,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_262_getDisplayp,"armory.renderpath.Inc","getDisplayp",0x03cd1b55,"armory.renderpath.Inc.getDisplayp","armory/renderpath/Inc.hx",262,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_414_drawShadowMap,"armory.renderpath.Inc","drawShadowMap",0x7f3e10e9,"armory.renderpath.Inc.drawShadowMap","armory/renderpath/Inc.hx",414,0x90d3121f)
namespace armory{
namespace renderpath{

void Inc_obj::__construct() { }

Dynamic Inc_obj::__CreateEmpty() { return new Inc_obj; }

void *Inc_obj::_hx_vtable = 0;

Dynamic Inc_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Inc_obj > _hx_result = new Inc_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Inc_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7c22cf09;
}

 ::iron::RenderPath Inc_obj::path;

void Inc_obj::init( ::iron::RenderPath _path){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_35_init)
HXDLIN(  35)		::armory::renderpath::Inc_obj::path = _path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Inc_obj,init,(void))

void Inc_obj::bindShadowMap(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_38_bindShadowMap)
HXLINE(  39)		::String target = ::armory::renderpath::Inc_obj::shadowMapName();
HXLINE(  40)		if ((target == HX_("shadowMapCube",b1,0d,d0,fd))) {
HXLINE(  45)			::armory::renderpath::Inc_obj::path->bindTarget(HX_("shadowMapCube",b1,0d,d0,fd),HX_("shadowMapCube",b1,0d,d0,fd));
            		}
            		else {
HXLINE(  52)			::armory::renderpath::Inc_obj::path->bindTarget(HX_("shadowMap",9c,26,a0,f4),HX_("shadowMap",9c,26,a0,f4));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,bindShadowMap,(void))

::String Inc_obj::shadowMapName(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_57_shadowMapName)
HXDLIN(  57)		 ::iron::RenderPath _this = ::armory::renderpath::Inc_obj::path;
HXDLIN(  57)		 ::iron::object::LampObject _hx_tmp;
HXDLIN(  57)		if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXDLIN(  57)			_hx_tmp = ::iron::Scene_obj::active->lamps->__get(::armory::renderpath::Inc_obj::path->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            		}
            		else {
HXDLIN(  57)			_hx_tmp = null();
            		}
HXDLIN(  57)		if (( (bool)(_hx_tmp->data->raw->__Field(HX_("shadowmap_cube",98,00,eb,51),hx::paccDynamic)) )) {
HXDLIN(  57)			return HX_("shadowMapCube",b1,0d,d0,fd);
            		}
            		else {
HXDLIN(  57)			return HX_("shadowMap",9c,26,a0,f4);
            		}
HXDLIN(  57)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,shadowMapName,return )

::String Inc_obj::getShadowMap(){
            	HX_GC_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_60_getShadowMap)
HXLINE(  61)		::String target = ::armory::renderpath::Inc_obj::shadowMapName();
HXLINE(  62)		 ::iron::RenderTarget rt = ::armory::renderpath::Inc_obj::path->renderTargets->get(target).StaticCast<  ::iron::RenderTarget >();
HXLINE(  64)		if (hx::IsNull( rt )) {
HXLINE(  65)			 ::iron::RenderPath _this = ::armory::renderpath::Inc_obj::path;
HXDLIN(  65)			 ::iron::object::LampObject _hx_tmp;
HXDLIN(  65)			if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXLINE(  65)				_hx_tmp = ::iron::Scene_obj::active->lamps->__get(::armory::renderpath::Inc_obj::path->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            			}
            			else {
HXLINE(  65)				_hx_tmp = null();
            			}
HXDLIN(  65)			if (( (bool)(_hx_tmp->data->raw->__Field(HX_("shadowmap_cube",98,00,eb,51),hx::paccDynamic)) )) {
HXLINE(  67)				 ::iron::RenderPath _this1 = ::armory::renderpath::Inc_obj::path;
HXDLIN(  67)				 ::iron::object::LampObject size;
HXDLIN(  67)				if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXLINE(  67)					size = ::iron::Scene_obj::active->lamps->__get(::armory::renderpath::Inc_obj::path->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            				}
            				else {
HXLINE(  67)					size = null();
            				}
HXDLIN(  67)				int size1 = ::Std_obj::_hx_int(( (Float)(size->data->raw->__Field(HX_("shadowmap_size",64,64,75,5c),hx::paccDynamic)) ));
HXLINE(  68)				 ::iron::RenderTargetRaw t =  ::iron::RenderTargetRaw_obj::__alloc( HX_CTX );
HXLINE(  69)				t->name = target;
HXLINE(  70)				t->width = size1;
HXLINE(  71)				t->height = size1;
HXLINE(  72)				t->format = HX_("DEPTH16",88,92,1e,ea);
HXLINE(  73)				t->is_cubemap = true;
HXLINE(  74)				rt = ::armory::renderpath::Inc_obj::path->createRenderTarget(t);
            			}
            			else {
HXLINE(  77)				 ::iron::RenderPath _this2 = ::armory::renderpath::Inc_obj::path;
HXDLIN(  77)				 ::iron::object::LampObject sizew;
HXDLIN(  77)				if ((::iron::Scene_obj::active->lamps->length > (int)0)) {
HXLINE(  77)					sizew = ::iron::Scene_obj::active->lamps->__get(::armory::renderpath::Inc_obj::path->currentLampIndex).StaticCast<  ::iron::object::LampObject >();
            				}
            				else {
HXLINE(  77)					sizew = null();
            				}
HXDLIN(  77)				 ::Dynamic sizew1 = sizew->data->raw->__Field(HX_("shadowmap_size",64,64,75,5c),hx::paccDynamic);
HXLINE(  78)				 ::Dynamic sizeh = sizew1;
HXLINE(  80)				sizew1 = (sizeh * ::iron::object::LampObject_obj::cascadeCount);
HXLINE(  82)				 ::iron::RenderTargetRaw t1 =  ::iron::RenderTargetRaw_obj::__alloc( HX_CTX );
HXLINE(  83)				t1->name = target;
HXLINE(  84)				t1->width = sizew1;
HXLINE(  85)				t1->height = sizeh;
HXLINE(  86)				t1->format = HX_("DEPTH16",88,92,1e,ea);
HXLINE(  87)				rt = ::armory::renderpath::Inc_obj::path->createRenderTarget(t1);
            			}
            		}
HXLINE(  90)		return target;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getShadowMap,return )

int Inc_obj::getShadowmapSize(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_196_getShadowmapSize)
HXDLIN( 196)		return (int)1024;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getShadowmapSize,return )

int Inc_obj::getVoxelRes(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_222_getVoxelRes)
HXDLIN( 222)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getVoxelRes,return )

Float Inc_obj::getVoxelResZ(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_234_getVoxelResZ)
HXDLIN( 234)		return ((Float)0.0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getVoxelResZ,return )

Float Inc_obj::getSuperSampling(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_246_getSuperSampling)
HXDLIN( 246)		return (int)1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getSuperSampling,return )

::String Inc_obj::getHdrFormat(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_252_getHdrFormat)
HXDLIN( 252)		return HX_("RGBA64",f2,5c,88,d6);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getHdrFormat,return )

 ::Dynamic Inc_obj::getDisplayp(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_262_getDisplayp)
HXDLIN( 262)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getDisplayp,return )

void Inc_obj::drawShadowMap( ::iron::object::LampObject l){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_414_drawShadowMap)
HXLINE( 416)		int faces;
HXDLIN( 416)		if (( (bool)(l->data->raw->__Field(HX_("shadowmap_cube",98,00,eb,51),hx::paccDynamic)) )) {
HXLINE( 416)			faces = (int)6;
            		}
            		else {
HXLINE( 416)			faces = (int)1;
            		}
HXLINE( 417)		{
HXLINE( 417)			int _g1 = (int)0;
HXDLIN( 417)			int _g = faces;
HXDLIN( 417)			while((_g1 < _g)){
HXLINE( 417)				_g1 = (_g1 + (int)1);
HXDLIN( 417)				int j = (_g1 - (int)1);
HXLINE( 418)				if ((faces > (int)1)) {
HXLINE( 418)					::armory::renderpath::Inc_obj::path->currentFace = j;
            				}
HXLINE( 419)				 ::iron::RenderPath _hx_tmp = ::armory::renderpath::Inc_obj::path;
HXDLIN( 419)				_hx_tmp->setTarget(::armory::renderpath::Inc_obj::getShadowMap(),null(),null());
HXLINE( 420)				::armory::renderpath::Inc_obj::path->clearTarget(null(),((Float)1.0));
HXLINE( 421)				::armory::renderpath::Inc_obj::path->drawMeshes(HX_("shadowmap",bc,6e,b8,f4));
            			}
            		}
HXLINE( 423)		::armory::renderpath::Inc_obj::path->currentFace = (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Inc_obj,drawShadowMap,(void))


Inc_obj::Inc_obj()
{
}

bool Inc_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { outValue = ( path ); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getVoxelRes") ) { outValue = getVoxelRes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDisplayp") ) { outValue = getDisplayp_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getShadowMap") ) { outValue = getShadowMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVoxelResZ") ) { outValue = getVoxelResZ_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getHdrFormat") ) { outValue = getHdrFormat_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bindShadowMap") ) { outValue = bindShadowMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shadowMapName") ) { outValue = shadowMapName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawShadowMap") ) { outValue = drawShadowMap_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getShadowmapSize") ) { outValue = getShadowmapSize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSuperSampling") ) { outValue = getSuperSampling_dyn(); return true; }
	}
	return false;
}

bool Inc_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=ioValue.Cast<  ::iron::RenderPath >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Inc_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Inc_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::RenderPath*/ ,(void *) &Inc_obj::path,HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Inc_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Inc_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Inc_obj::path,"path");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Inc_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Inc_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Inc_obj::path,"path");
};

#endif

hx::Class Inc_obj::__mClass;

static ::String Inc_obj_sStaticFields[] = {
	HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("bindShadowMap","\x1f","\xf1","\x4f","\xbe"),
	HX_HCSTRING("shadowMapName","\x07","\x43","\x06","\x05"),
	HX_HCSTRING("getShadowMap","\x26","\xc3","\xf6","\x03"),
	HX_HCSTRING("getShadowmapSize","\x27","\xf3","\x29","\xa5"),
	HX_HCSTRING("getVoxelRes","\x70","\x5a","\xf0","\xf4"),
	HX_HCSTRING("getVoxelResZ","\xea","\xc7","\x5e","\x5d"),
	HX_HCSTRING("getSuperSampling","\x0c","\x82","\xbe","\xa0"),
	HX_HCSTRING("getHdrFormat","\x57","\xbe","\xcf","\xcf"),
	HX_HCSTRING("getDisplayp","\xa4","\x92","\x8e","\x4b"),
	HX_HCSTRING("drawShadowMap","\xf8","\x39","\xc7","\x53"),
	::String(null())
};

void Inc_obj::__register()
{
	hx::Object *dummy = new Inc_obj;
	Inc_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.renderpath.Inc","\x9f","\x63","\xc2","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Inc_obj::__GetStatic;
	__mClass->mSetStaticField = &Inc_obj::__SetStatic;
	__mClass->mMarkFunc = Inc_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Inc_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Inc_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Inc_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Inc_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Inc_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace renderpath
