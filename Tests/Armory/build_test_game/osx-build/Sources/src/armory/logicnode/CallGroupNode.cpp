// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_armory_logicnode_CallGroupNode
#include <armory/logicnode/CallGroupNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_546b22143387960f_3_new,"armory.logicnode.CallGroupNode","new",0x0c7a7fd3,"armory.logicnode.CallGroupNode.new","armory/logicnode/CallGroupNode.hx",3,0x4f722a3f)
HX_LOCAL_STACK_FRAME(_hx_pos_546b22143387960f_13_run,"armory.logicnode.CallGroupNode","run",0x0c7d96be,"armory.logicnode.CallGroupNode.run","armory/logicnode/CallGroupNode.hx",13,0x4f722a3f)
namespace armory{
namespace logicnode{

void CallGroupNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_546b22143387960f_3_new)
HXLINE(   6)		this->callTree = null();
HXLINE(   9)		super::__construct(tree);
            	}

Dynamic CallGroupNode_obj::__CreateEmpty() { return new CallGroupNode_obj; }

void *CallGroupNode_obj::_hx_vtable = 0;

Dynamic CallGroupNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CallGroupNode_obj > _hx_result = new CallGroupNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CallGroupNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x53d8fca9;
	}
}

void CallGroupNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_546b22143387960f_13_run)
HXLINE(  15)		if (hx::IsNull( this->callTree )) {
HXLINE(  16)			hx::Class classType = ::Type_obj::resolveClass(this->property0);
HXLINE(  17)			this->callTree = ( ( ::armory::logicnode::LogicTree)(::Type_obj::createInstance(classType,::cpp::VirtualArray_obj::__new(0))) );
HXLINE(  18)			this->callTree->object = this->tree->object;
HXLINE(  19)			this->callTree->add();
            		}
HXLINE(  22)		if (hx::IsNotNull( this->callTree->_init )) {
HXLINE(  22)			this->callTree->_init->__get((int)0)();
            		}
HXLINE(  24)		this->runOutputs((int)0);
            	}



hx::ObjectPtr< CallGroupNode_obj > CallGroupNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< CallGroupNode_obj > __this = new CallGroupNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< CallGroupNode_obj > CallGroupNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	CallGroupNode_obj *__this = (CallGroupNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CallGroupNode_obj), true, "armory.logicnode.CallGroupNode"));
	*(void **)__this = CallGroupNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

CallGroupNode_obj::CallGroupNode_obj()
{
}

void CallGroupNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CallGroupNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	HX_MARK_MEMBER_NAME(callTree,"callTree");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CallGroupNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	HX_VISIT_MEMBER_NAME(callTree,"callTree");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CallGroupNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callTree") ) { return hx::Val( callTree ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CallGroupNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"callTree") ) { callTree=inValue.Cast<  ::armory::logicnode::LogicTree >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CallGroupNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("callTree","\x1c","\x85","\xd2","\x75"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CallGroupNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(CallGroupNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{hx::fsObject /*::armory::logicnode::LogicTree*/ ,(int)offsetof(CallGroupNode_obj,callTree),HX_HCSTRING("callTree","\x1c","\x85","\xd2","\x75")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CallGroupNode_obj_sStaticStorageInfo = 0;
#endif

static ::String CallGroupNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("callTree","\x1c","\x85","\xd2","\x75"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void CallGroupNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CallGroupNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CallGroupNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CallGroupNode_obj::__mClass,"__mClass");
};

#endif

hx::Class CallGroupNode_obj::__mClass;

void CallGroupNode_obj::__register()
{
	hx::Object *dummy = new CallGroupNode_obj;
	CallGroupNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.CallGroupNode","\x61","\x9a","\x0b","\x7d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CallGroupNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CallGroupNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CallGroupNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CallGroupNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CallGroupNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CallGroupNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
