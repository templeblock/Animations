// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SetSceneNode
#include <armory/logicnode/SetSceneNode.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6868c201fd2af60f_10_new,"armory.logicnode.SetSceneNode","new",0x96a51d20,"armory.logicnode.SetSceneNode.new","armory/logicnode/SetSceneNode.hx",10,0x91a5754e)
HX_LOCAL_STACK_FRAME(_hx_pos_6868c201fd2af60f_16_run,"armory.logicnode.SetSceneNode","run",0x96a8340b,"armory.logicnode.SetSceneNode.run","armory/logicnode/SetSceneNode.hx",16,0x91a5754e)
HX_LOCAL_STACK_FRAME(_hx_pos_6868c201fd2af60f_13_run,"armory.logicnode.SetSceneNode","run",0x96a8340b,"armory.logicnode.SetSceneNode.run","armory/logicnode/SetSceneNode.hx",13,0x91a5754e)
HX_LOCAL_STACK_FRAME(_hx_pos_6868c201fd2af60f_23_get,"armory.logicnode.SetSceneNode","get",0x969fcd56,"armory.logicnode.SetSceneNode.get","armory/logicnode/SetSceneNode.hx",23,0x91a5754e)
namespace armory{
namespace logicnode{

void SetSceneNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_6868c201fd2af60f_10_new)
HXDLIN(  10)		super::__construct(tree);
            	}

Dynamic SetSceneNode_obj::__CreateEmpty() { return new SetSceneNode_obj; }

void *SetSceneNode_obj::_hx_vtable = 0;

Dynamic SetSceneNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SetSceneNode_obj > _hx_result = new SetSceneNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SetSceneNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x7fa7b276;
	}
}

void SetSceneNode_obj::run(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::armory::logicnode::SetSceneNode,_gthis) HXARGC(1)
            		void _hx_run( ::iron::object::Object o){
            			HX_STACKFRAME(&_hx_pos_6868c201fd2af60f_16_run)
HXLINE(  17)			_gthis->root = o;
HXLINE(  18)			_gthis->runOutputs((int)0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_6868c201fd2af60f_13_run)
HXDLIN(  13)		 ::armory::logicnode::SetSceneNode _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  14)		::String sceneName = ( (::String)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  16)		::iron::Scene_obj::setActive(sceneName, ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


 ::Dynamic SetSceneNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_6868c201fd2af60f_23_get)
HXDLIN(  23)		return this->root;
            	}



hx::ObjectPtr< SetSceneNode_obj > SetSceneNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SetSceneNode_obj > __this = new SetSceneNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SetSceneNode_obj > SetSceneNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SetSceneNode_obj *__this = (SetSceneNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SetSceneNode_obj), true, "armory.logicnode.SetSceneNode"));
	*(void **)__this = SetSceneNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SetSceneNode_obj::SetSceneNode_obj()
{
}

void SetSceneNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SetSceneNode);
	HX_MARK_MEMBER_NAME(root,"root");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SetSceneNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(root,"root");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SetSceneNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SetSceneNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::iron::object::Object >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SetSceneNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SetSceneNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(SetSceneNode_obj,root),HX_HCSTRING("root","\x22","\xee","\xae","\x4b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SetSceneNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SetSceneNode_obj_sMemberFields[] = {
	HX_HCSTRING("root","\x22","\xee","\xae","\x4b"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void SetSceneNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SetSceneNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SetSceneNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SetSceneNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SetSceneNode_obj::__mClass;

void SetSceneNode_obj::__register()
{
	hx::Object *dummy = new SetSceneNode_obj;
	SetSceneNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SetSceneNode","\x2e","\x4d","\xd0","\x78");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SetSceneNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SetSceneNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SetSceneNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SetSceneNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SetSceneNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SetSceneNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
