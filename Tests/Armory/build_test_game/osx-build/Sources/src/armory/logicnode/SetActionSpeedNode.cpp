// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SetActionSpeedNode
#include <armory/logicnode/SetActionSpeedNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_BoneAnimation
#include <iron/object/BoneAnimation.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_091192a5ab76d232_8_new,"armory.logicnode.SetActionSpeedNode","new",0xaea0d8c5,"armory.logicnode.SetActionSpeedNode.new","armory/logicnode/SetActionSpeedNode.hx",8,0x4d8c07c9)
HX_LOCAL_STACK_FRAME(_hx_pos_091192a5ab76d232_11_run,"armory.logicnode.SetActionSpeedNode","run",0xaea3efb0,"armory.logicnode.SetActionSpeedNode.run","armory/logicnode/SetActionSpeedNode.hx",11,0x4d8c07c9)
namespace armory{
namespace logicnode{

void SetActionSpeedNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_091192a5ab76d232_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic SetActionSpeedNode_obj::__CreateEmpty() { return new SetActionSpeedNode_obj; }

void *SetActionSpeedNode_obj::_hx_vtable = 0;

Dynamic SetActionSpeedNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SetActionSpeedNode_obj > _hx_result = new SetActionSpeedNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SetActionSpeedNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x797f60d3;
	}
}

void SetActionSpeedNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_091192a5ab76d232_11_run)
HXLINE(  12)		 ::iron::object::Object object = ( ( ::iron::object::Object)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  13)		Float speed = ( (Float)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  15)		if (hx::IsNull( object )) {
HXLINE(  15)			return;
            		}
HXLINE(  16)		 ::iron::object::Animation animation = object->animation;
HXLINE(  17)		if (hx::IsNull( animation )) {
HXLINE(  17)			animation = object->getParentArmature(object->name);
            		}
HXLINE(  19)		animation->speed = speed;
HXLINE(  21)		this->super::run();
            	}



hx::ObjectPtr< SetActionSpeedNode_obj > SetActionSpeedNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SetActionSpeedNode_obj > __this = new SetActionSpeedNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SetActionSpeedNode_obj > SetActionSpeedNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SetActionSpeedNode_obj *__this = (SetActionSpeedNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SetActionSpeedNode_obj), true, "armory.logicnode.SetActionSpeedNode"));
	*(void **)__this = SetActionSpeedNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SetActionSpeedNode_obj::SetActionSpeedNode_obj()
{
}

hx::Val SetActionSpeedNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SetActionSpeedNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SetActionSpeedNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SetActionSpeedNode_obj_sMemberFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void SetActionSpeedNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SetActionSpeedNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SetActionSpeedNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SetActionSpeedNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SetActionSpeedNode_obj::__mClass;

void SetActionSpeedNode_obj::__register()
{
	hx::Object *dummy = new SetActionSpeedNode_obj;
	SetActionSpeedNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SetActionSpeedNode","\x53","\x12","\x32","\x8e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SetActionSpeedNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SetActionSpeedNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SetActionSpeedNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SetActionSpeedNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SetActionSpeedNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SetActionSpeedNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
