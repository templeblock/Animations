// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1e865c4659ddb202_3_new,"armory.logicnode.LogicTree","new",0xcf0946cc,"armory.logicnode.LogicTree.new","armory/logicnode/LogicTree.hx",3,0xbdb1dc66)
HX_LOCAL_STACK_FRAME(_hx_pos_1e865c4659ddb202_11_add,"armory.logicnode.LogicTree","add",0xceff688d,"armory.logicnode.LogicTree.add","armory/logicnode/LogicTree.hx",11,0xbdb1dc66)
namespace armory{
namespace logicnode{

void LogicTree_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1e865c4659ddb202_3_new)
HXLINE(   5)		this->loopBreak = false;
HXLINE(   8)		super::__construct();
            	}

Dynamic LogicTree_obj::__CreateEmpty() { return new LogicTree_obj; }

void *LogicTree_obj::_hx_vtable = 0;

Dynamic LogicTree_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LogicTree_obj > _hx_result = new LogicTree_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LogicTree_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x328cc0be) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x328cc0be;
	} else {
		return inClassId==(int)0x7b609ac2;
	}
}

void LogicTree_obj::add(){
            	HX_STACKFRAME(&_hx_pos_1e865c4659ddb202_11_add)
            	}


HX_DEFINE_DYNAMIC_FUNC0(LogicTree_obj,add,(void))


hx::ObjectPtr< LogicTree_obj > LogicTree_obj::__new() {
	hx::ObjectPtr< LogicTree_obj > __this = new LogicTree_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< LogicTree_obj > LogicTree_obj::__alloc(hx::Ctx *_hx_ctx) {
	LogicTree_obj *__this = (LogicTree_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LogicTree_obj), true, "armory.logicnode.LogicTree"));
	*(void **)__this = LogicTree_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

LogicTree_obj::LogicTree_obj()
{
}

hx::Val LogicTree_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loopBreak") ) { return hx::Val( loopBreak ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LogicTree_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"loopBreak") ) { loopBreak=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LogicTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("loopBreak","\xbb","\x43","\x98","\xe6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LogicTree_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(LogicTree_obj,loopBreak),HX_HCSTRING("loopBreak","\xbb","\x43","\x98","\xe6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LogicTree_obj_sStaticStorageInfo = 0;
#endif

static ::String LogicTree_obj_sMemberFields[] = {
	HX_HCSTRING("loopBreak","\xbb","\x43","\x98","\xe6"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	::String(null()) };

static void LogicTree_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LogicTree_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LogicTree_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LogicTree_obj::__mClass,"__mClass");
};

#endif

hx::Class LogicTree_obj::__mClass;

void LogicTree_obj::__register()
{
	hx::Object *dummy = new LogicTree_obj;
	LogicTree_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.LogicTree","\xda","\x30","\x9b","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LogicTree_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LogicTree_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LogicTree_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LogicTree_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LogicTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LogicTree_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
