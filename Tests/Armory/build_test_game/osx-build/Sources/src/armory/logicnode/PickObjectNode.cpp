// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_PickObjectNode
#include <armory/logicnode/PickObjectNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff4e6b5cd9bfffaf_5_new,"armory.logicnode.PickObjectNode","new",0xc2d96fd6,"armory.logicnode.PickObjectNode.new","armory/logicnode/PickObjectNode.hx",5,0xff88a6d8)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4e6b5cd9bfffaf_13_get,"armory.logicnode.PickObjectNode","get",0xc2d4200c,"armory.logicnode.PickObjectNode.get","armory/logicnode/PickObjectNode.hx",13,0xff88a6d8)
namespace armory{
namespace logicnode{

void PickObjectNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_GC_STACKFRAME(&_hx_pos_ff4e6b5cd9bfffaf_5_new)
HXLINE(   7)		this->v =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  10)		super::__construct(tree);
            	}

Dynamic PickObjectNode_obj::__CreateEmpty() { return new PickObjectNode_obj; }

void *PickObjectNode_obj::_hx_vtable = 0;

Dynamic PickObjectNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PickObjectNode_obj > _hx_result = new PickObjectNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PickObjectNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x207670b8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x207670b8;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic PickObjectNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_ff4e6b5cd9bfffaf_13_get)
HXLINE(  14)		 ::iron::math::Vec4 coords = ( ( ::iron::math::Vec4)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  28)		return null();
            	}



hx::ObjectPtr< PickObjectNode_obj > PickObjectNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< PickObjectNode_obj > __this = new PickObjectNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< PickObjectNode_obj > PickObjectNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	PickObjectNode_obj *__this = (PickObjectNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PickObjectNode_obj), true, "armory.logicnode.PickObjectNode"));
	*(void **)__this = PickObjectNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

PickObjectNode_obj::PickObjectNode_obj()
{
}

void PickObjectNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PickObjectNode);
	HX_MARK_MEMBER_NAME(v,"v");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PickObjectNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(v,"v");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PickObjectNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { return hx::Val( v ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PickObjectNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { v=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PickObjectNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("v","\x76","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PickObjectNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(PickObjectNode_obj,v),HX_HCSTRING("v","\x76","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PickObjectNode_obj_sStaticStorageInfo = 0;
#endif

static ::String PickObjectNode_obj_sMemberFields[] = {
	HX_HCSTRING("v","\x76","\x00","\x00","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void PickObjectNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PickObjectNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PickObjectNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PickObjectNode_obj::__mClass,"__mClass");
};

#endif

hx::Class PickObjectNode_obj::__mClass;

void PickObjectNode_obj::__register()
{
	hx::Object *dummy = new PickObjectNode_obj;
	PickObjectNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.PickObjectNode","\xe4","\x8c","\x0b","\xe2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PickObjectNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PickObjectNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PickObjectNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PickObjectNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PickObjectNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PickObjectNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
