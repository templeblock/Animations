// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_CompareNode
#include <armory/logicnode/CompareNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_12950670f7e016f1_8_new,"armory.logicnode.CompareNode","new",0x5c3a3337,"armory.logicnode.CompareNode.new","armory/logicnode/CompareNode.hx",8,0xd4613adb)
HX_LOCAL_STACK_FRAME(_hx_pos_12950670f7e016f1_11_get,"armory.logicnode.CompareNode","get",0x5c34e36d,"armory.logicnode.CompareNode.get","armory/logicnode/CompareNode.hx",11,0xd4613adb)
namespace armory{
namespace logicnode{

void CompareNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_12950670f7e016f1_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic CompareNode_obj::__CreateEmpty() { return new CompareNode_obj; }

void *CompareNode_obj::_hx_vtable = 0;

Dynamic CompareNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CompareNode_obj > _hx_result = new CompareNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CompareNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x4c203de1;
	}
}

 ::Dynamic CompareNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_12950670f7e016f1_11_get)
HXLINE(  13)		 ::Dynamic v1 = this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get();
HXLINE(  14)		 ::Dynamic v2 = this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get();
HXLINE(  15)		bool r = false;
HXLINE(  16)		{
HXLINE(  16)			::String _g = this->property0;
HXDLIN(  16)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Equal",94,3f,b0,05)) ){
HXLINE(  18)				r = hx::IsEq( v1,v2 );
HXDLIN(  18)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Greater Than",87,ac,27,f6)) ){
HXLINE(  26)				r = hx::IsGreater( v1,v2 );
HXDLIN(  26)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Greater Than or Equal",90,53,7f,7d)) ){
HXLINE(  28)				r = hx::IsGreaterEq( v1,v2 );
HXDLIN(  28)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Less Than",88,c5,68,7e)) ){
HXLINE(  22)				r = hx::IsLess( v1,v2 );
HXDLIN(  22)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Less Than or Equal",6f,92,1d,6b)) ){
HXLINE(  24)				r = hx::IsLessEq( v1,v2 );
HXDLIN(  24)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Not Equal",a7,14,43,bb)) ){
HXLINE(  20)				r = hx::IsNotEq( v1,v2 );
HXDLIN(  20)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  31)		return r;
            	}



hx::ObjectPtr< CompareNode_obj > CompareNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< CompareNode_obj > __this = new CompareNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< CompareNode_obj > CompareNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	CompareNode_obj *__this = (CompareNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CompareNode_obj), true, "armory.logicnode.CompareNode"));
	*(void **)__this = CompareNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

CompareNode_obj::CompareNode_obj()
{
}

void CompareNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CompareNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CompareNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CompareNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CompareNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CompareNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CompareNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(CompareNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CompareNode_obj_sStaticStorageInfo = 0;
#endif

static ::String CompareNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void CompareNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CompareNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CompareNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CompareNode_obj::__mClass,"__mClass");
};

#endif

hx::Class CompareNode_obj::__mClass;

void CompareNode_obj::__register()
{
	hx::Object *dummy = new CompareNode_obj;
	CompareNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.CompareNode","\xc5","\xcb","\xcc","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CompareNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CompareNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CompareNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CompareNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CompareNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CompareNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
