// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_ArrayNode
#include <armory/logicnode/ArrayNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2cda9d953fa2fd62_3_new,"armory.logicnode.ArrayNode","new",0x02b1a0ab,"armory.logicnode.ArrayNode.new","armory/logicnode/ArrayNode.hx",3,0x4317a367)
HX_LOCAL_STACK_FRAME(_hx_pos_2cda9d953fa2fd62_12_get,"armory.logicnode.ArrayNode","get",0x02ac50e1,"armory.logicnode.ArrayNode.get","armory/logicnode/ArrayNode.hx",12,0x4317a367)
HX_LOCAL_STACK_FRAME(_hx_pos_2cda9d953fa2fd62_25_set,"armory.logicnode.ArrayNode","set",0x02b56bed,"armory.logicnode.ArrayNode.set","armory/logicnode/ArrayNode.hx",25,0x4317a367)
namespace armory{
namespace logicnode{

void ArrayNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_2cda9d953fa2fd62_3_new)
HXLINE(   6)		this->initialized = false;
HXLINE(   5)		this->value = ::cpp::VirtualArray_obj::__new(0);
HXLINE(   9)		super::__construct(tree);
            	}

Dynamic ArrayNode_obj::__CreateEmpty() { return new ArrayNode_obj; }

void *ArrayNode_obj::_hx_vtable = 0;

Dynamic ArrayNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayNode_obj > _hx_result = new ArrayNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ArrayNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x6c76e255;
	}
}

 ::Dynamic ArrayNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_2cda9d953fa2fd62_12_get)
HXLINE(  13)		if (!(this->initialized)) {
HXLINE(  14)			this->initialized = true;
HXLINE(  15)			{
HXLINE(  15)				int _g = (int)0;
HXDLIN(  15)				::Array< ::Dynamic> _g1 = this->inputs;
HXDLIN(  15)				while((_g < _g1->length)){
HXLINE(  15)					 ::armory::logicnode::LogicNodeInput inp = _g1->__get(_g).StaticCast<  ::armory::logicnode::LogicNodeInput >();
HXDLIN(  15)					_g = (_g + (int)1);
HXLINE(  16)					 ::Dynamic val = inp->get();
HXLINE(  17)					this->value->push(val);
            				}
            			}
            		}
HXLINE(  21)		if ((from == (int)0)) {
HXLINE(  21)			return this->value;
            		}
            		else {
HXLINE(  21)			return this->value->get_length();
            		}
HXDLIN(  21)		return null();
            	}


void ArrayNode_obj::set( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_2cda9d953fa2fd62_25_set)
HXDLIN(  25)		this->value = ( (::cpp::VirtualArray)(value) );
            	}



hx::ObjectPtr< ArrayNode_obj > ArrayNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< ArrayNode_obj > __this = new ArrayNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< ArrayNode_obj > ArrayNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	ArrayNode_obj *__this = (ArrayNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ArrayNode_obj), true, "armory.logicnode.ArrayNode"));
	*(void **)__this = ArrayNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

ArrayNode_obj::ArrayNode_obj()
{
}

void ArrayNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArrayNode);
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(initialized,"initialized");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ArrayNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(initialized,"initialized");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ArrayNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { return hx::Val( initialized ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ArrayNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArrayNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ArrayNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(ArrayNode_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsBool,(int)offsetof(ArrayNode_obj,initialized),HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ArrayNode_obj_sStaticStorageInfo = 0;
#endif

static ::String ArrayNode_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void ArrayNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArrayNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArrayNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArrayNode_obj::__mClass,"__mClass");
};

#endif

hx::Class ArrayNode_obj::__mClass;

void ArrayNode_obj::__register()
{
	hx::Object *dummy = new ArrayNode_obj;
	ArrayNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.ArrayNode","\x39","\x6f","\x3b","\x5e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArrayNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ArrayNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ArrayNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArrayNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
