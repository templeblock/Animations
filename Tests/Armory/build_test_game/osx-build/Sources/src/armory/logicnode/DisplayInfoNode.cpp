// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_DisplayInfoNode
#include <armory/logicnode/DisplayInfoNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_kha_DisplayImpl
#include <kha/DisplayImpl.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_060dc30c0941aec5_8_new,"armory.logicnode.DisplayInfoNode","new",0x50122c62,"armory.logicnode.DisplayInfoNode.new","armory/logicnode/DisplayInfoNode.hx",8,0x54fd5910)
HX_LOCAL_STACK_FRAME(_hx_pos_060dc30c0941aec5_12_get,"armory.logicnode.DisplayInfoNode","get",0x500cdc98,"armory.logicnode.DisplayInfoNode.get","armory/logicnode/DisplayInfoNode.hx",12,0x54fd5910)
HX_LOCAL_STACK_FRAME(_hx_pos_060dc30c0941aec5_5_boot,"armory.logicnode.DisplayInfoNode","boot",0xb7eda9f0,"armory.logicnode.DisplayInfoNode.boot","armory/logicnode/DisplayInfoNode.hx",5,0x54fd5910)
namespace armory{
namespace logicnode{

void DisplayInfoNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_060dc30c0941aec5_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic DisplayInfoNode_obj::__CreateEmpty() { return new DisplayInfoNode_obj; }

void *DisplayInfoNode_obj::_hx_vtable = 0;

Dynamic DisplayInfoNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayInfoNode_obj > _hx_result = new DisplayInfoNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool DisplayInfoNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x3c9cc38c;
	}
}

 ::Dynamic DisplayInfoNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_060dc30c0941aec5_12_get)
HXDLIN(  12)		if ((from == (int)0)) {
HXDLIN(  12)			return ::kha::DisplayImpl_obj::width((int)0);
            		}
            		else {
HXLINE(  13)			return ::kha::DisplayImpl_obj::height((int)0);
            		}
HXLINE(  12)		return null();
            	}


int DisplayInfoNode_obj::displayIndex;


hx::ObjectPtr< DisplayInfoNode_obj > DisplayInfoNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< DisplayInfoNode_obj > __this = new DisplayInfoNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< DisplayInfoNode_obj > DisplayInfoNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	DisplayInfoNode_obj *__this = (DisplayInfoNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayInfoNode_obj), true, "armory.logicnode.DisplayInfoNode"));
	*(void **)__this = DisplayInfoNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

DisplayInfoNode_obj::DisplayInfoNode_obj()
{
}

hx::Val DisplayInfoNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DisplayInfoNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo DisplayInfoNode_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &DisplayInfoNode_obj::displayIndex,HX_HCSTRING("displayIndex","\x70","\x71","\x6d","\xca")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplayInfoNode_obj_sMemberFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void DisplayInfoNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayInfoNode_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DisplayInfoNode_obj::displayIndex,"displayIndex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayInfoNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayInfoNode_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DisplayInfoNode_obj::displayIndex,"displayIndex");
};

#endif

hx::Class DisplayInfoNode_obj::__mClass;

static ::String DisplayInfoNode_obj_sStaticFields[] = {
	HX_HCSTRING("displayIndex","\x70","\x71","\x6d","\xca"),
	::String(null())
};

void DisplayInfoNode_obj::__register()
{
	hx::Object *dummy = new DisplayInfoNode_obj;
	DisplayInfoNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.DisplayInfoNode","\x70","\x13","\x70","\x9f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DisplayInfoNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DisplayInfoNode_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayInfoNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayInfoNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayInfoNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayInfoNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayInfoNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplayInfoNode_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_060dc30c0941aec5_5_boot)
HXDLIN(   5)		displayIndex = (int)0;
            	}
}

} // end namespace armory
} // end namespace logicnode
