// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_LoopNode
#include <armory/logicnode/LoopNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d9f7ff64b10bdce7_8_new,"armory.logicnode.LoopNode","new",0xb323223a,"armory.logicnode.LoopNode.new","armory/logicnode/LoopNode.hx",8,0x88013a74)
HX_LOCAL_STACK_FRAME(_hx_pos_d9f7ff64b10bdce7_11_run,"armory.logicnode.LoopNode","run",0xb3263925,"armory.logicnode.LoopNode.run","armory/logicnode/LoopNode.hx",11,0x88013a74)
HX_LOCAL_STACK_FRAME(_hx_pos_d9f7ff64b10bdce7_28_get,"armory.logicnode.LoopNode","get",0xb31dd270,"armory.logicnode.LoopNode.get","armory/logicnode/LoopNode.hx",28,0x88013a74)
namespace armory{
namespace logicnode{

void LoopNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_d9f7ff64b10bdce7_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic LoopNode_obj::__CreateEmpty() { return new LoopNode_obj; }

void *LoopNode_obj::_hx_vtable = 0;

Dynamic LoopNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LoopNode_obj > _hx_result = new LoopNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LoopNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x26fd6bc8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x26fd6bc8;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

void LoopNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_d9f7ff64b10bdce7_11_run)
HXLINE(  12)		this->index = (int)0;
HXLINE(  13)		int from = ( (int)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  14)		int to = ( (int)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  15)		{
HXLINE(  15)			int _g1 = from;
HXDLIN(  15)			int _g = to;
HXDLIN(  15)			while((_g1 < _g)){
HXLINE(  15)				_g1 = (_g1 + (int)1);
HXDLIN(  15)				int i = (_g1 - (int)1);
HXLINE(  16)				this->index = i;
HXLINE(  17)				this->runOutputs((int)0);
HXLINE(  19)				if (this->tree->loopBreak) {
HXLINE(  20)					this->tree->loopBreak = false;
HXLINE(  21)					goto _hx_goto_1;
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE(  24)		this->runOutputs((int)2);
            	}


 ::Dynamic LoopNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_d9f7ff64b10bdce7_28_get)
HXDLIN(  28)		return this->index;
            	}



hx::ObjectPtr< LoopNode_obj > LoopNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< LoopNode_obj > __this = new LoopNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< LoopNode_obj > LoopNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	LoopNode_obj *__this = (LoopNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LoopNode_obj), true, "armory.logicnode.LoopNode"));
	*(void **)__this = LoopNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

LoopNode_obj::LoopNode_obj()
{
}

hx::Val LoopNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LoopNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LoopNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LoopNode_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(LoopNode_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LoopNode_obj_sStaticStorageInfo = 0;
#endif

static ::String LoopNode_obj_sMemberFields[] = {
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void LoopNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LoopNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LoopNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LoopNode_obj::__mClass,"__mClass");
};

#endif

hx::Class LoopNode_obj::__mClass;

void LoopNode_obj::__register()
{
	hx::Object *dummy = new LoopNode_obj;
	LoopNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.LoopNode","\x48","\x3d","\xab","\x7c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LoopNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LoopNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LoopNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LoopNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LoopNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LoopNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
