// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SendEventNode
#include <armory/logicnode/SendEventNode.h>
#endif
#ifndef INCLUDED_armory_system_Event
#include <armory/system/Event.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_29a4c47dcd5e105a_6_new,"armory.logicnode.SendEventNode","new",0xe98dd0c4,"armory.logicnode.SendEventNode.new","armory/logicnode/SendEventNode.hx",6,0x8afc026e)
HX_LOCAL_STACK_FRAME(_hx_pos_29a4c47dcd5e105a_14_run,"armory.logicnode.SendEventNode","run",0xe990e7af,"armory.logicnode.SendEventNode.run","armory/logicnode/SendEventNode.hx",14,0x8afc026e)
namespace armory{
namespace logicnode{

void SendEventNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_29a4c47dcd5e105a_6_new)
HXLINE(   8)		this->entries = null();
HXLINE(  11)		super::__construct(tree);
            	}

Dynamic SendEventNode_obj::__CreateEmpty() { return new SendEventNode_obj; }

void *SendEventNode_obj::_hx_vtable = 0;

Dynamic SendEventNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SendEventNode_obj > _hx_result = new SendEventNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SendEventNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x7b4e8fee;
	}
}

void SendEventNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_29a4c47dcd5e105a_14_run)
HXLINE(  15)		::String name = ( (::String)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  17)		if (hx::IsNull( this->entries )) {
HXLINE(  18)			::Array< ::Dynamic> all = ::armory::_hx_system::Event_obj::get(name);
HXLINE(  19)			if (hx::IsNotNull( all )) {
HXLINE(  20)				this->entries = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  21)				{
HXLINE(  21)					int _g = (int)0;
HXDLIN(  21)					while((_g < all->length)){
HXLINE(  21)						 ::Dynamic e = all->__get(_g);
HXDLIN(  21)						_g = (_g + (int)1);
HXDLIN(  21)						if ((( (int)(e->__Field(HX_("mask",ec,40,56,48),hx::paccDynamic)) ) == this->tree->object->uid)) {
HXLINE(  21)							this->entries->push(e);
            						}
            					}
            				}
            			}
            		}
HXLINE(  24)		{
HXLINE(  24)			int _g1 = (int)0;
HXDLIN(  24)			::Array< ::Dynamic> _g11 = this->entries;
HXDLIN(  24)			while((_g1 < _g11->length)){
HXLINE(  24)				 ::Dynamic e1 = _g11->__get(_g1);
HXDLIN(  24)				_g1 = (_g1 + (int)1);
HXDLIN(  24)				e1->__Field(HX_("onEvent",7b,66,02,0c),hx::paccDynamic)();
            			}
            		}
HXLINE(  26)		this->super::run();
            	}



hx::ObjectPtr< SendEventNode_obj > SendEventNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SendEventNode_obj > __this = new SendEventNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SendEventNode_obj > SendEventNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SendEventNode_obj *__this = (SendEventNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SendEventNode_obj), true, "armory.logicnode.SendEventNode"));
	*(void **)__this = SendEventNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SendEventNode_obj::SendEventNode_obj()
{
}

void SendEventNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SendEventNode);
	HX_MARK_MEMBER_NAME(entries,"entries");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SendEventNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(entries,"entries");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SendEventNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"entries") ) { return hx::Val( entries ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SendEventNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"entries") ) { entries=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SendEventNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("entries","\x50","\x2d","\x5f","\x79"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SendEventNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(SendEventNode_obj,entries),HX_HCSTRING("entries","\x50","\x2d","\x5f","\x79")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SendEventNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SendEventNode_obj_sMemberFields[] = {
	HX_HCSTRING("entries","\x50","\x2d","\x5f","\x79"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void SendEventNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SendEventNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SendEventNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SendEventNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SendEventNode_obj::__mClass;

void SendEventNode_obj::__register()
{
	hx::Object *dummy = new SendEventNode_obj;
	SendEventNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SendEventNode","\xd2","\x5e","\xa5","\xff");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SendEventNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SendEventNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SendEventNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SendEventNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SendEventNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SendEventNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
