// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_ShutdownNode
#include <armory/logicnode/ShutdownNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_kha_System
#include <kha/System.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_04858503d58ae204_6_new,"armory.logicnode.ShutdownNode","new",0x8da0036c,"armory.logicnode.ShutdownNode.new","armory/logicnode/ShutdownNode.hx",6,0x0a24dc82)
HX_LOCAL_STACK_FRAME(_hx_pos_04858503d58ae204_10_run,"armory.logicnode.ShutdownNode","run",0x8da31a57,"armory.logicnode.ShutdownNode.run","armory/logicnode/ShutdownNode.hx",10,0x0a24dc82)
namespace armory{
namespace logicnode{

void ShutdownNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_04858503d58ae204_6_new)
HXDLIN(   6)		super::__construct(tree);
            	}

Dynamic ShutdownNode_obj::__CreateEmpty() { return new ShutdownNode_obj; }

void *ShutdownNode_obj::_hx_vtable = 0;

Dynamic ShutdownNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ShutdownNode_obj > _hx_result = new ShutdownNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ShutdownNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x7f9bfc66;
	}
}

void ShutdownNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_04858503d58ae204_10_run)
HXDLIN(  10)		::kha::System_obj::requestShutdown();
            	}



hx::ObjectPtr< ShutdownNode_obj > ShutdownNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< ShutdownNode_obj > __this = new ShutdownNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< ShutdownNode_obj > ShutdownNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	ShutdownNode_obj *__this = (ShutdownNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ShutdownNode_obj), true, "armory.logicnode.ShutdownNode"));
	*(void **)__this = ShutdownNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

ShutdownNode_obj::ShutdownNode_obj()
{
}

hx::Val ShutdownNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ShutdownNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ShutdownNode_obj_sStaticStorageInfo = 0;
#endif

static ::String ShutdownNode_obj_sMemberFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void ShutdownNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ShutdownNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ShutdownNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ShutdownNode_obj::__mClass,"__mClass");
};

#endif

hx::Class ShutdownNode_obj::__mClass;

void ShutdownNode_obj::__register()
{
	hx::Object *dummy = new ShutdownNode_obj;
	ShutdownNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.ShutdownNode","\x7a","\x1d","\xaf","\x8d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ShutdownNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ShutdownNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ShutdownNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ShutdownNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShutdownNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShutdownNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
