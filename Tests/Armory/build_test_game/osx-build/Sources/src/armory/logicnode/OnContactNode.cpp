// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_OnContactNode
#include <armory/logicnode/OnContactNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a86610a3a10f25ba_6_new,"armory.logicnode.OnContactNode","new",0x97472553,"armory.logicnode.OnContactNode.new","armory/logicnode/OnContactNode.hx",6,0x6b9eb4bf)
HX_LOCAL_STACK_FRAME(_hx_pos_a86610a3a10f25ba_17_update,"armory.logicnode.OnContactNode","update",0xb07d8af6,"armory.logicnode.OnContactNode.update","armory/logicnode/OnContactNode.hx",17,0x6b9eb4bf)
namespace armory{
namespace logicnode{

void OnContactNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_a86610a3a10f25ba_6_new)
HXLINE(   9)		this->lastContact = false;
HXLINE(  12)		super::__construct(tree);
HXLINE(  14)		tree->notifyOnUpdate(this->update_dyn());
            	}

Dynamic OnContactNode_obj::__CreateEmpty() { return new OnContactNode_obj; }

void *OnContactNode_obj::_hx_vtable = 0;

Dynamic OnContactNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OnContactNode_obj > _hx_result = new OnContactNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OnContactNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x64ecc161;
	}
}

void OnContactNode_obj::update(){
            	HX_STACKFRAME(&_hx_pos_a86610a3a10f25ba_17_update)
HXLINE(  18)		 ::iron::object::Object object1 = ( ( ::iron::object::Object)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  19)		 ::iron::object::Object object2 = ( ( ::iron::object::Object)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  21)		if (hx::IsNull( object1 )) {
HXLINE(  21)			object1 = this->tree->object;
            		}
HXLINE(  22)		if (hx::IsNull( object2 )) {
HXLINE(  22)			object2 = this->tree->object;
            		}
HXLINE(  24)		bool contact = false;
HXLINE(  40)		bool b = false;
HXLINE(  41)		{
HXLINE(  41)			::String _g = this->property0;
HXDLIN(  41)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Begin",09,5a,83,43)) ){
HXLINE(  43)				if (contact) {
HXLINE(  43)					b = !(this->lastContact);
            				}
            				else {
HXLINE(  43)					b = false;
            				}
HXDLIN(  43)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("End",bb,bb,34,00)) ){
HXLINE(  45)				if (!(contact)) {
HXLINE(  45)					b = this->lastContact;
            				}
            				else {
HXLINE(  45)					b = false;
            				}
HXDLIN(  45)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Overlap",67,6b,61,76)) ){
HXLINE(  47)				b = contact;
HXDLIN(  47)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  50)		this->lastContact = contact;
HXLINE(  52)		if (b) {
HXLINE(  52)			this->run();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OnContactNode_obj,update,(void))


hx::ObjectPtr< OnContactNode_obj > OnContactNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< OnContactNode_obj > __this = new OnContactNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< OnContactNode_obj > OnContactNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	OnContactNode_obj *__this = (OnContactNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OnContactNode_obj), true, "armory.logicnode.OnContactNode"));
	*(void **)__this = OnContactNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

OnContactNode_obj::OnContactNode_obj()
{
}

void OnContactNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OnContactNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	HX_MARK_MEMBER_NAME(lastContact,"lastContact");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OnContactNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	HX_VISIT_MEMBER_NAME(lastContact,"lastContact");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val OnContactNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastContact") ) { return hx::Val( lastContact ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val OnContactNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastContact") ) { lastContact=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OnContactNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("lastContact","\xea","\x2e","\x20","\xce"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OnContactNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(OnContactNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{hx::fsBool,(int)offsetof(OnContactNode_obj,lastContact),HX_HCSTRING("lastContact","\xea","\x2e","\x20","\xce")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *OnContactNode_obj_sStaticStorageInfo = 0;
#endif

static ::String OnContactNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("lastContact","\xea","\x2e","\x20","\xce"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void OnContactNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OnContactNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OnContactNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OnContactNode_obj::__mClass,"__mClass");
};

#endif

hx::Class OnContactNode_obj::__mClass;

void OnContactNode_obj::__register()
{
	hx::Object *dummy = new OnContactNode_obj;
	OnContactNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.OnContactNode","\xe1","\x7f","\x37","\x20");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OnContactNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OnContactNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OnContactNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OnContactNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OnContactNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OnContactNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
