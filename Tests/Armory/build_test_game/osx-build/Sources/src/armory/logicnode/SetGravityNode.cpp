// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SetGravityNode
#include <armory/logicnode/SetGravityNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a9fc8f5699b7c80b_10_new,"armory.logicnode.SetGravityNode","new",0x8913f422,"armory.logicnode.SetGravityNode.new","armory/logicnode/SetGravityNode.hx",10,0x6326300c)
HX_LOCAL_STACK_FRAME(_hx_pos_a9fc8f5699b7c80b_13_run,"armory.logicnode.SetGravityNode","run",0x89170b0d,"armory.logicnode.SetGravityNode.run","armory/logicnode/SetGravityNode.hx",13,0x6326300c)
namespace armory{
namespace logicnode{

void SetGravityNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_a9fc8f5699b7c80b_10_new)
HXDLIN(  10)		super::__construct(tree);
            	}

Dynamic SetGravityNode_obj::__CreateEmpty() { return new SetGravityNode_obj; }

void *SetGravityNode_obj::_hx_vtable = 0;

Dynamic SetGravityNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SetGravityNode_obj > _hx_result = new SetGravityNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SetGravityNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x08eddf04) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x08eddf04;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

void SetGravityNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_a9fc8f5699b7c80b_13_run)
HXLINE(  14)		 ::iron::math::Vec4 gravity = ( ( ::iron::math::Vec4)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  21)		this->super::run();
            	}



hx::ObjectPtr< SetGravityNode_obj > SetGravityNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SetGravityNode_obj > __this = new SetGravityNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SetGravityNode_obj > SetGravityNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SetGravityNode_obj *__this = (SetGravityNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SetGravityNode_obj), true, "armory.logicnode.SetGravityNode"));
	*(void **)__this = SetGravityNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SetGravityNode_obj::SetGravityNode_obj()
{
}

hx::Val SetGravityNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SetGravityNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SetGravityNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SetGravityNode_obj_sMemberFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void SetGravityNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SetGravityNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SetGravityNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SetGravityNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SetGravityNode_obj::__mClass;

void SetGravityNode_obj::__register()
{
	hx::Object *dummy = new SetGravityNode_obj;
	SetGravityNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SetGravityNode","\x30","\xfb","\x82","\xca");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SetGravityNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SetGravityNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SetGravityNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SetGravityNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SetGravityNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SetGravityNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
