// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SetMaterialNode
#include <armory/logicnode/SetMaterialNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2b154043cc251dac_9_new,"armory.logicnode.SetMaterialNode","new",0xfbb03bfb,"armory.logicnode.SetMaterialNode.new","armory/logicnode/SetMaterialNode.hx",9,0x8a90ff97)
HX_LOCAL_STACK_FRAME(_hx_pos_2b154043cc251dac_12_run,"armory.logicnode.SetMaterialNode","run",0xfbb352e6,"armory.logicnode.SetMaterialNode.run","armory/logicnode/SetMaterialNode.hx",12,0x8a90ff97)
namespace armory{
namespace logicnode{

void SetMaterialNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_2b154043cc251dac_9_new)
HXDLIN(   9)		super::__construct(tree);
            	}

Dynamic SetMaterialNode_obj::__CreateEmpty() { return new SetMaterialNode_obj; }

void *SetMaterialNode_obj::_hx_vtable = 0;

Dynamic SetMaterialNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SetMaterialNode_obj > _hx_result = new SetMaterialNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SetMaterialNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1582d2a5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1582d2a5;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

void SetMaterialNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_2b154043cc251dac_12_run)
HXLINE(  13)		 ::iron::object::MeshObject object = ( ( ::iron::object::MeshObject)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  14)		 ::iron::data::MaterialData mat = ( ( ::iron::data::MaterialData)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  16)		if (hx::IsNull( object )) {
HXLINE(  16)			return;
            		}
HXLINE(  18)		{
HXLINE(  18)			int _g1 = (int)0;
HXDLIN(  18)			int _g = object->materials->length;
HXDLIN(  18)			while((_g1 < _g)){
HXLINE(  18)				_g1 = (_g1 + (int)1);
HXDLIN(  18)				int i = (_g1 - (int)1);
HXLINE(  19)				object->materials->__unsafe_set(i,mat);
            			}
            		}
HXLINE(  22)		this->super::run();
            	}



hx::ObjectPtr< SetMaterialNode_obj > SetMaterialNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SetMaterialNode_obj > __this = new SetMaterialNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SetMaterialNode_obj > SetMaterialNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SetMaterialNode_obj *__this = (SetMaterialNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SetMaterialNode_obj), true, "armory.logicnode.SetMaterialNode"));
	*(void **)__this = SetMaterialNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SetMaterialNode_obj::SetMaterialNode_obj()
{
}

hx::Val SetMaterialNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SetMaterialNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SetMaterialNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SetMaterialNode_obj_sMemberFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void SetMaterialNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SetMaterialNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SetMaterialNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SetMaterialNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SetMaterialNode_obj::__mClass;

void SetMaterialNode_obj::__register()
{
	hx::Object *dummy = new SetMaterialNode_obj;
	SetMaterialNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SetMaterialNode","\x89","\x22","\x56","\x78");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SetMaterialNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SetMaterialNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SetMaterialNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SetMaterialNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SetMaterialNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SetMaterialNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
