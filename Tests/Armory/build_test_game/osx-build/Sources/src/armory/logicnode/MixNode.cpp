// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_MixNode
#include <armory/logicnode/MixNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Math
#include <iron/math/Math.h>
#endif
#ifndef INCLUDED_iron_system_Tween
#include <iron/system/Tween.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_66addaeacad15525_6_new,"armory.logicnode.MixNode","new",0x3870642e,"armory.logicnode.MixNode.new","armory/logicnode/MixNode.hx",6,0x46e18cc4)
HX_LOCAL_STACK_FRAME(_hx_pos_66addaeacad15525_19_init,"armory.logicnode.MixNode","init",0x269ffb82,"armory.logicnode.MixNode.init","armory/logicnode/MixNode.hx",19,0x46e18cc4)
HX_LOCAL_STACK_FRAME(_hx_pos_66addaeacad15525_43_get,"armory.logicnode.MixNode","get",0x386b1464,"armory.logicnode.MixNode.get","armory/logicnode/MixNode.hx",43,0x46e18cc4)
namespace armory{
namespace logicnode{

void MixNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_66addaeacad15525_6_new)
HXLINE(  12)		this->ease = null();
HXLINE(  15)		super::__construct(tree);
            	}

Dynamic MixNode_obj::__CreateEmpty() { return new MixNode_obj; }

void *MixNode_obj::_hx_vtable = 0;

Dynamic MixNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MixNode_obj > _hx_result = new MixNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MixNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x52bca958;
	}
}

void MixNode_obj::init(){
            	HX_STACKFRAME(&_hx_pos_66addaeacad15525_19_init)
HXDLIN(  19)		::String _g = this->property0;
HXDLIN(  19)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("Back",47,06,ea,2b)) ){
HXLINE(  37)			 ::Dynamic _hx_tmp;
HXDLIN(  37)			if ((this->property1 == HX_("In",05,40,00,00))) {
HXLINE(  37)				_hx_tmp = ::iron::_hx_system::Tween_obj::easeBackIn_dyn();
            			}
            			else {
HXLINE(  37)				if ((this->property1 == HX_("Out",6e,58,3c,00))) {
HXLINE(  37)					_hx_tmp = ::iron::_hx_system::Tween_obj::easeBackOut_dyn();
            				}
            				else {
HXLINE(  37)					_hx_tmp = ::iron::_hx_system::Tween_obj::easeBackInOut_dyn();
            				}
            			}
HXDLIN(  37)			this->ease = _hx_tmp;
HXDLIN(  37)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Circ",f7,5b,99,2c)) ){
HXLINE(  35)			 ::Dynamic _hx_tmp1;
HXDLIN(  35)			if ((this->property1 == HX_("In",05,40,00,00))) {
HXLINE(  35)				_hx_tmp1 = ::iron::_hx_system::Tween_obj::easeCircIn_dyn();
            			}
            			else {
HXLINE(  35)				if ((this->property1 == HX_("Out",6e,58,3c,00))) {
HXLINE(  35)					_hx_tmp1 = ::iron::_hx_system::Tween_obj::easeCircOut_dyn();
            				}
            				else {
HXLINE(  35)					_hx_tmp1 = ::iron::_hx_system::Tween_obj::easeCircInOut_dyn();
            				}
            			}
HXDLIN(  35)			this->ease = _hx_tmp1;
HXDLIN(  35)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Cubic",2a,8d,79,e1)) ){
HXLINE(  27)			 ::Dynamic _hx_tmp2;
HXDLIN(  27)			if ((this->property1 == HX_("In",05,40,00,00))) {
HXLINE(  27)				_hx_tmp2 = ::iron::_hx_system::Tween_obj::easeCubicIn_dyn();
            			}
            			else {
HXLINE(  27)				if ((this->property1 == HX_("Out",6e,58,3c,00))) {
HXLINE(  27)					_hx_tmp2 = ::iron::_hx_system::Tween_obj::easeCubicOut_dyn();
            				}
            				else {
HXLINE(  27)					_hx_tmp2 = ::iron::_hx_system::Tween_obj::easeCubicInOut_dyn();
            				}
            			}
HXDLIN(  27)			this->ease = _hx_tmp2;
HXDLIN(  27)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Expo",52,29,f7,2d)) ){
HXLINE(  33)			 ::Dynamic _hx_tmp3;
HXDLIN(  33)			if ((this->property1 == HX_("In",05,40,00,00))) {
HXLINE(  33)				_hx_tmp3 = ::iron::_hx_system::Tween_obj::easeExpoIn_dyn();
            			}
            			else {
HXLINE(  33)				if ((this->property1 == HX_("Out",6e,58,3c,00))) {
HXLINE(  33)					_hx_tmp3 = ::iron::_hx_system::Tween_obj::easeExpoOut_dyn();
            				}
            				else {
HXLINE(  33)					_hx_tmp3 = ::iron::_hx_system::Tween_obj::easeExpoInOut_dyn();
            				}
            			}
HXDLIN(  33)			this->ease = _hx_tmp3;
HXDLIN(  33)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Linear",05,c6,34,21)) ){
HXLINE(  21)			this->ease = ::iron::_hx_system::Tween_obj::easeLinear_dyn();
HXDLIN(  21)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Quad",e7,64,e3,35)) ){
HXLINE(  25)			 ::Dynamic _hx_tmp4;
HXDLIN(  25)			if ((this->property1 == HX_("In",05,40,00,00))) {
HXLINE(  25)				_hx_tmp4 = ::iron::_hx_system::Tween_obj::easeQuadIn_dyn();
            			}
            			else {
HXLINE(  25)				if ((this->property1 == HX_("Out",6e,58,3c,00))) {
HXLINE(  25)					_hx_tmp4 = ::iron::_hx_system::Tween_obj::easeQuadOut_dyn();
            				}
            				else {
HXLINE(  25)					_hx_tmp4 = ::iron::_hx_system::Tween_obj::easeQuadInOut_dyn();
            				}
            			}
HXDLIN(  25)			this->ease = _hx_tmp4;
HXDLIN(  25)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Quart",df,f1,14,f1)) ){
HXLINE(  29)			 ::Dynamic _hx_tmp5;
HXDLIN(  29)			if ((this->property1 == HX_("In",05,40,00,00))) {
HXLINE(  29)				_hx_tmp5 = ::iron::_hx_system::Tween_obj::easeQuartIn_dyn();
            			}
            			else {
HXLINE(  29)				if ((this->property1 == HX_("Out",6e,58,3c,00))) {
HXLINE(  29)					_hx_tmp5 = ::iron::_hx_system::Tween_obj::easeQuartOut_dyn();
            				}
            				else {
HXLINE(  29)					_hx_tmp5 = ::iron::_hx_system::Tween_obj::easeQuartInOut_dyn();
            				}
            			}
HXDLIN(  29)			this->ease = _hx_tmp5;
HXDLIN(  29)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Quint",6b,00,1b,f1)) ){
HXLINE(  31)			 ::Dynamic _hx_tmp6;
HXDLIN(  31)			if ((this->property1 == HX_("In",05,40,00,00))) {
HXLINE(  31)				_hx_tmp6 = ::iron::_hx_system::Tween_obj::easeQuintIn_dyn();
            			}
            			else {
HXLINE(  31)				if ((this->property1 == HX_("Out",6e,58,3c,00))) {
HXLINE(  31)					_hx_tmp6 = ::iron::_hx_system::Tween_obj::easeQuintOut_dyn();
            				}
            				else {
HXLINE(  31)					_hx_tmp6 = ::iron::_hx_system::Tween_obj::easeQuintInOut_dyn();
            				}
            			}
HXDLIN(  31)			this->ease = _hx_tmp6;
HXDLIN(  31)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Sine",6d,c2,2c,37)) ){
HXLINE(  23)			 ::Dynamic _hx_tmp7;
HXDLIN(  23)			if ((this->property1 == HX_("In",05,40,00,00))) {
HXLINE(  23)				_hx_tmp7 = ::iron::_hx_system::Tween_obj::easeSineIn_dyn();
            			}
            			else {
HXLINE(  23)				if ((this->property1 == HX_("Out",6e,58,3c,00))) {
HXLINE(  23)					_hx_tmp7 = ::iron::_hx_system::Tween_obj::easeSineOut_dyn();
            				}
            				else {
HXLINE(  23)					_hx_tmp7 = ::iron::_hx_system::Tween_obj::easeSineInOut_dyn();
            				}
            			}
HXDLIN(  23)			this->ease = _hx_tmp7;
HXDLIN(  23)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  39)			this->ease = ::iron::_hx_system::Tween_obj::easeLinear_dyn();
            		}
            		_hx_goto_1:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MixNode_obj,init,(void))

 ::Dynamic MixNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_66addaeacad15525_43_get)
HXLINE(  44)		if (hx::IsNull( this->ease )) {
HXLINE(  44)			this->init();
            		}
HXLINE(  45)		Float k = ( (Float)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  46)		Float v1 = ( (Float)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  47)		Float v2 = ( (Float)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  48)		Float f = (v1 + ((v2 - v1) * ( (Float)(this->ease(k)) )));
HXLINE(  50)		if ((this->property2 == HX_("true",4e,a7,03,4d))) {
HXLINE(  50)			f = ::iron::math::Math_obj::clamp(f,(int)0,(int)1);
            		}
HXLINE(  51)		return f;
            	}



hx::ObjectPtr< MixNode_obj > MixNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< MixNode_obj > __this = new MixNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< MixNode_obj > MixNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	MixNode_obj *__this = (MixNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MixNode_obj), true, "armory.logicnode.MixNode"));
	*(void **)__this = MixNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

MixNode_obj::MixNode_obj()
{
}

void MixNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MixNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	HX_MARK_MEMBER_NAME(property1,"property1");
	HX_MARK_MEMBER_NAME(property2,"property2");
	HX_MARK_MEMBER_NAME(ease,"ease");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MixNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	HX_VISIT_MEMBER_NAME(property1,"property1");
	HX_VISIT_MEMBER_NAME(property2,"property2");
	HX_VISIT_MEMBER_NAME(ease,"ease");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MixNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return hx::Val( ease ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
		if (HX_FIELD_EQ(inName,"property1") ) { return hx::Val( property1 ); }
		if (HX_FIELD_EQ(inName,"property2") ) { return hx::Val( property2 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MixNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { ease=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"property1") ) { property1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"property2") ) { property2=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MixNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("property1","\x3c","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("property2","\x3d","\x02","\x07","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MixNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(MixNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{hx::fsString,(int)offsetof(MixNode_obj,property1),HX_HCSTRING("property1","\x3c","\x02","\x07","\x05")},
	{hx::fsString,(int)offsetof(MixNode_obj,property2),HX_HCSTRING("property2","\x3d","\x02","\x07","\x05")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(MixNode_obj,ease),HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MixNode_obj_sStaticStorageInfo = 0;
#endif

static ::String MixNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("property1","\x3c","\x02","\x07","\x05"),
	HX_HCSTRING("property2","\x3d","\x02","\x07","\x05"),
	HX_HCSTRING("ease","\xee","\x8b","\x0c","\x43"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void MixNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MixNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MixNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MixNode_obj::__mClass,"__mClass");
};

#endif

hx::Class MixNode_obj::__mClass;

void MixNode_obj::__register()
{
	hx::Object *dummy = new MixNode_obj;
	MixNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.MixNode","\x3c","\x75","\x4b","\x2a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MixNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MixNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MixNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MixNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MixNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MixNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
