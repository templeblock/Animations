// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_ReadStorageNode
#include <armory/logicnode/ReadStorageNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_system_Storage
#include <iron/system/Storage.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5ec260854f46c99b_6_new,"armory.logicnode.ReadStorageNode","new",0x6dd20417,"armory.logicnode.ReadStorageNode.new","armory/logicnode/ReadStorageNode.hx",6,0x5d28aefb)
HX_LOCAL_STACK_FRAME(_hx_pos_5ec260854f46c99b_9_get,"armory.logicnode.ReadStorageNode","get",0x6dccb44d,"armory.logicnode.ReadStorageNode.get","armory/logicnode/ReadStorageNode.hx",9,0x5d28aefb)
HX_LOCAL_STACK_FRAME(_hx_pos_5ec260854f46c99b_25_parseArg,"armory.logicnode.ReadStorageNode","parseArg",0x1ee3fccc,"armory.logicnode.ReadStorageNode.parseArg","armory/logicnode/ReadStorageNode.hx",25,0x5d28aefb)
namespace armory{
namespace logicnode{

void ReadStorageNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_5ec260854f46c99b_6_new)
HXDLIN(   6)		super::__construct(tree);
            	}

Dynamic ReadStorageNode_obj::__CreateEmpty() { return new ReadStorageNode_obj; }

void *ReadStorageNode_obj::_hx_vtable = 0;

Dynamic ReadStorageNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ReadStorageNode_obj > _hx_result = new ReadStorageNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ReadStorageNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x7e5f5cc1;
	}
}

 ::Dynamic ReadStorageNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_5ec260854f46c99b_9_get)
HXLINE(  10)		::String key = ( (::String)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  12)		 ::Dynamic data = ::iron::_hx_system::Storage_obj::get_data();
HXLINE(  13)		if (hx::IsNull( data )) {
HXLINE(  13)			return null();
            		}
HXLINE(  15)		 ::Dynamic value = ::Reflect_obj::field(data,key);
HXLINE(  17)		if (hx::IsNull( value )) {
HXLINE(  18)			value = ::armory::logicnode::ReadStorageNode_obj::parseArg(( (::String)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) ));
            		}
HXLINE(  21)		return value;
            	}


 ::Dynamic ReadStorageNode_obj::parseArg(::String str){
            	HX_STACKFRAME(&_hx_pos_5ec260854f46c99b_25_parseArg)
HXDLIN(  25)		if ((str == HX_("true",4e,a7,03,4d))) {
HXDLIN(  25)			return true;
            		}
            		else {
HXLINE(  26)			if ((str == HX_("false",a3,35,4f,fb))) {
HXLINE(  26)				return false;
            			}
            			else {
HXLINE(  27)				if ((str.charAt((int)0) == HX_("'",27,00,00,00))) {
HXLINE(  27)					return ::StringTools_obj::replace(str,HX_("'",27,00,00,00),HX_("",00,00,00,00));
            				}
            				else {
HXLINE(  28)					if ((str.charAt((int)0) == HX_("[",5b,00,00,00))) {
HXLINE(  31)						str = ::StringTools_obj::replace(str,HX_("[",5b,00,00,00),HX_("",00,00,00,00));
HXLINE(  32)						str = ::StringTools_obj::replace(str,HX_("]",5d,00,00,00),HX_("",00,00,00,00));
HXLINE(  33)						str = ::StringTools_obj::replace(str,HX_(" ",20,00,00,00),HX_("",00,00,00,00));
HXLINE(  34)						 ::Dynamic ar = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  35)						::Array< ::String > s = str.split(HX_(",",2c,00,00,00));
HXLINE(  36)						{
HXLINE(  36)							int _g = (int)0;
HXDLIN(  36)							while((_g < s->length)){
HXLINE(  36)								::String childStr = s->__get(_g);
HXDLIN(  36)								_g = (_g + (int)1);
HXLINE(  37)								 ::Dynamic ar1 =  ::Dynamic(ar->__Field(HX_("push",da,11,61,4a),hx::paccDynamic));
HXDLIN(  37)								ar1(::armory::logicnode::ReadStorageNode_obj::parseArg(childStr));
            							}
            						}
HXLINE(  39)						return ar;
            					}
            					else {
HXLINE(  42)						Float f = ::Std_obj::parseFloat(str);
HXLINE(  43)						 ::Dynamic i = ::Std_obj::parseInt(str);
HXLINE(  44)						if (hx::IsEq( f,i )) {
HXLINE(  44)							return i;
            						}
            						else {
HXLINE(  44)							return f;
            						}
            					}
            				}
            			}
            		}
HXLINE(  25)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReadStorageNode_obj,parseArg,return )


hx::ObjectPtr< ReadStorageNode_obj > ReadStorageNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< ReadStorageNode_obj > __this = new ReadStorageNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< ReadStorageNode_obj > ReadStorageNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	ReadStorageNode_obj *__this = (ReadStorageNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ReadStorageNode_obj), true, "armory.logicnode.ReadStorageNode"));
	*(void **)__this = ReadStorageNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

ReadStorageNode_obj::ReadStorageNode_obj()
{
}

hx::Val ReadStorageNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ReadStorageNode_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"parseArg") ) { outValue = parseArg_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ReadStorageNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ReadStorageNode_obj_sStaticStorageInfo = 0;
#endif

static ::String ReadStorageNode_obj_sMemberFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void ReadStorageNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ReadStorageNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ReadStorageNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ReadStorageNode_obj::__mClass,"__mClass");
};

#endif

hx::Class ReadStorageNode_obj::__mClass;

static ::String ReadStorageNode_obj_sStaticFields[] = {
	HX_HCSTRING("parseArg","\xe3","\x07","\x6c","\xd6"),
	::String(null())
};

void ReadStorageNode_obj::__register()
{
	hx::Object *dummy = new ReadStorageNode_obj;
	ReadStorageNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.ReadStorageNode","\xa5","\xac","\x32","\xe1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ReadStorageNode_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ReadStorageNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ReadStorageNode_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ReadStorageNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ReadStorageNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ReadStorageNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ReadStorageNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ReadStorageNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
