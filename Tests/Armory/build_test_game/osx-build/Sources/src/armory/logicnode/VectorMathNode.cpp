// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_VectorMathNode
#include <armory/logicnode/VectorMathNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7fd4a98b1072288a_5_new,"armory.logicnode.VectorMathNode","new",0x7f649481,"armory.logicnode.VectorMathNode.new","armory/logicnode/VectorMathNode.hx",5,0x59ec008d)
HX_LOCAL_STACK_FRAME(_hx_pos_7fd4a98b1072288a_14_get,"armory.logicnode.VectorMathNode","get",0x7f5f44b7,"armory.logicnode.VectorMathNode.get","armory/logicnode/VectorMathNode.hx",14,0x59ec008d)
namespace armory{
namespace logicnode{

void VectorMathNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_GC_STACKFRAME(&_hx_pos_7fd4a98b1072288a_5_new)
HXLINE(   8)		this->v =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  11)		super::__construct(tree);
            	}

Dynamic VectorMathNode_obj::__CreateEmpty() { return new VectorMathNode_obj; }

void *VectorMathNode_obj::_hx_vtable = 0;

Dynamic VectorMathNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VectorMathNode_obj > _hx_result = new VectorMathNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool VectorMathNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1bf123e3) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1bf123e3;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic VectorMathNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_7fd4a98b1072288a_14_get)
HXLINE(  15)		 ::iron::math::Vec4 v1 = ( ( ::iron::math::Vec4)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  16)		 ::iron::math::Vec4 v2 = ( ( ::iron::math::Vec4)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  17)		this->v->setFrom(v1);
HXLINE(  18)		Float f = ((Float)0.0);
HXLINE(  19)		{
HXLINE(  19)			::String _g = this->property0;
HXDLIN(  19)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Add",01,aa,31,00)) ){
HXLINE(  21)				this->v->add(v2);
HXDLIN(  21)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Average",3d,99,2c,30)) ){
HXLINE(  25)				this->v->add(v2);
HXLINE(  26)				 ::iron::math::Vec4 _hx_tmp = this->v;
HXDLIN(  26)				_hx_tmp->x = (_hx_tmp->x * ((Float)0.5));
HXLINE(  27)				 ::iron::math::Vec4 _hx_tmp1 = this->v;
HXDLIN(  27)				_hx_tmp1->y = (_hx_tmp1->y * ((Float)0.5));
HXLINE(  28)				 ::iron::math::Vec4 _hx_tmp2 = this->v;
HXDLIN(  28)				_hx_tmp2->z = (_hx_tmp2->z * ((Float)0.5));
HXLINE(  24)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Cross Product",4f,8a,95,72)) ){
HXLINE(  33)				this->v->cross(v2);
HXDLIN(  33)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Dot Product",58,66,61,16)) ){
HXLINE(  30)				f = this->v->dot(v2);
HXLINE(  31)				this->v->set(f,f,f,null());
HXLINE(  29)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Length",06,09,9c,d3)) ){
HXLINE(  41)				 ::iron::math::Vec4 _this = this->v;
HXDLIN(  41)				float v = (_this->x * _this->x);
HXDLIN(  41)				float v3 = (v + (_this->y * _this->y));
HXDLIN(  41)				f = ::Math_obj::sqrt((v3 + (_this->z * _this->z)));
HXDLIN(  41)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Multiply",44,9e,3e,74)) ){
HXLINE(  37)				 ::iron::math::Vec4 _hx_tmp3 = this->v;
HXDLIN(  37)				_hx_tmp3->x = (_hx_tmp3->x * v2->x);
HXLINE(  38)				 ::iron::math::Vec4 _hx_tmp4 = this->v;
HXDLIN(  38)				_hx_tmp4->y = (_hx_tmp4->y * v2->y);
HXLINE(  39)				 ::iron::math::Vec4 _hx_tmp5 = this->v;
HXDLIN(  39)				_hx_tmp5->z = (_hx_tmp5->z * v2->z);
HXLINE(  36)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Normalize",6d,17,74,4d)) ){
HXLINE(  35)				this->v->normalize();
HXDLIN(  35)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Subtract",34,31,c3,d1)) ){
HXLINE(  23)				this->v->sub(v2);
HXDLIN(  23)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  44)		if ((from == (int)0)) {
HXLINE(  44)			return this->v;
            		}
            		else {
HXLINE(  45)			return f;
            		}
HXLINE(  44)		return null();
            	}



hx::ObjectPtr< VectorMathNode_obj > VectorMathNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< VectorMathNode_obj > __this = new VectorMathNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< VectorMathNode_obj > VectorMathNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	VectorMathNode_obj *__this = (VectorMathNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VectorMathNode_obj), true, "armory.logicnode.VectorMathNode"));
	*(void **)__this = VectorMathNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

VectorMathNode_obj::VectorMathNode_obj()
{
}

void VectorMathNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VectorMathNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	HX_MARK_MEMBER_NAME(v,"v");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VectorMathNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	HX_VISIT_MEMBER_NAME(v,"v");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val VectorMathNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { return hx::Val( v ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VectorMathNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { v=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VectorMathNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("v","\x76","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VectorMathNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(VectorMathNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(VectorMathNode_obj,v),HX_HCSTRING("v","\x76","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VectorMathNode_obj_sStaticStorageInfo = 0;
#endif

static ::String VectorMathNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("v","\x76","\x00","\x00","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void VectorMathNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VectorMathNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VectorMathNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VectorMathNode_obj::__mClass,"__mClass");
};

#endif

hx::Class VectorMathNode_obj::__mClass;

void VectorMathNode_obj::__register()
{
	hx::Object *dummy = new VectorMathNode_obj;
	VectorMathNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.VectorMathNode","\x0f","\x40","\x86","\xdd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VectorMathNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VectorMathNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VectorMathNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VectorMathNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VectorMathNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VectorMathNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
