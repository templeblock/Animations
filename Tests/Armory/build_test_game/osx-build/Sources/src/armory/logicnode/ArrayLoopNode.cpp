// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_ArrayLoopNode
#include <armory/logicnode/ArrayLoopNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2dcde94fda2a488d_8_new,"armory.logicnode.ArrayLoopNode","new",0xbca82eaf,"armory.logicnode.ArrayLoopNode.new","armory/logicnode/ArrayLoopNode.hx",8,0xfb490ae3)
HX_LOCAL_STACK_FRAME(_hx_pos_2dcde94fda2a488d_11_run,"armory.logicnode.ArrayLoopNode","run",0xbcab459a,"armory.logicnode.ArrayLoopNode.run","armory/logicnode/ArrayLoopNode.hx",11,0xfb490ae3)
HX_LOCAL_STACK_FRAME(_hx_pos_2dcde94fda2a488d_21_get,"armory.logicnode.ArrayLoopNode","get",0xbca2dee5,"armory.logicnode.ArrayLoopNode.get","armory/logicnode/ArrayLoopNode.hx",21,0xfb490ae3)
namespace armory{
namespace logicnode{

void ArrayLoopNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_2dcde94fda2a488d_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic ArrayLoopNode_obj::__CreateEmpty() { return new ArrayLoopNode_obj; }

void *ArrayLoopNode_obj::_hx_vtable = 0;

Dynamic ArrayLoopNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayLoopNode_obj > _hx_result = new ArrayLoopNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ArrayLoopNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x6e8afd21;
	}
}

void ArrayLoopNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_2dcde94fda2a488d_11_run)
HXLINE(  12)		::cpp::VirtualArray ar = ( (::cpp::VirtualArray)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  13)		{
HXLINE(  13)			int _g = (int)0;
HXDLIN(  13)			while((_g < ar->get_length())){
HXLINE(  13)				 ::Dynamic val = ar->__get(_g);
HXDLIN(  13)				_g = (_g + (int)1);
HXLINE(  14)				this->value = val;
HXLINE(  15)				this->runOutputs((int)0);
            			}
            		}
HXLINE(  17)		this->runOutputs((int)2);
            	}


 ::Dynamic ArrayLoopNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_2dcde94fda2a488d_21_get)
HXDLIN(  21)		return this->value;
            	}



hx::ObjectPtr< ArrayLoopNode_obj > ArrayLoopNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< ArrayLoopNode_obj > __this = new ArrayLoopNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< ArrayLoopNode_obj > ArrayLoopNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	ArrayLoopNode_obj *__this = (ArrayLoopNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ArrayLoopNode_obj), true, "armory.logicnode.ArrayLoopNode"));
	*(void **)__this = ArrayLoopNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

ArrayLoopNode_obj::ArrayLoopNode_obj()
{
}

void ArrayLoopNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArrayLoopNode);
	HX_MARK_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ArrayLoopNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ArrayLoopNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ArrayLoopNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArrayLoopNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ArrayLoopNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ArrayLoopNode_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ArrayLoopNode_obj_sStaticStorageInfo = 0;
#endif

static ::String ArrayLoopNode_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void ArrayLoopNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArrayLoopNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArrayLoopNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArrayLoopNode_obj::__mClass,"__mClass");
};

#endif

hx::Class ArrayLoopNode_obj::__mClass;

void ArrayLoopNode_obj::__register()
{
	hx::Object *dummy = new ArrayLoopNode_obj;
	ArrayLoopNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.ArrayLoopNode","\x3d","\xab","\xc9","\x60");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArrayLoopNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ArrayLoopNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ArrayLoopNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArrayLoopNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayLoopNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayLoopNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
