// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_GateNode
#include <armory/logicnode/GateNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bced963989c9101d_8_new,"armory.logicnode.GateNode","new",0x0f50f4e1,"armory.logicnode.GateNode.new","armory/logicnode/GateNode.hx",8,0x2922b9ad)
HX_LOCAL_STACK_FRAME(_hx_pos_bced963989c9101d_11_run,"armory.logicnode.GateNode","run",0x0f540bcc,"armory.logicnode.GateNode.run","armory/logicnode/GateNode.hx",11,0x2922b9ad)
namespace armory{
namespace logicnode{

void GateNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_bced963989c9101d_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic GateNode_obj::__CreateEmpty() { return new GateNode_obj; }

void *GateNode_obj::_hx_vtable = 0;

Dynamic GateNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GateNode_obj > _hx_result = new GateNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GateNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x6d351eef;
	}
}

void GateNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_bced963989c9101d_11_run)
HXLINE(  13)		 ::Dynamic v1 = this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get();
HXLINE(  14)		 ::Dynamic v2 = this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get();
HXLINE(  15)		bool cond = false;
HXLINE(  17)		{
HXLINE(  17)			::String _g = this->property0;
HXDLIN(  17)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("And",b7,b2,31,00)) ){
HXLINE(  38)				cond = true;
HXLINE(  39)				{
HXLINE(  39)					int _g1 = (int)1;
HXDLIN(  39)					int _g2 = this->inputs->length;
HXDLIN(  39)					while((_g1 < _g2)){
HXLINE(  39)						_g1 = (_g1 + (int)1);
HXDLIN(  39)						int i = (_g1 - (int)1);
HXLINE(  40)						if (!(( (bool)(this->inputs->__get(i).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) ))) {
HXLINE(  41)							cond = false;
HXLINE(  42)							goto _hx_goto_2;
            						}
            					}
            					_hx_goto_2:;
            				}
HXLINE(  37)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Equal",94,3f,b0,05)) ){
HXLINE(  19)				cond = hx::IsEq( v1,v2 );
HXDLIN(  19)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Greater",da,b8,11,85)) ){
HXLINE(  23)				cond = hx::IsGreater( v1,v2 );
HXDLIN(  23)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Greater Equal",ce,a3,8e,cf)) ){
HXLINE(  25)				cond = hx::IsGreaterEq( v1,v2 );
HXDLIN(  25)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Less",79,3f,89,32)) ){
HXLINE(  27)				cond = hx::IsLess( v1,v2 );
HXDLIN(  27)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Less Equal",ad,6b,43,80)) ){
HXLINE(  29)				cond = hx::IsLessEq( v1,v2 );
HXDLIN(  29)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Not Equal",a7,14,43,bb)) ){
HXLINE(  21)				cond = hx::IsNotEq( v1,v2 );
HXDLIN(  21)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Or",43,45,00,00)) ){
HXLINE(  31)				int _g11 = (int)1;
HXDLIN(  31)				int _g3 = this->inputs->length;
HXDLIN(  31)				while((_g11 < _g3)){
HXLINE(  31)					_g11 = (_g11 + (int)1);
HXDLIN(  31)					int i1 = (_g11 - (int)1);
HXLINE(  32)					if (( (bool)(this->inputs->__get(i1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) )) {
HXLINE(  33)						cond = true;
HXLINE(  34)						goto _hx_goto_3;
            					}
            				}
            				_hx_goto_3:;
HXLINE(  31)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  47)		if (cond) {
HXLINE(  47)			this->runOutputs((int)0);
            		}
            		else {
HXLINE(  47)			this->runOutputs((int)1);
            		}
            	}



hx::ObjectPtr< GateNode_obj > GateNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< GateNode_obj > __this = new GateNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< GateNode_obj > GateNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	GateNode_obj *__this = (GateNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GateNode_obj), true, "armory.logicnode.GateNode"));
	*(void **)__this = GateNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

GateNode_obj::GateNode_obj()
{
}

void GateNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GateNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GateNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val GateNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GateNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GateNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GateNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(GateNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GateNode_obj_sStaticStorageInfo = 0;
#endif

static ::String GateNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void GateNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GateNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GateNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GateNode_obj::__mClass,"__mClass");
};

#endif

hx::Class GateNode_obj::__mClass;

void GateNode_obj::__register()
{
	hx::Object *dummy = new GateNode_obj;
	GateNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.GateNode","\x6f","\xf0","\xe2","\xc2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GateNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GateNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GateNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GateNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GateNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GateNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
