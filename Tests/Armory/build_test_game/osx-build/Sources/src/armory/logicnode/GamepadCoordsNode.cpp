// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_GamepadCoordsNode
#include <armory/logicnode/GamepadCoordsNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_system_Gamepad
#include <iron/system/Gamepad.h>
#endif
#ifndef INCLUDED_iron_system_GamepadStick
#include <iron/system/GamepadStick.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e7fabd0ae88ddf11_5_new,"armory.logicnode.GamepadCoordsNode","new",0xbaaa7eb1,"armory.logicnode.GamepadCoordsNode.new","armory/logicnode/GamepadCoordsNode.hx",5,0xa1edfa21)
HX_LOCAL_STACK_FRAME(_hx_pos_e7fabd0ae88ddf11_13_get,"armory.logicnode.GamepadCoordsNode","get",0xbaa52ee7,"armory.logicnode.GamepadCoordsNode.get","armory/logicnode/GamepadCoordsNode.hx",13,0xa1edfa21)
namespace armory{
namespace logicnode{

void GamepadCoordsNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_GC_STACKFRAME(&_hx_pos_e7fabd0ae88ddf11_5_new)
HXLINE(   7)		this->coords =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  10)		super::__construct(tree);
            	}

Dynamic GamepadCoordsNode_obj::__CreateEmpty() { return new GamepadCoordsNode_obj; }

void *GamepadCoordsNode_obj::_hx_vtable = 0;

Dynamic GamepadCoordsNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GamepadCoordsNode_obj > _hx_result = new GamepadCoordsNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GamepadCoordsNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x046d415b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x046d415b;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic GamepadCoordsNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_e7fabd0ae88ddf11_13_get)
HXLINE(  14)		int num = ( (int)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  15)		 ::iron::_hx_system::Gamepad gamepad = ::iron::_hx_system::Input_obj::getGamepad(num);
HXLINE(  16)		if ((from == (int)0)) {
HXLINE(  17)			this->coords->x = gamepad->leftStick->x;
HXLINE(  18)			this->coords->y = gamepad->leftStick->y;
HXLINE(  19)			return this->coords;
            		}
            		else {
HXLINE(  21)			if ((from == (int)1)) {
HXLINE(  22)				this->coords->x = gamepad->rightStick->x;
HXLINE(  23)				this->coords->y = gamepad->rightStick->y;
HXLINE(  24)				return this->coords;
            			}
            			else {
HXLINE(  26)				if ((from == (int)2)) {
HXLINE(  27)					this->coords->x = gamepad->leftStick->movementX;
HXLINE(  28)					this->coords->y = gamepad->leftStick->movementY;
HXLINE(  29)					return this->coords;
            				}
            				else {
HXLINE(  31)					if ((from == (int)3)) {
HXLINE(  32)						this->coords->x = gamepad->rightStick->movementX;
HXLINE(  33)						this->coords->y = gamepad->rightStick->movementY;
HXLINE(  34)						return this->coords;
            					}
            				}
            			}
            		}
HXLINE(  36)		return null();
            	}



hx::ObjectPtr< GamepadCoordsNode_obj > GamepadCoordsNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< GamepadCoordsNode_obj > __this = new GamepadCoordsNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< GamepadCoordsNode_obj > GamepadCoordsNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	GamepadCoordsNode_obj *__this = (GamepadCoordsNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GamepadCoordsNode_obj), true, "armory.logicnode.GamepadCoordsNode"));
	*(void **)__this = GamepadCoordsNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

GamepadCoordsNode_obj::GamepadCoordsNode_obj()
{
}

void GamepadCoordsNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GamepadCoordsNode);
	HX_MARK_MEMBER_NAME(coords,"coords");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GamepadCoordsNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(coords,"coords");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val GamepadCoordsNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"coords") ) { return hx::Val( coords ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GamepadCoordsNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"coords") ) { coords=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GamepadCoordsNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("coords","\x1e","\xa4","\x84","\xc8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GamepadCoordsNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(GamepadCoordsNode_obj,coords),HX_HCSTRING("coords","\x1e","\xa4","\x84","\xc8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GamepadCoordsNode_obj_sStaticStorageInfo = 0;
#endif

static ::String GamepadCoordsNode_obj_sMemberFields[] = {
	HX_HCSTRING("coords","\x1e","\xa4","\x84","\xc8"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void GamepadCoordsNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GamepadCoordsNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GamepadCoordsNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GamepadCoordsNode_obj::__mClass,"__mClass");
};

#endif

hx::Class GamepadCoordsNode_obj::__mClass;

void GamepadCoordsNode_obj::__register()
{
	hx::Object *dummy = new GamepadCoordsNode_obj;
	GamepadCoordsNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.GamepadCoordsNode","\x3f","\x52","\x9f","\x3e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GamepadCoordsNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GamepadCoordsNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GamepadCoordsNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GamepadCoordsNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GamepadCoordsNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GamepadCoordsNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
