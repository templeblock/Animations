// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_armory_logicnode_ConcatenateStringNode
#include <armory/logicnode/ConcatenateStringNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e2e98391c1282294_7_new,"armory.logicnode.ConcatenateStringNode","new",0x595f3d78,"armory.logicnode.ConcatenateStringNode.new","armory/logicnode/ConcatenateStringNode.hx",7,0x3abfba3a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2e98391c1282294_12_get,"armory.logicnode.ConcatenateStringNode","get",0x5959edae,"armory.logicnode.ConcatenateStringNode.get","armory/logicnode/ConcatenateStringNode.hx",12,0x3abfba3a)
namespace armory{
namespace logicnode{

void ConcatenateStringNode_obj::__construct( ::armory::logicnode::LogicTree tree,::String __o_value){
::String value = __o_value.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_e2e98391c1282294_7_new)
HXLINE(   8)		super::__construct(tree);
HXLINE(   9)		this->value = value;
            	}

Dynamic ConcatenateStringNode_obj::__CreateEmpty() { return new ConcatenateStringNode_obj; }

void *ConcatenateStringNode_obj::_hx_vtable = 0;

Dynamic ConcatenateStringNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ConcatenateStringNode_obj > _hx_result = new ConcatenateStringNode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ConcatenateStringNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e570ea2) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e570ea2;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic ConcatenateStringNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_e2e98391c1282294_12_get)
HXLINE(  13)		this->value = HX_("",00,00,00,00);
HXLINE(  14)		{
HXLINE(  14)			int _g = (int)0;
HXDLIN(  14)			::Array< ::Dynamic> _g1 = this->inputs;
HXDLIN(  14)			while((_g < _g1->length)){
HXLINE(  14)				 ::armory::logicnode::LogicNodeInput inp = _g1->__get(_g).StaticCast<  ::armory::logicnode::LogicNodeInput >();
HXDLIN(  14)				_g = (_g + (int)1);
HXDLIN(  14)				 ::armory::logicnode::ConcatenateStringNode _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  14)				::String _hx_tmp1 = _hx_tmp->value;
HXDLIN(  14)				_hx_tmp->value = (_hx_tmp1 + ::Std_obj::string(inp->get()));
            			}
            		}
HXLINE(  15)		return this->value;
            	}



hx::ObjectPtr< ConcatenateStringNode_obj > ConcatenateStringNode_obj::__new( ::armory::logicnode::LogicTree tree,::String __o_value) {
	hx::ObjectPtr< ConcatenateStringNode_obj > __this = new ConcatenateStringNode_obj();
	__this->__construct(tree,__o_value);
	return __this;
}

hx::ObjectPtr< ConcatenateStringNode_obj > ConcatenateStringNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree,::String __o_value) {
	ConcatenateStringNode_obj *__this = (ConcatenateStringNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ConcatenateStringNode_obj), true, "armory.logicnode.ConcatenateStringNode"));
	*(void **)__this = ConcatenateStringNode_obj::_hx_vtable;
	__this->__construct(tree,__o_value);
	return __this;
}

ConcatenateStringNode_obj::ConcatenateStringNode_obj()
{
}

void ConcatenateStringNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ConcatenateStringNode);
	HX_MARK_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ConcatenateStringNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ConcatenateStringNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ConcatenateStringNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ConcatenateStringNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ConcatenateStringNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(ConcatenateStringNode_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ConcatenateStringNode_obj_sStaticStorageInfo = 0;
#endif

static ::String ConcatenateStringNode_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void ConcatenateStringNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ConcatenateStringNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ConcatenateStringNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ConcatenateStringNode_obj::__mClass,"__mClass");
};

#endif

hx::Class ConcatenateStringNode_obj::__mClass;

void ConcatenateStringNode_obj::__register()
{
	hx::Object *dummy = new ConcatenateStringNode_obj;
	ConcatenateStringNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.ConcatenateStringNode","\x86","\x61","\x2d","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ConcatenateStringNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ConcatenateStringNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ConcatenateStringNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ConcatenateStringNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConcatenateStringNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConcatenateStringNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
