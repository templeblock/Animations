// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_armory_logicnode_GetDistanceNode
#include <armory/logicnode/GetDistanceNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_767c56e9f916710f_8_new,"armory.logicnode.GetDistanceNode","new",0x9c75bd7d,"armory.logicnode.GetDistanceNode.new","armory/logicnode/GetDistanceNode.hx",8,0x631ba455)
HX_LOCAL_STACK_FRAME(_hx_pos_767c56e9f916710f_11_get,"armory.logicnode.GetDistanceNode","get",0x9c706db3,"armory.logicnode.GetDistanceNode.get","armory/logicnode/GetDistanceNode.hx",11,0x631ba455)
namespace armory{
namespace logicnode{

void GetDistanceNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_767c56e9f916710f_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic GetDistanceNode_obj::__CreateEmpty() { return new GetDistanceNode_obj; }

void *GetDistanceNode_obj::_hx_vtable = 0;

Dynamic GetDistanceNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GetDistanceNode_obj > _hx_result = new GetDistanceNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GetDistanceNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x3544eb27;
	}
}

 ::Dynamic GetDistanceNode_obj::get(int from){
            	HX_GC_STACKFRAME(&_hx_pos_767c56e9f916710f_11_get)
HXLINE(  12)		 ::iron::object::Object object1 = ( ( ::iron::object::Object)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  13)		 ::iron::object::Object object2 = ( ( ::iron::object::Object)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  15)		 ::iron::math::Mat4 _this = object1->transform->world;
HXDLIN(  15)		 ::iron::math::Vec4 v1 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this->self->_30,_this->self->_31,_this->self->_32,_this->self->_33);
HXDLIN(  15)		 ::iron::math::Mat4 _this1 = object2->transform->world;
HXDLIN(  15)		 ::iron::math::Vec4 v2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this1->self->_30,_this1->self->_31,_this1->self->_32,_this1->self->_33);
HXDLIN(  15)		float vx = (v1->x - v2->x);
HXDLIN(  15)		float vy = (v1->y - v2->y);
HXDLIN(  15)		float vz = (v1->z - v2->z);
HXDLIN(  15)		return ::Math_obj::sqrt((((vx * vx) + (vy * vy)) + (vz * vz)));
            	}



hx::ObjectPtr< GetDistanceNode_obj > GetDistanceNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< GetDistanceNode_obj > __this = new GetDistanceNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< GetDistanceNode_obj > GetDistanceNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	GetDistanceNode_obj *__this = (GetDistanceNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GetDistanceNode_obj), true, "armory.logicnode.GetDistanceNode"));
	*(void **)__this = GetDistanceNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

GetDistanceNode_obj::GetDistanceNode_obj()
{
}

hx::Val GetDistanceNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GetDistanceNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GetDistanceNode_obj_sStaticStorageInfo = 0;
#endif

static ::String GetDistanceNode_obj_sMemberFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void GetDistanceNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GetDistanceNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GetDistanceNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GetDistanceNode_obj::__mClass,"__mClass");
};

#endif

hx::Class GetDistanceNode_obj::__mClass;

void GetDistanceNode_obj::__register()
{
	hx::Object *dummy = new GetDistanceNode_obj;
	GetDistanceNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.GetDistanceNode","\x0b","\x3b","\x18","\x98");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GetDistanceNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GetDistanceNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GetDistanceNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GetDistanceNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GetDistanceNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GetDistanceNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
