// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_RemoveGroupNode
#include <armory/logicnode/RemoveGroupNode.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff147f92af7be435_6_new,"armory.logicnode.RemoveGroupNode","new",0xd118e7ed,"armory.logicnode.RemoveGroupNode.new","armory/logicnode/RemoveGroupNode.hx",6,0xde2d97e5)
HX_LOCAL_STACK_FRAME(_hx_pos_ff147f92af7be435_9_run,"armory.logicnode.RemoveGroupNode","run",0xd11bfed8,"armory.logicnode.RemoveGroupNode.run","armory/logicnode/RemoveGroupNode.hx",9,0xde2d97e5)
namespace armory{
namespace logicnode{

void RemoveGroupNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_ff147f92af7be435_6_new)
HXDLIN(   6)		super::__construct(tree);
            	}

Dynamic RemoveGroupNode_obj::__CreateEmpty() { return new RemoveGroupNode_obj; }

void *RemoveGroupNode_obj::_hx_vtable = 0;

Dynamic RemoveGroupNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RemoveGroupNode_obj > _hx_result = new RemoveGroupNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RemoveGroupNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x2f861d97;
	}
}

void RemoveGroupNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_ff147f92af7be435_9_run)
HXLINE(  10)		::String groupName = ( (::String)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  12)		::iron::Scene_obj::active->groups->remove(groupName);
HXLINE(  14)		this->super::run();
            	}



hx::ObjectPtr< RemoveGroupNode_obj > RemoveGroupNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< RemoveGroupNode_obj > __this = new RemoveGroupNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< RemoveGroupNode_obj > RemoveGroupNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	RemoveGroupNode_obj *__this = (RemoveGroupNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RemoveGroupNode_obj), true, "armory.logicnode.RemoveGroupNode"));
	*(void **)__this = RemoveGroupNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

RemoveGroupNode_obj::RemoveGroupNode_obj()
{
}

hx::Val RemoveGroupNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *RemoveGroupNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *RemoveGroupNode_obj_sStaticStorageInfo = 0;
#endif

static ::String RemoveGroupNode_obj_sMemberFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void RemoveGroupNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RemoveGroupNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RemoveGroupNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RemoveGroupNode_obj::__mClass,"__mClass");
};

#endif

hx::Class RemoveGroupNode_obj::__mClass;

void RemoveGroupNode_obj::__register()
{
	hx::Object *dummy = new RemoveGroupNode_obj;
	RemoveGroupNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.RemoveGroupNode","\x7b","\x6d","\x59","\x92");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RemoveGroupNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RemoveGroupNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RemoveGroupNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RemoveGroupNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RemoveGroupNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RemoveGroupNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
