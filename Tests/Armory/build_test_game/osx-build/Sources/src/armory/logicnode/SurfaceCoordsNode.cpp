// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SurfaceCoordsNode
#include <armory/logicnode/SurfaceCoordsNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_Mouse
#include <iron/system/Mouse.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8e0fbd92bc9b232e_5_new,"armory.logicnode.SurfaceCoordsNode","new",0xb148213d,"armory.logicnode.SurfaceCoordsNode.new","armory/logicnode/SurfaceCoordsNode.hx",5,0xf364ed15)
HX_LOCAL_STACK_FRAME(_hx_pos_8e0fbd92bc9b232e_13_get,"armory.logicnode.SurfaceCoordsNode","get",0xb142d173,"armory.logicnode.SurfaceCoordsNode.get","armory/logicnode/SurfaceCoordsNode.hx",13,0xf364ed15)
namespace armory{
namespace logicnode{

void SurfaceCoordsNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_GC_STACKFRAME(&_hx_pos_8e0fbd92bc9b232e_5_new)
HXLINE(   7)		this->coords =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  10)		super::__construct(tree);
            	}

Dynamic SurfaceCoordsNode_obj::__CreateEmpty() { return new SurfaceCoordsNode_obj; }

void *SurfaceCoordsNode_obj::_hx_vtable = 0;

Dynamic SurfaceCoordsNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SurfaceCoordsNode_obj > _hx_result = new SurfaceCoordsNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SurfaceCoordsNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x514bade7;
	}
}

 ::Dynamic SurfaceCoordsNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_8e0fbd92bc9b232e_13_get)
HXLINE(  14)		 ::iron::_hx_system::Mouse surface = ::iron::_hx_system::Input_obj::getSurface();
HXLINE(  15)		if ((from == (int)0)) {
HXLINE(  16)			this->coords->x = surface->x;
HXLINE(  17)			this->coords->y = surface->y;
HXLINE(  18)			return this->coords;
            		}
            		else {
HXLINE(  20)			if ((from == (int)1)) {
HXLINE(  21)				this->coords->x = surface->movementX;
HXLINE(  22)				this->coords->y = surface->movementY;
HXLINE(  23)				return this->coords;
            			}
            			else {
HXLINE(  26)				return surface->wheelDelta;
            			}
            		}
HXLINE(  15)		return null();
            	}



hx::ObjectPtr< SurfaceCoordsNode_obj > SurfaceCoordsNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SurfaceCoordsNode_obj > __this = new SurfaceCoordsNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SurfaceCoordsNode_obj > SurfaceCoordsNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SurfaceCoordsNode_obj *__this = (SurfaceCoordsNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SurfaceCoordsNode_obj), true, "armory.logicnode.SurfaceCoordsNode"));
	*(void **)__this = SurfaceCoordsNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SurfaceCoordsNode_obj::SurfaceCoordsNode_obj()
{
}

void SurfaceCoordsNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SurfaceCoordsNode);
	HX_MARK_MEMBER_NAME(coords,"coords");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SurfaceCoordsNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(coords,"coords");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SurfaceCoordsNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"coords") ) { return hx::Val( coords ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SurfaceCoordsNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"coords") ) { coords=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SurfaceCoordsNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("coords","\x1e","\xa4","\x84","\xc8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SurfaceCoordsNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(SurfaceCoordsNode_obj,coords),HX_HCSTRING("coords","\x1e","\xa4","\x84","\xc8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SurfaceCoordsNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SurfaceCoordsNode_obj_sMemberFields[] = {
	HX_HCSTRING("coords","\x1e","\xa4","\x84","\xc8"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void SurfaceCoordsNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SurfaceCoordsNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SurfaceCoordsNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SurfaceCoordsNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SurfaceCoordsNode_obj::__mClass;

void SurfaceCoordsNode_obj::__register()
{
	hx::Object *dummy = new SurfaceCoordsNode_obj;
	SurfaceCoordsNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SurfaceCoordsNode","\xcb","\xbe","\x7d","\x8b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SurfaceCoordsNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SurfaceCoordsNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SurfaceCoordsNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SurfaceCoordsNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SurfaceCoordsNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SurfaceCoordsNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
