// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_BooleanNode
#include <armory/logicnode/BooleanNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_616cbb619ca4e8af_7_new,"armory.logicnode.BooleanNode","new",0xf4c6403a,"armory.logicnode.BooleanNode.new","armory/logicnode/BooleanNode.hx",7,0x93a0ff38)
HX_LOCAL_STACK_FRAME(_hx_pos_616cbb619ca4e8af_12_get,"armory.logicnode.BooleanNode","get",0xf4c0f070,"armory.logicnode.BooleanNode.get","armory/logicnode/BooleanNode.hx",12,0x93a0ff38)
HX_LOCAL_STACK_FRAME(_hx_pos_616cbb619ca4e8af_18_set,"armory.logicnode.BooleanNode","set",0xf4ca0b7c,"armory.logicnode.BooleanNode.set","armory/logicnode/BooleanNode.hx",18,0x93a0ff38)
namespace armory{
namespace logicnode{

void BooleanNode_obj::__construct( ::armory::logicnode::LogicTree tree,hx::Null< bool >  __o_value){
bool value = __o_value.Default(false);
            	HX_STACKFRAME(&_hx_pos_616cbb619ca4e8af_7_new)
HXLINE(   8)		super::__construct(tree);
HXLINE(   9)		this->value = value;
            	}

Dynamic BooleanNode_obj::__CreateEmpty() { return new BooleanNode_obj; }

void *BooleanNode_obj::_hx_vtable = 0;

Dynamic BooleanNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BooleanNode_obj > _hx_result = new BooleanNode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool BooleanNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0a4e1b90) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0a4e1b90;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic BooleanNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_616cbb619ca4e8af_12_get)
HXLINE(  13)		if ((this->inputs->length > (int)0)) {
HXLINE(  13)			return this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get();
            		}
HXLINE(  14)		return this->value;
            	}


void BooleanNode_obj::set( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_616cbb619ca4e8af_18_set)
HXDLIN(  18)		if ((this->inputs->length > (int)0)) {
HXDLIN(  18)			this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->set(value);
            		}
            		else {
HXLINE(  19)			this->value = ( (bool)(value) );
            		}
            	}



hx::ObjectPtr< BooleanNode_obj > BooleanNode_obj::__new( ::armory::logicnode::LogicTree tree,hx::Null< bool >  __o_value) {
	hx::ObjectPtr< BooleanNode_obj > __this = new BooleanNode_obj();
	__this->__construct(tree,__o_value);
	return __this;
}

hx::ObjectPtr< BooleanNode_obj > BooleanNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree,hx::Null< bool >  __o_value) {
	BooleanNode_obj *__this = (BooleanNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BooleanNode_obj), true, "armory.logicnode.BooleanNode"));
	*(void **)__this = BooleanNode_obj::_hx_vtable;
	__this->__construct(tree,__o_value);
	return __this;
}

BooleanNode_obj::BooleanNode_obj()
{
}

hx::Val BooleanNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BooleanNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BooleanNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BooleanNode_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(BooleanNode_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BooleanNode_obj_sStaticStorageInfo = 0;
#endif

static ::String BooleanNode_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void BooleanNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BooleanNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BooleanNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BooleanNode_obj::__mClass,"__mClass");
};

#endif

hx::Class BooleanNode_obj::__mClass;

void BooleanNode_obj::__register()
{
	hx::Object *dummy = new BooleanNode_obj;
	BooleanNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.BooleanNode","\x48","\x5b","\xe7","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BooleanNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BooleanNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BooleanNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BooleanNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BooleanNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BooleanNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
