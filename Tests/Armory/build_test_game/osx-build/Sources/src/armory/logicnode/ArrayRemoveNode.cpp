// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_ArrayRemoveNode
#include <armory/logicnode/ArrayRemoveNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0dae8238d053ebf3_3_new,"armory.logicnode.ArrayRemoveNode","new",0xf440c04f,"armory.logicnode.ArrayRemoveNode.new","armory/logicnode/ArrayRemoveNode.hx",3,0xb2b661c3)
HX_LOCAL_STACK_FRAME(_hx_pos_0dae8238d053ebf3_11_run,"armory.logicnode.ArrayRemoveNode","run",0xf443d73a,"armory.logicnode.ArrayRemoveNode.run","armory/logicnode/ArrayRemoveNode.hx",11,0xb2b661c3)
HX_LOCAL_STACK_FRAME(_hx_pos_0dae8238d053ebf3_23_get,"armory.logicnode.ArrayRemoveNode","get",0xf43b7085,"armory.logicnode.ArrayRemoveNode.get","armory/logicnode/ArrayRemoveNode.hx",23,0xb2b661c3)
namespace armory{
namespace logicnode{

void ArrayRemoveNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_0dae8238d053ebf3_3_new)
HXLINE(   5)		this->removedValue = null();
HXLINE(   8)		super::__construct(tree);
            	}

Dynamic ArrayRemoveNode_obj::__CreateEmpty() { return new ArrayRemoveNode_obj; }

void *ArrayRemoveNode_obj::_hx_vtable = 0;

Dynamic ArrayRemoveNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayRemoveNode_obj > _hx_result = new ArrayRemoveNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ArrayRemoveNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ab98e5d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0ab98e5d;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

void ArrayRemoveNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_0dae8238d053ebf3_11_run)
HXLINE(  12)		::cpp::VirtualArray ar = ( (::cpp::VirtualArray)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  13)		int i = ( (int)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  14)		if ((i < (int)0)) {
HXLINE(  14)			i = (ar->get_length() + i);
            		}
HXLINE(  16)		this->removedValue = ar->__get(i);
HXLINE(  17)		ar->splice(i,(int)1);
HXLINE(  19)		this->runOutputs((int)0);
            	}


 ::Dynamic ArrayRemoveNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_0dae8238d053ebf3_23_get)
HXDLIN(  23)		return this->removedValue;
            	}



hx::ObjectPtr< ArrayRemoveNode_obj > ArrayRemoveNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< ArrayRemoveNode_obj > __this = new ArrayRemoveNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< ArrayRemoveNode_obj > ArrayRemoveNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	ArrayRemoveNode_obj *__this = (ArrayRemoveNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ArrayRemoveNode_obj), true, "armory.logicnode.ArrayRemoveNode"));
	*(void **)__this = ArrayRemoveNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

ArrayRemoveNode_obj::ArrayRemoveNode_obj()
{
}

void ArrayRemoveNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArrayRemoveNode);
	HX_MARK_MEMBER_NAME(removedValue,"removedValue");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ArrayRemoveNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(removedValue,"removedValue");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ArrayRemoveNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"removedValue") ) { return hx::Val( removedValue ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ArrayRemoveNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"removedValue") ) { removedValue=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArrayRemoveNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("removedValue","\xb1","\x2b","\x2f","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ArrayRemoveNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ArrayRemoveNode_obj,removedValue),HX_HCSTRING("removedValue","\xb1","\x2b","\x2f","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ArrayRemoveNode_obj_sStaticStorageInfo = 0;
#endif

static ::String ArrayRemoveNode_obj_sMemberFields[] = {
	HX_HCSTRING("removedValue","\xb1","\x2b","\x2f","\xfb"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void ArrayRemoveNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArrayRemoveNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArrayRemoveNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArrayRemoveNode_obj::__mClass,"__mClass");
};

#endif

hx::Class ArrayRemoveNode_obj::__mClass;

void ArrayRemoveNode_obj::__register()
{
	hx::Object *dummy = new ArrayRemoveNode_obj;
	ArrayRemoveNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.ArrayRemoveNode","\xdd","\xec","\x10","\x3d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArrayRemoveNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ArrayRemoveNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ArrayRemoveNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArrayRemoveNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayRemoveNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayRemoveNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
