// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SetStaticPropertyNode
#include <armory/logicnode/SetStaticPropertyNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a01a75abe7a780af_6_new,"armory.logicnode.SetStaticPropertyNode","new",0x417caa77,"armory.logicnode.SetStaticPropertyNode.new","armory/logicnode/SetStaticPropertyNode.hx",6,0x80ab321b)
HX_LOCAL_STACK_FRAME(_hx_pos_a01a75abe7a780af_9_run,"armory.logicnode.SetStaticPropertyNode","run",0x417fc162,"armory.logicnode.SetStaticPropertyNode.run","armory/logicnode/SetStaticPropertyNode.hx",9,0x80ab321b)
namespace armory{
namespace logicnode{

void SetStaticPropertyNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_a01a75abe7a780af_6_new)
HXDLIN(   6)		super::__construct(tree);
            	}

Dynamic SetStaticPropertyNode_obj::__CreateEmpty() { return new SetStaticPropertyNode_obj; }

void *SetStaticPropertyNode_obj::_hx_vtable = 0;

Dynamic SetStaticPropertyNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SetStaticPropertyNode_obj > _hx_result = new SetStaticPropertyNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SetStaticPropertyNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x045c5021) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x045c5021;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

void SetStaticPropertyNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_a01a75abe7a780af_9_run)
HXLINE(  10)		::String className = ( (::String)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  11)		::String property = ( (::String)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  12)		 ::Dynamic value = this->inputs->__get((int)3).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get();
HXLINE(  14)		hx::Class cl = ::Type_obj::resolveClass(className);
HXLINE(  15)		if (hx::IsNull( cl )) {
HXLINE(  15)			return;
            		}
HXLINE(  16)		::Reflect_obj::setField(cl,property,value);
HXLINE(  18)		this->super::run();
            	}



hx::ObjectPtr< SetStaticPropertyNode_obj > SetStaticPropertyNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SetStaticPropertyNode_obj > __this = new SetStaticPropertyNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SetStaticPropertyNode_obj > SetStaticPropertyNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SetStaticPropertyNode_obj *__this = (SetStaticPropertyNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SetStaticPropertyNode_obj), true, "armory.logicnode.SetStaticPropertyNode"));
	*(void **)__this = SetStaticPropertyNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SetStaticPropertyNode_obj::SetStaticPropertyNode_obj()
{
}

hx::Val SetStaticPropertyNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SetStaticPropertyNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SetStaticPropertyNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SetStaticPropertyNode_obj_sMemberFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void SetStaticPropertyNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SetStaticPropertyNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SetStaticPropertyNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SetStaticPropertyNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SetStaticPropertyNode_obj::__mClass;

void SetStaticPropertyNode_obj::__register()
{
	hx::Object *dummy = new SetStaticPropertyNode_obj;
	SetStaticPropertyNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SetStaticPropertyNode","\x05","\xa3","\x32","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SetStaticPropertyNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SetStaticPropertyNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SetStaticPropertyNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SetStaticPropertyNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SetStaticPropertyNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SetStaticPropertyNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
