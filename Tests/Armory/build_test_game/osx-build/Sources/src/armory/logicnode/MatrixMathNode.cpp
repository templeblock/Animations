// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_MatrixMathNode
#include <armory/logicnode/MatrixMathNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_103239934e4500ba_6_new,"armory.logicnode.MatrixMathNode","new",0xf0c05eff,"armory.logicnode.MatrixMathNode.new","armory/logicnode/MatrixMathNode.hx",6,0xe9ed8fcf)
HX_LOCAL_STACK_FRAME(_hx_pos_103239934e4500ba_15_get,"armory.logicnode.MatrixMathNode","get",0xf0bb0f35,"armory.logicnode.MatrixMathNode.get","armory/logicnode/MatrixMathNode.hx",15,0xe9ed8fcf)
namespace armory{
namespace logicnode{

void MatrixMathNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_103239934e4500ba_6_new)
HXLINE(   9)		this->m = ::iron::math::Mat4_obj::identity();
HXLINE(  12)		super::__construct(tree);
            	}

Dynamic MatrixMathNode_obj::__CreateEmpty() { return new MatrixMathNode_obj; }

void *MatrixMathNode_obj::_hx_vtable = 0;

Dynamic MatrixMathNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MatrixMathNode_obj > _hx_result = new MatrixMathNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MatrixMathNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x72b13af1;
	}
}

 ::Dynamic MatrixMathNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_103239934e4500ba_15_get)
HXLINE(  16)		 ::iron::math::Mat4 m1 = ( ( ::iron::math::Mat4)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  17)		 ::iron::math::Mat4 m2 = ( ( ::iron::math::Mat4)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  19)		this->m->setFrom(m1);
HXLINE(  20)		{
HXLINE(  20)			::String _g = this->property0;
HXDLIN(  20)			if ((_g == HX_("Multiply",44,9e,3e,74))) {
HXLINE(  22)				this->m->multmat2(m2);
            			}
            		}
HXLINE(  25)		return this->m;
            	}



hx::ObjectPtr< MatrixMathNode_obj > MatrixMathNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< MatrixMathNode_obj > __this = new MatrixMathNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< MatrixMathNode_obj > MatrixMathNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	MatrixMathNode_obj *__this = (MatrixMathNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MatrixMathNode_obj), true, "armory.logicnode.MatrixMathNode"));
	*(void **)__this = MatrixMathNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

MatrixMathNode_obj::MatrixMathNode_obj()
{
}

void MatrixMathNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MatrixMathNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	HX_MARK_MEMBER_NAME(m,"m");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MatrixMathNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	HX_VISIT_MEMBER_NAME(m,"m");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MatrixMathNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"m") ) { return hx::Val( m ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MatrixMathNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"m") ) { m=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MatrixMathNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("m","\x6d","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MatrixMathNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(MatrixMathNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(MatrixMathNode_obj,m),HX_HCSTRING("m","\x6d","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MatrixMathNode_obj_sStaticStorageInfo = 0;
#endif

static ::String MatrixMathNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("m","\x6d","\x00","\x00","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void MatrixMathNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MatrixMathNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MatrixMathNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MatrixMathNode_obj::__mClass,"__mClass");
};

#endif

hx::Class MatrixMathNode_obj::__mClass;

void MatrixMathNode_obj::__register()
{
	hx::Object *dummy = new MatrixMathNode_obj;
	MatrixMathNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.MatrixMathNode","\x8d","\x73","\x4f","\xba");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MatrixMathNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MatrixMathNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MatrixMathNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MatrixMathNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MatrixMathNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MatrixMathNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
