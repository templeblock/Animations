// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_RandomVectorNode
#include <armory/logicnode/RandomVectorNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a897c98678aaea9_5_new,"armory.logicnode.RandomVectorNode","new",0x6d78cafc,"armory.logicnode.RandomVectorNode.new","armory/logicnode/RandomVectorNode.hx",5,0xfe018df2)
HX_LOCAL_STACK_FRAME(_hx_pos_0a897c98678aaea9_13_get,"armory.logicnode.RandomVectorNode","get",0x6d737b32,"armory.logicnode.RandomVectorNode.get","armory/logicnode/RandomVectorNode.hx",13,0xfe018df2)
namespace armory{
namespace logicnode{

void RandomVectorNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_GC_STACKFRAME(&_hx_pos_0a897c98678aaea9_5_new)
HXLINE(   7)		this->v =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  10)		super::__construct(tree);
            	}

Dynamic RandomVectorNode_obj::__CreateEmpty() { return new RandomVectorNode_obj; }

void *RandomVectorNode_obj::_hx_vtable = 0;

Dynamic RandomVectorNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RandomVectorNode_obj > _hx_result = new RandomVectorNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RandomVectorNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0476456e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0476456e;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic RandomVectorNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_0a897c98678aaea9_13_get)
HXLINE(  14)		 ::iron::math::Vec4 min = ( ( ::iron::math::Vec4)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  15)		 ::iron::math::Vec4 max = ( ( ::iron::math::Vec4)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  16)		float min1 = min->x;
HXDLIN(  16)		Float x = ::Math_obj::random();
HXDLIN(  16)		Float x1 = (min1 + (x * (max->x - min->x)));
HXLINE(  17)		float min2 = min->y;
HXDLIN(  17)		Float y = ::Math_obj::random();
HXDLIN(  17)		Float y1 = (min2 + (y * (max->y - min->y)));
HXLINE(  18)		float min3 = min->z;
HXDLIN(  18)		Float z = ::Math_obj::random();
HXDLIN(  18)		Float z1 = (min3 + (z * (max->z - min->z)));
HXLINE(  19)		this->v->set(x1,y1,z1,null());
HXLINE(  20)		return this->v;
            	}



hx::ObjectPtr< RandomVectorNode_obj > RandomVectorNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< RandomVectorNode_obj > __this = new RandomVectorNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< RandomVectorNode_obj > RandomVectorNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	RandomVectorNode_obj *__this = (RandomVectorNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RandomVectorNode_obj), true, "armory.logicnode.RandomVectorNode"));
	*(void **)__this = RandomVectorNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

RandomVectorNode_obj::RandomVectorNode_obj()
{
}

void RandomVectorNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RandomVectorNode);
	HX_MARK_MEMBER_NAME(v,"v");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RandomVectorNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(v,"v");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val RandomVectorNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { return hx::Val( v ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RandomVectorNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { v=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RandomVectorNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("v","\x76","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RandomVectorNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(RandomVectorNode_obj,v),HX_HCSTRING("v","\x76","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RandomVectorNode_obj_sStaticStorageInfo = 0;
#endif

static ::String RandomVectorNode_obj_sMemberFields[] = {
	HX_HCSTRING("v","\x76","\x00","\x00","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void RandomVectorNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RandomVectorNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RandomVectorNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RandomVectorNode_obj::__mClass,"__mClass");
};

#endif

hx::Class RandomVectorNode_obj::__mClass;

void RandomVectorNode_obj::__register()
{
	hx::Object *dummy = new RandomVectorNode_obj;
	RandomVectorNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.RandomVectorNode","\x0a","\xdd","\x88","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RandomVectorNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RandomVectorNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RandomVectorNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RandomVectorNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RandomVectorNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RandomVectorNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
