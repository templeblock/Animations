// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_TransformNode
#include <armory/logicnode/TransformNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fc13ad1ecdbe05a7_7_new,"armory.logicnode.TransformNode","new",0x45d1c27e,"armory.logicnode.TransformNode.new","armory/logicnode/TransformNode.hx",7,0xba7725f4)
HX_LOCAL_STACK_FRAME(_hx_pos_fc13ad1ecdbe05a7_18_get,"armory.logicnode.TransformNode","get",0x45cc72b4,"armory.logicnode.TransformNode.get","armory/logicnode/TransformNode.hx",18,0xba7725f4)
HX_LOCAL_STACK_FRAME(_hx_pos_fc13ad1ecdbe05a7_27_set,"armory.logicnode.TransformNode","set",0x45d58dc0,"armory.logicnode.TransformNode.set","armory/logicnode/TransformNode.hx",27,0xba7725f4)
HX_LOCAL_STACK_FRAME(_hx_pos_fc13ad1ecdbe05a7_10_boot,"armory.logicnode.TransformNode","boot",0xc9d16c54,"armory.logicnode.TransformNode.boot","armory/logicnode/TransformNode.hx",10,0xba7725f4)
HX_LOCAL_STACK_FRAME(_hx_pos_fc13ad1ecdbe05a7_11_boot,"armory.logicnode.TransformNode","boot",0xc9d16c54,"armory.logicnode.TransformNode.boot","armory/logicnode/TransformNode.hx",11,0xba7725f4)
HX_LOCAL_STACK_FRAME(_hx_pos_fc13ad1ecdbe05a7_12_boot,"armory.logicnode.TransformNode","boot",0xc9d16c54,"armory.logicnode.TransformNode.boot","armory/logicnode/TransformNode.hx",12,0xba7725f4)
namespace armory{
namespace logicnode{

void TransformNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_fc13ad1ecdbe05a7_7_new)
HXLINE(   9)		this->value = ::iron::math::Mat4_obj::identity();
HXLINE(  15)		super::__construct(tree);
            	}

Dynamic TransformNode_obj::__CreateEmpty() { return new TransformNode_obj; }

void *TransformNode_obj::_hx_vtable = 0;

Dynamic TransformNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TransformNode_obj > _hx_result = new TransformNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TransformNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x5e20ad0c;
	}
}

 ::Dynamic TransformNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_fc13ad1ecdbe05a7_18_get)
HXLINE(  19)		 ::iron::math::Vec4 loc = ( ( ::iron::math::Vec4)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  20)		 ::iron::math::Vec4 rot = ( ( ::iron::math::Vec4)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  21)		::armory::logicnode::TransformNode_obj::q->fromEuler(rot->x,rot->y,rot->z);
HXLINE(  22)		 ::iron::math::Vec4 scale = ( ( ::iron::math::Vec4)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  23)		this->value->compose(loc,::armory::logicnode::TransformNode_obj::q,scale);
HXLINE(  24)		return this->value;
            	}


void TransformNode_obj::set( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_fc13ad1ecdbe05a7_27_set)
HXLINE(  28)		hx::TCast<  ::iron::math::Mat4 >::cast(value)->decompose(::armory::logicnode::TransformNode_obj::v1,::armory::logicnode::TransformNode_obj::q,::armory::logicnode::TransformNode_obj::v2);
HXLINE(  29)		this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->set(::armory::logicnode::TransformNode_obj::v1);
HXLINE(  30)		 ::armory::logicnode::LogicNodeInput _hx_tmp = this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >();
HXDLIN(  30)		_hx_tmp->set(::armory::logicnode::TransformNode_obj::q->getEuler());
HXLINE(  31)		this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->set(::armory::logicnode::TransformNode_obj::v2);
            	}


 ::iron::math::Quat TransformNode_obj::q;

 ::iron::math::Vec4 TransformNode_obj::v1;

 ::iron::math::Vec4 TransformNode_obj::v2;


hx::ObjectPtr< TransformNode_obj > TransformNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< TransformNode_obj > __this = new TransformNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< TransformNode_obj > TransformNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	TransformNode_obj *__this = (TransformNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TransformNode_obj), true, "armory.logicnode.TransformNode"));
	*(void **)__this = TransformNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

TransformNode_obj::TransformNode_obj()
{
}

void TransformNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TransformNode);
	HX_MARK_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TransformNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TransformNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TransformNode_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { outValue = ( q ); return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"v1") ) { outValue = ( v1 ); return true; }
		if (HX_FIELD_EQ(inName,"v2") ) { outValue = ( v2 ); return true; }
	}
	return false;
}

hx::Val TransformNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TransformNode_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { q=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"v1") ) { v1=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"v2") ) { v2=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
	}
	return false;
}

void TransformNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TransformNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(TransformNode_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TransformNode_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &TransformNode_obj::q,HX_HCSTRING("q","\x71","\x00","\x00","\x00")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &TransformNode_obj::v1,HX_HCSTRING("v1","\xfb","\x66","\x00","\x00")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &TransformNode_obj::v2,HX_HCSTRING("v2","\xfc","\x66","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TransformNode_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void TransformNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TransformNode_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TransformNode_obj::q,"q");
	HX_MARK_MEMBER_NAME(TransformNode_obj::v1,"v1");
	HX_MARK_MEMBER_NAME(TransformNode_obj::v2,"v2");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TransformNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TransformNode_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TransformNode_obj::q,"q");
	HX_VISIT_MEMBER_NAME(TransformNode_obj::v1,"v1");
	HX_VISIT_MEMBER_NAME(TransformNode_obj::v2,"v2");
};

#endif

hx::Class TransformNode_obj::__mClass;

static ::String TransformNode_obj_sStaticFields[] = {
	HX_HCSTRING("q","\x71","\x00","\x00","\x00"),
	HX_HCSTRING("v1","\xfb","\x66","\x00","\x00"),
	HX_HCSTRING("v2","\xfc","\x66","\x00","\x00"),
	::String(null())
};

void TransformNode_obj::__register()
{
	hx::Object *dummy = new TransformNode_obj;
	TransformNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.TransformNode","\x8c","\x6b","\x6b","\x19");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TransformNode_obj::__GetStatic;
	__mClass->mSetStaticField = &TransformNode_obj::__SetStatic;
	__mClass->mMarkFunc = TransformNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TransformNode_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TransformNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TransformNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TransformNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TransformNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TransformNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TransformNode_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_fc13ad1ecdbe05a7_10_boot)
HXDLIN(  10)		q =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fc13ad1ecdbe05a7_11_boot)
HXDLIN(  11)		v1 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fc13ad1ecdbe05a7_12_boot)
HXDLIN(  12)		v2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace armory
} // end namespace logicnode
