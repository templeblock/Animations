// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_OnUpdateNode
#include <armory/logicnode/OnUpdateNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_94a252af08a7457c_5_new,"armory.logicnode.OnUpdateNode","new",0xca92c55e,"armory.logicnode.OnUpdateNode.new","armory/logicnode/OnUpdateNode.hx",5,0x878c1ed0)
HX_LOCAL_STACK_FRAME(_hx_pos_94a252af08a7457c_12_update,"armory.logicnode.OnUpdateNode","update",0x277b43cb,"armory.logicnode.OnUpdateNode.update","armory/logicnode/OnUpdateNode.hx",12,0x878c1ed0)
namespace armory{
namespace logicnode{

void OnUpdateNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_94a252af08a7457c_5_new)
HXLINE(   6)		super::__construct(tree);
HXLINE(   8)		tree->notifyOnUpdate(this->update_dyn());
            	}

Dynamic OnUpdateNode_obj::__CreateEmpty() { return new OnUpdateNode_obj; }

void *OnUpdateNode_obj::_hx_vtable = 0;

Dynamic OnUpdateNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OnUpdateNode_obj > _hx_result = new OnUpdateNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OnUpdateNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x7f816574;
	}
}

void OnUpdateNode_obj::update(){
            	HX_STACKFRAME(&_hx_pos_94a252af08a7457c_12_update)
HXDLIN(  12)		this->run();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OnUpdateNode_obj,update,(void))


hx::ObjectPtr< OnUpdateNode_obj > OnUpdateNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< OnUpdateNode_obj > __this = new OnUpdateNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< OnUpdateNode_obj > OnUpdateNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	OnUpdateNode_obj *__this = (OnUpdateNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OnUpdateNode_obj), true, "armory.logicnode.OnUpdateNode"));
	*(void **)__this = OnUpdateNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

OnUpdateNode_obj::OnUpdateNode_obj()
{
}

hx::Val OnUpdateNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *OnUpdateNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *OnUpdateNode_obj_sStaticStorageInfo = 0;
#endif

static ::String OnUpdateNode_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void OnUpdateNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OnUpdateNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OnUpdateNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OnUpdateNode_obj::__mClass,"__mClass");
};

#endif

hx::Class OnUpdateNode_obj::__mClass;

void OnUpdateNode_obj::__register()
{
	hx::Object *dummy = new OnUpdateNode_obj;
	OnUpdateNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.OnUpdateNode","\x6c","\x7e","\xf9","\x8e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OnUpdateNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OnUpdateNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OnUpdateNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OnUpdateNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OnUpdateNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OnUpdateNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
