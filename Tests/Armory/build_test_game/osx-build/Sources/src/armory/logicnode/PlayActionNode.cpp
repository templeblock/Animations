// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_PlayActionNode
#include <armory/logicnode/PlayActionNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_BoneAnimation
#include <iron/object/BoneAnimation.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5f4fb06764be49ba_8_new,"armory.logicnode.PlayActionNode","new",0x2a265c20,"armory.logicnode.PlayActionNode.new","armory/logicnode/PlayActionNode.hx",8,0xd7d151ce)
HX_LOCAL_STACK_FRAME(_hx_pos_5f4fb06764be49ba_22_run,"armory.logicnode.PlayActionNode","run",0x2a29730b,"armory.logicnode.PlayActionNode.run","armory/logicnode/PlayActionNode.hx",22,0xd7d151ce)
HX_LOCAL_STACK_FRAME(_hx_pos_5f4fb06764be49ba_11_run,"armory.logicnode.PlayActionNode","run",0x2a29730b,"armory.logicnode.PlayActionNode.run","armory/logicnode/PlayActionNode.hx",11,0xd7d151ce)
namespace armory{
namespace logicnode{

void PlayActionNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_5f4fb06764be49ba_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic PlayActionNode_obj::__CreateEmpty() { return new PlayActionNode_obj; }

void *PlayActionNode_obj::_hx_vtable = 0;

Dynamic PlayActionNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayActionNode_obj > _hx_result = new PlayActionNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayActionNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x7d67d392;
	}
}

void PlayActionNode_obj::run(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::armory::logicnode::PlayActionNode,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_5f4fb06764be49ba_22_run)
HXLINE(  22)			_gthis->runOutputs((int)1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_5f4fb06764be49ba_11_run)
HXDLIN(  11)		 ::armory::logicnode::PlayActionNode _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  12)		 ::iron::object::Object object = ( ( ::iron::object::Object)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  13)		::String action = ( (::String)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  15)		Float blendTime;
HXDLIN(  15)		if ((this->inputs->length > (int)3)) {
HXLINE(  15)			blendTime = ( (Float)(this->inputs->__get((int)3).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
            		}
            		else {
HXLINE(  15)			blendTime = ((Float)0.2);
            		}
HXLINE(  17)		if (hx::IsNull( object )) {
HXLINE(  17)			return;
            		}
HXLINE(  18)		 ::iron::object::Animation animation = object->animation;
HXLINE(  19)		if (hx::IsNull( animation )) {
HXLINE(  19)			animation = object->getParentArmature(object->name);
            		}
HXLINE(  21)		animation->play(action, ::Dynamic(new _hx_Closure_0(_gthis)),blendTime,null(),null());
HXLINE(  25)		this->runOutputs((int)0);
            	}



hx::ObjectPtr< PlayActionNode_obj > PlayActionNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< PlayActionNode_obj > __this = new PlayActionNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< PlayActionNode_obj > PlayActionNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	PlayActionNode_obj *__this = (PlayActionNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayActionNode_obj), true, "armory.logicnode.PlayActionNode"));
	*(void **)__this = PlayActionNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

PlayActionNode_obj::PlayActionNode_obj()
{
}

hx::Val PlayActionNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PlayActionNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *PlayActionNode_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayActionNode_obj_sMemberFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void PlayActionNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayActionNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayActionNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayActionNode_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayActionNode_obj::__mClass;

void PlayActionNode_obj::__register()
{
	hx::Object *dummy = new PlayActionNode_obj;
	PlayActionNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.PlayActionNode","\x2e","\x0c","\x06","\xc5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayActionNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayActionNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayActionNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayActionNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayActionNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayActionNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
