// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_ObjectNode
#include <armory/logicnode/ObjectNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_SetParentNode
#include <armory/logicnode/SetParentNode.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7cf599fb178ecf7c_8_new,"armory.logicnode.SetParentNode","new",0xcbf90f7e,"armory.logicnode.SetParentNode.new","armory/logicnode/SetParentNode.hx",8,0xd57878f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7cf599fb178ecf7c_11_run,"armory.logicnode.SetParentNode","run",0xcbfc2669,"armory.logicnode.SetParentNode.run","armory/logicnode/SetParentNode.hx",11,0xd57878f4)
namespace armory{
namespace logicnode{

void SetParentNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_7cf599fb178ecf7c_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic SetParentNode_obj::__CreateEmpty() { return new SetParentNode_obj; }

void *SetParentNode_obj::_hx_vtable = 0;

Dynamic SetParentNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SetParentNode_obj > _hx_result = new SetParentNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SetParentNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x715d7a0c;
	}
}

void SetParentNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_7cf599fb178ecf7c_11_run)
HXLINE(  12)		 ::iron::object::Object object = ( ( ::iron::object::Object)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  14)		 ::iron::object::Object parent;
HXLINE(  15)		bool isUnparent = false;
HXLINE(  16)		if (::Std_obj::is(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->node,hx::ClassOf< ::armory::logicnode::ObjectNode >())) {
HXLINE(  17)			 ::armory::logicnode::ObjectNode parentNode = hx::TCast<  ::armory::logicnode::ObjectNode >::cast(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->node);
HXLINE(  18)			isUnparent = (parentNode->objectName == HX_("",00,00,00,00));
            		}
HXLINE(  20)		if (isUnparent) {
HXLINE(  20)			parent = ::iron::Scene_obj::active->root;
            		}
            		else {
HXLINE(  21)			parent = ( ( ::iron::object::Object)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
            		}
HXLINE(  23)		bool _hx_tmp;
HXDLIN(  23)		bool _hx_tmp1;
HXDLIN(  23)		if (hx::IsNotNull( object )) {
HXLINE(  23)			_hx_tmp1 = hx::IsNull( parent );
            		}
            		else {
HXLINE(  23)			_hx_tmp1 = true;
            		}
HXDLIN(  23)		if (!(_hx_tmp1)) {
HXLINE(  23)			_hx_tmp = hx::IsEq( object->parent,parent );
            		}
            		else {
HXLINE(  23)			_hx_tmp = true;
            		}
HXDLIN(  23)		if (_hx_tmp) {
HXLINE(  23)			return;
            		}
HXLINE(  25)		object->parent->removeChild(object,isUnparent);
HXLINE(  26)		parent->addChild(object,!(isUnparent));
HXLINE(  28)		this->super::run();
            	}



hx::ObjectPtr< SetParentNode_obj > SetParentNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SetParentNode_obj > __this = new SetParentNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SetParentNode_obj > SetParentNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SetParentNode_obj *__this = (SetParentNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SetParentNode_obj), true, "armory.logicnode.SetParentNode"));
	*(void **)__this = SetParentNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SetParentNode_obj::SetParentNode_obj()
{
}

hx::Val SetParentNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SetParentNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SetParentNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SetParentNode_obj_sMemberFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void SetParentNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SetParentNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SetParentNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SetParentNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SetParentNode_obj::__mClass;

void SetParentNode_obj::__register()
{
	hx::Object *dummy = new SetParentNode_obj;
	SetParentNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SetParentNode","\x8c","\x38","\xa8","\x2c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SetParentNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SetParentNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SetParentNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SetParentNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SetParentNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SetParentNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
