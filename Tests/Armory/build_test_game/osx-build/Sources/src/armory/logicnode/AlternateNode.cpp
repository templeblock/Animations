// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_AlternateNode
#include <armory/logicnode/AlternateNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_29dc3bda5a9c48a7_3_new,"armory.logicnode.AlternateNode","new",0xbe47dc4c,"armory.logicnode.AlternateNode.new","armory/logicnode/AlternateNode.hx",3,0x9087bfe6)
HX_LOCAL_STACK_FRAME(_hx_pos_29dc3bda5a9c48a7_11_run,"armory.logicnode.AlternateNode","run",0xbe4af337,"armory.logicnode.AlternateNode.run","armory/logicnode/AlternateNode.hx",11,0x9087bfe6)
namespace armory{
namespace logicnode{

void AlternateNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_29dc3bda5a9c48a7_3_new)
HXLINE(   5)		this->b = true;
HXLINE(   8)		super::__construct(tree);
            	}

Dynamic AlternateNode_obj::__CreateEmpty() { return new AlternateNode_obj; }

void *AlternateNode_obj::_hx_vtable = 0;

Dynamic AlternateNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AlternateNode_obj > _hx_result = new AlternateNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AlternateNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x563647da;
	}
}

void AlternateNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_29dc3bda5a9c48a7_11_run)
HXLINE(  12)		if (this->b) {
HXLINE(  12)			this->runOutputs((int)0);
            		}
            		else {
HXLINE(  12)			this->runOutputs((int)1);
            		}
HXLINE(  13)		this->b = !(this->b);
            	}



hx::ObjectPtr< AlternateNode_obj > AlternateNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< AlternateNode_obj > __this = new AlternateNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< AlternateNode_obj > AlternateNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	AlternateNode_obj *__this = (AlternateNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AlternateNode_obj), true, "armory.logicnode.AlternateNode"));
	*(void **)__this = AlternateNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

AlternateNode_obj::AlternateNode_obj()
{
}

hx::Val AlternateNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AlternateNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AlternateNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AlternateNode_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(AlternateNode_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AlternateNode_obj_sStaticStorageInfo = 0;
#endif

static ::String AlternateNode_obj_sMemberFields[] = {
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void AlternateNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AlternateNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AlternateNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AlternateNode_obj::__mClass,"__mClass");
};

#endif

hx::Class AlternateNode_obj::__mClass;

void AlternateNode_obj::__register()
{
	hx::Object *dummy = new AlternateNode_obj;
	AlternateNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.AlternateNode","\x5a","\x06","\x81","\x11");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AlternateNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AlternateNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AlternateNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AlternateNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AlternateNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AlternateNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
