// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_ObjectNode
#include <armory/logicnode/ObjectNode.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_28fb47ed07746523_10_new,"armory.logicnode.ObjectNode","new",0xe56e4215,"armory.logicnode.ObjectNode.new","armory/logicnode/ObjectNode.hx",10,0x178c8a79)
HX_LOCAL_STACK_FRAME(_hx_pos_28fb47ed07746523_15_get,"armory.logicnode.ObjectNode","get",0xe568f24b,"armory.logicnode.ObjectNode.get","armory/logicnode/ObjectNode.hx",15,0x178c8a79)
HX_LOCAL_STACK_FRAME(_hx_pos_28fb47ed07746523_22_set,"armory.logicnode.ObjectNode","set",0xe5720d57,"armory.logicnode.ObjectNode.set","armory/logicnode/ObjectNode.hx",22,0x178c8a79)
namespace armory{
namespace logicnode{

void ObjectNode_obj::__construct( ::armory::logicnode::LogicTree tree,::String __o_objectName){
::String objectName = __o_objectName.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_28fb47ed07746523_10_new)
HXLINE(  11)		this->objectName = objectName;
HXLINE(  12)		super::__construct(tree);
            	}

Dynamic ObjectNode_obj::__CreateEmpty() { return new ObjectNode_obj; }

void *ObjectNode_obj::_hx_vtable = 0;

Dynamic ObjectNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ObjectNode_obj > _hx_result = new ObjectNode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ObjectNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0dda745b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0dda745b;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic ObjectNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_28fb47ed07746523_15_get)
HXLINE(  16)		if ((this->inputs->length > (int)0)) {
HXLINE(  16)			return this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get();
            		}
HXLINE(  17)		 ::iron::object::Object _hx_tmp;
HXDLIN(  17)		if ((this->objectName != HX_("",00,00,00,00))) {
HXLINE(  17)			_hx_tmp = ::iron::Scene_obj::active->getChild(this->objectName);
            		}
            		else {
HXLINE(  17)			_hx_tmp = this->tree->object;
            		}
HXDLIN(  17)		this->value = _hx_tmp;
HXLINE(  18)		return this->value;
            	}


void ObjectNode_obj::set( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_28fb47ed07746523_22_set)
HXDLIN(  22)		if ((this->inputs->length > (int)0)) {
HXDLIN(  22)			this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->set(value);
            		}
            		else {
HXLINE(  23)			this->value = ( ( ::iron::object::Object)(value) );
            		}
            	}



hx::ObjectPtr< ObjectNode_obj > ObjectNode_obj::__new( ::armory::logicnode::LogicTree tree,::String __o_objectName) {
	hx::ObjectPtr< ObjectNode_obj > __this = new ObjectNode_obj();
	__this->__construct(tree,__o_objectName);
	return __this;
}

hx::ObjectPtr< ObjectNode_obj > ObjectNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree,::String __o_objectName) {
	ObjectNode_obj *__this = (ObjectNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ObjectNode_obj), true, "armory.logicnode.ObjectNode"));
	*(void **)__this = ObjectNode_obj::_hx_vtable;
	__this->__construct(tree,__o_objectName);
	return __this;
}

ObjectNode_obj::ObjectNode_obj()
{
}

void ObjectNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ObjectNode);
	HX_MARK_MEMBER_NAME(objectName,"objectName");
	HX_MARK_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ObjectNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(objectName,"objectName");
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ObjectNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"objectName") ) { return hx::Val( objectName ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ObjectNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::iron::object::Object >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"objectName") ) { objectName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ObjectNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("objectName","\xaa","\xe8","\x37","\xcb"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ObjectNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(ObjectNode_obj,objectName),HX_HCSTRING("objectName","\xaa","\xe8","\x37","\xcb")},
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(ObjectNode_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ObjectNode_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectNode_obj_sMemberFields[] = {
	HX_HCSTRING("objectName","\xaa","\xe8","\x37","\xcb"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void ObjectNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ObjectNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ObjectNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ObjectNode_obj::__mClass,"__mClass");
};

#endif

hx::Class ObjectNode_obj::__mClass;

void ObjectNode_obj::__register()
{
	hx::Object *dummy = new ObjectNode_obj;
	ObjectNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.ObjectNode","\xa3","\x93","\x1c","\x47");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ObjectNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ObjectNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ObjectNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ObjectNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
