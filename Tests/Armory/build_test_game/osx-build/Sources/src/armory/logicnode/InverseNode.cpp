// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_InverseNode
#include <armory/logicnode/InverseNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_72d88ebbf29fc6ff_3_new,"armory.logicnode.InverseNode","new",0x070ce942,"armory.logicnode.InverseNode.new","armory/logicnode/InverseNode.hx",3,0x7cc04f30)
HX_LOCAL_STACK_FRAME(_hx_pos_72d88ebbf29fc6ff_13_run,"armory.logicnode.InverseNode","run",0x0710002d,"armory.logicnode.InverseNode.run","armory/logicnode/InverseNode.hx",13,0x7cc04f30)
HX_LOCAL_STACK_FRAME(_hx_pos_72d88ebbf29fc6ff_16_update,"armory.logicnode.InverseNode","update",0x2c6da667,"armory.logicnode.InverseNode.update","armory/logicnode/InverseNode.hx",16,0x7cc04f30)
namespace armory{
namespace logicnode{

void InverseNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_72d88ebbf29fc6ff_3_new)
HXLINE(   5)		this->c = false;
HXLINE(   8)		super::__construct(tree);
HXLINE(   9)		tree->notifyOnUpdate(this->update_dyn());
            	}

Dynamic InverseNode_obj::__CreateEmpty() { return new InverseNode_obj; }

void *InverseNode_obj::_hx_vtable = 0;

Dynamic InverseNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InverseNode_obj > _hx_result = new InverseNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InverseNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24b9a098) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x24b9a098;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

void InverseNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_72d88ebbf29fc6ff_13_run)
HXDLIN(  13)		this->c = true;
            	}


void InverseNode_obj::update(){
            	HX_STACKFRAME(&_hx_pos_72d88ebbf29fc6ff_16_update)
HXLINE(  17)		if (!(this->c)) {
HXLINE(  17)			this->super::run();
            		}
HXLINE(  18)		this->c = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InverseNode_obj,update,(void))


hx::ObjectPtr< InverseNode_obj > InverseNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< InverseNode_obj > __this = new InverseNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< InverseNode_obj > InverseNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	InverseNode_obj *__this = (InverseNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InverseNode_obj), true, "armory.logicnode.InverseNode"));
	*(void **)__this = InverseNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

InverseNode_obj::InverseNode_obj()
{
}

hx::Val InverseNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { return hx::Val( c ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InverseNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InverseNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("c","\x63","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo InverseNode_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(InverseNode_obj,c),HX_HCSTRING("c","\x63","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InverseNode_obj_sStaticStorageInfo = 0;
#endif

static ::String InverseNode_obj_sMemberFields[] = {
	HX_HCSTRING("c","\x63","\x00","\x00","\x00"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void InverseNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InverseNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InverseNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InverseNode_obj::__mClass,"__mClass");
};

#endif

hx::Class InverseNode_obj::__mClass;

void InverseNode_obj::__register()
{
	hx::Object *dummy = new InverseNode_obj;
	InverseNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.InverseNode","\x50","\xe0","\x52","\x05");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = InverseNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InverseNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InverseNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InverseNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InverseNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InverseNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
