// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_NavigableLocationNode
#include <armory/logicnode/NavigableLocationNode.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5c5f751e12164f2a_14_new,"armory.logicnode.NavigableLocationNode","new",0x0d6fce02,"armory.logicnode.NavigableLocationNode.new","armory/logicnode/NavigableLocationNode.hx",14,0x047408f0)
HX_DEFINE_STACK_FRAME(_hx_pos_5c5f751e12164f2a_10_new,"armory.logicnode.NavigableLocationNode","new",0x0d6fce02,"armory.logicnode.NavigableLocationNode.new","armory/logicnode/NavigableLocationNode.hx",10,0x047408f0)
HX_LOCAL_STACK_FRAME(_hx_pos_5c5f751e12164f2a_25_get,"armory.logicnode.NavigableLocationNode","get",0x0d6a7e38,"armory.logicnode.NavigableLocationNode.get","armory/logicnode/NavigableLocationNode.hx",25,0x047408f0)
namespace armory{
namespace logicnode{

void NavigableLocationNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::armory::logicnode::NavigableLocationNode,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_5c5f751e12164f2a_14_new)
HXLINE(  14)			_gthis->get((int)0);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_5c5f751e12164f2a_10_new)
HXDLIN(  10)		 ::armory::logicnode::NavigableLocationNode _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  11)		super::__construct(tree);
HXLINE(  13)		::iron::Scene_obj::active->notifyOnInit( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}

Dynamic NavigableLocationNode_obj::__CreateEmpty() { return new NavigableLocationNode_obj; }

void *NavigableLocationNode_obj::_hx_vtable = 0;

Dynamic NavigableLocationNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NavigableLocationNode_obj > _hx_result = new NavigableLocationNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NavigableLocationNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x69de122c;
	}
}

 ::Dynamic NavigableLocationNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_5c5f751e12164f2a_25_get)
HXDLIN(  25)		return this->loc;
            	}



hx::ObjectPtr< NavigableLocationNode_obj > NavigableLocationNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< NavigableLocationNode_obj > __this = new NavigableLocationNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< NavigableLocationNode_obj > NavigableLocationNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	NavigableLocationNode_obj *__this = (NavigableLocationNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NavigableLocationNode_obj), true, "armory.logicnode.NavigableLocationNode"));
	*(void **)__this = NavigableLocationNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

NavigableLocationNode_obj::NavigableLocationNode_obj()
{
}

void NavigableLocationNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NavigableLocationNode);
	HX_MARK_MEMBER_NAME(loc,"loc");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NavigableLocationNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(loc,"loc");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val NavigableLocationNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"loc") ) { return hx::Val( loc ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NavigableLocationNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"loc") ) { loc=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NavigableLocationNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("loc","\x80","\x54","\x52","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NavigableLocationNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(NavigableLocationNode_obj,loc),HX_HCSTRING("loc","\x80","\x54","\x52","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NavigableLocationNode_obj_sStaticStorageInfo = 0;
#endif

static ::String NavigableLocationNode_obj_sMemberFields[] = {
	HX_HCSTRING("loc","\x80","\x54","\x52","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void NavigableLocationNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NavigableLocationNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NavigableLocationNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NavigableLocationNode_obj::__mClass,"__mClass");
};

#endif

hx::Class NavigableLocationNode_obj::__mClass;

void NavigableLocationNode_obj::__register()
{
	hx::Object *dummy = new NavigableLocationNode_obj;
	NavigableLocationNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.NavigableLocationNode","\x10","\x65","\xb4","\x55");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NavigableLocationNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NavigableLocationNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NavigableLocationNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NavigableLocationNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NavigableLocationNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NavigableLocationNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
