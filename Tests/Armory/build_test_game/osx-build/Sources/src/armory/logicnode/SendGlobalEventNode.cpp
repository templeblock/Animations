// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SendGlobalEventNode
#include <armory/logicnode/SendGlobalEventNode.h>
#endif
#ifndef INCLUDED_armory_system_Event
#include <armory/system/Event.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3910c8768129a91d_6_new,"armory.logicnode.SendGlobalEventNode","new",0x372aa1e1,"armory.logicnode.SendGlobalEventNode.new","armory/logicnode/SendGlobalEventNode.hx",6,0x9d2e6171)
HX_LOCAL_STACK_FRAME(_hx_pos_3910c8768129a91d_14_run,"armory.logicnode.SendGlobalEventNode","run",0x372db8cc,"armory.logicnode.SendGlobalEventNode.run","armory/logicnode/SendGlobalEventNode.hx",14,0x9d2e6171)
namespace armory{
namespace logicnode{

void SendGlobalEventNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_3910c8768129a91d_6_new)
HXLINE(   8)		this->entries = null();
HXLINE(  11)		super::__construct(tree);
            	}

Dynamic SendGlobalEventNode_obj::__CreateEmpty() { return new SendGlobalEventNode_obj; }

void *SendGlobalEventNode_obj::_hx_vtable = 0;

Dynamic SendGlobalEventNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SendGlobalEventNode_obj > _hx_result = new SendGlobalEventNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SendGlobalEventNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x4f797eef;
	}
}

void SendGlobalEventNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_3910c8768129a91d_14_run)
HXLINE(  15)		::String name = ( (::String)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  17)		if (hx::IsNull( this->entries )) {
HXLINE(  17)			this->entries = ::armory::_hx_system::Event_obj::get(name);
            		}
HXLINE(  18)		if (hx::IsNull( this->entries )) {
HXLINE(  18)			return;
            		}
HXLINE(  19)		{
HXLINE(  19)			int _g = (int)0;
HXDLIN(  19)			::Array< ::Dynamic> _g1 = this->entries;
HXDLIN(  19)			while((_g < _g1->length)){
HXLINE(  19)				 ::Dynamic e = _g1->__get(_g);
HXDLIN(  19)				_g = (_g + (int)1);
HXDLIN(  19)				e->__Field(HX_("onEvent",7b,66,02,0c),hx::paccDynamic)();
            			}
            		}
HXLINE(  21)		this->super::run();
            	}



hx::ObjectPtr< SendGlobalEventNode_obj > SendGlobalEventNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SendGlobalEventNode_obj > __this = new SendGlobalEventNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SendGlobalEventNode_obj > SendGlobalEventNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SendGlobalEventNode_obj *__this = (SendGlobalEventNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SendGlobalEventNode_obj), true, "armory.logicnode.SendGlobalEventNode"));
	*(void **)__this = SendGlobalEventNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SendGlobalEventNode_obj::SendGlobalEventNode_obj()
{
}

void SendGlobalEventNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SendGlobalEventNode);
	HX_MARK_MEMBER_NAME(entries,"entries");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SendGlobalEventNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(entries,"entries");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SendGlobalEventNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"entries") ) { return hx::Val( entries ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SendGlobalEventNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"entries") ) { entries=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SendGlobalEventNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("entries","\x50","\x2d","\x5f","\x79"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SendGlobalEventNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(SendGlobalEventNode_obj,entries),HX_HCSTRING("entries","\x50","\x2d","\x5f","\x79")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SendGlobalEventNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SendGlobalEventNode_obj_sMemberFields[] = {
	HX_HCSTRING("entries","\x50","\x2d","\x5f","\x79"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void SendGlobalEventNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SendGlobalEventNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SendGlobalEventNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SendGlobalEventNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SendGlobalEventNode_obj::__mClass;

void SendGlobalEventNode_obj::__register()
{
	hx::Object *dummy = new SendGlobalEventNode_obj;
	SendGlobalEventNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SendGlobalEventNode","\x6f","\x1d","\x22","\x57");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SendGlobalEventNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SendGlobalEventNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SendGlobalEventNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SendGlobalEventNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SendGlobalEventNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SendGlobalEventNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
