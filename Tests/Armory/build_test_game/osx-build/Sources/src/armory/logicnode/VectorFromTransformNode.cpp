// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_VectorFromTransformNode
#include <armory/logicnode/VectorFromTransformNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d01ef5c8327a120a_10_new,"armory.logicnode.VectorFromTransformNode","new",0x290ab571,"armory.logicnode.VectorFromTransformNode.new","armory/logicnode/VectorFromTransformNode.hx",10,0x65ad78e1)
HX_LOCAL_STACK_FRAME(_hx_pos_d01ef5c8327a120a_13_get,"armory.logicnode.VectorFromTransformNode","get",0x290565a7,"armory.logicnode.VectorFromTransformNode.get","armory/logicnode/VectorFromTransformNode.hx",13,0x65ad78e1)
namespace armory{
namespace logicnode{

void VectorFromTransformNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_d01ef5c8327a120a_10_new)
HXDLIN(  10)		super::__construct(tree);
            	}

Dynamic VectorFromTransformNode_obj::__CreateEmpty() { return new VectorFromTransformNode_obj; }

void *VectorFromTransformNode_obj::_hx_vtable = 0;

Dynamic VectorFromTransformNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VectorFromTransformNode_obj > _hx_result = new VectorFromTransformNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool VectorFromTransformNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2931551b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2931551b;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic VectorFromTransformNode_obj::get(int from){
            	HX_GC_STACKFRAME(&_hx_pos_d01ef5c8327a120a_13_get)
HXLINE(  14)		 ::iron::math::Mat4 m = ( ( ::iron::math::Mat4)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  16)		{
HXLINE(  16)			::String _g = this->property0;
HXDLIN(  16)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Look",7f,d2,90,32)) ){
HXLINE(  22)				return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,m->self->_10,m->self->_11,m->self->_12,null());
HXDLIN(  22)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Quaternion",3e,11,7b,12)) ){
HXLINE(  24)				return m->getQuat();
HXDLIN(  24)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Right",bc,7b,91,7c)) ){
HXLINE(  20)				return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,m->self->_00,m->self->_01,m->self->_02,null());
HXDLIN(  20)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Up",7b,4a,00,00)) ){
HXLINE(  18)				return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,m->self->_20,m->self->_21,m->self->_22,null());
HXDLIN(  18)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  27)		return null();
            	}



hx::ObjectPtr< VectorFromTransformNode_obj > VectorFromTransformNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< VectorFromTransformNode_obj > __this = new VectorFromTransformNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< VectorFromTransformNode_obj > VectorFromTransformNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	VectorFromTransformNode_obj *__this = (VectorFromTransformNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VectorFromTransformNode_obj), true, "armory.logicnode.VectorFromTransformNode"));
	*(void **)__this = VectorFromTransformNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

VectorFromTransformNode_obj::VectorFromTransformNode_obj()
{
}

void VectorFromTransformNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VectorFromTransformNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VectorFromTransformNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val VectorFromTransformNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VectorFromTransformNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VectorFromTransformNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VectorFromTransformNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(VectorFromTransformNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VectorFromTransformNode_obj_sStaticStorageInfo = 0;
#endif

static ::String VectorFromTransformNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void VectorFromTransformNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VectorFromTransformNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VectorFromTransformNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VectorFromTransformNode_obj::__mClass,"__mClass");
};

#endif

hx::Class VectorFromTransformNode_obj::__mClass;

void VectorFromTransformNode_obj::__register()
{
	hx::Object *dummy = new VectorFromTransformNode_obj;
	VectorFromTransformNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.VectorFromTransformNode","\xff","\x28","\x6d","\x75");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VectorFromTransformNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VectorFromTransformNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VectorFromTransformNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VectorFromTransformNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VectorFromTransformNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VectorFromTransformNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
