// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_OnInitNode
#include <armory/logicnode/OnInitNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9eb2e41268885a9f_7_new,"armory.logicnode.OnInitNode","new",0xba579725,"armory.logicnode.OnInitNode.new","armory/logicnode/OnInitNode.hx",7,0x44208769)
HX_LOCAL_STACK_FRAME(_hx_pos_9eb2e41268885a9f_16_init,"armory.logicnode.OnInitNode","init",0x4f0560ab,"armory.logicnode.OnInitNode.init","armory/logicnode/OnInitNode.hx",16,0x44208769)
namespace armory{
namespace logicnode{

void OnInitNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_9eb2e41268885a9f_7_new)
HXLINE(   8)		super::__construct(tree);
HXLINE(   9)		tree->notifyOnInit(this->init_dyn());
            	}

Dynamic OnInitNode_obj::__CreateEmpty() { return new OnInitNode_obj; }

void *OnInitNode_obj::_hx_vtable = 0;

Dynamic OnInitNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OnInitNode_obj > _hx_result = new OnInitNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OnInitNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0d1b6617) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0d1b6617;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

void OnInitNode_obj::init(){
            	HX_STACKFRAME(&_hx_pos_9eb2e41268885a9f_16_init)
HXDLIN(  16)		this->run();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OnInitNode_obj,init,(void))


hx::ObjectPtr< OnInitNode_obj > OnInitNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< OnInitNode_obj > __this = new OnInitNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< OnInitNode_obj > OnInitNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	OnInitNode_obj *__this = (OnInitNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OnInitNode_obj), true, "armory.logicnode.OnInitNode"));
	*(void **)__this = OnInitNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

OnInitNode_obj::OnInitNode_obj()
{
}

hx::Val OnInitNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *OnInitNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *OnInitNode_obj_sStaticStorageInfo = 0;
#endif

static ::String OnInitNode_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void OnInitNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OnInitNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OnInitNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OnInitNode_obj::__mClass,"__mClass");
};

#endif

hx::Class OnInitNode_obj::__mClass;

void OnInitNode_obj::__register()
{
	hx::Object *dummy = new OnInitNode_obj;
	OnInitNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.OnInitNode","\xb3","\x20","\x52","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OnInitNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OnInitNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OnInitNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OnInitNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OnInitNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OnInitNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
