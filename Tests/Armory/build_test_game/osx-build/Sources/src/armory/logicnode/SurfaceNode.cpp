// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SurfaceNode
#include <armory/logicnode/SurfaceNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_Mouse
#include <iron/system/Mouse.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eefce8bf71d35704_8_new,"armory.logicnode.SurfaceNode","new",0xc2ef48bf,"armory.logicnode.SurfaceNode.new","armory/logicnode/SurfaceNode.hx",8,0x85a12e53)
HX_LOCAL_STACK_FRAME(_hx_pos_eefce8bf71d35704_11_get,"armory.logicnode.SurfaceNode","get",0xc2e9f8f5,"armory.logicnode.SurfaceNode.get","armory/logicnode/SurfaceNode.hx",11,0x85a12e53)
namespace armory{
namespace logicnode{

void SurfaceNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_eefce8bf71d35704_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic SurfaceNode_obj::__CreateEmpty() { return new SurfaceNode_obj; }

void *SurfaceNode_obj::_hx_vtable = 0;

Dynamic SurfaceNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SurfaceNode_obj > _hx_result = new SurfaceNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SurfaceNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0d36ce31) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0d36ce31;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic SurfaceNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_eefce8bf71d35704_11_get)
HXLINE(  12)		 ::iron::_hx_system::Mouse surface = ::iron::_hx_system::Input_obj::getSurface();
HXLINE(  13)		{
HXLINE(  13)			::String _g = this->property0;
HXDLIN(  13)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Moved",13,3c,93,9f)) ){
HXLINE(  21)				return surface->moved;
HXDLIN(  21)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Released",dd,44,99,50)) ){
HXLINE(  19)				return surface->released_dyn();
HXDLIN(  19)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Started",21,51,6c,02)) ){
HXLINE(  17)				return surface->started_dyn();
HXDLIN(  17)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Touched",be,45,49,a6)) ){
HXLINE(  15)				return surface->down_dyn();
HXDLIN(  15)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  23)		return false;
            	}



hx::ObjectPtr< SurfaceNode_obj > SurfaceNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SurfaceNode_obj > __this = new SurfaceNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SurfaceNode_obj > SurfaceNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SurfaceNode_obj *__this = (SurfaceNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SurfaceNode_obj), true, "armory.logicnode.SurfaceNode"));
	*(void **)__this = SurfaceNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SurfaceNode_obj::SurfaceNode_obj()
{
}

void SurfaceNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SurfaceNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SurfaceNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SurfaceNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SurfaceNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SurfaceNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SurfaceNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(SurfaceNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SurfaceNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SurfaceNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void SurfaceNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SurfaceNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SurfaceNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SurfaceNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SurfaceNode_obj::__mClass;

void SurfaceNode_obj::__register()
{
	hx::Object *dummy = new SurfaceNode_obj;
	SurfaceNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SurfaceNode","\x4d","\x7d","\xd6","\x14");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SurfaceNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SurfaceNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SurfaceNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SurfaceNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SurfaceNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SurfaceNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
