// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SeparateTransformNode
#include <armory/logicnode/SeparateTransformNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8352609a8376f351_10_new,"armory.logicnode.SeparateTransformNode","new",0x9d4c119b,"armory.logicnode.SeparateTransformNode.new","armory/logicnode/SeparateTransformNode.hx",10,0xe98bfb77)
HX_LOCAL_STACK_FRAME(_hx_pos_8352609a8376f351_13_get,"armory.logicnode.SeparateTransformNode","get",0x9d46c1d1,"armory.logicnode.SeparateTransformNode.get","armory/logicnode/SeparateTransformNode.hx",13,0xe98bfb77)
namespace armory{
namespace logicnode{

void SeparateTransformNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_8352609a8376f351_10_new)
HXDLIN(  10)		super::__construct(tree);
            	}

Dynamic SeparateTransformNode_obj::__CreateEmpty() { return new SeparateTransformNode_obj; }

void *SeparateTransformNode_obj::_hx_vtable = 0;

Dynamic SeparateTransformNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SeparateTransformNode_obj > _hx_result = new SeparateTransformNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SeparateTransformNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1aaa7e0d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1aaa7e0d;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic SeparateTransformNode_obj::get(int from){
            	HX_GC_STACKFRAME(&_hx_pos_8352609a8376f351_13_get)
HXLINE(  14)		 ::iron::math::Mat4 matrix = ( ( ::iron::math::Mat4)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  16)		 ::iron::math::Vec4 loc =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  17)		 ::iron::math::Quat rot =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  18)		 ::iron::math::Vec4 scale =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  19)		matrix->decompose(loc,rot,scale);
HXLINE(  21)		if ((from == (int)0)) {
HXLINE(  21)			return loc;
            		}
            		else {
HXLINE(  22)			if ((from == (int)1)) {
HXLINE(  22)				return rot->getEuler();
            			}
            			else {
HXLINE(  23)				return scale;
            			}
            		}
HXLINE(  21)		return null();
            	}



hx::ObjectPtr< SeparateTransformNode_obj > SeparateTransformNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SeparateTransformNode_obj > __this = new SeparateTransformNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SeparateTransformNode_obj > SeparateTransformNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SeparateTransformNode_obj *__this = (SeparateTransformNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SeparateTransformNode_obj), true, "armory.logicnode.SeparateTransformNode"));
	*(void **)__this = SeparateTransformNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SeparateTransformNode_obj::SeparateTransformNode_obj()
{
}

hx::Val SeparateTransformNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SeparateTransformNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SeparateTransformNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SeparateTransformNode_obj_sMemberFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void SeparateTransformNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SeparateTransformNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SeparateTransformNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SeparateTransformNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SeparateTransformNode_obj::__mClass;

void SeparateTransformNode_obj::__register()
{
	hx::Object *dummy = new SeparateTransformNode_obj;
	SeparateTransformNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SeparateTransformNode","\x29","\xa8","\xae","\xa2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SeparateTransformNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SeparateTransformNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SeparateTransformNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SeparateTransformNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SeparateTransformNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SeparateTransformNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
