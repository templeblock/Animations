// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SpawnSceneNode
#include <armory/logicnode/SpawnSceneNode.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8aa4b35701527bc2_11_new,"armory.logicnode.SpawnSceneNode","new",0x93a2e367,"armory.logicnode.SpawnSceneNode.new","armory/logicnode/SpawnSceneNode.hx",11,0xb94b9067)
HX_LOCAL_STACK_FRAME(_hx_pos_8aa4b35701527bc2_19_run,"armory.logicnode.SpawnSceneNode","run",0x93a5fa52,"armory.logicnode.SpawnSceneNode.run","armory/logicnode/SpawnSceneNode.hx",19,0xb94b9067)
HX_LOCAL_STACK_FRAME(_hx_pos_8aa4b35701527bc2_14_run,"armory.logicnode.SpawnSceneNode","run",0x93a5fa52,"armory.logicnode.SpawnSceneNode.run","armory/logicnode/SpawnSceneNode.hx",14,0xb94b9067)
HX_LOCAL_STACK_FRAME(_hx_pos_8aa4b35701527bc2_30_get,"armory.logicnode.SpawnSceneNode","get",0x939d939d,"armory.logicnode.SpawnSceneNode.get","armory/logicnode/SpawnSceneNode.hx",30,0xb94b9067)
namespace armory{
namespace logicnode{

void SpawnSceneNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_8aa4b35701527bc2_11_new)
HXDLIN(  11)		super::__construct(tree);
            	}

Dynamic SpawnSceneNode_obj::__CreateEmpty() { return new SpawnSceneNode_obj; }

void *SpawnSceneNode_obj::_hx_vtable = 0;

Dynamic SpawnSceneNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SpawnSceneNode_obj > _hx_result = new SpawnSceneNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SpawnSceneNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x710f6b59;
	}
}

void SpawnSceneNode_obj::run(){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::armory::logicnode::SpawnSceneNode,_gthis, ::iron::math::Mat4,matrix) HXARGC(1)
            		void _hx_run( ::iron::object::Object o){
            			HX_STACKFRAME(&_hx_pos_8aa4b35701527bc2_19_run)
HXLINE(  20)			_gthis->root = o;
HXLINE(  21)			if (hx::IsNotNull( matrix )) {
HXLINE(  22)				_gthis->root->transform->setMatrix(matrix);
HXLINE(  23)				_gthis->root->transform->buildMatrix();
            			}
HXLINE(  25)			_gthis->runOutputs((int)0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_8aa4b35701527bc2_14_run)
HXDLIN(  14)		 ::armory::logicnode::SpawnSceneNode _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  16)		::String sceneName = ( (::String)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  17)		 ::iron::math::Mat4 matrix = ( ( ::iron::math::Mat4)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  19)		::iron::Scene_obj::active->addScene(sceneName,null(), ::Dynamic(new _hx_Closure_0(_gthis,matrix)));
            	}


 ::Dynamic SpawnSceneNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_8aa4b35701527bc2_30_get)
HXDLIN(  30)		return this->root;
            	}



hx::ObjectPtr< SpawnSceneNode_obj > SpawnSceneNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SpawnSceneNode_obj > __this = new SpawnSceneNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SpawnSceneNode_obj > SpawnSceneNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SpawnSceneNode_obj *__this = (SpawnSceneNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SpawnSceneNode_obj), true, "armory.logicnode.SpawnSceneNode"));
	*(void **)__this = SpawnSceneNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SpawnSceneNode_obj::SpawnSceneNode_obj()
{
}

void SpawnSceneNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SpawnSceneNode);
	HX_MARK_MEMBER_NAME(root,"root");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SpawnSceneNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(root,"root");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SpawnSceneNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SpawnSceneNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::iron::object::Object >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpawnSceneNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SpawnSceneNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(SpawnSceneNode_obj,root),HX_HCSTRING("root","\x22","\xee","\xae","\x4b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SpawnSceneNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SpawnSceneNode_obj_sMemberFields[] = {
	HX_HCSTRING("root","\x22","\xee","\xae","\x4b"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void SpawnSceneNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SpawnSceneNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SpawnSceneNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SpawnSceneNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SpawnSceneNode_obj::__mClass;

void SpawnSceneNode_obj::__register()
{
	hx::Object *dummy = new SpawnSceneNode_obj;
	SpawnSceneNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SpawnSceneNode","\xf5","\xa3","\xad","\xb8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SpawnSceneNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SpawnSceneNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SpawnSceneNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SpawnSceneNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpawnSceneNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpawnSceneNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
