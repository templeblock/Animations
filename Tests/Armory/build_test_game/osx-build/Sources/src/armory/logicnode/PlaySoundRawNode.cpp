// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_PlaySoundRawNode
#include <armory/logicnode/PlaySoundRawNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_system_Audio
#include <iron/system/Audio.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <kha/Sound.h>
#endif
#ifndef INCLUDED_kha_audio1_AudioChannel
#include <kha/audio1/AudioChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_35660d04adf67af7_8_new,"armory.logicnode.PlaySoundRawNode","new",0xcd7a6943,"armory.logicnode.PlaySoundRawNode.new","armory/logicnode/PlaySoundRawNode.hx",8,0xf666958b)
HX_LOCAL_STACK_FRAME(_hx_pos_35660d04adf67af7_13_run,"armory.logicnode.PlaySoundRawNode","run",0xcd7d802e,"armory.logicnode.PlaySoundRawNode.run","armory/logicnode/PlaySoundRawNode.hx",13,0xf666958b)
HX_LOCAL_STACK_FRAME(_hx_pos_35660d04adf67af7_11_run,"armory.logicnode.PlaySoundRawNode","run",0xcd7d802e,"armory.logicnode.PlaySoundRawNode.run","armory/logicnode/PlaySoundRawNode.hx",11,0xf666958b)
namespace armory{
namespace logicnode{

void PlaySoundRawNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_35660d04adf67af7_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic PlaySoundRawNode_obj::__CreateEmpty() { return new PlaySoundRawNode_obj; }

void *PlaySoundRawNode_obj::_hx_vtable = 0;

Dynamic PlaySoundRawNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlaySoundRawNode_obj > _hx_result = new PlaySoundRawNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlaySoundRawNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x328b7435;
	}
}

void PlaySoundRawNode_obj::run(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::kha::Sound sound){
            			HX_STACKFRAME(&_hx_pos_35660d04adf67af7_13_run)
HXLINE(  13)			::iron::_hx_system::Audio_obj::play(sound,false,null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_35660d04adf67af7_11_run)
HXLINE(  12)		::iron::data::Data_obj::getSound(this->property0, ::Dynamic(new _hx_Closure_0()));
HXLINE(  15)		this->super::run();
            	}



hx::ObjectPtr< PlaySoundRawNode_obj > PlaySoundRawNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< PlaySoundRawNode_obj > __this = new PlaySoundRawNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< PlaySoundRawNode_obj > PlaySoundRawNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	PlaySoundRawNode_obj *__this = (PlaySoundRawNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlaySoundRawNode_obj), true, "armory.logicnode.PlaySoundRawNode"));
	*(void **)__this = PlaySoundRawNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

PlaySoundRawNode_obj::PlaySoundRawNode_obj()
{
}

void PlaySoundRawNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlaySoundRawNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlaySoundRawNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlaySoundRawNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlaySoundRawNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlaySoundRawNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlaySoundRawNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(PlaySoundRawNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlaySoundRawNode_obj_sStaticStorageInfo = 0;
#endif

static ::String PlaySoundRawNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void PlaySoundRawNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlaySoundRawNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlaySoundRawNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlaySoundRawNode_obj::__mClass,"__mClass");
};

#endif

hx::Class PlaySoundRawNode_obj::__mClass;

void PlaySoundRawNode_obj::__register()
{
	hx::Object *dummy = new PlaySoundRawNode_obj;
	PlaySoundRawNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.PlaySoundRawNode","\xd1","\x0b","\x9e","\x48");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlaySoundRawNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlaySoundRawNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlaySoundRawNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlaySoundRawNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlaySoundRawNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlaySoundRawNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
