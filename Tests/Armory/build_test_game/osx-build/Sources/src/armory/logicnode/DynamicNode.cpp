// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_DynamicNode
#include <armory/logicnode/DynamicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b8ab32fae07d5fef_7_new,"armory.logicnode.DynamicNode","new",0x99702411,"armory.logicnode.DynamicNode.new","armory/logicnode/DynamicNode.hx",7,0x2be6a341)
HX_LOCAL_STACK_FRAME(_hx_pos_b8ab32fae07d5fef_13_get,"armory.logicnode.DynamicNode","get",0x996ad447,"armory.logicnode.DynamicNode.get","armory/logicnode/DynamicNode.hx",13,0x2be6a341)
HX_LOCAL_STACK_FRAME(_hx_pos_b8ab32fae07d5fef_17_set,"armory.logicnode.DynamicNode","set",0x9973ef53,"armory.logicnode.DynamicNode.set","armory/logicnode/DynamicNode.hx",17,0x2be6a341)
namespace armory{
namespace logicnode{

void DynamicNode_obj::__construct( ::armory::logicnode::LogicTree tree, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_b8ab32fae07d5fef_7_new)
HXLINE(   8)		super::__construct(tree);
HXLINE(   9)		this->value = value;
            	}

Dynamic DynamicNode_obj::__CreateEmpty() { return new DynamicNode_obj; }

void *DynamicNode_obj::_hx_vtable = 0;

Dynamic DynamicNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DynamicNode_obj > _hx_result = new DynamicNode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DynamicNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x22e8a91f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x22e8a91f;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic DynamicNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_b8ab32fae07d5fef_13_get)
HXDLIN(  13)		return this->value;
            	}


void DynamicNode_obj::set( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_b8ab32fae07d5fef_17_set)
HXDLIN(  17)		this->value = value;
            	}



hx::ObjectPtr< DynamicNode_obj > DynamicNode_obj::__new( ::armory::logicnode::LogicTree tree, ::Dynamic value) {
	hx::ObjectPtr< DynamicNode_obj > __this = new DynamicNode_obj();
	__this->__construct(tree,value);
	return __this;
}

hx::ObjectPtr< DynamicNode_obj > DynamicNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree, ::Dynamic value) {
	DynamicNode_obj *__this = (DynamicNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DynamicNode_obj), true, "armory.logicnode.DynamicNode"));
	*(void **)__this = DynamicNode_obj::_hx_vtable;
	__this->__construct(tree,value);
	return __this;
}

DynamicNode_obj::DynamicNode_obj()
{
}

void DynamicNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DynamicNode);
	HX_MARK_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DynamicNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DynamicNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DynamicNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DynamicNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DynamicNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DynamicNode_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DynamicNode_obj_sStaticStorageInfo = 0;
#endif

static ::String DynamicNode_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void DynamicNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DynamicNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DynamicNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DynamicNode_obj::__mClass,"__mClass");
};

#endif

hx::Class DynamicNode_obj::__mClass;

void DynamicNode_obj::__register()
{
	hx::Object *dummy = new DynamicNode_obj;
	DynamicNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.DynamicNode","\x9f","\xc7","\x8e","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DynamicNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DynamicNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DynamicNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DynamicNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DynamicNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DynamicNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
