// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_TraitNode
#include <armory/logicnode/TraitNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_63d6ad1e6a2b8655_3_new,"armory.logicnode.TraitNode","new",0x84d283e0,"armory.logicnode.TraitNode.new","armory/logicnode/TraitNode.hx",3,0xd8e9ddd2)
HX_LOCAL_STACK_FRAME(_hx_pos_63d6ad1e6a2b8655_12_get,"armory.logicnode.TraitNode","get",0x84cd3416,"armory.logicnode.TraitNode.get","armory/logicnode/TraitNode.hx",12,0xd8e9ddd2)
HX_LOCAL_STACK_FRAME(_hx_pos_63d6ad1e6a2b8655_22_set,"armory.logicnode.TraitNode","set",0x84d64f22,"armory.logicnode.TraitNode.set","armory/logicnode/TraitNode.hx",22,0xd8e9ddd2)
namespace armory{
namespace logicnode{

void TraitNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_63d6ad1e6a2b8655_3_new)
HXLINE(   6)		this->value = null();
HXLINE(   9)		super::__construct(tree);
            	}

Dynamic TraitNode_obj::__CreateEmpty() { return new TraitNode_obj; }

void *TraitNode_obj::_hx_vtable = 0;

Dynamic TraitNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TraitNode_obj > _hx_result = new TraitNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TraitNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x4204e3d2;
	}
}

 ::Dynamic TraitNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_63d6ad1e6a2b8655_12_get)
HXLINE(  13)		if (hx::IsNotNull( this->value )) {
HXLINE(  13)			return this->value;
            		}
HXLINE(  15)		hx::Class cname = ::Type_obj::resolveClass(((HX_("arm",5c,fe,49,00) + HX_(".",2e,00,00,00)) + this->property0));
HXLINE(  16)		if (hx::IsNull( cname )) {
HXLINE(  16)			cname = ::Type_obj::resolveClass(((HX_("arm",5c,fe,49,00) + HX_(".node.",fe,50,29,04)) + this->property0));
            		}
HXLINE(  17)		this->value = ::Type_obj::createInstance(cname,::cpp::VirtualArray_obj::__new(0));
HXLINE(  18)		return this->value;
            	}


void TraitNode_obj::set( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_63d6ad1e6a2b8655_22_set)
HXDLIN(  22)		this->value = value;
            	}



hx::ObjectPtr< TraitNode_obj > TraitNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< TraitNode_obj > __this = new TraitNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< TraitNode_obj > TraitNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	TraitNode_obj *__this = (TraitNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TraitNode_obj), true, "armory.logicnode.TraitNode"));
	*(void **)__this = TraitNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

TraitNode_obj::TraitNode_obj()
{
}

void TraitNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TraitNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	HX_MARK_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TraitNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TraitNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TraitNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TraitNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TraitNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TraitNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TraitNode_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TraitNode_obj_sStaticStorageInfo = 0;
#endif

static ::String TraitNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void TraitNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TraitNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TraitNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TraitNode_obj::__mClass,"__mClass");
};

#endif

hx::Class TraitNode_obj::__mClass;

void TraitNode_obj::__register()
{
	hx::Object *dummy = new TraitNode_obj;
	TraitNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.TraitNode","\xee","\x53","\x13","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TraitNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TraitNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TraitNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TraitNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TraitNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TraitNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
