// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SeparateVectorNode
#include <armory/logicnode/SeparateVectorNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_21dd27ee5d0e51e3_8_new,"armory.logicnode.SeparateVectorNode","new",0xb965e4dc,"armory.logicnode.SeparateVectorNode.new","armory/logicnode/SeparateVectorNode.hx",8,0x62424b92)
HX_LOCAL_STACK_FRAME(_hx_pos_21dd27ee5d0e51e3_11_get,"armory.logicnode.SeparateVectorNode","get",0xb9609512,"armory.logicnode.SeparateVectorNode.get","armory/logicnode/SeparateVectorNode.hx",11,0x62424b92)
namespace armory{
namespace logicnode{

void SeparateVectorNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_21dd27ee5d0e51e3_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic SeparateVectorNode_obj::__CreateEmpty() { return new SeparateVectorNode_obj; }

void *SeparateVectorNode_obj::_hx_vtable = 0;

Dynamic SeparateVectorNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SeparateVectorNode_obj > _hx_result = new SeparateVectorNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SeparateVectorNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x66f8d56a;
	}
}

 ::Dynamic SeparateVectorNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_21dd27ee5d0e51e3_11_get)
HXLINE(  12)		 ::iron::math::Vec4 vector = ( ( ::iron::math::Vec4)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  14)		if ((from == (int)0)) {
HXLINE(  14)			return vector->x;
            		}
            		else {
HXLINE(  15)			if ((from == (int)1)) {
HXLINE(  15)				return vector->y;
            			}
            			else {
HXLINE(  16)				return vector->z;
            			}
            		}
HXLINE(  14)		return null();
            	}



hx::ObjectPtr< SeparateVectorNode_obj > SeparateVectorNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SeparateVectorNode_obj > __this = new SeparateVectorNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SeparateVectorNode_obj > SeparateVectorNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SeparateVectorNode_obj *__this = (SeparateVectorNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SeparateVectorNode_obj), true, "armory.logicnode.SeparateVectorNode"));
	*(void **)__this = SeparateVectorNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SeparateVectorNode_obj::SeparateVectorNode_obj()
{
}

hx::Val SeparateVectorNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SeparateVectorNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SeparateVectorNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SeparateVectorNode_obj_sMemberFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void SeparateVectorNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SeparateVectorNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SeparateVectorNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SeparateVectorNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SeparateVectorNode_obj::__mClass;

void SeparateVectorNode_obj::__register()
{
	hx::Object *dummy = new SeparateVectorNode_obj;
	SeparateVectorNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SeparateVectorNode","\xea","\x86","\xab","\x7b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SeparateVectorNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SeparateVectorNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SeparateVectorNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SeparateVectorNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SeparateVectorNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SeparateVectorNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
