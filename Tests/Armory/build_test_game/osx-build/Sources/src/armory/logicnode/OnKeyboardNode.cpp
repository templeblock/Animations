// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_OnKeyboardNode
#include <armory/logicnode/OnKeyboardNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_Keyboard
#include <iron/system/Keyboard.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8d1fbeb2300b12e0_8_new,"armory.logicnode.OnKeyboardNode","new",0x5fc89c3c,"armory.logicnode.OnKeyboardNode.new","armory/logicnode/OnKeyboardNode.hx",8,0x969f8932)
HX_LOCAL_STACK_FRAME(_hx_pos_8d1fbeb2300b12e0_14_update,"armory.logicnode.OnKeyboardNode","update",0x07cc8bad,"armory.logicnode.OnKeyboardNode.update","armory/logicnode/OnKeyboardNode.hx",14,0x969f8932)
namespace armory{
namespace logicnode{

void OnKeyboardNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_8d1fbeb2300b12e0_8_new)
HXLINE(   9)		super::__construct(tree);
HXLINE(  11)		tree->notifyOnUpdate(this->update_dyn());
            	}

Dynamic OnKeyboardNode_obj::__CreateEmpty() { return new OnKeyboardNode_obj; }

void *OnKeyboardNode_obj::_hx_vtable = 0;

Dynamic OnKeyboardNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OnKeyboardNode_obj > _hx_result = new OnKeyboardNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OnKeyboardNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x152d63e6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x152d63e6;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

void OnKeyboardNode_obj::update(){
            	HX_STACKFRAME(&_hx_pos_8d1fbeb2300b12e0_14_update)
HXLINE(  15)		 ::iron::_hx_system::Keyboard keyboard = ::iron::_hx_system::Input_obj::getKeyboard();
HXLINE(  16)		bool b = false;
HXLINE(  17)		{
HXLINE(  17)			::String _g = this->property0;
HXDLIN(  17)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Down",82,24,47,2d)) ){
HXLINE(  19)				b = keyboard->down(this->property1);
HXDLIN(  19)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Released",dd,44,99,50)) ){
HXLINE(  23)				b = keyboard->released(this->property1);
HXDLIN(  23)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Started",21,51,6c,02)) ){
HXLINE(  21)				b = keyboard->started(this->property1);
HXDLIN(  21)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  25)		if (b) {
HXLINE(  25)			this->run();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OnKeyboardNode_obj,update,(void))


hx::ObjectPtr< OnKeyboardNode_obj > OnKeyboardNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< OnKeyboardNode_obj > __this = new OnKeyboardNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< OnKeyboardNode_obj > OnKeyboardNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	OnKeyboardNode_obj *__this = (OnKeyboardNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OnKeyboardNode_obj), true, "armory.logicnode.OnKeyboardNode"));
	*(void **)__this = OnKeyboardNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

OnKeyboardNode_obj::OnKeyboardNode_obj()
{
}

void OnKeyboardNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OnKeyboardNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	HX_MARK_MEMBER_NAME(property1,"property1");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OnKeyboardNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	HX_VISIT_MEMBER_NAME(property1,"property1");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val OnKeyboardNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
		if (HX_FIELD_EQ(inName,"property1") ) { return hx::Val( property1 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val OnKeyboardNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"property1") ) { property1=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OnKeyboardNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("property1","\x3c","\x02","\x07","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OnKeyboardNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(OnKeyboardNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{hx::fsString,(int)offsetof(OnKeyboardNode_obj,property1),HX_HCSTRING("property1","\x3c","\x02","\x07","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *OnKeyboardNode_obj_sStaticStorageInfo = 0;
#endif

static ::String OnKeyboardNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("property1","\x3c","\x02","\x07","\x05"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void OnKeyboardNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OnKeyboardNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OnKeyboardNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OnKeyboardNode_obj::__mClass,"__mClass");
};

#endif

hx::Class OnKeyboardNode_obj::__mClass;

void OnKeyboardNode_obj::__register()
{
	hx::Object *dummy = new OnKeyboardNode_obj;
	OnKeyboardNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.OnKeyboardNode","\x4a","\x0e","\xc7","\x19");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OnKeyboardNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OnKeyboardNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OnKeyboardNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OnKeyboardNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OnKeyboardNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OnKeyboardNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
