// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_MaterialNode
#include <armory/logicnode/MaterialNode.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <iron/Scene.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <iron/data/MaterialData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c541d82eaad952c9_14_new,"armory.logicnode.MaterialNode","new",0x5da15c7d,"armory.logicnode.MaterialNode.new","armory/logicnode/MaterialNode.hx",14,0x10d11091)
HX_DEFINE_STACK_FRAME(_hx_pos_c541d82eaad952c9_5_new,"armory.logicnode.MaterialNode","new",0x5da15c7d,"armory.logicnode.MaterialNode.new","armory/logicnode/MaterialNode.hx",5,0x10d11091)
HX_LOCAL_STACK_FRAME(_hx_pos_c541d82eaad952c9_18_get,"armory.logicnode.MaterialNode","get",0x5d9c0cb3,"armory.logicnode.MaterialNode.get","armory/logicnode/MaterialNode.hx",18,0x10d11091)
HX_LOCAL_STACK_FRAME(_hx_pos_c541d82eaad952c9_21_get,"armory.logicnode.MaterialNode","get",0x5d9c0cb3,"armory.logicnode.MaterialNode.get","armory/logicnode/MaterialNode.hx",21,0x10d11091)
HX_LOCAL_STACK_FRAME(_hx_pos_c541d82eaad952c9_29_set,"armory.logicnode.MaterialNode","set",0x5da527bf,"armory.logicnode.MaterialNode.set","armory/logicnode/MaterialNode.hx",29,0x10d11091)
namespace armory{
namespace logicnode{

void MaterialNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::armory::logicnode::MaterialNode,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_c541d82eaad952c9_14_new)
HXLINE(  14)			_gthis->get((int)0);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_c541d82eaad952c9_5_new)
HXLINE(   8)		this->value = null();
HXLINE(  10)		 ::armory::logicnode::MaterialNode _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  11)		super::__construct(tree);
HXLINE(  13)		::iron::Scene_obj::active->notifyOnInit( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}

Dynamic MaterialNode_obj::__CreateEmpty() { return new MaterialNode_obj; }

void *MaterialNode_obj::_hx_vtable = 0;

Dynamic MaterialNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MaterialNode_obj > _hx_result = new MaterialNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MaterialNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x7ed7699f;
	}
}

 ::Dynamic MaterialNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_c541d82eaad952c9_18_get)
HXDLIN(  18)		 ::armory::logicnode::MaterialNode _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  19)		if (hx::IsNotNull( this->property0 )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::armory::logicnode::MaterialNode,_gthis) HXARGC(1)
            			void _hx_run( ::iron::data::MaterialData mat){
            				HX_STACKFRAME(&_hx_pos_c541d82eaad952c9_21_get)
HXLINE(  21)				_gthis->value = mat;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  20)			::iron::data::Data_obj::getMaterial(( (::String)(::iron::Scene_obj::active->raw->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ),this->property0, ::Dynamic(new _hx_Closure_0(_gthis)));
            		}
HXLINE(  25)		return this->value;
            	}


void MaterialNode_obj::set( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_c541d82eaad952c9_29_set)
HXDLIN(  29)		this->value = ( ( ::iron::data::MaterialData)(value) );
            	}



hx::ObjectPtr< MaterialNode_obj > MaterialNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< MaterialNode_obj > __this = new MaterialNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< MaterialNode_obj > MaterialNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	MaterialNode_obj *__this = (MaterialNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MaterialNode_obj), true, "armory.logicnode.MaterialNode"));
	*(void **)__this = MaterialNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

MaterialNode_obj::MaterialNode_obj()
{
}

void MaterialNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MaterialNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	HX_MARK_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MaterialNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MaterialNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MaterialNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::iron::data::MaterialData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MaterialNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MaterialNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(MaterialNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{hx::fsObject /*::iron::data::MaterialData*/ ,(int)offsetof(MaterialNode_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MaterialNode_obj_sStaticStorageInfo = 0;
#endif

static ::String MaterialNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void MaterialNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MaterialNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MaterialNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MaterialNode_obj::__mClass,"__mClass");
};

#endif

hx::Class MaterialNode_obj::__mClass;

void MaterialNode_obj::__register()
{
	hx::Object *dummy = new MaterialNode_obj;
	MaterialNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.MaterialNode","\x0b","\x5a","\x48","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MaterialNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MaterialNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MaterialNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MaterialNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MaterialNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MaterialNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
