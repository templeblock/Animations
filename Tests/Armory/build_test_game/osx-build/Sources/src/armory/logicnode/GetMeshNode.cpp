// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_GetMeshNode
#include <armory/logicnode/GetMeshNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d364279bda42cc5a_8_new,"armory.logicnode.GetMeshNode","new",0x3d134235,"armory.logicnode.GetMeshNode.new","armory/logicnode/GetMeshNode.hx",8,0xd317959d)
HX_LOCAL_STACK_FRAME(_hx_pos_d364279bda42cc5a_11_get,"armory.logicnode.GetMeshNode","get",0x3d0df26b,"armory.logicnode.GetMeshNode.get","armory/logicnode/GetMeshNode.hx",11,0xd317959d)
namespace armory{
namespace logicnode{

void GetMeshNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_d364279bda42cc5a_8_new)
HXDLIN(   8)		super::__construct(tree);
            	}

Dynamic GetMeshNode_obj::__CreateEmpty() { return new GetMeshNode_obj; }

void *GetMeshNode_obj::_hx_vtable = 0;

Dynamic GetMeshNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GetMeshNode_obj > _hx_result = new GetMeshNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GetMeshNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2264336f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2264336f;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic GetMeshNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_d364279bda42cc5a_11_get)
HXLINE(  12)		 ::iron::object::MeshObject object = ( ( ::iron::object::MeshObject)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  14)		if (hx::IsNull( object )) {
HXLINE(  14)			return null();
            		}
HXLINE(  16)		return object->data;
            	}



hx::ObjectPtr< GetMeshNode_obj > GetMeshNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< GetMeshNode_obj > __this = new GetMeshNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< GetMeshNode_obj > GetMeshNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	GetMeshNode_obj *__this = (GetMeshNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GetMeshNode_obj), true, "armory.logicnode.GetMeshNode"));
	*(void **)__this = GetMeshNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

GetMeshNode_obj::GetMeshNode_obj()
{
}

hx::Val GetMeshNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GetMeshNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GetMeshNode_obj_sStaticStorageInfo = 0;
#endif

static ::String GetMeshNode_obj_sMemberFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void GetMeshNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GetMeshNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GetMeshNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GetMeshNode_obj::__mClass,"__mClass");
};

#endif

hx::Class GetMeshNode_obj::__mClass;

void GetMeshNode_obj::__register()
{
	hx::Object *dummy = new GetMeshNode_obj;
	GetMeshNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.GetMeshNode","\xc3","\x03","\xf7","\xdb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GetMeshNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GetMeshNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GetMeshNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GetMeshNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GetMeshNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GetMeshNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
