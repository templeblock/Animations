// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_45c7406f4f86f9be_38_new,"armory.logicnode.LogicNodeInput","new",0xd929509e,"armory.logicnode.LogicNodeInput.new","armory/logicnode/LogicNode.hx",38,0xfdb86a42)
HX_LOCAL_STACK_FRAME(_hx_pos_45c7406f4f86f9be_45_get,"armory.logicnode.LogicNodeInput","get",0xd92400d4,"armory.logicnode.LogicNodeInput.get","armory/logicnode/LogicNode.hx",45,0xfdb86a42)
HX_LOCAL_STACK_FRAME(_hx_pos_45c7406f4f86f9be_50_set,"armory.logicnode.LogicNodeInput","set",0xd92d1be0,"armory.logicnode.LogicNodeInput.set","armory/logicnode/LogicNode.hx",50,0xfdb86a42)
namespace armory{
namespace logicnode{

void LogicNodeInput_obj::__construct( ::armory::logicnode::LogicNode node,int from){
            	HX_STACKFRAME(&_hx_pos_45c7406f4f86f9be_38_new)
HXLINE(  39)		this->node = node;
HXLINE(  40)		this->from = from;
            	}

Dynamic LogicNodeInput_obj::__CreateEmpty() { return new LogicNodeInput_obj; }

void *LogicNodeInput_obj::_hx_vtable = 0;

Dynamic LogicNodeInput_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LogicNodeInput_obj > _hx_result = new LogicNodeInput_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool LogicNodeInput_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x197fbf48;
}

 ::Dynamic LogicNodeInput_obj::get(){
            	HX_STACKFRAME(&_hx_pos_45c7406f4f86f9be_45_get)
HXDLIN(  45)		return this->node->get(this->from);
            	}


HX_DEFINE_DYNAMIC_FUNC0(LogicNodeInput_obj,get,return )

void LogicNodeInput_obj::set( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_45c7406f4f86f9be_50_set)
HXDLIN(  50)		this->node->set(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(LogicNodeInput_obj,set,(void))


hx::ObjectPtr< LogicNodeInput_obj > LogicNodeInput_obj::__new( ::armory::logicnode::LogicNode node,int from) {
	hx::ObjectPtr< LogicNodeInput_obj > __this = new LogicNodeInput_obj();
	__this->__construct(node,from);
	return __this;
}

hx::ObjectPtr< LogicNodeInput_obj > LogicNodeInput_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicNode node,int from) {
	LogicNodeInput_obj *__this = (LogicNodeInput_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LogicNodeInput_obj), true, "armory.logicnode.LogicNodeInput"));
	*(void **)__this = LogicNodeInput_obj::_hx_vtable;
	__this->__construct(node,from);
	return __this;
}

LogicNodeInput_obj::LogicNodeInput_obj()
{
}

void LogicNodeInput_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LogicNodeInput);
	HX_MARK_MEMBER_NAME(node,"node");
	HX_MARK_MEMBER_NAME(from,"from");
	HX_MARK_END_CLASS();
}

void LogicNodeInput_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(node,"node");
	HX_VISIT_MEMBER_NAME(from,"from");
}

hx::Val LogicNodeInput_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"node") ) { return hx::Val( node ); }
		if (HX_FIELD_EQ(inName,"from") ) { return hx::Val( from ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LogicNodeInput_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"node") ) { node=inValue.Cast<  ::armory::logicnode::LogicNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"from") ) { from=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LogicNodeInput_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("node","\x02","\x0a","\x0a","\x49"));
	outFields->push(HX_HCSTRING("from","\x6a","\xa5","\xc2","\x43"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LogicNodeInput_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::armory::logicnode::LogicNode*/ ,(int)offsetof(LogicNodeInput_obj,node),HX_HCSTRING("node","\x02","\x0a","\x0a","\x49")},
	{hx::fsInt,(int)offsetof(LogicNodeInput_obj,from),HX_HCSTRING("from","\x6a","\xa5","\xc2","\x43")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LogicNodeInput_obj_sStaticStorageInfo = 0;
#endif

static ::String LogicNodeInput_obj_sMemberFields[] = {
	HX_HCSTRING("node","\x02","\x0a","\x0a","\x49"),
	HX_HCSTRING("from","\x6a","\xa5","\xc2","\x43"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void LogicNodeInput_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LogicNodeInput_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LogicNodeInput_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LogicNodeInput_obj::__mClass,"__mClass");
};

#endif

hx::Class LogicNodeInput_obj::__mClass;

void LogicNodeInput_obj::__register()
{
	hx::Object *dummy = new LogicNodeInput_obj;
	LogicNodeInput_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.LogicNodeInput","\xac","\x69","\x19","\x1e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LogicNodeInput_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LogicNodeInput_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LogicNodeInput_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LogicNodeInput_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LogicNodeInput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LogicNodeInput_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
