// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_SleepNode
#include <armory/logicnode/SleepNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_system_Tween
#include <iron/system/Tween.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1a31dc3df5471e7f_6_new,"armory.logicnode.SleepNode","new",0x6b1f9e29,"armory.logicnode.SleepNode.new","armory/logicnode/SleepNode.hx",6,0x628e5fa9)
HX_LOCAL_STACK_FRAME(_hx_pos_1a31dc3df5471e7f_9_run,"armory.logicnode.SleepNode","run",0x6b22b514,"armory.logicnode.SleepNode.run","armory/logicnode/SleepNode.hx",9,0x628e5fa9)
HX_LOCAL_STACK_FRAME(_hx_pos_1a31dc3df5471e7f_15_done,"armory.logicnode.SleepNode","done",0x49f63299,"armory.logicnode.SleepNode.done","armory/logicnode/SleepNode.hx",15,0x628e5fa9)
namespace armory{
namespace logicnode{

void SleepNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_1a31dc3df5471e7f_6_new)
HXDLIN(   6)		super::__construct(tree);
            	}

Dynamic SleepNode_obj::__CreateEmpty() { return new SleepNode_obj; }

void *SleepNode_obj::_hx_vtable = 0;

Dynamic SleepNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SleepNode_obj > _hx_result = new SleepNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SleepNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x387cc8d3;
	}
}

void SleepNode_obj::run(){
            	HX_STACKFRAME(&_hx_pos_1a31dc3df5471e7f_9_run)
HXLINE(  10)		Float time = ( (Float)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  11)		::iron::_hx_system::Tween_obj::timer(time,this->done_dyn());
            	}


void SleepNode_obj::done(){
            	HX_STACKFRAME(&_hx_pos_1a31dc3df5471e7f_15_done)
HXDLIN(  15)		this->super::run();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SleepNode_obj,done,(void))


hx::ObjectPtr< SleepNode_obj > SleepNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< SleepNode_obj > __this = new SleepNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< SleepNode_obj > SleepNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	SleepNode_obj *__this = (SleepNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SleepNode_obj), true, "armory.logicnode.SleepNode"));
	*(void **)__this = SleepNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

SleepNode_obj::SleepNode_obj()
{
}

hx::Val SleepNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"done") ) { return hx::Val( done_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SleepNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SleepNode_obj_sStaticStorageInfo = 0;
#endif

static ::String SleepNode_obj_sMemberFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("done","\x82","\xf0","\x6d","\x42"),
	::String(null()) };

static void SleepNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SleepNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SleepNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SleepNode_obj::__mClass,"__mClass");
};

#endif

hx::Class SleepNode_obj::__mClass;

void SleepNode_obj::__register()
{
	hx::Object *dummy = new SleepNode_obj;
	SleepNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.SleepNode","\xb7","\x55","\x41","\x2a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SleepNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SleepNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SleepNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SleepNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SleepNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SleepNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
