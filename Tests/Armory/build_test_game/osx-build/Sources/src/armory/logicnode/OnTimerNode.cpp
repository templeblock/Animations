// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_OnTimerNode
#include <armory/logicnode/OnTimerNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_system_Time
#include <iron/system/Time.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b28d9cf2ed20aa53_3_new,"armory.logicnode.OnTimerNode","new",0xf63761b8,"armory.logicnode.OnTimerNode.new","armory/logicnode/OnTimerNode.hx",3,0xf1c5177a)
HX_LOCAL_STACK_FRAME(_hx_pos_b28d9cf2ed20aa53_14_update,"armory.logicnode.OnTimerNode","update",0x331d5bb1,"armory.logicnode.OnTimerNode.update","armory/logicnode/OnTimerNode.hx",14,0xf1c5177a)
namespace armory{
namespace logicnode{

void OnTimerNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_b28d9cf2ed20aa53_3_new)
HXLINE(   6)		this->repeat = false;
HXLINE(   5)		this->duration = ((Float)0.0);
HXLINE(   9)		super::__construct(tree);
HXLINE(  11)		tree->notifyOnUpdate(this->update_dyn());
            	}

Dynamic OnTimerNode_obj::__CreateEmpty() { return new OnTimerNode_obj; }

void *OnTimerNode_obj::_hx_vtable = 0;

Dynamic OnTimerNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OnTimerNode_obj > _hx_result = new OnTimerNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OnTimerNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1df5260e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1df5260e;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

void OnTimerNode_obj::update(){
            	HX_STACKFRAME(&_hx_pos_b28d9cf2ed20aa53_14_update)
HXLINE(  16)		if ((this->duration <= ((Float)0.0))) {
HXLINE(  17)			this->duration = ( (Float)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  18)			this->repeat = ( (bool)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
            		}
HXLINE(  21)		 ::armory::logicnode::OnTimerNode _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  21)		_hx_tmp->duration = (_hx_tmp->duration - (((Float)0.0166666666666666664) * ::iron::_hx_system::Time_obj::scale));
HXLINE(  22)		if ((this->duration <= ((Float)0.0))) {
HXLINE(  23)			if (!(this->repeat)) {
HXLINE(  23)				this->tree->removeUpdate(this->update_dyn());
            			}
HXLINE(  24)			this->run();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OnTimerNode_obj,update,(void))


hx::ObjectPtr< OnTimerNode_obj > OnTimerNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< OnTimerNode_obj > __this = new OnTimerNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< OnTimerNode_obj > OnTimerNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	OnTimerNode_obj *__this = (OnTimerNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OnTimerNode_obj), true, "armory.logicnode.OnTimerNode"));
	*(void **)__this = OnTimerNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

OnTimerNode_obj::OnTimerNode_obj()
{
}

hx::Val OnTimerNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"repeat") ) { return hx::Val( repeat ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { return hx::Val( duration ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val OnTimerNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"repeat") ) { repeat=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OnTimerNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"));
	outFields->push(HX_HCSTRING("repeat","\x5b","\x97","\x7c","\x06"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OnTimerNode_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(OnTimerNode_obj,duration),HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14")},
	{hx::fsBool,(int)offsetof(OnTimerNode_obj,repeat),HX_HCSTRING("repeat","\x5b","\x97","\x7c","\x06")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *OnTimerNode_obj_sStaticStorageInfo = 0;
#endif

static ::String OnTimerNode_obj_sMemberFields[] = {
	HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"),
	HX_HCSTRING("repeat","\x5b","\x97","\x7c","\x06"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void OnTimerNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OnTimerNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OnTimerNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OnTimerNode_obj::__mClass,"__mClass");
};

#endif

hx::Class OnTimerNode_obj::__mClass;

void OnTimerNode_obj::__register()
{
	hx::Object *dummy = new OnTimerNode_obj;
	OnTimerNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.OnTimerNode","\xc6","\x65","\x8e","\xfe");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OnTimerNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OnTimerNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OnTimerNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OnTimerNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OnTimerNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OnTimerNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
