// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_OnSurfaceNode
#include <armory/logicnode/OnSurfaceNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_Mouse
#include <iron/system/Mouse.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_efa0bdd3db29a6a1_7_new,"armory.logicnode.OnSurfaceNode","new",0x9975e5e0,"armory.logicnode.OnSurfaceNode.new","armory/logicnode/OnSurfaceNode.hx",7,0xd9d604d2)
HX_LOCAL_STACK_FRAME(_hx_pos_efa0bdd3db29a6a1_13_update,"armory.logicnode.OnSurfaceNode","update",0x0539e089,"armory.logicnode.OnSurfaceNode.update","armory/logicnode/OnSurfaceNode.hx",13,0xd9d604d2)
namespace armory{
namespace logicnode{

void OnSurfaceNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_efa0bdd3db29a6a1_7_new)
HXLINE(   8)		super::__construct(tree);
HXLINE(  10)		tree->notifyOnUpdate(this->update_dyn());
            	}

Dynamic OnSurfaceNode_obj::__CreateEmpty() { return new OnSurfaceNode_obj; }

void *OnSurfaceNode_obj::_hx_vtable = 0;

Dynamic OnSurfaceNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OnSurfaceNode_obj > _hx_result = new OnSurfaceNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OnSurfaceNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x7c92f76e;
	}
}

void OnSurfaceNode_obj::update(){
            	HX_STACKFRAME(&_hx_pos_efa0bdd3db29a6a1_13_update)
HXLINE(  14)		 ::iron::_hx_system::Mouse surface = ::iron::_hx_system::Input_obj::getSurface();
HXLINE(  15)		bool b = false;
HXLINE(  16)		{
HXLINE(  16)			::String _g = this->property0;
HXDLIN(  16)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Moved",13,3c,93,9f)) ){
HXLINE(  24)				b = surface->moved;
HXDLIN(  24)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Released",dd,44,99,50)) ){
HXLINE(  22)				b = surface->released(null());
HXDLIN(  22)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Started",21,51,6c,02)) ){
HXLINE(  20)				b = surface->started(null());
HXDLIN(  20)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Touched",be,45,49,a6)) ){
HXLINE(  18)				b = surface->down(null());
HXDLIN(  18)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  26)		if (b) {
HXLINE(  26)			this->run();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OnSurfaceNode_obj,update,(void))


hx::ObjectPtr< OnSurfaceNode_obj > OnSurfaceNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< OnSurfaceNode_obj > __this = new OnSurfaceNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< OnSurfaceNode_obj > OnSurfaceNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	OnSurfaceNode_obj *__this = (OnSurfaceNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OnSurfaceNode_obj), true, "armory.logicnode.OnSurfaceNode"));
	*(void **)__this = OnSurfaceNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

OnSurfaceNode_obj::OnSurfaceNode_obj()
{
}

void OnSurfaceNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OnSurfaceNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OnSurfaceNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val OnSurfaceNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val OnSurfaceNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OnSurfaceNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OnSurfaceNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(OnSurfaceNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *OnSurfaceNode_obj_sStaticStorageInfo = 0;
#endif

static ::String OnSurfaceNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void OnSurfaceNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OnSurfaceNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OnSurfaceNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OnSurfaceNode_obj::__mClass,"__mClass");
};

#endif

hx::Class OnSurfaceNode_obj::__mClass;

void OnSurfaceNode_obj::__register()
{
	hx::Object *dummy = new OnSurfaceNode_obj;
	OnSurfaceNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.OnSurfaceNode","\xee","\xb5","\xdd","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OnSurfaceNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OnSurfaceNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OnSurfaceNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OnSurfaceNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OnSurfaceNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OnSurfaceNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
