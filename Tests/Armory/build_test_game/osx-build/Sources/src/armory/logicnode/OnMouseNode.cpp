// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_OnMouseNode
#include <armory/logicnode/OnMouseNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_Mouse
#include <iron/system/Mouse.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_09a089a02440bab7_8_new,"armory.logicnode.OnMouseNode","new",0x6d341818,"armory.logicnode.OnMouseNode.new","armory/logicnode/OnMouseNode.hx",8,0xceb74d1a)
HX_LOCAL_STACK_FRAME(_hx_pos_09a089a02440bab7_14_update,"armory.logicnode.OnMouseNode","update",0xcdeae151,"armory.logicnode.OnMouseNode.update","armory/logicnode/OnMouseNode.hx",14,0xceb74d1a)
namespace armory{
namespace logicnode{

void OnMouseNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_09a089a02440bab7_8_new)
HXLINE(   9)		super::__construct(tree);
HXLINE(  11)		tree->notifyOnUpdate(this->update_dyn());
            	}

Dynamic OnMouseNode_obj::__CreateEmpty() { return new OnMouseNode_obj; }

void *OnMouseNode_obj::_hx_vtable = 0;

Dynamic OnMouseNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OnMouseNode_obj > _hx_result = new OnMouseNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OnMouseNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19ff2c6e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x19ff2c6e;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

void OnMouseNode_obj::update(){
            	HX_STACKFRAME(&_hx_pos_09a089a02440bab7_14_update)
HXLINE(  15)		 ::iron::_hx_system::Mouse mouse = ::iron::_hx_system::Input_obj::getMouse();
HXLINE(  16)		bool b = false;
HXLINE(  17)		{
HXLINE(  17)			::String _g = this->property0;
HXDLIN(  17)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Down",82,24,47,2d)) ){
HXLINE(  19)				b = mouse->down(this->property1);
HXDLIN(  19)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Moved",13,3c,93,9f)) ){
HXLINE(  25)				b = mouse->moved;
HXDLIN(  25)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Released",dd,44,99,50)) ){
HXLINE(  23)				b = mouse->released(this->property1);
HXDLIN(  23)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Started",21,51,6c,02)) ){
HXLINE(  21)				b = mouse->started(this->property1);
HXDLIN(  21)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  27)		if (b) {
HXLINE(  27)			this->run();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OnMouseNode_obj,update,(void))


hx::ObjectPtr< OnMouseNode_obj > OnMouseNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< OnMouseNode_obj > __this = new OnMouseNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< OnMouseNode_obj > OnMouseNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	OnMouseNode_obj *__this = (OnMouseNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OnMouseNode_obj), true, "armory.logicnode.OnMouseNode"));
	*(void **)__this = OnMouseNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

OnMouseNode_obj::OnMouseNode_obj()
{
}

void OnMouseNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OnMouseNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	HX_MARK_MEMBER_NAME(property1,"property1");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OnMouseNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	HX_VISIT_MEMBER_NAME(property1,"property1");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val OnMouseNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
		if (HX_FIELD_EQ(inName,"property1") ) { return hx::Val( property1 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val OnMouseNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"property1") ) { property1=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OnMouseNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("property1","\x3c","\x02","\x07","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OnMouseNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(OnMouseNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{hx::fsString,(int)offsetof(OnMouseNode_obj,property1),HX_HCSTRING("property1","\x3c","\x02","\x07","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *OnMouseNode_obj_sStaticStorageInfo = 0;
#endif

static ::String OnMouseNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("property1","\x3c","\x02","\x07","\x05"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void OnMouseNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OnMouseNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OnMouseNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OnMouseNode_obj::__mClass,"__mClass");
};

#endif

hx::Class OnMouseNode_obj::__mClass;

void OnMouseNode_obj::__register()
{
	hx::Object *dummy = new OnMouseNode_obj;
	OnMouseNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.OnMouseNode","\x26","\x6c","\x98","\xfa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OnMouseNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OnMouseNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OnMouseNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OnMouseNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OnMouseNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OnMouseNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
