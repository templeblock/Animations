// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_FloatNode
#include <armory/logicnode/FloatNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_VectorNode
#include <armory/logicnode/VectorNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_baa64b44b9726bcb_5_new,"armory.logicnode.VectorNode","new",0x27d41819,"armory.logicnode.VectorNode.new","armory/logicnode/VectorNode.hx",5,0xf44260f5)
HX_LOCAL_STACK_FRAME(_hx_pos_baa64b44b9726bcb_19_get,"armory.logicnode.VectorNode","get",0x27cec84f,"armory.logicnode.VectorNode.get","armory/logicnode/VectorNode.hx",19,0xf44260f5)
HX_LOCAL_STACK_FRAME(_hx_pos_baa64b44b9726bcb_26_set,"armory.logicnode.VectorNode","set",0x27d7e35b,"armory.logicnode.VectorNode.set","armory/logicnode/VectorNode.hx",26,0xf44260f5)
namespace armory{
namespace logicnode{

void VectorNode_obj::__construct( ::armory::logicnode::LogicTree tree, ::Dynamic x, ::Dynamic y, ::Dynamic z){
            	HX_GC_STACKFRAME(&_hx_pos_baa64b44b9726bcb_5_new)
HXLINE(   7)		this->value =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  10)		super::__construct(tree);
HXLINE(  12)		if (hx::IsNotNull( x )) {
HXLINE(  13)			this->addInput( ::armory::logicnode::FloatNode_obj::__alloc( HX_CTX ,tree,x),(int)0);
HXLINE(  14)			this->addInput( ::armory::logicnode::FloatNode_obj::__alloc( HX_CTX ,tree,y),(int)0);
HXLINE(  15)			this->addInput( ::armory::logicnode::FloatNode_obj::__alloc( HX_CTX ,tree,z),(int)0);
            		}
            	}

Dynamic VectorNode_obj::__CreateEmpty() { return new VectorNode_obj; }

void *VectorNode_obj::_hx_vtable = 0;

Dynamic VectorNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VectorNode_obj > _hx_result = new VectorNode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool VectorNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0cf0e627) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0cf0e627;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic VectorNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_baa64b44b9726bcb_19_get)
HXLINE(  20)		this->value->x = ( (float)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  21)		this->value->y = ( (float)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  22)		this->value->z = ( (float)(this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  23)		return this->value;
            	}


void VectorNode_obj::set( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_baa64b44b9726bcb_26_set)
HXLINE(  27)		this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->set( ::Dynamic(value->__Field(HX_("x",78,00,00,00),hx::paccDynamic)));
HXLINE(  28)		this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->set( ::Dynamic(value->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
HXLINE(  29)		this->inputs->__get((int)2).StaticCast<  ::armory::logicnode::LogicNodeInput >()->set( ::Dynamic(value->__Field(HX_("z",7a,00,00,00),hx::paccDynamic)));
            	}



hx::ObjectPtr< VectorNode_obj > VectorNode_obj::__new( ::armory::logicnode::LogicTree tree, ::Dynamic x, ::Dynamic y, ::Dynamic z) {
	hx::ObjectPtr< VectorNode_obj > __this = new VectorNode_obj();
	__this->__construct(tree,x,y,z);
	return __this;
}

hx::ObjectPtr< VectorNode_obj > VectorNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree, ::Dynamic x, ::Dynamic y, ::Dynamic z) {
	VectorNode_obj *__this = (VectorNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VectorNode_obj), true, "armory.logicnode.VectorNode"));
	*(void **)__this = VectorNode_obj::_hx_vtable;
	__this->__construct(tree,x,y,z);
	return __this;
}

VectorNode_obj::VectorNode_obj()
{
}

void VectorNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VectorNode);
	HX_MARK_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VectorNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val VectorNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VectorNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VectorNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VectorNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(VectorNode_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VectorNode_obj_sStaticStorageInfo = 0;
#endif

static ::String VectorNode_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void VectorNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VectorNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VectorNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VectorNode_obj::__mClass,"__mClass");
};

#endif

hx::Class VectorNode_obj::__mClass;

void VectorNode_obj::__register()
{
	hx::Object *dummy = new VectorNode_obj;
	VectorNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.VectorNode","\xa7","\x17","\xd6","\x86");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VectorNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VectorNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VectorNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VectorNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VectorNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VectorNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
