// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_MathNode
#include <armory/logicnode/MathNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b24509ffd622d05c_9_new,"armory.logicnode.MathNode","new",0x12a1c19e,"armory.logicnode.MathNode.new","armory/logicnode/MathNode.hx",9,0xd9f09390)
HX_LOCAL_STACK_FRAME(_hx_pos_b24509ffd622d05c_12_get,"armory.logicnode.MathNode","get",0x129c71d4,"armory.logicnode.MathNode.get","armory/logicnode/MathNode.hx",12,0xd9f09390)
namespace armory{
namespace logicnode{

void MathNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_b24509ffd622d05c_9_new)
HXDLIN(   9)		super::__construct(tree);
            	}

Dynamic MathNode_obj::__CreateEmpty() { return new MathNode_obj; }

void *MathNode_obj::_hx_vtable = 0;

Dynamic MathNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MathNode_obj > _hx_result = new MathNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MathNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ee1bf10) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0ee1bf10;
	} else {
		return inClassId==(int)0x2e933162;
	}
}

 ::Dynamic MathNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_b24509ffd622d05c_12_get)
HXLINE(  14)		Float v1 = ( (Float)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  15)		Float v2 = ( (Float)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  16)		Float f = ((Float)0.0);
HXLINE(  17)		{
HXLINE(  17)			::String _g = this->property0;
HXDLIN(  17)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Abs",52,a8,31,00)) ){
HXLINE(  31)				f = ::Math_obj::abs(v1);
HXDLIN(  31)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Add",01,aa,31,00)) ){
HXLINE(  19)				f = (v1 + v2);
HXDLIN(  19)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Arccosine",ab,1a,b2,e7)) ){
HXLINE(  41)				f = ::Math_obj::acos(v1);
HXDLIN(  41)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Arcsine",7f,4d,a1,70)) ){
HXLINE(  39)				f = ::Math_obj::asin(v1);
HXDLIN(  39)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Arctangent",d3,f0,b8,1b)) ){
HXLINE(  43)				f = ::Math_obj::atan(v1);
HXDLIN(  43)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Cosine",19,27,b7,ff)) ){
HXLINE(  25)				f = ::Math_obj::cos(v1);
HXDLIN(  25)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Divide",99,a3,a6,f3)) ){
HXLINE(  35)				f = ((Float)v1 / (Float)v2);
HXDLIN(  35)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Greater Than",87,ac,27,f6)) ){
HXLINE(  53)				if ((v1 > v2)) {
HXLINE(  53)					f = ((Float)1.0);
            				}
            				else {
HXLINE(  53)					f = ((Float)0.0);
            				}
HXDLIN(  53)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Less Than",88,c5,68,7e)) ){
HXLINE(  51)				if ((v1 < v2)) {
HXLINE(  51)					f = ((Float)1.0);
            				}
            				else {
HXLINE(  51)					f = ((Float)0.0);
            				}
HXDLIN(  51)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Logarithm",85,58,b9,d9)) ){
HXLINE(  47)				f = ::Math_obj::log(v1);
HXDLIN(  47)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Max",84,c2,3a,00)) ){
HXLINE(  27)				f = ::Math_obj::max(v1,v2);
HXDLIN(  27)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Min",72,c9,3a,00)) ){
HXLINE(  29)				f = ::Math_obj::min(v1,v2);
HXDLIN(  29)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Modulo",d6,a8,67,f5)) ){
HXLINE(  55)				f = hx::Mod(v1,v2);
HXDLIN(  55)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Multiply",44,9e,3e,74)) ){
HXLINE(  21)				f = (v1 * v2);
HXDLIN(  21)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Power",e5,bb,c7,59)) ){
HXLINE(  45)				f = ::Math_obj::pow(v1,v2);
HXDLIN(  45)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Round",2e,68,93,80)) ){
HXLINE(  49)				f = ::Math_obj::round(v1);
HXDLIN(  49)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Sine",6d,c2,2c,37)) ){
HXLINE(  23)				f = ::Math_obj::sin(v1);
HXDLIN(  23)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Subtract",34,31,c3,d1)) ){
HXLINE(  33)				f = (v1 - v2);
HXDLIN(  33)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("Tangent",a5,c4,1e,08)) ){
HXLINE(  37)				f = ::Math_obj::tan(v1);
HXDLIN(  37)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
            		}
HXLINE(  58)		if ((this->property1 == HX_("true",4e,a7,03,4d))) {
HXLINE(  58)			if ((f < ((Float)0.0))) {
HXLINE(  58)				f = ((Float)0.0);
            			}
            			else {
HXLINE(  58)				if ((f > ((Float)1.0))) {
HXLINE(  58)					f = ((Float)1.0);
            				}
            				else {
HXLINE(  58)					f = f;
            				}
            			}
            		}
HXLINE(  60)		return f;
            	}



hx::ObjectPtr< MathNode_obj > MathNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< MathNode_obj > __this = new MathNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< MathNode_obj > MathNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	MathNode_obj *__this = (MathNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MathNode_obj), true, "armory.logicnode.MathNode"));
	*(void **)__this = MathNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

MathNode_obj::MathNode_obj()
{
}

void MathNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MathNode);
	HX_MARK_MEMBER_NAME(property0,"property0");
	HX_MARK_MEMBER_NAME(property1,"property1");
	 ::armory::logicnode::LogicNode_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MathNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(property0,"property0");
	HX_VISIT_MEMBER_NAME(property1,"property1");
	 ::armory::logicnode::LogicNode_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MathNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { return hx::Val( property0 ); }
		if (HX_FIELD_EQ(inName,"property1") ) { return hx::Val( property1 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MathNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"property0") ) { property0=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"property1") ) { property1=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MathNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"));
	outFields->push(HX_HCSTRING("property1","\x3c","\x02","\x07","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MathNode_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(MathNode_obj,property0),HX_HCSTRING("property0","\x3b","\x02","\x07","\x05")},
	{hx::fsString,(int)offsetof(MathNode_obj,property1),HX_HCSTRING("property1","\x3c","\x02","\x07","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MathNode_obj_sStaticStorageInfo = 0;
#endif

static ::String MathNode_obj_sMemberFields[] = {
	HX_HCSTRING("property0","\x3b","\x02","\x07","\x05"),
	HX_HCSTRING("property1","\x3c","\x02","\x07","\x05"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void MathNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MathNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MathNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MathNode_obj::__mClass,"__mClass");
};

#endif

hx::Class MathNode_obj::__mClass;

void MathNode_obj::__register()
{
	hx::Object *dummy = new MathNode_obj;
	MathNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.MathNode","\xac","\x5a","\x45","\xd4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MathNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MathNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MathNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MathNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MathNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MathNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
