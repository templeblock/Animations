// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicNodeInput
#include <armory/logicnode/LogicNodeInput.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_OnActionMarkerNode
#include <armory/logicnode/OnActionMarkerNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_BoneAnimation
#include <iron/object/BoneAnimation.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1791e6bf3d2ed7da_7_new,"armory.logicnode.OnActionMarkerNode","new",0x1a849725,"armory.logicnode.OnActionMarkerNode.new","armory/logicnode/OnActionMarkerNode.hx",7,0xad503569)
HX_LOCAL_STACK_FRAME(_hx_pos_1791e6bf3d2ed7da_13_init,"armory.logicnode.OnActionMarkerNode","init",0x163860ab,"armory.logicnode.OnActionMarkerNode.init","armory/logicnode/OnActionMarkerNode.hx",13,0xad503569)
namespace armory{
namespace logicnode{

void OnActionMarkerNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_1791e6bf3d2ed7da_7_new)
HXLINE(   8)		super::__construct(tree);
HXLINE(  10)		tree->notifyOnInit(this->init_dyn());
            	}

Dynamic OnActionMarkerNode_obj::__CreateEmpty() { return new OnActionMarkerNode_obj; }

void *OnActionMarkerNode_obj::_hx_vtable = 0;

Dynamic OnActionMarkerNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OnActionMarkerNode_obj > _hx_result = new OnActionMarkerNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OnActionMarkerNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x7b626a17;
	}
}

void OnActionMarkerNode_obj::init(){
            	HX_STACKFRAME(&_hx_pos_1791e6bf3d2ed7da_13_init)
HXLINE(  14)		 ::iron::object::Object object = ( ( ::iron::object::Object)(this->inputs->__get((int)0).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  15)		::String marker = ( (::String)(this->inputs->__get((int)1).StaticCast<  ::armory::logicnode::LogicNodeInput >()->get()) );
HXLINE(  17)		if (hx::IsNull( object )) {
HXLINE(  17)			return;
            		}
HXLINE(  18)		 ::iron::object::Animation animation = object->animation;
HXLINE(  19)		if (hx::IsNull( animation )) {
HXLINE(  19)			animation = object->getParentArmature(object->name);
            		}
HXLINE(  21)		animation->notifyOnMarker(marker,this->run_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(OnActionMarkerNode_obj,init,(void))


hx::ObjectPtr< OnActionMarkerNode_obj > OnActionMarkerNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< OnActionMarkerNode_obj > __this = new OnActionMarkerNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< OnActionMarkerNode_obj > OnActionMarkerNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	OnActionMarkerNode_obj *__this = (OnActionMarkerNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OnActionMarkerNode_obj), true, "armory.logicnode.OnActionMarkerNode"));
	*(void **)__this = OnActionMarkerNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

OnActionMarkerNode_obj::OnActionMarkerNode_obj()
{
}

hx::Val OnActionMarkerNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *OnActionMarkerNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *OnActionMarkerNode_obj_sStaticStorageInfo = 0;
#endif

static ::String OnActionMarkerNode_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void OnActionMarkerNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OnActionMarkerNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OnActionMarkerNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OnActionMarkerNode_obj::__mClass,"__mClass");
};

#endif

hx::Class OnActionMarkerNode_obj::__mClass;

void OnActionMarkerNode_obj::__register()
{
	hx::Object *dummy = new OnActionMarkerNode_obj;
	OnActionMarkerNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.OnActionMarkerNode","\xb3","\x20","\xff","\x2c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OnActionMarkerNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OnActionMarkerNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OnActionMarkerNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OnActionMarkerNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OnActionMarkerNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OnActionMarkerNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
