// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_logicnode_LogicNode
#include <armory/logicnode/LogicNode.h>
#endif
#ifndef INCLUDED_armory_logicnode_LogicTree
#include <armory/logicnode/LogicTree.h>
#endif
#ifndef INCLUDED_armory_logicnode_NoneNode
#include <armory/logicnode/NoneNode.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8d5a0cbb9a64224b_6_new,"armory.logicnode.NoneNode","new",0x65f8028e,"armory.logicnode.NoneNode.new","armory/logicnode/NoneNode.hx",6,0x41a1c0a0)
HX_LOCAL_STACK_FRAME(_hx_pos_8d5a0cbb9a64224b_10_get,"armory.logicnode.NoneNode","get",0x65f2b2c4,"armory.logicnode.NoneNode.get","armory/logicnode/NoneNode.hx",10,0x41a1c0a0)
namespace armory{
namespace logicnode{

void NoneNode_obj::__construct( ::armory::logicnode::LogicTree tree){
            	HX_STACKFRAME(&_hx_pos_8d5a0cbb9a64224b_6_new)
HXDLIN(   6)		super::__construct(tree);
            	}

Dynamic NoneNode_obj::__CreateEmpty() { return new NoneNode_obj; }

void *NoneNode_obj::_hx_vtable = 0;

Dynamic NoneNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NoneNode_obj > _hx_result = new NoneNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NoneNode_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e933162) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e933162;
	} else {
		return inClassId==(int)0x6de8c800;
	}
}

 ::Dynamic NoneNode_obj::get(int from){
            	HX_STACKFRAME(&_hx_pos_8d5a0cbb9a64224b_10_get)
HXDLIN(  10)		return null();
            	}



hx::ObjectPtr< NoneNode_obj > NoneNode_obj::__new( ::armory::logicnode::LogicTree tree) {
	hx::ObjectPtr< NoneNode_obj > __this = new NoneNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< NoneNode_obj > NoneNode_obj::__alloc(hx::Ctx *_hx_ctx, ::armory::logicnode::LogicTree tree) {
	NoneNode_obj *__this = (NoneNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NoneNode_obj), true, "armory.logicnode.NoneNode"));
	*(void **)__this = NoneNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

NoneNode_obj::NoneNode_obj()
{
}

hx::Val NoneNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *NoneNode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *NoneNode_obj_sStaticStorageInfo = 0;
#endif

static ::String NoneNode_obj_sMemberFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null()) };

static void NoneNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NoneNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NoneNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NoneNode_obj::__mClass,"__mClass");
};

#endif

hx::Class NoneNode_obj::__mClass;

void NoneNode_obj::__register()
{
	hx::Object *dummy = new NoneNode_obj;
	NoneNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.logicnode.NoneNode","\x9c","\x63","\x4c","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NoneNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NoneNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NoneNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NoneNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NoneNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NoneNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace logicnode
