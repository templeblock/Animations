// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_trait_internal_MovieTexture
#include <armory/trait/internal/MovieTexture.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_MaterialContext
#include <iron/data/MaterialContext.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Video
#include <kha/Video.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <kha/graphics4/TextureFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1711b29b432dfc96_31_new,"armory.trait.internal.MovieTexture","new",0xbe3ef1fa,"armory.trait.internal.MovieTexture.new","armory/trait/internal/MovieTexture.hx",31,0xbec54097)
HX_LOCAL_STACK_FRAME(_hx_pos_1711b29b432dfc96_16_pow,"armory.trait.internal.MovieTexture","pow",0xbe407f32,"armory.trait.internal.MovieTexture.pow","armory/trait/internal/MovieTexture.hx",16,0xbec54097)
HX_LOCAL_STACK_FRAME(_hx_pos_1711b29b432dfc96_22_getPower2,"armory.trait.internal.MovieTexture","getPower2",0x452212dd,"armory.trait.internal.MovieTexture.getPower2","armory/trait/internal/MovieTexture.hx",22,0xbec54097)
HX_LOCAL_STACK_FRAME(_hx_pos_1711b29b432dfc96_44_init,"armory.trait.internal.MovieTexture","init",0xb58d8036,"armory.trait.internal.MovieTexture.init","armory/trait/internal/MovieTexture.hx",44,0xbec54097)
HX_LOCAL_STACK_FRAME(_hx_pos_1711b29b432dfc96_42_init,"armory.trait.internal.MovieTexture","init",0xb58d8036,"armory.trait.internal.MovieTexture.init","armory/trait/internal/MovieTexture.hx",42,0xbec54097)
HX_LOCAL_STACK_FRAME(_hx_pos_1711b29b432dfc96_56_render,"armory.trait.internal.MovieTexture","render",0xc1f3c5fc,"armory.trait.internal.MovieTexture.render","armory/trait/internal/MovieTexture.hx",56,0xbec54097)
HX_LOCAL_STACK_FRAME(_hx_pos_1711b29b432dfc96_12_boot,"armory.trait.internal.MovieTexture","boot",0xb0edc958,"armory.trait.internal.MovieTexture.boot","armory/trait/internal/MovieTexture.hx",12,0xbec54097)
namespace armory{
namespace trait{
namespace internal{

void MovieTexture_obj::__construct(::String videoName){
            	HX_STACKFRAME(&_hx_pos_1711b29b432dfc96_31_new)
HXLINE(  32)		super::__construct();
HXLINE(  34)		this->videoName = videoName;
HXLINE(  36)		if (!(::armory::trait::internal::MovieTexture_obj::created)) {
HXLINE(  37)			::armory::trait::internal::MovieTexture_obj::created = true;
HXLINE(  38)			this->notifyOnInit(this->init_dyn());
            		}
            	}

Dynamic MovieTexture_obj::__CreateEmpty() { return new MovieTexture_obj; }

void *MovieTexture_obj::_hx_vtable = 0;

Dynamic MovieTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MovieTexture_obj > _hx_result = new MovieTexture_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MovieTexture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3b8f30f8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x3b8f30f8;
	} else {
		return inClassId==(int)0x7b609ac2;
	}
}

int MovieTexture_obj::pow(int pow){
            	HX_STACKFRAME(&_hx_pos_1711b29b432dfc96_16_pow)
HXLINE(  17)		int ret = (int)1;
HXLINE(  18)		{
HXLINE(  18)			int _g1 = (int)0;
HXDLIN(  18)			int _g = pow;
HXDLIN(  18)			while((_g1 < _g)){
HXLINE(  18)				_g1 = (_g1 + (int)1);
HXDLIN(  18)				int i = (_g1 - (int)1);
HXDLIN(  18)				ret = (ret * (int)2);
            			}
            		}
HXLINE(  19)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieTexture_obj,pow,return )

int MovieTexture_obj::getPower2(int i){
            	HX_STACKFRAME(&_hx_pos_1711b29b432dfc96_22_getPower2)
HXLINE(  23)		int power = (int)0;
HXLINE(  24)		while(true){
HXLINE(  25)			int res = this->pow(power);
HXLINE(  26)			if ((res >= i)) {
HXLINE(  26)				return res;
            			}
HXLINE(  27)			power = (power + (int)1);
            		}
HXLINE(  24)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieTexture_obj,getPower2,return )

void MovieTexture_obj::init(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::armory::trait::internal::MovieTexture,_gthis) HXARGC(1)
            		void _hx_run( ::kha::Video vid){
            			HX_STACKFRAME(&_hx_pos_1711b29b432dfc96_44_init)
HXLINE(  45)			_gthis->video = vid;
HXLINE(  46)			_gthis->video->play(true);
HXLINE(  48)			int _hx_tmp = _gthis->video->width();
HXDLIN(  48)			int _hx_tmp1 = _gthis->getPower2(_hx_tmp);
HXDLIN(  48)			int _hx_tmp2 = _gthis->video->height();
HXDLIN(  48)			::armory::trait::internal::MovieTexture_obj::image = ::kha::Image_obj::createRenderTarget(_hx_tmp1,_gthis->getPower2(_hx_tmp2),null(),null(),null(),null());
HXLINE(  50)			 ::iron::object::MeshObject o = hx::TCast<  ::iron::object::MeshObject >::cast(_gthis->object);
HXLINE(  51)			{
HXLINE(  51)				::Array< ::Dynamic> this1 = ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(o->materials,(int)0)) )->contexts->__get((int)0).StaticCast<  ::iron::data::MaterialContext >()->textures;
HXDLIN(  51)				this1->__unsafe_set((int)0,::armory::trait::internal::MovieTexture_obj::image);
            			}
HXLINE(  52)			_gthis->notifyOnRender2D(_gthis->render_dyn());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_1711b29b432dfc96_42_init)
HXDLIN(  42)		 ::armory::trait::internal::MovieTexture _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  44)		::iron::data::Data_obj::getVideo(this->videoName, ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieTexture_obj,init,(void))

void MovieTexture_obj::render( ::kha::graphics2::Graphics g){
            	HX_STACKFRAME(&_hx_pos_1711b29b432dfc96_56_render)
HXLINE(  57)		g->end();
HXLINE(  59)		 ::kha::graphics2::Graphics g2 = ::armory::trait::internal::MovieTexture_obj::image->get_g2();
HXLINE(  60)		g2->begin(true,(int)-16777216);
HXLINE(  61)		g2->set_color((int)-1);
HXLINE(  62)		g2->drawVideo(this->video,(int)0,(int)0,(int)1024,(int)512);
HXLINE(  63)		g2->end();
HXLINE(  65)		g->begin(false,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieTexture_obj,render,(void))

 ::kha::Image MovieTexture_obj::image;

bool MovieTexture_obj::created;


hx::ObjectPtr< MovieTexture_obj > MovieTexture_obj::__new(::String videoName) {
	hx::ObjectPtr< MovieTexture_obj > __this = new MovieTexture_obj();
	__this->__construct(videoName);
	return __this;
}

hx::ObjectPtr< MovieTexture_obj > MovieTexture_obj::__alloc(hx::Ctx *_hx_ctx,::String videoName) {
	MovieTexture_obj *__this = (MovieTexture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MovieTexture_obj), true, "armory.trait.internal.MovieTexture"));
	*(void **)__this = MovieTexture_obj::_hx_vtable;
	__this->__construct(videoName);
	return __this;
}

MovieTexture_obj::MovieTexture_obj()
{
}

void MovieTexture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MovieTexture);
	HX_MARK_MEMBER_NAME(video,"video");
	HX_MARK_MEMBER_NAME(videoName,"videoName");
	 ::iron::Trait_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MovieTexture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(video,"video");
	HX_VISIT_MEMBER_NAME(videoName,"videoName");
	 ::iron::Trait_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MovieTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pow") ) { return hx::Val( pow_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"video") ) { return hx::Val( video ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"videoName") ) { return hx::Val( videoName ); }
		if (HX_FIELD_EQ(inName,"getPower2") ) { return hx::Val( getPower2_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MovieTexture_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { outValue = ( image ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"created") ) { outValue = ( created ); return true; }
	}
	return false;
}

hx::Val MovieTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"video") ) { video=inValue.Cast<  ::kha::Video >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"videoName") ) { videoName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MovieTexture_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=ioValue.Cast<  ::kha::Image >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"created") ) { created=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void MovieTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("video","\x7b","\x14","\xfc","\x36"));
	outFields->push(HX_HCSTRING("videoName","\x66","\x0c","\xb8","\x6e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MovieTexture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::Video*/ ,(int)offsetof(MovieTexture_obj,video),HX_HCSTRING("video","\x7b","\x14","\xfc","\x36")},
	{hx::fsString,(int)offsetof(MovieTexture_obj,videoName),HX_HCSTRING("videoName","\x66","\x0c","\xb8","\x6e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MovieTexture_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::Image*/ ,(void *) &MovieTexture_obj::image,HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsBool,(void *) &MovieTexture_obj::created,HX_HCSTRING("created","\xe8","\xb5","\x6a","\x11")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MovieTexture_obj_sMemberFields[] = {
	HX_HCSTRING("video","\x7b","\x14","\xfc","\x36"),
	HX_HCSTRING("videoName","\x66","\x0c","\xb8","\x6e"),
	HX_HCSTRING("pow","\x98","\x5d","\x55","\x00"),
	HX_HCSTRING("getPower2","\xc3","\xc1","\xbe","\x7c"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null()) };

static void MovieTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MovieTexture_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MovieTexture_obj::image,"image");
	HX_MARK_MEMBER_NAME(MovieTexture_obj::created,"created");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MovieTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MovieTexture_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MovieTexture_obj::image,"image");
	HX_VISIT_MEMBER_NAME(MovieTexture_obj::created,"created");
};

#endif

hx::Class MovieTexture_obj::__mClass;

static ::String MovieTexture_obj_sStaticFields[] = {
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("created","\xe8","\xb5","\x6a","\x11"),
	::String(null())
};

void MovieTexture_obj::__register()
{
	hx::Object *dummy = new MovieTexture_obj;
	MovieTexture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.trait.internal.MovieTexture","\x08","\x2d","\x34","\xd2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MovieTexture_obj::__GetStatic;
	__mClass->mSetStaticField = &MovieTexture_obj::__SetStatic;
	__mClass->mMarkFunc = MovieTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MovieTexture_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MovieTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MovieTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MovieTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MovieTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MovieTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MovieTexture_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1711b29b432dfc96_12_boot)
HXDLIN(  12)		created = false;
            	}
}

} // end namespace armory
} // end namespace trait
} // end namespace internal
