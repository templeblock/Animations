// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_trait_Face3
#include <armory/trait/Face3.h>
#endif
#ifndef INCLUDED_armory_trait_UserData
#include <armory/trait/UserData.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_441641a89fa67cf1_569_new,"armory.trait.UserData","new",0x8a7ddd1b,"armory.trait.UserData.new","armory/trait/PhysicsBreak.hx",569,0x7f52e3b0)
namespace armory{
namespace trait{

void UserData_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_441641a89fa67cf1_569_new)
            	}

Dynamic UserData_obj::__CreateEmpty() { return new UserData_obj; }

void *UserData_obj::_hx_vtable = 0;

Dynamic UserData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UserData_obj > _hx_result = new UserData_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool UserData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ec9ed29;
}


UserData_obj::UserData_obj()
{
}

void UserData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UserData);
	HX_MARK_MEMBER_NAME(mass,"mass");
	HX_MARK_MEMBER_NAME(velocity,"velocity");
	HX_MARK_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_MARK_MEMBER_NAME(breakable,"breakable");
	HX_MARK_MEMBER_NAME(vertices,"vertices");
	HX_MARK_MEMBER_NAME(faces,"faces");
	HX_MARK_END_CLASS();
}

void UserData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mass,"mass");
	HX_VISIT_MEMBER_NAME(velocity,"velocity");
	HX_VISIT_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_VISIT_MEMBER_NAME(breakable,"breakable");
	HX_VISIT_MEMBER_NAME(vertices,"vertices");
	HX_VISIT_MEMBER_NAME(faces,"faces");
}

hx::Val UserData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mass") ) { return hx::Val( mass ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"faces") ) { return hx::Val( faces ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"velocity") ) { return hx::Val( velocity ); }
		if (HX_FIELD_EQ(inName,"vertices") ) { return hx::Val( vertices ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"breakable") ) { return hx::Val( breakable ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { return hx::Val( angularVelocity ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val UserData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mass") ) { mass=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"faces") ) { faces=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"velocity") ) { velocity=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"breakable") ) { breakable=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { angularVelocity=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UserData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"));
	outFields->push(HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58"));
	outFields->push(HX_HCSTRING("breakable","\xd9","\x5d","\xbf","\x45"));
	outFields->push(HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"));
	outFields->push(HX_HCSTRING("faces","\x36","\x55","\x48","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo UserData_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(UserData_obj,mass),HX_HCSTRING("mass","\xf4","\x40","\x56","\x48")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(UserData_obj,velocity),HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(UserData_obj,angularVelocity),HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58")},
	{hx::fsBool,(int)offsetof(UserData_obj,breakable),HX_HCSTRING("breakable","\xd9","\x5d","\xbf","\x45")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(UserData_obj,vertices),HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(UserData_obj,faces),HX_HCSTRING("faces","\x36","\x55","\x48","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *UserData_obj_sStaticStorageInfo = 0;
#endif

static ::String UserData_obj_sMemberFields[] = {
	HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"),
	HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"),
	HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58"),
	HX_HCSTRING("breakable","\xd9","\x5d","\xbf","\x45"),
	HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"),
	HX_HCSTRING("faces","\x36","\x55","\x48","\xfb"),
	::String(null()) };

static void UserData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UserData_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UserData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UserData_obj::__mClass,"__mClass");
};

#endif

hx::Class UserData_obj::__mClass;

void UserData_obj::__register()
{
	hx::Object *dummy = new UserData_obj;
	UserData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.trait.UserData","\xa9","\xb3","\x34","\xb9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UserData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(UserData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< UserData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UserData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UserData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UserData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace trait
