// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_trait_SimpleRotateObject
#include <armory/trait/SimpleRotateObject.h>
#endif
#ifndef INCLUDED_armory_trait_physics_RigidBody
#include <armory/trait/physics/RigidBody.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_Keyboard
#include <iron/system/Keyboard.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3d9023be706ac2c8_22_new,"armory.trait.SimpleRotateObject","new",0x774df252,"armory.trait.SimpleRotateObject.new","armory/trait/SimpleRotateObject.hx",22,0x6153635c)
HX_DEFINE_STACK_FRAME(_hx_pos_3d9023be706ac2c8_27_new,"armory.trait.SimpleRotateObject","new",0x774df252,"armory.trait.SimpleRotateObject.new","armory/trait/SimpleRotateObject.hx",27,0x6153635c)
HX_DEFINE_STACK_FRAME(_hx_pos_3d9023be706ac2c8_11_new,"armory.trait.SimpleRotateObject","new",0x774df252,"armory.trait.SimpleRotateObject.new","armory/trait/SimpleRotateObject.hx",11,0x6153635c)
HX_LOCAL_STACK_FRAME(_hx_pos_3d9023be706ac2c8_61_rotateObject,"armory.trait.SimpleRotateObject","rotateObject",0x0d2cff48,"armory.trait.SimpleRotateObject.rotateObject","armory/trait/SimpleRotateObject.hx",61,0x6153635c)
HX_LOCAL_STACK_FRAME(_hx_pos_3d9023be706ac2c8_11_boot,"armory.trait.SimpleRotateObject","boot",0xe4ff1600,"armory.trait.SimpleRotateObject.boot","armory/trait/SimpleRotateObject.hx",11,0x6153635c)
namespace armory{
namespace trait{

void SimpleRotateObject_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::armory::trait::SimpleRotateObject,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_3d9023be706ac2c8_22_new)
HXLINE(  23)			_gthis->rb = _gthis->object->getTrait(hx::ClassOf< ::armory::trait::physics::RigidBody >()).StaticCast<  ::armory::trait::physics::RigidBody >();
HXLINE(  24)			_gthis->keyboard = ::iron::_hx_system::Input_obj::getKeyboard();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::armory::trait::SimpleRotateObject,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_3d9023be706ac2c8_27_new)
HXLINE(  28)			 ::iron::math::Vec4 rotate = ::iron::math::Vec4_obj::zero();
HXLINE(  30)			if (_gthis->keyboard->down(HX_("r",72,00,00,00))) {
HXLINE(  31)				 ::iron::math::Vec4 rotate1 = rotate;
HXDLIN(  31)				rotate1->x = (rotate1->x + (int)1);
            			}
HXLINE(  34)			if (_gthis->keyboard->down(HX_("t",74,00,00,00))) {
HXLINE(  35)				 ::iron::math::Vec4 rotate2 = rotate;
HXDLIN(  35)				rotate2->x = (rotate2->x - (int)1);
            			}
HXLINE(  38)			if (_gthis->keyboard->down(HX_("f",66,00,00,00))) {
HXLINE(  39)				 ::iron::math::Vec4 rotate3 = rotate;
HXDLIN(  39)				rotate3->y = (rotate3->y + (int)1);
            			}
HXLINE(  42)			if (_gthis->keyboard->down(HX_("g",67,00,00,00))) {
HXLINE(  43)				 ::iron::math::Vec4 rotate4 = rotate;
HXDLIN(  43)				rotate4->y = (rotate4->y - (int)1);
            			}
HXLINE(  46)			if (_gthis->keyboard->down(HX_("v",76,00,00,00))) {
HXLINE(  47)				 ::iron::math::Vec4 rotate5 = rotate;
HXDLIN(  47)				rotate5->z = (rotate5->z + (int)1);
            			}
HXLINE(  50)			if (_gthis->keyboard->down(HX_("b",62,00,00,00))) {
HXLINE(  51)				 ::iron::math::Vec4 rotate6 = rotate;
HXDLIN(  51)				rotate6->z = (rotate6->z - (int)1);
            			}
HXLINE(  54)			 ::iron::math::Vec4 v = ::iron::math::Vec4_obj::zero();
HXDLIN(  54)			bool _hx_tmp;
HXDLIN(  54)			bool _hx_tmp1;
HXDLIN(  54)			if ((rotate->x == v->x)) {
HXLINE(  54)				_hx_tmp1 = (rotate->y == v->y);
            			}
            			else {
HXLINE(  54)				_hx_tmp1 = false;
            			}
HXDLIN(  54)			if (_hx_tmp1) {
HXLINE(  54)				_hx_tmp = (rotate->z == v->z);
            			}
            			else {
HXLINE(  54)				_hx_tmp = false;
            			}
HXDLIN(  54)			if (!(_hx_tmp)) {
HXLINE(  55)				_gthis->rotateObject(rotate);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_3d9023be706ac2c8_11_new)
HXLINE(  14)		this->speed = ((Float)0.1);
HXLINE(  19)		 ::armory::trait::SimpleRotateObject _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  20)		super::__construct();
HXLINE(  22)		this->notifyOnInit( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  27)		this->notifyOnUpdate( ::Dynamic(new _hx_Closure_1(_gthis)));
            	}

Dynamic SimpleRotateObject_obj::__CreateEmpty() { return new SimpleRotateObject_obj; }

void *SimpleRotateObject_obj::_hx_vtable = 0;

Dynamic SimpleRotateObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SimpleRotateObject_obj > _hx_result = new SimpleRotateObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SimpleRotateObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ce23ae0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0ce23ae0;
	} else {
		return inClassId==(int)0x7b609ac2;
	}
}

void SimpleRotateObject_obj::rotateObject( ::iron::math::Vec4 vec){
            	HX_STACKFRAME(&_hx_pos_3d9023be706ac2c8_61_rotateObject)
HXDLIN(  61)		if (hx::IsNull( this->rb )) {
HXLINE(  69)			this->object->transform->rotate(vec,this->speed);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleRotateObject_obj,rotateObject,(void))


hx::ObjectPtr< SimpleRotateObject_obj > SimpleRotateObject_obj::__new() {
	hx::ObjectPtr< SimpleRotateObject_obj > __this = new SimpleRotateObject_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SimpleRotateObject_obj > SimpleRotateObject_obj::__alloc(hx::Ctx *_hx_ctx) {
	SimpleRotateObject_obj *__this = (SimpleRotateObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SimpleRotateObject_obj), true, "armory.trait.SimpleRotateObject"));
	*(void **)__this = SimpleRotateObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SimpleRotateObject_obj::SimpleRotateObject_obj()
{
}

void SimpleRotateObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SimpleRotateObject);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(keyboard,"keyboard");
	HX_MARK_MEMBER_NAME(rb,"rb");
	 ::iron::Trait_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SimpleRotateObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(keyboard,"keyboard");
	HX_VISIT_MEMBER_NAME(rb,"rb");
	 ::iron::Trait_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SimpleRotateObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"rb") ) { return hx::Val( rb ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { return hx::Val( keyboard ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rotateObject") ) { return hx::Val( rotateObject_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SimpleRotateObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"rb") ) { rb=inValue.Cast<  ::armory::trait::physics::RigidBody >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { keyboard=inValue.Cast<  ::iron::_hx_system::Keyboard >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SimpleRotateObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68"));
	outFields->push(HX_HCSTRING("rb","\xb0","\x63","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SimpleRotateObject_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(SimpleRotateObject_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsObject /*::iron::_hx_system::Keyboard*/ ,(int)offsetof(SimpleRotateObject_obj,keyboard),HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68")},
	{hx::fsObject /*::armory::trait::physics::RigidBody*/ ,(int)offsetof(SimpleRotateObject_obj,rb),HX_HCSTRING("rb","\xb0","\x63","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SimpleRotateObject_obj_sStaticStorageInfo = 0;
#endif

static ::String SimpleRotateObject_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68"),
	HX_HCSTRING("rb","\xb0","\x63","\x00","\x00"),
	HX_HCSTRING("rotateObject","\x7a","\xef","\x8d","\xd3"),
	::String(null()) };

static void SimpleRotateObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SimpleRotateObject_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SimpleRotateObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SimpleRotateObject_obj::__mClass,"__mClass");
};

#endif

hx::Class SimpleRotateObject_obj::__mClass;

void SimpleRotateObject_obj::__register()
{
	hx::Object *dummy = new SimpleRotateObject_obj;
	SimpleRotateObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.trait.SimpleRotateObject","\x60","\x21","\xf6","\xa5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SimpleRotateObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SimpleRotateObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SimpleRotateObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SimpleRotateObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SimpleRotateObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SimpleRotateObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SimpleRotateObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3d9023be706ac2c8_11_boot)
HXDLIN(  11)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("speed",87,97,69,81), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("prop",a3,c7,5e,4a),null()))))));
            	}
}

} // end namespace armory
} // end namespace trait
