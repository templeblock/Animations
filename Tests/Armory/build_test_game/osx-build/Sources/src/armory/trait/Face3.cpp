// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_trait_Face3
#include <armory/trait/Face3.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0b6b8749767811b8_776_new,"armory.trait.Face3","new",0x81de6cd4,"armory.trait.Face3.new","armory/trait/PhysicsBreak.hx",776,0x7f52e3b0)
namespace armory{
namespace trait{

void Face3_obj::__construct(int a,int b,int c){
            	HX_GC_STACKFRAME(&_hx_pos_0b6b8749767811b8_776_new)
HXLINE( 777)		this->a = a;
HXLINE( 778)		this->b = b;
HXLINE( 779)		this->c = c;
HXLINE( 780)		this->normal =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}

Dynamic Face3_obj::__CreateEmpty() { return new Face3_obj; }

void *Face3_obj::_hx_vtable = 0;

Dynamic Face3_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Face3_obj > _hx_result = new Face3_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Face3_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54628962;
}


hx::ObjectPtr< Face3_obj > Face3_obj::__new(int a,int b,int c) {
	hx::ObjectPtr< Face3_obj > __this = new Face3_obj();
	__this->__construct(a,b,c);
	return __this;
}

hx::ObjectPtr< Face3_obj > Face3_obj::__alloc(hx::Ctx *_hx_ctx,int a,int b,int c) {
	Face3_obj *__this = (Face3_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Face3_obj), true, "armory.trait.Face3"));
	*(void **)__this = Face3_obj::_hx_vtable;
	__this->__construct(a,b,c);
	return __this;
}

Face3_obj::Face3_obj()
{
}

void Face3_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Face3);
	HX_MARK_MEMBER_NAME(a,"a");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_END_CLASS();
}

void Face3_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(a,"a");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(c,"c");
	HX_VISIT_MEMBER_NAME(normal,"normal");
}

hx::Val Face3_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		if (HX_FIELD_EQ(inName,"c") ) { return hx::Val( c ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { return hx::Val( normal ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Face3_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Face3_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("c","\x63","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("normal","\x27","\x72","\x69","\x30"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Face3_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Face3_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Face3_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Face3_obj,c),HX_HCSTRING("c","\x63","\x00","\x00","\x00")},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Face3_obj,normal),HX_HCSTRING("normal","\x27","\x72","\x69","\x30")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Face3_obj_sStaticStorageInfo = 0;
#endif

static ::String Face3_obj_sMemberFields[] = {
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("c","\x63","\x00","\x00","\x00"),
	HX_HCSTRING("normal","\x27","\x72","\x69","\x30"),
	::String(null()) };

static void Face3_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Face3_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Face3_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Face3_obj::__mClass,"__mClass");
};

#endif

hx::Class Face3_obj::__mClass;

void Face3_obj::__register()
{
	hx::Object *dummy = new Face3_obj;
	Face3_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.trait.Face3","\xe2","\xb2","\x52","\x5e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Face3_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Face3_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Face3_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Face3_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Face3_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Face3_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace trait
