// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_trait_internal_LoadingScreen
#include <armory/trait/internal/LoadingScreen.h>
#endif
#ifndef INCLUDED_kha_System
#include <kha/System.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <kha/graphics2/Graphics.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_429a9513b5b22675_7_render,"armory.trait.internal.LoadingScreen","render",0xd249aaf9,"armory.trait.internal.LoadingScreen.render","armory/trait/internal/LoadingScreen.hx",7,0xe1521c32)
namespace armory{
namespace trait{
namespace internal{

void LoadingScreen_obj::__construct() { }

Dynamic LoadingScreen_obj::__CreateEmpty() { return new LoadingScreen_obj; }

void *LoadingScreen_obj::_hx_vtable = 0;

Dynamic LoadingScreen_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LoadingScreen_obj > _hx_result = new LoadingScreen_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LoadingScreen_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6f740517;
}

void LoadingScreen_obj::render( ::kha::graphics2::Graphics g,int assetsLoaded,int assetsTotal){
            	HX_STACKFRAME(&_hx_pos_429a9513b5b22675_7_render)
HXLINE(   8)		g->set_color((int)-3200189);
HXLINE(   9)		int _hx_tmp = (::kha::System_obj::windowHeight(null()) - (int)6);
HXDLIN(   9)		g->fillRect((int)0,_hx_tmp,(((Float)::kha::System_obj::windowWidth(null()) / (Float)assetsTotal) * assetsLoaded),(int)6);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LoadingScreen_obj,render,(void))


LoadingScreen_obj::LoadingScreen_obj()
{
}

bool LoadingScreen_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *LoadingScreen_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *LoadingScreen_obj_sStaticStorageInfo = 0;
#endif

static void LoadingScreen_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LoadingScreen_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LoadingScreen_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LoadingScreen_obj::__mClass,"__mClass");
};

#endif

hx::Class LoadingScreen_obj::__mClass;

static ::String LoadingScreen_obj_sStaticFields[] = {
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null())
};

void LoadingScreen_obj::__register()
{
	hx::Object *dummy = new LoadingScreen_obj;
	LoadingScreen_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.trait.internal.LoadingScreen","\x6b","\x0a","\x06","\x59");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LoadingScreen_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LoadingScreen_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(LoadingScreen_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< LoadingScreen_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LoadingScreen_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LoadingScreen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LoadingScreen_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace trait
} // end namespace internal
