// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_trait_SimpleScaleObject
#include <armory/trait/SimpleScaleObject.h>
#endif
#ifndef INCLUDED_armory_trait_physics_KinematicCharacterController
#include <armory/trait/physics/KinematicCharacterController.h>
#endif
#ifndef INCLUDED_armory_trait_physics_RigidBody
#include <armory/trait/physics/RigidBody.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_Keyboard
#include <iron/system/Keyboard.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_27a0814a2ffaa8a4_26_new,"armory.trait.SimpleScaleObject","new",0x7f619035,"armory.trait.SimpleScaleObject.new","armory/trait/SimpleScaleObject.hx",26,0xd0c2509d)
HX_DEFINE_STACK_FRAME(_hx_pos_27a0814a2ffaa8a4_32_new,"armory.trait.SimpleScaleObject","new",0x7f619035,"armory.trait.SimpleScaleObject.new","armory/trait/SimpleScaleObject.hx",32,0xd0c2509d)
HX_DEFINE_STACK_FRAME(_hx_pos_27a0814a2ffaa8a4_14_new,"armory.trait.SimpleScaleObject","new",0x7f619035,"armory.trait.SimpleScaleObject.new","armory/trait/SimpleScaleObject.hx",14,0xd0c2509d)
HX_LOCAL_STACK_FRAME(_hx_pos_27a0814a2ffaa8a4_73_scaleObject,"armory.trait.SimpleScaleObject","scaleObject",0x758461be,"armory.trait.SimpleScaleObject.scaleObject","armory/trait/SimpleScaleObject.hx",73,0xd0c2509d)
HX_LOCAL_STACK_FRAME(_hx_pos_27a0814a2ffaa8a4_14_boot,"armory.trait.SimpleScaleObject","boot",0xee159ebd,"armory.trait.SimpleScaleObject.boot","armory/trait/SimpleScaleObject.hx",14,0xd0c2509d)
namespace armory{
namespace trait{

void SimpleScaleObject_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::armory::trait::SimpleScaleObject,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_27a0814a2ffaa8a4_26_new)
HXLINE(  27)			_gthis->rb = _gthis->object->getTrait(hx::ClassOf< ::armory::trait::physics::RigidBody >()).StaticCast<  ::armory::trait::physics::RigidBody >();
HXLINE(  28)			_gthis->character = _gthis->object->getTrait(hx::ClassOf< ::armory::trait::physics::KinematicCharacterController >()).StaticCast<  ::armory::trait::physics::KinematicCharacterController >();
HXLINE(  29)			_gthis->keyboard = ::iron::_hx_system::Input_obj::getKeyboard();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::armory::trait::SimpleScaleObject,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_27a0814a2ffaa8a4_32_new)
HXLINE(  33)			 ::iron::math::Vec4 scale = ::iron::math::Vec4_obj::zero();
HXLINE(  35)			if (_gthis->keyboard->down(HX_("y",79,00,00,00))) {
HXLINE(  36)				 ::iron::math::Vec4 scale1 = scale;
HXDLIN(  36)				scale1->x = (scale1->x + _gthis->speed);
            			}
HXLINE(  39)			if (_gthis->keyboard->down(HX_("u",75,00,00,00))) {
HXLINE(  40)				 ::iron::math::Vec4 scale2 = scale;
HXDLIN(  40)				scale2->x = (scale2->x - _gthis->speed);
            			}
HXLINE(  43)			if (_gthis->keyboard->down(HX_("h",68,00,00,00))) {
HXLINE(  44)				 ::iron::math::Vec4 scale3 = scale;
HXDLIN(  44)				scale3->y = (scale3->y + _gthis->speed);
            			}
HXLINE(  47)			if (_gthis->keyboard->down(HX_("j",6a,00,00,00))) {
HXLINE(  48)				 ::iron::math::Vec4 scale4 = scale;
HXDLIN(  48)				scale4->y = (scale4->y - _gthis->speed);
            			}
HXLINE(  51)			if (_gthis->keyboard->down(HX_("n",6e,00,00,00))) {
HXLINE(  52)				 ::iron::math::Vec4 scale5 = scale;
HXDLIN(  52)				scale5->z = (scale5->z + _gthis->speed);
            			}
HXLINE(  55)			if (_gthis->keyboard->down(HX_("m",6d,00,00,00))) {
HXLINE(  56)				 ::iron::math::Vec4 scale6 = scale;
HXDLIN(  56)				scale6->z = (scale6->z - _gthis->speed);
            			}
HXLINE(  59)			if (_gthis->keyboard->down(HX_("z",7a,00,00,00))) {
HXLINE(  60)				scale->set(_gthis->speed,_gthis->speed,_gthis->speed,null());
            			}
HXLINE(  63)			if (_gthis->keyboard->down(HX_("x",78,00,00,00))) {
HXLINE(  64)				scale->set(-(_gthis->speed),-(_gthis->speed),-(_gthis->speed),null());
            			}
HXLINE(  67)			 ::iron::math::Vec4 v = ::iron::math::Vec4_obj::zero();
HXDLIN(  67)			bool _hx_tmp;
HXDLIN(  67)			bool _hx_tmp1;
HXDLIN(  67)			if ((scale->x == v->x)) {
HXLINE(  67)				_hx_tmp1 = (scale->y == v->y);
            			}
            			else {
HXLINE(  67)				_hx_tmp1 = false;
            			}
HXDLIN(  67)			if (_hx_tmp1) {
HXLINE(  67)				_hx_tmp = (scale->z == v->z);
            			}
            			else {
HXLINE(  67)				_hx_tmp = false;
            			}
HXDLIN(  67)			if (!(_hx_tmp)) {
HXLINE(  68)				_gthis->scaleObject(scale);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_27a0814a2ffaa8a4_14_new)
HXLINE(  17)		this->speed = ((Float)0.1);
HXLINE(  23)		 ::armory::trait::SimpleScaleObject _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  24)		super::__construct();
HXLINE(  26)		this->notifyOnInit( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  32)		this->notifyOnUpdate( ::Dynamic(new _hx_Closure_1(_gthis)));
            	}

Dynamic SimpleScaleObject_obj::__CreateEmpty() { return new SimpleScaleObject_obj; }

void *SimpleScaleObject_obj::_hx_vtable = 0;

Dynamic SimpleScaleObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SimpleScaleObject_obj > _hx_result = new SimpleScaleObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SimpleScaleObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4c49f8a7) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4c49f8a7;
	} else {
		return inClassId==(int)0x7b609ac2;
	}
}

void SimpleScaleObject_obj::scaleObject( ::iron::math::Vec4 vec){
            	HX_STACKFRAME(&_hx_pos_27a0814a2ffaa8a4_73_scaleObject)
HXLINE(  74)		 ::iron::math::Vec4 s = this->object->transform->scale;
HXLINE(  75)		if (hx::IsNull( this->rb )) {
HXLINE(  81)			if (hx::IsNull( this->character )) {
HXLINE(  88)				 ::iron::math::Vec4 _hx_tmp = this->object->transform->scale;
HXDLIN(  88)				float _hx_tmp1 = (s->x + vec->x);
HXDLIN(  88)				float _hx_tmp2 = (s->y + vec->y);
HXDLIN(  88)				_hx_tmp->set(_hx_tmp1,_hx_tmp2,(s->z + vec->z),null());
HXLINE(  89)				this->object->transform->buildMatrix();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleScaleObject_obj,scaleObject,(void))


hx::ObjectPtr< SimpleScaleObject_obj > SimpleScaleObject_obj::__new() {
	hx::ObjectPtr< SimpleScaleObject_obj > __this = new SimpleScaleObject_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SimpleScaleObject_obj > SimpleScaleObject_obj::__alloc(hx::Ctx *_hx_ctx) {
	SimpleScaleObject_obj *__this = (SimpleScaleObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SimpleScaleObject_obj), true, "armory.trait.SimpleScaleObject"));
	*(void **)__this = SimpleScaleObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SimpleScaleObject_obj::SimpleScaleObject_obj()
{
}

void SimpleScaleObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SimpleScaleObject);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(keyboard,"keyboard");
	HX_MARK_MEMBER_NAME(rb,"rb");
	HX_MARK_MEMBER_NAME(character,"character");
	 ::iron::Trait_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SimpleScaleObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(keyboard,"keyboard");
	HX_VISIT_MEMBER_NAME(rb,"rb");
	HX_VISIT_MEMBER_NAME(character,"character");
	 ::iron::Trait_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SimpleScaleObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"rb") ) { return hx::Val( rb ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { return hx::Val( keyboard ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"character") ) { return hx::Val( character ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scaleObject") ) { return hx::Val( scaleObject_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SimpleScaleObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"rb") ) { rb=inValue.Cast<  ::armory::trait::physics::RigidBody >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { keyboard=inValue.Cast<  ::iron::_hx_system::Keyboard >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"character") ) { character=inValue.Cast<  ::armory::trait::physics::KinematicCharacterController >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SimpleScaleObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68"));
	outFields->push(HX_HCSTRING("rb","\xb0","\x63","\x00","\x00"));
	outFields->push(HX_HCSTRING("character","\xa9","\xdb","\xd1","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SimpleScaleObject_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(SimpleScaleObject_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsObject /*::iron::_hx_system::Keyboard*/ ,(int)offsetof(SimpleScaleObject_obj,keyboard),HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68")},
	{hx::fsObject /*::armory::trait::physics::RigidBody*/ ,(int)offsetof(SimpleScaleObject_obj,rb),HX_HCSTRING("rb","\xb0","\x63","\x00","\x00")},
	{hx::fsObject /*::armory::trait::physics::KinematicCharacterController*/ ,(int)offsetof(SimpleScaleObject_obj,character),HX_HCSTRING("character","\xa9","\xdb","\xd1","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SimpleScaleObject_obj_sStaticStorageInfo = 0;
#endif

static ::String SimpleScaleObject_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68"),
	HX_HCSTRING("rb","\xb0","\x63","\x00","\x00"),
	HX_HCSTRING("character","\xa9","\xdb","\xd1","\x41"),
	HX_HCSTRING("scaleObject","\xe9","\x44","\x43","\x01"),
	::String(null()) };

static void SimpleScaleObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SimpleScaleObject_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SimpleScaleObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SimpleScaleObject_obj::__mClass,"__mClass");
};

#endif

hx::Class SimpleScaleObject_obj::__mClass;

void SimpleScaleObject_obj::__register()
{
	hx::Object *dummy = new SimpleScaleObject_obj;
	SimpleScaleObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.trait.SimpleScaleObject","\xc3","\x51","\x86","\x69");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SimpleScaleObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SimpleScaleObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SimpleScaleObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SimpleScaleObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SimpleScaleObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SimpleScaleObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SimpleScaleObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_27a0814a2ffaa8a4_14_boot)
HXDLIN(  14)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("speed",87,97,69,81), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("prop",a3,c7,5e,4a),null()))))));
            	}
}

} // end namespace armory
} // end namespace trait
