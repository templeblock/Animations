// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_armory_trait_SimpleMoveObject
#include <armory/trait/SimpleMoveObject.h>
#endif
#ifndef INCLUDED_armory_trait_physics_RigidBody
#include <armory/trait/physics/RigidBody.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_Keyboard
#include <iron/system/Keyboard.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <iron/system/VirtualInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5ca8c85599bd71ec_22_new,"armory.trait.SimpleMoveObject","new",0x5750a908,"armory.trait.SimpleMoveObject.new","armory/trait/SimpleMoveObject.hx",22,0xea8a59e6)
HX_DEFINE_STACK_FRAME(_hx_pos_5ca8c85599bd71ec_27_new,"armory.trait.SimpleMoveObject","new",0x5750a908,"armory.trait.SimpleMoveObject.new","armory/trait/SimpleMoveObject.hx",27,0xea8a59e6)
HX_DEFINE_STACK_FRAME(_hx_pos_5ca8c85599bd71ec_11_new,"armory.trait.SimpleMoveObject","new",0x5750a908,"armory.trait.SimpleMoveObject.new","armory/trait/SimpleMoveObject.hx",11,0xea8a59e6)
HX_LOCAL_STACK_FRAME(_hx_pos_5ca8c85599bd71ec_61_moveObject,"armory.trait.SimpleMoveObject","moveObject",0x3f570508,"armory.trait.SimpleMoveObject.moveObject","armory/trait/SimpleMoveObject.hx",61,0xea8a59e6)
HX_LOCAL_STACK_FRAME(_hx_pos_5ca8c85599bd71ec_11_boot,"armory.trait.SimpleMoveObject","boot",0x075c3e8a,"armory.trait.SimpleMoveObject.boot","armory/trait/SimpleMoveObject.hx",11,0xea8a59e6)
namespace armory{
namespace trait{

void SimpleMoveObject_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::armory::trait::SimpleMoveObject,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_5ca8c85599bd71ec_22_new)
HXLINE(  23)			_gthis->rb = _gthis->object->getTrait(hx::ClassOf< ::armory::trait::physics::RigidBody >()).StaticCast<  ::armory::trait::physics::RigidBody >();
HXLINE(  24)			_gthis->keyboard = ::iron::_hx_system::Input_obj::getKeyboard();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::armory::trait::SimpleMoveObject,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_5ca8c85599bd71ec_27_new)
HXLINE(  28)			 ::iron::math::Vec4 move = ::iron::math::Vec4_obj::zero();
HXLINE(  30)			if (_gthis->keyboard->down(HX_("d",64,00,00,00))) {
HXLINE(  31)				 ::iron::math::Vec4 move1 = move;
HXDLIN(  31)				move1->x = (move1->x + _gthis->speed);
            			}
HXLINE(  34)			if (_gthis->keyboard->down(HX_("a",61,00,00,00))) {
HXLINE(  35)				 ::iron::math::Vec4 move2 = move;
HXDLIN(  35)				move2->x = (move2->x - _gthis->speed);
            			}
HXLINE(  38)			if (_gthis->keyboard->down(HX_("w",77,00,00,00))) {
HXLINE(  39)				 ::iron::math::Vec4 move3 = move;
HXDLIN(  39)				move3->y = (move3->y + _gthis->speed);
            			}
HXLINE(  42)			if (_gthis->keyboard->down(HX_("s",73,00,00,00))) {
HXLINE(  43)				 ::iron::math::Vec4 move4 = move;
HXDLIN(  43)				move4->y = (move4->y - _gthis->speed);
            			}
HXLINE(  46)			if (_gthis->keyboard->down(HX_("q",71,00,00,00))) {
HXLINE(  47)				 ::iron::math::Vec4 move5 = move;
HXDLIN(  47)				move5->z = (move5->z + _gthis->speed);
            			}
HXLINE(  50)			if (_gthis->keyboard->down(HX_("e",65,00,00,00))) {
HXLINE(  51)				 ::iron::math::Vec4 move6 = move;
HXDLIN(  51)				move6->z = (move6->z - _gthis->speed);
            			}
HXLINE(  54)			 ::iron::math::Vec4 v = ::iron::math::Vec4_obj::zero();
HXDLIN(  54)			bool _hx_tmp;
HXDLIN(  54)			bool _hx_tmp1;
HXDLIN(  54)			if ((move->x == v->x)) {
HXLINE(  54)				_hx_tmp1 = (move->y == v->y);
            			}
            			else {
HXLINE(  54)				_hx_tmp1 = false;
            			}
HXDLIN(  54)			if (_hx_tmp1) {
HXLINE(  54)				_hx_tmp = (move->z == v->z);
            			}
            			else {
HXLINE(  54)				_hx_tmp = false;
            			}
HXDLIN(  54)			if (!(_hx_tmp)) {
HXLINE(  55)				_gthis->moveObject(move);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_5ca8c85599bd71ec_11_new)
HXLINE(  14)		this->speed = ((Float)0.1);
HXLINE(  19)		 ::armory::trait::SimpleMoveObject _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  20)		super::__construct();
HXLINE(  22)		this->notifyOnInit( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  27)		this->notifyOnUpdate( ::Dynamic(new _hx_Closure_1(_gthis)));
            	}

Dynamic SimpleMoveObject_obj::__CreateEmpty() { return new SimpleMoveObject_obj; }

void *SimpleMoveObject_obj::_hx_vtable = 0;

Dynamic SimpleMoveObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SimpleMoveObject_obj > _hx_result = new SimpleMoveObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SimpleMoveObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7b609ac2) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x7b609ac2;
	} else {
		return inClassId==(int)0x7ebd37fe;
	}
}

void SimpleMoveObject_obj::moveObject( ::iron::math::Vec4 vec){
            	HX_STACKFRAME(&_hx_pos_5ca8c85599bd71ec_61_moveObject)
HXDLIN(  61)		if (hx::IsNull( this->rb )) {
HXLINE(  70)			this->object->transform->translate(vec->x,vec->y,vec->z);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleMoveObject_obj,moveObject,(void))


hx::ObjectPtr< SimpleMoveObject_obj > SimpleMoveObject_obj::__new() {
	hx::ObjectPtr< SimpleMoveObject_obj > __this = new SimpleMoveObject_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SimpleMoveObject_obj > SimpleMoveObject_obj::__alloc(hx::Ctx *_hx_ctx) {
	SimpleMoveObject_obj *__this = (SimpleMoveObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SimpleMoveObject_obj), true, "armory.trait.SimpleMoveObject"));
	*(void **)__this = SimpleMoveObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SimpleMoveObject_obj::SimpleMoveObject_obj()
{
}

void SimpleMoveObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SimpleMoveObject);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(keyboard,"keyboard");
	HX_MARK_MEMBER_NAME(rb,"rb");
	 ::iron::Trait_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SimpleMoveObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(keyboard,"keyboard");
	HX_VISIT_MEMBER_NAME(rb,"rb");
	 ::iron::Trait_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SimpleMoveObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"rb") ) { return hx::Val( rb ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { return hx::Val( keyboard ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"moveObject") ) { return hx::Val( moveObject_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SimpleMoveObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"rb") ) { rb=inValue.Cast<  ::armory::trait::physics::RigidBody >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyboard") ) { keyboard=inValue.Cast<  ::iron::_hx_system::Keyboard >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SimpleMoveObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68"));
	outFields->push(HX_HCSTRING("rb","\xb0","\x63","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SimpleMoveObject_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(SimpleMoveObject_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsObject /*::iron::_hx_system::Keyboard*/ ,(int)offsetof(SimpleMoveObject_obj,keyboard),HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68")},
	{hx::fsObject /*::armory::trait::physics::RigidBody*/ ,(int)offsetof(SimpleMoveObject_obj,rb),HX_HCSTRING("rb","\xb0","\x63","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SimpleMoveObject_obj_sStaticStorageInfo = 0;
#endif

static ::String SimpleMoveObject_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("keyboard","\xa7","\xbc","\x29","\x68"),
	HX_HCSTRING("rb","\xb0","\x63","\x00","\x00"),
	HX_HCSTRING("moveObject","\xb0","\xf8","\x6d","\x65"),
	::String(null()) };

static void SimpleMoveObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SimpleMoveObject_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SimpleMoveObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SimpleMoveObject_obj::__mClass,"__mClass");
};

#endif

hx::Class SimpleMoveObject_obj::__mClass;

void SimpleMoveObject_obj::__register()
{
	hx::Object *dummy = new SimpleMoveObject_obj;
	SimpleMoveObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("armory.trait.SimpleMoveObject","\x16","\xc5","\xfd","\xda");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SimpleMoveObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SimpleMoveObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SimpleMoveObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SimpleMoveObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SimpleMoveObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SimpleMoveObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SimpleMoveObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5ca8c85599bd71ec_11_boot)
HXDLIN(  11)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("speed",87,97,69,81), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("prop",a3,c7,5e,4a),null()))))));
            	}
}

} // end namespace armory
} // end namespace trait
