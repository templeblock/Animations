// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_crypto_Adler32
#include <haxe/crypto/Adler32.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_zip__InflateImpl_Window
#include <haxe/zip/_InflateImpl/Window.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_46592f93151d4c7f_35_new,"haxe.zip._InflateImpl.Window","new",0x88adb9f3,"haxe.zip._InflateImpl.Window.new","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",35,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46592f93151d4c7f_41_slide,"haxe.zip._InflateImpl.Window","slide",0x409d7984,"haxe.zip._InflateImpl.Window.slide","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",41,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46592f93151d4c7f_49_addBytes,"haxe.zip._InflateImpl.Window","addBytes",0xb984b017,"haxe.zip._InflateImpl.Window.addBytes","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",49,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46592f93151d4c7f_55_addByte,"haxe.zip._InflateImpl.Window","addByte",0xa74a10dc,"haxe.zip._InflateImpl.Window.addByte","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",55,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46592f93151d4c7f_62_getLastChar,"haxe.zip._InflateImpl.Window","getLastChar",0xdd866f95,"haxe.zip._InflateImpl.Window.getLastChar","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",62,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46592f93151d4c7f_66_available,"haxe.zip._InflateImpl.Window","available",0x3285339c,"haxe.zip._InflateImpl.Window.available","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",66,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46592f93151d4c7f_69_checksum,"haxe.zip._InflateImpl.Window","checksum",0x2f923f50,"haxe.zip._InflateImpl.Window.checksum","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",69,0xd967a2ee)
namespace haxe{
namespace zip{
namespace _InflateImpl{

void Window_obj::__construct(bool hasCrc){
            	HX_GC_STACKFRAME(&_hx_pos_46592f93151d4c7f_35_new)
HXLINE(  36)		this->buffer = ::haxe::io::Bytes_obj::alloc((int)65536);
HXLINE(  37)		this->pos = (int)0;
HXLINE(  38)		if (hasCrc) {
HXLINE(  38)			this->crc =  ::haxe::crypto::Adler32_obj::__alloc( HX_CTX );
            		}
            	}

Dynamic Window_obj::__CreateEmpty() { return new Window_obj; }

void *Window_obj::_hx_vtable = 0;

Dynamic Window_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Window_obj > _hx_result = new Window_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Window_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x021b9cf3;
}

void Window_obj::slide(){
            	HX_STACKFRAME(&_hx_pos_46592f93151d4c7f_41_slide)
HXLINE(  42)		if (hx::IsNotNull( this->crc )) {
HXLINE(  42)			this->crc->update(this->buffer,(int)0,(int)32768);
            		}
HXLINE(  43)		 ::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc((int)65536);
HXLINE(  44)		 ::haxe::zip::_InflateImpl::Window _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  44)		_hx_tmp->pos = (_hx_tmp->pos - (int)32768);
HXLINE(  45)		b->blit((int)0,this->buffer,(int)32768,this->pos);
HXLINE(  46)		this->buffer = b;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,slide,(void))

void Window_obj::addBytes( ::haxe::io::Bytes b,int p,int len){
            	HX_STACKFRAME(&_hx_pos_46592f93151d4c7f_49_addBytes)
HXLINE(  50)		if (((this->pos + len) > (int)65536)) {
HXLINE(  50)			this->slide();
            		}
HXLINE(  51)		this->buffer->blit(this->pos,b,p,len);
HXLINE(  52)		 ::haxe::zip::_InflateImpl::Window _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  52)		_hx_tmp->pos = (_hx_tmp->pos + len);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Window_obj,addBytes,(void))

void Window_obj::addByte(int c){
            	HX_STACKFRAME(&_hx_pos_46592f93151d4c7f_55_addByte)
HXLINE(  56)		if ((this->pos == (int)65536)) {
HXLINE(  56)			this->slide();
            		}
HXLINE(  57)		this->buffer->b[this->pos] = c;
HXLINE(  58)		this->pos++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,addByte,(void))

int Window_obj::getLastChar(){
            	HX_STACKFRAME(&_hx_pos_46592f93151d4c7f_62_getLastChar)
HXDLIN(  62)		return this->buffer->b->__get((this->pos - (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,getLastChar,return )

int Window_obj::available(){
            	HX_STACKFRAME(&_hx_pos_46592f93151d4c7f_66_available)
HXDLIN(  66)		return this->pos;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,available,return )

 ::haxe::crypto::Adler32 Window_obj::checksum(){
            	HX_STACKFRAME(&_hx_pos_46592f93151d4c7f_69_checksum)
HXLINE(  70)		if (hx::IsNotNull( this->crc )) {
HXLINE(  70)			this->crc->update(this->buffer,(int)0,this->pos);
            		}
HXLINE(  71)		return this->crc;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,checksum,return )


hx::ObjectPtr< Window_obj > Window_obj::__new(bool hasCrc) {
	hx::ObjectPtr< Window_obj > __this = new Window_obj();
	__this->__construct(hasCrc);
	return __this;
}

hx::ObjectPtr< Window_obj > Window_obj::__alloc(hx::Ctx *_hx_ctx,bool hasCrc) {
	Window_obj *__this = (Window_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Window_obj), true, "haxe.zip._InflateImpl.Window"));
	*(void **)__this = Window_obj::_hx_vtable;
	__this->__construct(hasCrc);
	return __this;
}

Window_obj::Window_obj()
{
}

void Window_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Window);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(crc,"crc");
	HX_MARK_END_CLASS();
}

void Window_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(crc,"crc");
}

hx::Val Window_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		if (HX_FIELD_EQ(inName,"crc") ) { return hx::Val( crc ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"slide") ) { return hx::Val( slide_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addByte") ) { return hx::Val( addByte_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addBytes") ) { return hx::Val( addBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"checksum") ) { return hx::Val( checksum_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"available") ) { return hx::Val( available_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getLastChar") ) { return hx::Val( getLastChar_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Window_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"crc") ) { crc=inValue.Cast<  ::haxe::crypto::Adler32 >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Window_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("crc","\xd4","\x82","\x4b","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Window_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(Window_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsInt,(int)offsetof(Window_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsObject /*::haxe::crypto::Adler32*/ ,(int)offsetof(Window_obj,crc),HX_HCSTRING("crc","\xd4","\x82","\x4b","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Window_obj_sStaticStorageInfo = 0;
#endif

static ::String Window_obj_sMemberFields[] = {
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("crc","\xd4","\x82","\x4b","\x00"),
	HX_HCSTRING("slide","\x31","\xc5","\xc7","\x7e"),
	HX_HCSTRING("addBytes","\x8a","\x2e","\xf5","\x36"),
	HX_HCSTRING("addByte","\xc9","\x61","\x60","\x7d"),
	HX_HCSTRING("getLastChar","\x02","\x3b","\xfc","\xfa"),
	HX_HCSTRING("available","\xc9","\x59","\x83","\x77"),
	HX_HCSTRING("checksum","\xc3","\xbd","\x02","\xad"),
	::String(null()) };

static void Window_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Window_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Window_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Window_obj::__mClass,"__mClass");
};

#endif

hx::Class Window_obj::__mClass;

void Window_obj::__register()
{
	hx::Object *dummy = new Window_obj;
	Window_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.zip._InflateImpl.Window","\x81","\x44","\x4f","\x10");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Window_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Window_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Window_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Window_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Window_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Window_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace zip
} // end namespace _InflateImpl
