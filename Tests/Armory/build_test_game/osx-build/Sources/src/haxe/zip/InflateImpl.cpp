// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_crypto_Adler32
#include <haxe/crypto/Adler32.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_zip_HuffTools
#include <haxe/zip/HuffTools.h>
#endif
#ifndef INCLUDED_haxe_zip_Huffman
#include <haxe/zip/Huffman.h>
#endif
#ifndef INCLUDED_haxe_zip_InflateImpl
#include <haxe/zip/InflateImpl.h>
#endif
#ifndef INCLUDED_haxe_zip__InflateImpl_State
#include <haxe/zip/_InflateImpl/State.h>
#endif
#ifndef INCLUDED_haxe_zip__InflateImpl_Window
#include <haxe/zip/_InflateImpl/Window.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_46adc125ac6ee641_116_new,"haxe.zip.InflateImpl","new",0x8adfb384,"haxe.zip.InflateImpl.new","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",116,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_136_buildFixedHuffman,"haxe.zip.InflateImpl","buildFixedHuffman",0x8189428b,"haxe.zip.InflateImpl.buildFixedHuffman","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",136,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_146_readBytes,"haxe.zip.InflateImpl","readBytes",0x749c2b59,"haxe.zip.InflateImpl.readBytes","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",146,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_156_getBits,"haxe.zip.InflateImpl","getBits",0xefbfefe0,"haxe.zip.InflateImpl.getBits","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",156,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_167_getBit,"haxe.zip.InflateImpl","getBit",0x24a99d33,"haxe.zip.InflateImpl.getBit","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",167,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_179_getRevBits,"haxe.zip.InflateImpl","getRevBits",0xc652fd6f,"haxe.zip.InflateImpl.getRevBits","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",179,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_187_resetBits,"haxe.zip.InflateImpl","resetBits",0x6d1fda99,"haxe.zip.InflateImpl.resetBits","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",187,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_192_addBytes,"haxe.zip.InflateImpl","addBytes",0xfc4b68e6,"haxe.zip.InflateImpl.addBytes","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",192,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_199_addByte,"haxe.zip.InflateImpl","addByte",0x5986a6ed,"haxe.zip.InflateImpl.addByte","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",199,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_206_addDistOne,"haxe.zip.InflateImpl","addDistOne",0x9881c3db,"haxe.zip.InflateImpl.addDistOne","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",206,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_213_addDist,"haxe.zip.InflateImpl","addDist",0x5accef4b,"haxe.zip.InflateImpl.addDist","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",213,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_217_applyHuffman,"haxe.zip.InflateImpl","applyHuffman",0x495d53bb,"haxe.zip.InflateImpl.applyHuffman","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",217,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_224_inflateLengths,"haxe.zip.InflateImpl","inflateLengths",0xf1ca5662,"haxe.zip.InflateImpl.inflateLengths","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",224,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_254_inflateLoop,"haxe.zip.InflateImpl","inflateLoop",0x6d5c65af,"haxe.zip.InflateImpl.inflateLoop","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",254,0xd967a2ee)
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_92_boot,"haxe.zip.InflateImpl","boot",0xf0f6608e,"haxe.zip.InflateImpl.boot","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",92,0xd967a2ee)
static const int _hx_array_data_cc1ee192_26[] = {
	(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)1,(int)1,(int)1,(int)1,(int)2,(int)2,(int)2,(int)2,(int)3,(int)3,(int)3,(int)3,(int)4,(int)4,(int)4,(int)4,(int)5,(int)5,(int)5,(int)5,(int)0,(int)-1,(int)-1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_93_boot,"haxe.zip.InflateImpl","boot",0xf0f6608e,"haxe.zip.InflateImpl.boot","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",93,0xd967a2ee)
static const int _hx_array_data_cc1ee192_28[] = {
	(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)13,(int)15,(int)17,(int)19,(int)23,(int)27,(int)31,(int)35,(int)43,(int)51,(int)59,(int)67,(int)83,(int)99,(int)115,(int)131,(int)163,(int)195,(int)227,(int)258,
};
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_94_boot,"haxe.zip.InflateImpl","boot",0xf0f6608e,"haxe.zip.InflateImpl.boot","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",94,0xd967a2ee)
static const int _hx_array_data_cc1ee192_30[] = {
	(int)0,(int)0,(int)0,(int)0,(int)1,(int)1,(int)2,(int)2,(int)3,(int)3,(int)4,(int)4,(int)5,(int)5,(int)6,(int)6,(int)7,(int)7,(int)8,(int)8,(int)9,(int)9,(int)10,(int)10,(int)11,(int)11,(int)12,(int)12,(int)13,(int)13,(int)-1,(int)-1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_95_boot,"haxe.zip.InflateImpl","boot",0xf0f6608e,"haxe.zip.InflateImpl.boot","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",95,0xd967a2ee)
static const int _hx_array_data_cc1ee192_32[] = {
	(int)1,(int)2,(int)3,(int)4,(int)5,(int)7,(int)9,(int)13,(int)17,(int)25,(int)33,(int)49,(int)65,(int)97,(int)129,(int)193,(int)257,(int)385,(int)513,(int)769,(int)1025,(int)1537,(int)2049,(int)3073,(int)4097,(int)6145,(int)8193,(int)12289,(int)16385,(int)24577,
};
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_96_boot,"haxe.zip.InflateImpl","boot",0xf0f6608e,"haxe.zip.InflateImpl.boot","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",96,0xd967a2ee)
static const int _hx_array_data_cc1ee192_34[] = {
	(int)16,(int)17,(int)18,(int)0,(int)8,(int)7,(int)9,(int)6,(int)10,(int)5,(int)11,(int)4,(int)12,(int)3,(int)13,(int)2,(int)14,(int)1,(int)15,
};
HX_LOCAL_STACK_FRAME(_hx_pos_46adc125ac6ee641_114_boot,"haxe.zip.InflateImpl","boot",0xf0f6608e,"haxe.zip.InflateImpl.boot","/Applications/blender.app/armsdk/Kha/Tools/haxe/std/haxe/zip/InflateImpl.hx",114,0xd967a2ee)
namespace haxe{
namespace zip{

void InflateImpl_obj::__construct( ::haxe::io::Input i, ::Dynamic __o_header, ::Dynamic __o_crc){
 ::Dynamic header = __o_header.Default(true);
 ::Dynamic crc = __o_crc.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_46adc125ac6ee641_116_new)
HXLINE( 117)		this->final = false;
HXLINE( 118)		this->htools =  ::haxe::zip::HuffTools_obj::__alloc( HX_CTX );
HXLINE( 119)		this->huffman = this->buildFixedHuffman();
HXLINE( 120)		this->huffdist = null();
HXLINE( 121)		this->len = (int)0;
HXLINE( 122)		this->dist = (int)0;
HXLINE( 123)		 ::haxe::zip::_InflateImpl::State _hx_tmp;
HXDLIN( 123)		if (header) {
HXLINE( 123)			_hx_tmp = ::haxe::zip::_InflateImpl::State_obj::Head_dyn();
            		}
            		else {
HXLINE( 123)			_hx_tmp = ::haxe::zip::_InflateImpl::State_obj::Block_dyn();
            		}
HXDLIN( 123)		this->state = _hx_tmp;
HXLINE( 124)		this->input = i;
HXLINE( 125)		this->bits = (int)0;
HXLINE( 126)		this->nbits = (int)0;
HXLINE( 127)		this->needed = (int)0;
HXLINE( 128)		this->output = null();
HXLINE( 129)		this->outpos = (int)0;
HXLINE( 130)		this->lengths = ::Array_obj< int >::__new();
HXLINE( 131)		{
HXLINE( 131)			int _g = (int)0;
HXDLIN( 131)			while((_g < (int)19)){
HXLINE( 131)				_g = (_g + (int)1);
HXDLIN( 131)				int i1 = (_g - (int)1);
HXLINE( 132)				this->lengths->push((int)-1);
            			}
            		}
HXLINE( 133)		this->window =  ::haxe::zip::_InflateImpl::Window_obj::__alloc( HX_CTX ,crc);
            	}

Dynamic InflateImpl_obj::__CreateEmpty() { return new InflateImpl_obj; }

void *InflateImpl_obj::_hx_vtable = 0;

Dynamic InflateImpl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InflateImpl_obj > _hx_result = new InflateImpl_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool InflateImpl_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x53e7f50c;
}

 ::haxe::zip::Huffman InflateImpl_obj::buildFixedHuffman(){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_136_buildFixedHuffman)
HXLINE( 137)		if (hx::IsNotNull( ::haxe::zip::InflateImpl_obj::FIXED_HUFFMAN )) {
HXLINE( 138)			return ::haxe::zip::InflateImpl_obj::FIXED_HUFFMAN;
            		}
HXLINE( 139)		::Array< int > a = ::Array_obj< int >::__new();
HXLINE( 140)		{
HXLINE( 140)			int _g = (int)0;
HXDLIN( 140)			while((_g < (int)288)){
HXLINE( 140)				_g = (_g + (int)1);
HXDLIN( 140)				int n = (_g - (int)1);
HXLINE( 141)				int _hx_tmp;
HXDLIN( 141)				if ((n <= (int)143)) {
HXLINE( 141)					_hx_tmp = (int)8;
            				}
            				else {
HXLINE( 141)					if ((n <= (int)255)) {
HXLINE( 141)						_hx_tmp = (int)9;
            					}
            					else {
HXLINE( 141)						if ((n <= (int)279)) {
HXLINE( 141)							_hx_tmp = (int)7;
            						}
            						else {
HXLINE( 141)							_hx_tmp = (int)8;
            						}
            					}
            				}
HXDLIN( 141)				a->push(_hx_tmp);
            			}
            		}
HXLINE( 142)		::haxe::zip::InflateImpl_obj::FIXED_HUFFMAN = this->htools->make(a,(int)0,(int)288,(int)10);
HXLINE( 143)		return ::haxe::zip::InflateImpl_obj::FIXED_HUFFMAN;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InflateImpl_obj,buildFixedHuffman,return )

int InflateImpl_obj::readBytes( ::haxe::io::Bytes b,int pos,int len){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_146_readBytes)
HXLINE( 147)		this->needed = len;
HXLINE( 148)		this->outpos = pos;
HXLINE( 149)		this->output = b;
HXLINE( 150)		if ((len > (int)0)) {
HXLINE( 151)			while(this->inflateLoop()){
            			}
            		}
HXLINE( 153)		return (len - this->needed);
            	}


HX_DEFINE_DYNAMIC_FUNC3(InflateImpl_obj,readBytes,return )

int InflateImpl_obj::getBits(int n){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_156_getBits)
HXLINE( 157)		while((this->nbits < n)){
HXLINE( 158)			 ::haxe::zip::InflateImpl _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 158)			int _hx_tmp1 = _hx_tmp->bits;
HXDLIN( 158)			int _hx_tmp2 = this->input->readByte();
HXDLIN( 158)			_hx_tmp->bits = ((int)_hx_tmp1 | (int)((int)_hx_tmp2 << (int)this->nbits));
HXLINE( 159)			 ::haxe::zip::InflateImpl _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 159)			_hx_tmp3->nbits = (_hx_tmp3->nbits + (int)8);
            		}
HXLINE( 161)		int b = this->bits;
HXDLIN( 161)		int b1 = ((int)b & (int)(((int)(int)1 << (int)n) - (int)1));
HXLINE( 162)		 ::haxe::zip::InflateImpl _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 162)		_hx_tmp4->nbits = (_hx_tmp4->nbits - n);
HXLINE( 163)		 ::haxe::zip::InflateImpl _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 163)		_hx_tmp5->bits = ((int)_hx_tmp5->bits >> (int)n);
HXLINE( 164)		return b1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InflateImpl_obj,getBits,return )

bool InflateImpl_obj::getBit(){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_167_getBit)
HXLINE( 168)		if ((this->nbits == (int)0)) {
HXLINE( 169)			this->nbits = (int)8;
HXLINE( 170)			this->bits = this->input->readByte();
            		}
HXLINE( 172)		bool b = (((int)this->bits & (int)(int)1) == (int)1);
HXLINE( 173)		this->nbits--;
HXLINE( 174)		 ::haxe::zip::InflateImpl _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 174)		_hx_tmp->bits = ((int)_hx_tmp->bits >> (int)(int)1);
HXLINE( 175)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InflateImpl_obj,getBit,return )

int InflateImpl_obj::getRevBits(int n){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_179_getRevBits)
HXDLIN( 179)		if ((n == (int)0)) {
HXLINE( 180)			return (int)0;
            		}
            		else {
HXLINE( 181)			if (this->getBit()) {
HXLINE( 182)				return ((int)((int)(int)1 << (int)(n - (int)1)) | (int)this->getRevBits((n - (int)1)));
            			}
            			else {
HXLINE( 184)				return this->getRevBits((n - (int)1));
            			}
            		}
HXLINE( 179)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InflateImpl_obj,getRevBits,return )

void InflateImpl_obj::resetBits(){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_187_resetBits)
HXLINE( 188)		this->bits = (int)0;
HXLINE( 189)		this->nbits = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InflateImpl_obj,resetBits,(void))

void InflateImpl_obj::addBytes( ::haxe::io::Bytes b,int p,int len){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_192_addBytes)
HXLINE( 193)		this->window->addBytes(b,p,len);
HXLINE( 194)		this->output->blit(this->outpos,b,p,len);
HXLINE( 195)		 ::haxe::zip::InflateImpl _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 195)		_hx_tmp->needed = (_hx_tmp->needed - len);
HXLINE( 196)		 ::haxe::zip::InflateImpl _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 196)		_hx_tmp1->outpos = (_hx_tmp1->outpos + len);
            	}


HX_DEFINE_DYNAMIC_FUNC3(InflateImpl_obj,addBytes,(void))

void InflateImpl_obj::addByte(int b){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_199_addByte)
HXLINE( 200)		this->window->addByte(b);
HXLINE( 201)		this->output->b[this->outpos] = b;
HXLINE( 202)		this->needed--;
HXLINE( 203)		this->outpos++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InflateImpl_obj,addByte,(void))

void InflateImpl_obj::addDistOne(int n){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_206_addDistOne)
HXLINE( 207)		int c = this->window->getLastChar();
HXLINE( 208)		{
HXLINE( 208)			int _g1 = (int)0;
HXDLIN( 208)			int _g = n;
HXDLIN( 208)			while((_g1 < _g)){
HXLINE( 208)				_g1 = (_g1 + (int)1);
HXDLIN( 208)				int i = (_g1 - (int)1);
HXLINE( 209)				this->addByte(c);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(InflateImpl_obj,addDistOne,(void))

void InflateImpl_obj::addDist(int d,int len){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_213_addDist)
HXDLIN( 213)		 ::haxe::io::Bytes _hx_tmp = this->window->buffer;
HXDLIN( 213)		this->addBytes(_hx_tmp,(this->window->pos - d),len);
            	}


HX_DEFINE_DYNAMIC_FUNC2(InflateImpl_obj,addDist,(void))

int InflateImpl_obj::applyHuffman( ::haxe::zip::Huffman h){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_217_applyHuffman)
HXDLIN( 217)		switch((int)(_hx_getEnumValueIndex(h))){
            			case (int)0: {
HXLINE( 218)				int n = h->_hx_getInt(0);
HXDLIN( 218)				return n;
            			}
            			break;
            			case (int)1: {
HXLINE( 219)				 ::haxe::zip::Huffman b = h->_hx_getObject(1).StaticCast<  ::haxe::zip::Huffman >();
HXDLIN( 219)				 ::haxe::zip::Huffman a = h->_hx_getObject(0).StaticCast<  ::haxe::zip::Huffman >();
HXDLIN( 219)				 ::haxe::zip::Huffman _hx_tmp;
HXDLIN( 219)				if (this->getBit()) {
HXLINE( 219)					_hx_tmp = b;
            				}
            				else {
HXLINE( 219)					_hx_tmp = a;
            				}
HXDLIN( 219)				return this->applyHuffman(_hx_tmp);
            			}
            			break;
            			case (int)2: {
HXLINE( 220)				::Array< ::Dynamic> tbl = h->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 220)				int n1 = h->_hx_getInt(0);
HXDLIN( 220)				return this->applyHuffman(tbl->__get(this->getBits(n1)).StaticCast<  ::haxe::zip::Huffman >());
            			}
            			break;
            		}
HXLINE( 217)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InflateImpl_obj,applyHuffman,return )

void InflateImpl_obj::inflateLengths(::Array< int > a,int max){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_224_inflateLengths)
HXLINE( 225)		int i = (int)0;
HXLINE( 226)		int prev = (int)0;
HXLINE( 227)		while((i < max)){
HXLINE( 228)			int n = this->applyHuffman(this->huffman);
HXLINE( 229)			switch((int)(n)){
            				case (int)0: case (int)1: case (int)2: case (int)3: case (int)4: case (int)5: case (int)6: case (int)7: case (int)8: case (int)9: case (int)10: case (int)11: case (int)12: case (int)13: case (int)14: case (int)15: {
HXLINE( 231)					prev = n;
HXLINE( 232)					a[i] = n;
HXLINE( 233)					i = (i + (int)1);
            				}
            				break;
            				case (int)16: {
HXLINE( 235)					int end = ((i + (int)3) + this->getBits((int)2));
HXLINE( 236)					if ((end > max)) {
HXLINE( 236)						HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            					}
HXLINE( 237)					while((i < end)){
HXLINE( 238)						a[i] = prev;
HXLINE( 239)						i = (i + (int)1);
            					}
            				}
            				break;
            				case (int)17: {
HXLINE( 242)					i = (i + ((int)3 + this->getBits((int)3)));
HXLINE( 243)					if ((i > max)) {
HXLINE( 243)						HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            					}
            				}
            				break;
            				case (int)18: {
HXLINE( 245)					i = (i + ((int)11 + this->getBits((int)7)));
HXLINE( 246)					if ((i > max)) {
HXLINE( 246)						HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            					}
            				}
            				break;
            				default:{
HXLINE( 248)					HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(InflateImpl_obj,inflateLengths,(void))

bool InflateImpl_obj::inflateLoop(){
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_254_inflateLoop)
HXDLIN( 254)		 ::haxe::zip::_InflateImpl::State _g = this->state;
HXDLIN( 254)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 256)				int cmf = this->input->readByte();
HXLINE( 257)				int cm = ((int)cmf & (int)(int)15);
HXLINE( 258)				int cinfo = ((int)cmf >> (int)(int)4);
HXLINE( 259)				if ((cm != (int)8)) {
HXLINE( 259)					HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            				}
HXLINE( 260)				int flg = this->input->readByte();
HXLINE( 262)				bool fdict = (((int)flg & (int)(int)32) != (int)0);
HXLINE( 264)				if ((hx::Mod((((int)cmf << (int)(int)8) + flg),(int)31) != (int)0)) {
HXLINE( 264)					HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            				}
HXLINE( 265)				if (fdict) {
HXLINE( 265)					HX_STACK_DO_THROW(HX_("Unsupported dictionary",41,65,81,ac));
            				}
HXLINE( 266)				this->state = ::haxe::zip::_InflateImpl::State_obj::Block_dyn();
HXLINE( 267)				return true;
            			}
            			break;
            			case (int)1: {
HXLINE( 282)				this->final = this->getBit();
HXLINE( 283)				int _g1 = this->getBits((int)2);
HXDLIN( 283)				switch((int)(_g1)){
            					case (int)0: {
HXLINE( 285)						this->len = this->input->readUInt16();
HXLINE( 286)						int nlen = this->input->readUInt16();
HXLINE( 287)						if ((nlen != ((int)65535 - this->len))) {
HXLINE( 287)							HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            						}
HXLINE( 288)						this->state = ::haxe::zip::_InflateImpl::State_obj::Flat_dyn();
HXLINE( 289)						bool r = this->inflateLoop();
HXLINE( 290)						this->resetBits();
HXLINE( 291)						return r;
            					}
            					break;
            					case (int)1: {
HXLINE( 293)						this->huffman = this->buildFixedHuffman();
HXLINE( 294)						this->huffdist = null();
HXLINE( 295)						this->state = ::haxe::zip::_InflateImpl::State_obj::CData_dyn();
HXLINE( 296)						return true;
            					}
            					break;
            					case (int)2: {
HXLINE( 298)						int hlit = (this->getBits((int)5) + (int)257);
HXLINE( 299)						int hdist = (this->getBits((int)5) + (int)1);
HXLINE( 300)						int hclen = (this->getBits((int)4) + (int)4);
HXLINE( 301)						{
HXLINE( 301)							int _g11 = (int)0;
HXDLIN( 301)							int _g2 = hclen;
HXDLIN( 301)							while((_g11 < _g2)){
HXLINE( 301)								_g11 = (_g11 + (int)1);
HXDLIN( 301)								int i = (_g11 - (int)1);
HXLINE( 302)								::Array< int > _hx_tmp = this->lengths;
HXDLIN( 302)								int _hx_tmp1 = ::haxe::zip::InflateImpl_obj::CODE_LENGTHS_POS->__get(i);
HXDLIN( 302)								_hx_tmp[_hx_tmp1] = this->getBits((int)3);
            							}
            						}
HXLINE( 303)						{
HXLINE( 303)							int _g3 = hclen;
HXDLIN( 303)							while((_g3 < (int)19)){
HXLINE( 303)								_g3 = (_g3 + (int)1);
HXDLIN( 303)								int i1 = (_g3 - (int)1);
HXLINE( 304)								::Array< int > _hx_tmp2 = this->lengths;
HXDLIN( 304)								_hx_tmp2[::haxe::zip::InflateImpl_obj::CODE_LENGTHS_POS->__get(i1)] = (int)0;
            							}
            						}
HXLINE( 305)						this->huffman = this->htools->make(this->lengths,(int)0,(int)19,(int)8);
HXLINE( 306)						::Array< int > lengths = ::Array_obj< int >::__new();
HXLINE( 307)						{
HXLINE( 307)							int _g12 = (int)0;
HXDLIN( 307)							int _g4 = (hlit + hdist);
HXDLIN( 307)							while((_g12 < _g4)){
HXLINE( 307)								_g12 = (_g12 + (int)1);
HXDLIN( 307)								int i2 = (_g12 - (int)1);
HXLINE( 308)								lengths->push((int)0);
            							}
            						}
HXLINE( 309)						this->inflateLengths(lengths,(hlit + hdist));
HXLINE( 310)						this->huffdist = this->htools->make(lengths,hlit,hdist,(int)16);
HXLINE( 311)						this->huffman = this->htools->make(lengths,(int)0,hlit,(int)16);
HXLINE( 312)						this->state = ::haxe::zip::_InflateImpl::State_obj::CData_dyn();
HXLINE( 313)						return true;
            					}
            					break;
            					default:{
HXLINE( 315)						HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 340)				int n = this->applyHuffman(this->huffman);
HXLINE( 341)				if ((n < (int)256)) {
HXLINE( 342)					this->addByte(n);
HXLINE( 343)					return (this->needed > (int)0);
            				}
            				else {
HXLINE( 344)					if ((n == (int)256)) {
HXLINE( 345)						 ::haxe::zip::_InflateImpl::State _hx_tmp3;
HXDLIN( 345)						if (this->final) {
HXLINE( 345)							_hx_tmp3 = ::haxe::zip::_InflateImpl::State_obj::Crc_dyn();
            						}
            						else {
HXLINE( 345)							_hx_tmp3 = ::haxe::zip::_InflateImpl::State_obj::Block_dyn();
            						}
HXDLIN( 345)						this->state = _hx_tmp3;
HXLINE( 346)						return true;
            					}
            					else {
HXLINE( 348)						n = (n - (int)257);
HXLINE( 349)						int extra_bits = ::haxe::zip::InflateImpl_obj::LEN_EXTRA_BITS_TBL->__get(n);
HXLINE( 350)						if ((extra_bits == (int)-1)) {
HXLINE( 350)							HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            						}
HXLINE( 351)						int _hx_tmp4 = ::haxe::zip::InflateImpl_obj::LEN_BASE_VAL_TBL->__get(n);
HXDLIN( 351)						this->len = (_hx_tmp4 + this->getBits(extra_bits));
HXLINE( 352)						int dist_code;
HXDLIN( 352)						if (hx::IsNull( this->huffdist )) {
HXLINE( 352)							dist_code = this->getRevBits((int)5);
            						}
            						else {
HXLINE( 352)							dist_code = this->applyHuffman(this->huffdist);
            						}
HXLINE( 353)						extra_bits = ::haxe::zip::InflateImpl_obj::DIST_EXTRA_BITS_TBL->__get(dist_code);
HXLINE( 354)						if ((extra_bits == (int)-1)) {
HXLINE( 354)							HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            						}
HXLINE( 355)						int _hx_tmp5 = ::haxe::zip::InflateImpl_obj::DIST_BASE_VAL_TBL->__get(dist_code);
HXDLIN( 355)						this->dist = (_hx_tmp5 + this->getBits(extra_bits));
HXLINE( 356)						int _hx_tmp6 = this->dist;
HXDLIN( 356)						if ((_hx_tmp6 > this->window->available())) {
HXLINE( 356)							HX_STACK_DO_THROW(HX_("Invalid data",13,38,70,89));
            						}
HXLINE( 357)						 ::haxe::zip::_InflateImpl::State _hx_tmp7;
HXDLIN( 357)						if ((this->dist == (int)1)) {
HXLINE( 357)							_hx_tmp7 = ::haxe::zip::_InflateImpl::State_obj::DistOne_dyn();
            						}
            						else {
HXLINE( 357)							_hx_tmp7 = ::haxe::zip::_InflateImpl::State_obj::Dist_dyn();
            						}
HXDLIN( 357)						this->state = _hx_tmp7;
HXLINE( 358)						return true;
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 318)				int rlen;
HXDLIN( 318)				if ((this->len < this->needed)) {
HXLINE( 318)					rlen = this->len;
            				}
            				else {
HXLINE( 318)					rlen = this->needed;
            				}
HXLINE( 319)				 ::haxe::io::Bytes bytes = this->input->read(rlen);
HXLINE( 320)				 ::haxe::zip::InflateImpl _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 320)				_hx_tmp8->len = (_hx_tmp8->len - rlen);
HXLINE( 321)				this->addBytes(bytes,(int)0,rlen);
HXLINE( 322)				if ((this->len == (int)0)) {
HXLINE( 322)					 ::haxe::zip::_InflateImpl::State _hx_tmp9;
HXDLIN( 322)					if (this->final) {
HXLINE( 322)						_hx_tmp9 = ::haxe::zip::_InflateImpl::State_obj::Crc_dyn();
            					}
            					else {
HXLINE( 322)						_hx_tmp9 = ::haxe::zip::_InflateImpl::State_obj::Block_dyn();
            					}
HXDLIN( 322)					this->state = _hx_tmp9;
            				}
HXLINE( 323)				return (this->needed > (int)0);
            			}
            			break;
            			case (int)4: {
HXLINE( 269)				 ::haxe::crypto::Adler32 calc = this->window->checksum();
HXLINE( 270)				if (hx::IsNull( calc )) {
HXLINE( 271)					this->state = ::haxe::zip::_InflateImpl::State_obj::Done_dyn();
HXLINE( 272)					return true;
            				}
HXLINE( 274)				 ::haxe::crypto::Adler32 crc = ::haxe::crypto::Adler32_obj::read(this->input);
HXLINE( 275)				if (!(calc->equals(crc))) {
HXLINE( 275)					HX_STACK_DO_THROW(HX_("Invalid CRC",eb,ac,c2,76));
            				}
HXLINE( 276)				this->state = ::haxe::zip::_InflateImpl::State_obj::Done_dyn();
HXLINE( 277)				return true;
            			}
            			break;
            			case (int)5: {
HXLINE( 331)				while(true){
HXLINE( 331)					bool _hx_tmp10;
HXDLIN( 331)					if ((this->len > (int)0)) {
HXLINE( 331)						_hx_tmp10 = (this->needed > (int)0);
            					}
            					else {
HXLINE( 331)						_hx_tmp10 = false;
            					}
HXDLIN( 331)					if (!(_hx_tmp10)) {
HXLINE( 331)						goto _hx_goto_23;
            					}
HXLINE( 332)					int rdist;
HXDLIN( 332)					if ((this->len < this->dist)) {
HXLINE( 332)						rdist = this->len;
            					}
            					else {
HXLINE( 332)						rdist = this->dist;
            					}
HXLINE( 333)					int rlen1;
HXDLIN( 333)					if ((this->needed < rdist)) {
HXLINE( 333)						rlen1 = this->needed;
            					}
            					else {
HXLINE( 333)						rlen1 = rdist;
            					}
HXLINE( 334)					this->addDist(this->dist,rlen1);
HXLINE( 335)					 ::haxe::zip::InflateImpl _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 335)					_hx_tmp11->len = (_hx_tmp11->len - rlen1);
            				}
            				_hx_goto_23:;
HXLINE( 337)				if ((this->len == (int)0)) {
HXLINE( 337)					this->state = ::haxe::zip::_InflateImpl::State_obj::CData_dyn();
            				}
HXLINE( 338)				return (this->needed > (int)0);
            			}
            			break;
            			case (int)6: {
HXLINE( 325)				int rlen2;
HXDLIN( 325)				if ((this->len < this->needed)) {
HXLINE( 325)					rlen2 = this->len;
            				}
            				else {
HXLINE( 325)					rlen2 = this->needed;
            				}
HXLINE( 326)				this->addDistOne(rlen2);
HXLINE( 327)				 ::haxe::zip::InflateImpl _hx_tmp12 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 327)				_hx_tmp12->len = (_hx_tmp12->len - rlen2);
HXLINE( 328)				if ((this->len == (int)0)) {
HXLINE( 328)					this->state = ::haxe::zip::_InflateImpl::State_obj::CData_dyn();
            				}
HXLINE( 329)				return (this->needed > (int)0);
            			}
            			break;
            			case (int)7: {
HXLINE( 280)				return false;
            			}
            			break;
            		}
HXLINE( 254)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InflateImpl_obj,inflateLoop,return )

::Array< int > InflateImpl_obj::LEN_EXTRA_BITS_TBL;

::Array< int > InflateImpl_obj::LEN_BASE_VAL_TBL;

::Array< int > InflateImpl_obj::DIST_EXTRA_BITS_TBL;

::Array< int > InflateImpl_obj::DIST_BASE_VAL_TBL;

::Array< int > InflateImpl_obj::CODE_LENGTHS_POS;

 ::haxe::zip::Huffman InflateImpl_obj::FIXED_HUFFMAN;


hx::ObjectPtr< InflateImpl_obj > InflateImpl_obj::__new( ::haxe::io::Input i, ::Dynamic __o_header, ::Dynamic __o_crc) {
	hx::ObjectPtr< InflateImpl_obj > __this = new InflateImpl_obj();
	__this->__construct(i,__o_header,__o_crc);
	return __this;
}

hx::ObjectPtr< InflateImpl_obj > InflateImpl_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::io::Input i, ::Dynamic __o_header, ::Dynamic __o_crc) {
	InflateImpl_obj *__this = (InflateImpl_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InflateImpl_obj), true, "haxe.zip.InflateImpl"));
	*(void **)__this = InflateImpl_obj::_hx_vtable;
	__this->__construct(i,__o_header,__o_crc);
	return __this;
}

InflateImpl_obj::InflateImpl_obj()
{
}

void InflateImpl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InflateImpl);
	HX_MARK_MEMBER_NAME(nbits,"nbits");
	HX_MARK_MEMBER_NAME(bits,"bits");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(final,"final");
	HX_MARK_MEMBER_NAME(huffman,"huffman");
	HX_MARK_MEMBER_NAME(huffdist,"huffdist");
	HX_MARK_MEMBER_NAME(htools,"htools");
	HX_MARK_MEMBER_NAME(len,"len");
	HX_MARK_MEMBER_NAME(dist,"dist");
	HX_MARK_MEMBER_NAME(needed,"needed");
	HX_MARK_MEMBER_NAME(output,"output");
	HX_MARK_MEMBER_NAME(outpos,"outpos");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(lengths,"lengths");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_END_CLASS();
}

void InflateImpl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nbits,"nbits");
	HX_VISIT_MEMBER_NAME(bits,"bits");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(final,"final");
	HX_VISIT_MEMBER_NAME(huffman,"huffman");
	HX_VISIT_MEMBER_NAME(huffdist,"huffdist");
	HX_VISIT_MEMBER_NAME(htools,"htools");
	HX_VISIT_MEMBER_NAME(len,"len");
	HX_VISIT_MEMBER_NAME(dist,"dist");
	HX_VISIT_MEMBER_NAME(needed,"needed");
	HX_VISIT_MEMBER_NAME(output,"output");
	HX_VISIT_MEMBER_NAME(outpos,"outpos");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(lengths,"lengths");
	HX_VISIT_MEMBER_NAME(window,"window");
}

hx::Val InflateImpl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"len") ) { return hx::Val( len ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bits") ) { return hx::Val( bits ); }
		if (HX_FIELD_EQ(inName,"dist") ) { return hx::Val( dist ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nbits") ) { return hx::Val( nbits ); }
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"final") ) { return hx::Val( final ); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"htools") ) { return hx::Val( htools ); }
		if (HX_FIELD_EQ(inName,"needed") ) { return hx::Val( needed ); }
		if (HX_FIELD_EQ(inName,"output") ) { return hx::Val( output ); }
		if (HX_FIELD_EQ(inName,"outpos") ) { return hx::Val( outpos ); }
		if (HX_FIELD_EQ(inName,"window") ) { return hx::Val( window ); }
		if (HX_FIELD_EQ(inName,"getBit") ) { return hx::Val( getBit_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"huffman") ) { return hx::Val( huffman ); }
		if (HX_FIELD_EQ(inName,"lengths") ) { return hx::Val( lengths ); }
		if (HX_FIELD_EQ(inName,"getBits") ) { return hx::Val( getBits_dyn() ); }
		if (HX_FIELD_EQ(inName,"addByte") ) { return hx::Val( addByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"addDist") ) { return hx::Val( addDist_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"huffdist") ) { return hx::Val( huffdist ); }
		if (HX_FIELD_EQ(inName,"addBytes") ) { return hx::Val( addBytes_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readBytes") ) { return hx::Val( readBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetBits") ) { return hx::Val( resetBits_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getRevBits") ) { return hx::Val( getRevBits_dyn() ); }
		if (HX_FIELD_EQ(inName,"addDistOne") ) { return hx::Val( addDistOne_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inflateLoop") ) { return hx::Val( inflateLoop_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"applyHuffman") ) { return hx::Val( applyHuffman_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inflateLengths") ) { return hx::Val( inflateLengths_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"buildFixedHuffman") ) { return hx::Val( buildFixedHuffman_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool InflateImpl_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"FIXED_HUFFMAN") ) { outValue = ( FIXED_HUFFMAN ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"LEN_BASE_VAL_TBL") ) { outValue = ( LEN_BASE_VAL_TBL ); return true; }
		if (HX_FIELD_EQ(inName,"CODE_LENGTHS_POS") ) { outValue = ( CODE_LENGTHS_POS ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"DIST_BASE_VAL_TBL") ) { outValue = ( DIST_BASE_VAL_TBL ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"LEN_EXTRA_BITS_TBL") ) { outValue = ( LEN_EXTRA_BITS_TBL ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"DIST_EXTRA_BITS_TBL") ) { outValue = ( DIST_EXTRA_BITS_TBL ); return true; }
	}
	return false;
}

hx::Val InflateImpl_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"len") ) { len=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bits") ) { bits=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dist") ) { dist=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nbits") ) { nbits=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::haxe::zip::_InflateImpl::State >(); return inValue; }
		if (HX_FIELD_EQ(inName,"final") ) { final=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::haxe::io::Input >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"htools") ) { htools=inValue.Cast<  ::haxe::zip::HuffTools >(); return inValue; }
		if (HX_FIELD_EQ(inName,"needed") ) { needed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"output") ) { output=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outpos") ) { outpos=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast<  ::haxe::zip::_InflateImpl::Window >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"huffman") ) { huffman=inValue.Cast<  ::haxe::zip::Huffman >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lengths") ) { lengths=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"huffdist") ) { huffdist=inValue.Cast<  ::haxe::zip::Huffman >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool InflateImpl_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"FIXED_HUFFMAN") ) { FIXED_HUFFMAN=ioValue.Cast<  ::haxe::zip::Huffman >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"LEN_BASE_VAL_TBL") ) { LEN_BASE_VAL_TBL=ioValue.Cast< ::Array< int > >(); return true; }
		if (HX_FIELD_EQ(inName,"CODE_LENGTHS_POS") ) { CODE_LENGTHS_POS=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"DIST_BASE_VAL_TBL") ) { DIST_BASE_VAL_TBL=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"LEN_EXTRA_BITS_TBL") ) { LEN_EXTRA_BITS_TBL=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"DIST_EXTRA_BITS_TBL") ) { DIST_EXTRA_BITS_TBL=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

void InflateImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("nbits","\x74","\xca","\x2a","\x97"));
	outFields->push(HX_HCSTRING("bits","\x06","\xfb","\x16","\x41"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("final","\x76","\x5f","\x9a","\x00"));
	outFields->push(HX_HCSTRING("huffman","\x2d","\x6f","\x17","\xab"));
	outFields->push(HX_HCSTRING("huffdist","\x73","\x03","\x7d","\x03"));
	outFields->push(HX_HCSTRING("htools","\xb3","\x18","\x4c","\xa9"));
	outFields->push(HX_HCSTRING("len","\xd5","\x4b","\x52","\x00"));
	outFields->push(HX_HCSTRING("dist","\x66","\x67","\x69","\x42"));
	outFields->push(HX_HCSTRING("needed","\x35","\x0e","\xc9","\x65"));
	outFields->push(HX_HCSTRING("output","\x01","\x0f","\x81","\x0c"));
	outFields->push(HX_HCSTRING("outpos","\xc6","\x09","\x81","\x0c"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("lengths","\xcd","\xb4","\x9a","\x87"));
	outFields->push(HX_HCSTRING("window","\xf0","\x93","\x8c","\x52"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo InflateImpl_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(InflateImpl_obj,nbits),HX_HCSTRING("nbits","\x74","\xca","\x2a","\x97")},
	{hx::fsInt,(int)offsetof(InflateImpl_obj,bits),HX_HCSTRING("bits","\x06","\xfb","\x16","\x41")},
	{hx::fsObject /*::haxe::zip::_InflateImpl::State*/ ,(int)offsetof(InflateImpl_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{hx::fsBool,(int)offsetof(InflateImpl_obj,final),HX_HCSTRING("final","\x76","\x5f","\x9a","\x00")},
	{hx::fsObject /*::haxe::zip::Huffman*/ ,(int)offsetof(InflateImpl_obj,huffman),HX_HCSTRING("huffman","\x2d","\x6f","\x17","\xab")},
	{hx::fsObject /*::haxe::zip::Huffman*/ ,(int)offsetof(InflateImpl_obj,huffdist),HX_HCSTRING("huffdist","\x73","\x03","\x7d","\x03")},
	{hx::fsObject /*::haxe::zip::HuffTools*/ ,(int)offsetof(InflateImpl_obj,htools),HX_HCSTRING("htools","\xb3","\x18","\x4c","\xa9")},
	{hx::fsInt,(int)offsetof(InflateImpl_obj,len),HX_HCSTRING("len","\xd5","\x4b","\x52","\x00")},
	{hx::fsInt,(int)offsetof(InflateImpl_obj,dist),HX_HCSTRING("dist","\x66","\x67","\x69","\x42")},
	{hx::fsInt,(int)offsetof(InflateImpl_obj,needed),HX_HCSTRING("needed","\x35","\x0e","\xc9","\x65")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(InflateImpl_obj,output),HX_HCSTRING("output","\x01","\x0f","\x81","\x0c")},
	{hx::fsInt,(int)offsetof(InflateImpl_obj,outpos),HX_HCSTRING("outpos","\xc6","\x09","\x81","\x0c")},
	{hx::fsObject /*::haxe::io::Input*/ ,(int)offsetof(InflateImpl_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(InflateImpl_obj,lengths),HX_HCSTRING("lengths","\xcd","\xb4","\x9a","\x87")},
	{hx::fsObject /*::haxe::zip::_InflateImpl::Window*/ ,(int)offsetof(InflateImpl_obj,window),HX_HCSTRING("window","\xf0","\x93","\x8c","\x52")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo InflateImpl_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< int >*/ ,(void *) &InflateImpl_obj::LEN_EXTRA_BITS_TBL,HX_HCSTRING("LEN_EXTRA_BITS_TBL","\x9e","\xa5","\xc6","\x5c")},
	{hx::fsObject /*Array< int >*/ ,(void *) &InflateImpl_obj::LEN_BASE_VAL_TBL,HX_HCSTRING("LEN_BASE_VAL_TBL","\xfc","\xeb","\x05","\x8d")},
	{hx::fsObject /*Array< int >*/ ,(void *) &InflateImpl_obj::DIST_EXTRA_BITS_TBL,HX_HCSTRING("DIST_EXTRA_BITS_TBL","\x0d","\xad","\x8a","\x51")},
	{hx::fsObject /*Array< int >*/ ,(void *) &InflateImpl_obj::DIST_BASE_VAL_TBL,HX_HCSTRING("DIST_BASE_VAL_TBL","\xab","\xe9","\x0b","\xb6")},
	{hx::fsObject /*Array< int >*/ ,(void *) &InflateImpl_obj::CODE_LENGTHS_POS,HX_HCSTRING("CODE_LENGTHS_POS","\x50","\xd8","\xe3","\xb4")},
	{hx::fsObject /*::haxe::zip::Huffman*/ ,(void *) &InflateImpl_obj::FIXED_HUFFMAN,HX_HCSTRING("FIXED_HUFFMAN","\xe2","\x41","\x83","\x5f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String InflateImpl_obj_sMemberFields[] = {
	HX_HCSTRING("nbits","\x74","\xca","\x2a","\x97"),
	HX_HCSTRING("bits","\x06","\xfb","\x16","\x41"),
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("final","\x76","\x5f","\x9a","\x00"),
	HX_HCSTRING("huffman","\x2d","\x6f","\x17","\xab"),
	HX_HCSTRING("huffdist","\x73","\x03","\x7d","\x03"),
	HX_HCSTRING("htools","\xb3","\x18","\x4c","\xa9"),
	HX_HCSTRING("len","\xd5","\x4b","\x52","\x00"),
	HX_HCSTRING("dist","\x66","\x67","\x69","\x42"),
	HX_HCSTRING("needed","\x35","\x0e","\xc9","\x65"),
	HX_HCSTRING("output","\x01","\x0f","\x81","\x0c"),
	HX_HCSTRING("outpos","\xc6","\x09","\x81","\x0c"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("lengths","\xcd","\xb4","\x9a","\x87"),
	HX_HCSTRING("window","\xf0","\x93","\x8c","\x52"),
	HX_HCSTRING("buildFixedHuffman","\x67","\xa8","\xb3","\xa7"),
	HX_HCSTRING("readBytes","\x35","\x55","\x7f","\x8e"),
	HX_HCSTRING("getBits","\xbc","\xaa","\x99","\x13"),
	HX_HCSTRING("getBit","\xd7","\xf1","\x19","\xa3"),
	HX_HCSTRING("getRevBits","\x13","\x74","\x34","\x53"),
	HX_HCSTRING("resetBits","\x75","\x04","\x03","\x87"),
	HX_HCSTRING("addBytes","\x8a","\x2e","\xf5","\x36"),
	HX_HCSTRING("addByte","\xc9","\x61","\x60","\x7d"),
	HX_HCSTRING("addDistOne","\x7f","\x3a","\x63","\x25"),
	HX_HCSTRING("addDist","\x27","\xaa","\xa6","\x7e"),
	HX_HCSTRING("applyHuffman","\x5f","\xbb","\x84","\xea"),
	HX_HCSTRING("inflateLengths","\x06","\xef","\x55","\xb9"),
	HX_HCSTRING("inflateLoop","\x8b","\xbe","\xc2","\x25"),
	::String(null()) };

static void InflateImpl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InflateImpl_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(InflateImpl_obj::LEN_EXTRA_BITS_TBL,"LEN_EXTRA_BITS_TBL");
	HX_MARK_MEMBER_NAME(InflateImpl_obj::LEN_BASE_VAL_TBL,"LEN_BASE_VAL_TBL");
	HX_MARK_MEMBER_NAME(InflateImpl_obj::DIST_EXTRA_BITS_TBL,"DIST_EXTRA_BITS_TBL");
	HX_MARK_MEMBER_NAME(InflateImpl_obj::DIST_BASE_VAL_TBL,"DIST_BASE_VAL_TBL");
	HX_MARK_MEMBER_NAME(InflateImpl_obj::CODE_LENGTHS_POS,"CODE_LENGTHS_POS");
	HX_MARK_MEMBER_NAME(InflateImpl_obj::FIXED_HUFFMAN,"FIXED_HUFFMAN");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InflateImpl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InflateImpl_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(InflateImpl_obj::LEN_EXTRA_BITS_TBL,"LEN_EXTRA_BITS_TBL");
	HX_VISIT_MEMBER_NAME(InflateImpl_obj::LEN_BASE_VAL_TBL,"LEN_BASE_VAL_TBL");
	HX_VISIT_MEMBER_NAME(InflateImpl_obj::DIST_EXTRA_BITS_TBL,"DIST_EXTRA_BITS_TBL");
	HX_VISIT_MEMBER_NAME(InflateImpl_obj::DIST_BASE_VAL_TBL,"DIST_BASE_VAL_TBL");
	HX_VISIT_MEMBER_NAME(InflateImpl_obj::CODE_LENGTHS_POS,"CODE_LENGTHS_POS");
	HX_VISIT_MEMBER_NAME(InflateImpl_obj::FIXED_HUFFMAN,"FIXED_HUFFMAN");
};

#endif

hx::Class InflateImpl_obj::__mClass;

static ::String InflateImpl_obj_sStaticFields[] = {
	HX_HCSTRING("LEN_EXTRA_BITS_TBL","\x9e","\xa5","\xc6","\x5c"),
	HX_HCSTRING("LEN_BASE_VAL_TBL","\xfc","\xeb","\x05","\x8d"),
	HX_HCSTRING("DIST_EXTRA_BITS_TBL","\x0d","\xad","\x8a","\x51"),
	HX_HCSTRING("DIST_BASE_VAL_TBL","\xab","\xe9","\x0b","\xb6"),
	HX_HCSTRING("CODE_LENGTHS_POS","\x50","\xd8","\xe3","\xb4"),
	HX_HCSTRING("FIXED_HUFFMAN","\xe2","\x41","\x83","\x5f"),
	::String(null())
};

void InflateImpl_obj::__register()
{
	hx::Object *dummy = new InflateImpl_obj;
	InflateImpl_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.zip.InflateImpl","\x92","\xe1","\x1e","\xcc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &InflateImpl_obj::__GetStatic;
	__mClass->mSetStaticField = &InflateImpl_obj::__SetStatic;
	__mClass->mMarkFunc = InflateImpl_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(InflateImpl_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InflateImpl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InflateImpl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InflateImpl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InflateImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InflateImpl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void InflateImpl_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_92_boot)
HXDLIN(  92)		LEN_EXTRA_BITS_TBL = ::Array_obj< int >::fromData( _hx_array_data_cc1ee192_26,31);
            	}
{
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_93_boot)
HXDLIN(  93)		LEN_BASE_VAL_TBL = ::Array_obj< int >::fromData( _hx_array_data_cc1ee192_28,29);
            	}
{
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_94_boot)
HXDLIN(  94)		DIST_EXTRA_BITS_TBL = ::Array_obj< int >::fromData( _hx_array_data_cc1ee192_30,32);
            	}
{
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_95_boot)
HXDLIN(  95)		DIST_BASE_VAL_TBL = ::Array_obj< int >::fromData( _hx_array_data_cc1ee192_32,30);
            	}
{
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_96_boot)
HXDLIN(  96)		CODE_LENGTHS_POS = ::Array_obj< int >::fromData( _hx_array_data_cc1ee192_34,19);
            	}
{
            	HX_STACKFRAME(&_hx_pos_46adc125ac6ee641_114_boot)
HXDLIN( 114)		FIXED_HUFFMAN = null();
            	}
}

} // end namespace haxe
} // end namespace zip
